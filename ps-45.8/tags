ABM_Allocate		vm/abmimpl.c	/^RefAny ABM_Allocate(size)/ ;" function 9 { AllocPDict PSAllocVM VMExpandDict }	{ AllocInternal BitSpan CurrentShared autoPrivate autoShared vmCurrent }
ABM_AllocateVM		vm/abmimpl.c	/^RefAny ABM_AllocateVM(size, shared)/ ;" function 26 { Save VMPutDict VMPutGeneric _RecordFinalizableObject saveobj }	{ AllocInternal BitSpan DURING END_HANDLER HANDLER RERAISE RefAny SetShared autoPrivate autoShared boolean vmCurrent }
ABM_BitsForBitmap		vm/abm.h	/^#define	ABM_BitsForBitmap(size)	(((size) + BitSpan/ ;" macro 1 { ABM_BytesForSize }	{ BitSpan }
ABM_BytesForBitmap		vm/abm.h	/^#define	ABM_BytesForBitmap(v)	ABM_BytesForSize(VMS/ ;" macro 1 { ABM_ClearAll FreeBytesBehindStack PSAllocBM PSTrashVM }	{ ABM_BytesForSize VMSegmentSize }
ABM_BytesForSize		vm/abm.h	/^#define	ABM_BytesForSize(size)	\\/ ;" macro 1 { ABM_BytesForBitmap NewSegment }	{ ABM_BitsForBitmap BitsPerByte }
ABM_ClearAll		vm/abmimpl.c	/^procedure ABM_ClearAll(space)/ ;" function 21 { TracePrivateForShared TracePrivateVM TraceSharedVM }	{ ABM_BytesForBitmap NIL PCard8 PVMSegment current free register }
ABM_EffectivelyNoSpace		vm/abm.h	/^#define	ABM_EffectivelyNoSpace	64	\/* ARBITRARY - T/ ;" macro 1 { AllocSmall }	{ }
ABM_H		vm/abm.h	/^#define	ABM_H/ ;" macro 1 { }	{ }
ABM_Init		vm/abmimpl.c	/^procedure ABM_Init(reason)/ ;" function 79 { VMInit }	{ Assert CantHappen Card8 DEVELOP NULL OpenPSVMResource PSAllocBM PSAllocVM PSTrashVM RgstExplicit hiHole hiHoleID integer locOfMax locOfMaxID lowHole lowHoleID maxHole maxHoleID os_sureCalloc vSTAGE }
ABM_MaxSegsToExamine		vm/abm.h	/^#define	ABM_MaxSegsToExamine	2	\/* ARBITRARY - TUNE/ ;" macro 1 { }	{ }
ABM_SetAllocated		vm/abmimpl.c	/^procedure ABM_SetAllocated(ref, sH, len)/ ;" function 54 { AllocLarge AllocSmall GCInternal_MarkAllocated GC_HandleIndex TracePrivateForShared TracePrivateVM TraceSharedVM }	{ BitsPerByte CAST Card32 DebugAssert NIL PCard8 level register stPermanentRAM stROM }
ABOVE		include/bintree.h	/^#define ABOVE		 1	\/* Place above another window *\// ;" macro 1 { LMoveTo LOrder PSCountScreenList PSOrderWindow PSScreenList PSSetWindowLevel RecalcMouseRect WLAboveButNotAbove WLBelowButNotBelow checkOrderingValdity }	{ }
ACTCLASS		graphics/cscan.c	/^#define ACTCLASS(op, merit)  { op, merit * MERITQU/ ;" macro 1 { }	{ MERITQUANTUM }
ACTLIST		graphics/cscan.c	/^#define ACTLIST MAXACTIONCLASS		\/* List of multipl/ ;" macro 1 { PatternToActions }	{ }
ADDC		bitmap/bm34comp.c	/^static pixel_t ADDC(unsigned int a, unsigned int b/ ;" function 9 { BMComposite34 BMComposite38 }	{ GAMASK RBMASK }
ADDesc		fonts/fontbuild.c	/^#define ADDesc 10/ ;" macro 1 { CCRunStd }	{ }
AFAProc		language/array.c	/^private procedure AFAProc()/ ;" function 23 { ArrayInit }	{ AryObj EPopP EPushP ETopP Object PushP TypeCheck VMCarCdr arrayObj arraycmd pkdaryObj }
AFixedCar		fonts/fontbuild.c	/^private Fixed AFixedCar(pao)  PAryObj pao;/ ;" function 12 { GetBlueArrays GetFontBBox GetMetrics GetMetrics2 GetStdW GetWeightVector }	{ FixInt Object TypeCheck VMCarCdr intObj pflttofix realObj }
AGetP		language/array.c	/^public procedure AGetP(a,i,pob)  AnyAryObj a; card/ ;" function 16 { ArrayToStack BindArray CCBMRun FontEncode ForceAGetP PSCCRun PSGet }	{ DecodeObj InvlAccess RangeCheck TypeCheck VMGetElem arrayObj pkdaryObj rAccess }
AHead		language/array.c	/^private procedure AHead(a, n, ahead)/ ;" function 3 { SubPArray }	{ }
ALPHA		bitmap/bm34comp.c	/^#define ALPHA(s)	((s) & AMASK)/ ;" macro 1 { BMComposite34 BMComposite38 }	{ AMASK s }
ALPHAVALUE		include/bintree.h	/^#define ALPHAVALUE(ext) ((*((NextGSExt **)ext))->a/ ;" macro 1 { BM34SetupPattern BM38SetupPattern CompositePriv LCompositeFrom LMark MP12MarkDataAndAlpha }	{ NextGSExt }
AMASK		mp/cursor.c	/^#define AMASK	0x000F		\/* Short, or 16 bit format */ ;" macro 1 { ALPHA BM38Composite MPDisplayCursor16 NEGALPHA }	{ }
AMulInPlace		product/windowdevice.c	/^public unsigned int AMulInPlace(unsigned int *src,/ ;" function 11 { WdConvertColor }	{ MASKGA MASKRB s }
ANSI_C		include/environment.h	/^#define ANSI_C 1/ ;" macro 1 { }	{ }
AOVResc		fonts/fontbuild.c	/^#define AOVResc 24/ ;" macro 1 { CCRunStd }	{ }
AObjF		language/numstrm.c	/^private Fixed AObjF(ns) PNumStrm ns; {/ ;" function 9 { SetupNumStrm }	{ FixInt PObject TypeCheck intObj pflttofix realObj register }
AObjR		language/numstrm.c	/^private procedure AObjR(ns, p) PNumStrm ns; real */ ;" function 9 { SetupNumStrm }	{ Component PObject TypeCheck intObj p realObj register }
APut		language/array.c	/^public procedure APut(a, index, ob)/ ;" function 10 { ArrayFromStack BindArray PSDefUserObj PSPut PSUndefUserObj }	{ RangeCheck VMPutElem }
ARCNesc		fonts/fontbuild.c	/^#define ARCNesc 27/ ;" macro 1 { CCRunStd }	{ }
ARCesc		fonts/fontbuild.c	/^#define ARCesc 4/ ;" macro 1 { CCRunStd }	{ }
ARRAY_H		language/array.h	/^#define	ARRAY_H/ ;" macro 1 { }	{ }
ARXCA		include/monitor.h	/^#define ARXCA 6		\/* channel A receive character av/ ;" macro 1 { }	{ }
ARealCarP		fonts/fontbuild.c	/^private procedure ARealCarP(pao,p)  PAryObj pao; P/ ;" function 2 { }	{ Object PRealValue VMCarCdr p }
ASCNDesc		fonts/fontbuild.c	/^#define ASCNDesc 19/ ;" macro 1 { CCRunStd }	{ }
ASPCOND		include/monitor.h	/^#define ASPCOND 7	\/* channel A special receive con/ ;" macro 1 { }	{ }
ASSIGNLO		bitmap/bm34comp.c	/^#define ASSIGNLO(a,b) asm("movew %2,%0" : "=r" (a)/ ;" macro 1 { BM34MoveRect }	{ }
ASTCHG		include/monitor.h	/^#define ASTCHG 5	\/* channel A external status chan/ ;" macro 1 { }	{ }
AStore		language/array.c	/^public procedure AStore(a)/ ;" function 16 { AryToMrk PSAStore }	{ CountStack IPopNotEmpty Object Underflow VMPutElem cardinal integer opStk }
ATM		fonts/atm.h	/^#define ATM (0)/ ;" macro 1 { MERCURY }	{ }
ATM_CSLIMIT		fonts/fontbuild.c	/^#define ATM_CSLIMIT 400			\/* len1000 over this mea/ ;" macro 1 { BuildChar }	{ }
ATM_H		fonts/atm.h	/^#define ATM_H/ ;" macro 1 { }	{ }
ATRAPLENGTH		graphics/graphicspriv.h	/^#define ATRAPLENGTH 64/ ;" macro 1 { EnterCircle MarkInit }	{ }
ATXBE		include/monitor.h	/^#define ATXBE 4		\/* channel A transmit buffer empt/ ;" macro 1 { }	{ }
ATail		language/array.c	/^private procedure ATail(a, n, atail)/ ;" function 19 { PutArray SubPArray }	{ CantHappen DecodeObj Object arrayObj discard pkdaryObj }
A_BITS		include/bintree.h	/^#define A_BITS		0	\/* Explicit alpha bits *\// ;" macro 1 { BAGNew BPCompositeFrom BPCompositeTo BPCopyBitsFrom BPMark BPRenderInBounds CopybackRetained LCompositeFrom LMark LPlaceAt LPrintOn LSetAlphaBits LSetType MP12Composite }	{ }
A_ONE		include/bintree.h	/^#define A_ONE		1	\/* Implicit opaque alpha *\// ;" macro 1 { LCompositeFrom LNewAt LSetAlphaOpaque }	{ }
Aborted		fonts/debug.c	/^private boolean Aborted() {return calledFromPS && / ;" function 1 { DPrintSOP DumpDict PrAryBody PrNameAryBody PrPkdaryBody PrintSOP pFD pMM pMS pSFC }	{ calledFromPS }
AboutToCollectShared		language/dict.c	/^private procedure AboutToCollectShared(clientData,/ ;" function 10 { DictInit }	{ ResetNameCache integer }
Access		include/basictypes.h	/^typedef BitField Access;/ ;" typedef 1 { }	{ }
AcquireLock		postscript/contextimpl.c	/^private procedure AcquireLock(pl) PLock pl; {/ ;" function 27 { PSAcquireLock PSMonitor PSWait }	{ Assert BreakLooseLK DURING END_HANDLER HANDLER InvalidContext NIL PSContext RERAISE currentPSContext level }
AcquireMsg		product/ipcscheduler.c	/^msg_header_t *AcquireMsg(SchedulerMsg *m)/ ;" function 15 { SelectPSContext }	{ MESSAGETOTALSIZE NULL SchedulerMsg freeMsg header }
ActOnKeyword		fonts/fontrun.c	/^private procedure ActOnKeyword(state, table, pobj)/ ;" function 18 { KAPutDef PSFontRun }	{ MATCH_ANY_NAME NULL PKeywordAction PNameEntry fontsNames register }
Action		language/grammar.h	/^typedef unsigned char Class, State, Action;/ ;" global 1 { }	{ }
ActionClass		graphics/cscan.c	/^typedef struct {/ ;" typedef 4 { }	{ }
ActionClassArray		graphics/cscan.c	/^private ActionClass ActionClassArray[] = {/ ;" global 18 { PatternToActions }	{ }
ActionClassPtr		graphics/cscan.c	/^typedef struct {/ ;" typedef 4 { PatternToActions }	{ }
ActionIndex		graphics/cscan.c	/^typedef struct {/ ;" typedef 4 { }	{ }
ActionIndexPtr		graphics/cscan.c	/^typedef struct {/ ;" typedef 4 { PatternToActions }	{ }
ActionList		graphics/cscan.c	/^typedef struct {/ ;" typedef 3 { }	{ }
ActionListArray		graphics/cscan.c	/^private ActionList ActionListArray[] = {/ ;" global 7 { PatternToActions }	{ }
ActionOp		graphics/cscan.c	/^typedef enum {			\/* This goes in "operation" field/ ;" typedef 5 { }	{ }
ActivateTfr		graphics/transferimpl.c	/^public procedure ActivateTfr(t) / ;" function 32 { ImageInternal PSGetTfrFcn SetDevColor SetTransfer }	{ DevAllocTfrFcn DevTfrFcn FillInBG FillInTfrTbl FillInUCR GetInactiveTables LimitCheck LinkTfr NULL UnlinkTfr boolean true }
ActiveApp		product/event.c	/^public  PSContext ActiveApp;	\/* context representi/ ;" global 1 { IPCFillBuf NSDestroyPS PSCurrentActiveApp PSSetActiveApp PSSetLastEventSentTime PSSetWaitCursorEnabled PSStartWaitCursorTimer SendEvent }	{ }
Add4		graphics/reducer.c	/^private procedure Add4(a, b, sum)  FourPlace *a, */ ;" function 18 { Intersect }	{ AddUn4 FourPlace SubUn4 Un4Comp }
AddBoxDevPrim		device/devprim.c	/^public DevPrim *AddBoxDevPrim(self, b)/ ;" function 12 { }	{ AddDevPrim DevPrivate DevTrap }
AddCircleMask		graphics/stroke.c	/^private boolean AddCircleMask(i, dp) integer i; Cd/ ;" function 22 { FillCircle }	{ CircleCache PCircle PMask circ_llx circ_lly circ_urx circ_ury circleMasks endCircleMasks false fp16k integer ms os_fabs pflttofix register scip true }
AddCirclePath		graphics/stroke.c	/^private procedure AddCirclePath(dp, i, path)/ ;" function 29 { EnterCircle FillCircle }	{ CantHappen Cd ClosePath CurveTo ITransIfNeed MoveTo TransIfNeed VecAdd fpHalf fpp552 p real register true uhalfwidth }
AddDevPrim		device/devprim.c	/^public DevPrim *AddDevPrim(self, type, value, leng/ ;" function 16 { AddBoxDevPrim AddRunDevPrim TrapTrapClipCallBack }	{ AddDevPrimValue MergeDevBounds }
AddDevPrimValue		device/devprim.c	/^private DevPrim *AddDevPrimValue(self, type, lengt/ ;" function 13 { AddDevPrim }	{ DEVPRIMVALUELENGTH DevPrivate InitDevPrim NewDevPrim os_sureCalloc }
AddEntry		fonts/cacheimpl.c	/^private procedure AddEntry(cache, hashId, tag, dat/ ;" function 45 { AddIntEntry AddRealEntry AddStringEntry CacheAddEntry CacheLookup }	{ AllocHdr CacheStat DisplaceEntries DisposeEntry InsertLink Links NULL PCacheEntHdr boolean data false register true }
AddIntEntry		graphics/graphics.c	/^private procedure AddIntEntry(key, val, args)/ ;" function 6 { FmDeviceInfo MaskDeviceInfo PSDeviceInfo WdDeviceInfo }	{ AddEntry IntObj LIntObj }
AddMappedFile		product/miscops.c	/^public procedure AddMappedFile(int size)/ ;" function 11 { os_fdopen }	{ mappedFileSizes totalMappedFiles }
AddMark		vm/makevm.c	/^private int AddMark(loc)/ ;" function 76 { AddToMarkTable }	{ Assert HASHMASK NIL PCard8 boolean false longcardinal mark os_printf register true }
AddPathRef		graphics/pathbuild.c	/^public procedure AddPathRef(path) PPath path; {/ ;" function 27 { CopyPath }	{ CantHappen IntersectPath ListPath NULL PathType QuadPath ReducedPath StrkPath register }
AddProcToList		vm/gcmisc.c	/^private procedure AddProcToList(list, proc, client/ ;" function 23 { GC_RegisterFinalizeProc GC_RgstGetRootsProc GC_RgstSharedRootsProc }	{ CAST CallBackItem DURING END_HANDLER HANDLER NEW PVMSegment VMERROR register }
AddRdcTrap		graphics/pathreduce.c	/^public procedure AddRdcTrap(yt, yb, xtl, xtr, xbl,/ ;" function 8 { DoRdcPth ReduceQuadPath }	{ AddTrap RdcToDev }
AddRealEntry		graphics/graphics.c	/^private procedure AddRealEntry(key, val, args)/ ;" function 6 { PSDeviceInfo }	{ AddEntry LRealObj RealObj }
AddRunDevPrim		device/devprim.c	/^public DevPrim *AddRunDevPrim(self, run)/ ;" function 16 { ReducePathRun RunRunClipCallBack }	{ AddDevPrim DevPrivate DevRun DevShort NULL data os_sureCalloc }
AddRunIndexes		device/devprim.c	/^public procedure AddRunIndexes(clip) DevPrim *clip/ ;" function 18 { FindCurrentViewInCache NewViewClip ReducePathClipInt }	{ BuildRunIndex DURING DevRun END_HANDLER FGEnterMonitor FGExitMonitor HANDLER NULL RERAISE }
AddRunMark		graphics/graphmark.c	/^public procedure AddRunMark(run) DevRun *run; {/ ;" function 14 { CSRun DoRdcPth OFAddRunMark }	{ ClipForMark DevPrim InitDevPrim MarkDevPrim NULL PMarkState ms xaOffset }
AddScrRef		graphics/gray.c	/^public procedure AddScrRef(screen) Screen screen; / ;" function 2 { }	{ NIL }
AddStringEntry		graphics/graphics.c	/^private procedure AddStringEntry(key, val, args)/ ;" function 6 { PSDeviceInfo }	{ AddEntry MakeStr StrObj }
AddTfrRef		graphics/transferimpl.c	/^public procedure AddTfrRef(tfrFcn) TfrFcn tfrFcn; / ;" function 2 { }	{ NIL }
AddToBBox		graphics/pathbuild.c	/^private procedure AddToBBox(path, coord) PPath pat/ ;" function 21 { AddToPath }	{ ListPath RangeCheck r real register }
AddToGCTable		language/name.c	/^private procedure AddToGCTable(namePtr)/ ;" function 20 { MakeStaticPName }	{ ChunkSize NIL NameChunk firstChunk os_sureMalloc register }
AddToMarkTable		vm/makevm.c	/^#define	AddToMarkTable(loc)	AddMark((PCard8)(loc))/ ;" macro 1 { RelocateObject Relocate_Names ScanFromAry ScanFromDict ScanPkdAry }	{ AddMark PCard8 }
AddToPath		graphics/pathbuild.c	/^private procedure AddToPath(path, coord, tag)/ ;" function 41 { AppendCopyToPath ClosePath CurveTo LineTo MoveTo PSMoveTo PSRMoveTo }	{ AddToBBox AllocListPathRec BuildPathFreeList ConvertToListPath LimitCheck ListPath MakeOwnListPath NULL PPthElt PathType gs pathFree pathLengthLimit pathstart register start }
AddTrap		graphics/maketrap.c	/^public procedure AddTrap(yt, yb, xtl, xtr, xbl, xb/ ;" function 96 { AddRdcTrap DoRdcPth DoStroke OFAddRdcTrap ReduceQuadPath TrapTrapDispatch }	{ Assert DevPrim DevTrap EdgeInit FTrunc FixInt Fixed OKTrap ONE boolean lines max ms register true }
AddTrapezoidToPath		graphics/pathreduce.c	/^private procedure AddTrapezoidToPath(yt, yb, xtl, / ;" function 10 { CallAddTrapToPath }	{ Cd ClosePath LineTo MoveTo }
AddUn4		graphics/reducer.c	/^private procedure AddUn4(a, b, sum)  FourPlace *a,/ ;" function 15 { Add4 Sub4 }	{ Card16 Int32 register }
AddYCross		graphics/cscan.c	/^private procedure AddYCross(cross)/ ;" function 22 { SplicePixel }	{ CrossPtr NULL Pixel YCROSS }
AddressInRecyclerRange		include/recycler.h	/^#define AddressInRecyclerRange(R, address)	\\/ ;" macro 1 { Array ConditionalResetRecycler InRange IsRecyclable ObjectInRecyclerRange }	{ }
AddressValidAtLevel		vm/saverestore.c	/^public boolean AddressValidAtLevel(address, lvl)/ ;" function 29 { CheckStackElement }	{ Assert DebugAssert FindVMSegment NIL PSR PVMSegment free level register rootPrivate true vmPrivate }
AdjstHW		graphics/stroke.c	/^private real AdjstHW(v)  Cd v;/ ;" function 28 { FillLineSegment StrkLnTo }	{ Cd DTfmPCd DevCd Dist F_AdjstHW FixCd RealEq0 VecMul fixtopflt fp10 fpOne fpZero fpp001 gs isStrkPth needTfm os_fabs r real strkFoo uhalfwidth }
Adjust		fonts/fontbuild.c	/^internal Fixed Adjust(w, t)  Fixed w, t;/ ;" function 17 { BlueLock CalcGlbClrLocs PreXLock PreYLock }	{ FRound FRoundF FTrunc FTruncF FixedHalf IntX boolean devsweven erosion false isoutline true }
AdjustBlues		fonts/fontbuild.c	/^private procedure AdjustBlues(botLocs, lenBotBands/ ;" function 71 { FamilyBlueLocs }	{ Bpick FCd FRoundF FTrunc FTruncF FixInt Fixed FixedOne FntITfmP IntX NULL PrintBlueLocs SetupBlueLocs d locktype os_labs printf register stdhw }
AdjustDevMatrix		device/framedev.c	/^public procedure AdjustDevMatrix(m, width, height)/ ;" function 15 { FrameDevice }	{ d real }
AdjustRef		vm/abmimpl.c	/^#define	AdjustRef(obj, old, new)	\\/ ;" macro 1 { GC_MoveRecycleRange }	{ }
AdjustToStdWidths		fonts/fontbuild.c	/^internal procedure AdjustToStdWidths() {/ ;" function 9 { BuildChar CCRunStd }	{ PGlbClr UseStdWidth glbClrLst lenstdhw lenstdvw register stdhw stdvw true }
AdobeCpyrt		include/copyright.h	/^static char AdobeCpyrt[] =/ ;" global 3 { }	{ }
AdvanceEdges		graphics/qreducer.c	/^private Edge AdvanceEdges(edge, strtY, endY)/ ;" function 39 { QReduce }	{ Assert Edge Fixed MAX NIL register right until }
AlignIsolatedStems		fonts/glbclr.c	/^private void AlignIsolatedStems(ss, ns)/ ;" function 32 { GlobalColoring }	{ FRoundF Fixed PGlbClr d fixratio fxfrmul register ss }
AllocAligned		vm/vm_segment.c	/^public PCard8 AllocAligned(nBytes)/ ;" function 12 { AllocGenericObject AllocPArray AllocPDict AllocPName AllocPStream AllocRAMStr AllocVMAligned Array Init_Cmds KAEndCSDict MakeCompFont ReadBinObjSeq ReadNumAry VMExpandDict }	{ FindFreeBytes PCard8 integer true vPREFERREDALIGN }
AllocChars		vm/vm_segment.c	/^public PCard8 AllocChars (nBytes)/ ;" function 9 { AllocPName AllocPString AppendVM CreatePrivateVM CreateSharedVM }	{ FindFreeBytes PCard8 integer true }
AllocCmds		vm/rgstcmds.c	/^private procedure AllocCmds(cmdIndex, numCmds)/ ;" function 19 { RgstOpSet }	{ Card16 EXPAND PSUnregistered charptr cmds dynamicCmdsDelta integer max procedure register rootShared }
AllocCopyDict		language/dict.c	/^public procedure AllocCopyDict(d, increment, pdict/ ;" function 9 { CopyDelayedFont MakeCompFont MakeFontSupp }	{ XlatDictRef cardinal copydict d false true }
AllocGenericObject		vm/vm_alloc.c	/^public procedure AllocGenericObject (Type, Size, p/ ;" function 24 { AllocPNameArray NewCondition NewLock PSGState }	{ AllocAligned Assert ConditionalResetRecycler GenericBody LEVEL LGenericObj PCard8 PGenericBody RecordFinalizableObject integer level nBaseObTypes nObTypes vmCurrent }
AllocHalftone		devpattern/patternimpl.c	/^public DevHalftone * AllocHalftone(/ ;" function 30 { DevAllocHalftone }	{ AllocScreen DevHalftone DevScreen FreeHalftone NULL halftonePool os_newelement s }
AllocHdr		fonts/cacheimpl.c	/^private PCacheEntHdr AllocHdr(cache)/ ;" function 14 { AddEntry }	{ CacheEntHdr NULL PCacheEntHdr os_sureCalloc }
AllocInfoVector		devpattern/patternimpl.c	/^public PCard8 AllocInfoVector() {/ ;" function 5 { Gry4Of4Setup MonoSetup SetupGrayPattern }	{ Card8 MAXCOLOR PCard8 PatAlloc integer p }
AllocInternal		vm/abmimpl.c	/^#define	AllocInternal(size)	\\/ ;" macro 1 { ABM_Allocate ABM_AllocateVM GC_MoveRecycleRange }	{ AllocLarge AllocSmall Card32 LargeAllocThreshold }
AllocLarge		vm/abmimpl.c	/^private RefAny AllocLarge(size)/ ;" function 55 { AllocInternal }	{ ABM_SetAllocated BitSpan ByteSpan CAST DebugAssert Level NIL PCard8 PVMSegment RefAny current level register vmCurrent }
AllocListPathRec		graphics/pathbuild.c	/^public ListPath *AllocListPathRec(path) PPath path/ ;" function 8 { AddToPath AppendPath TlatPath }	{ Assert ListPath NULL PathType lpStorage os_newelement register start }
AllocPArray		vm/vm_alloc.c	/^public procedure AllocPArray(len, paob)/ ;" function 17 { AllocRAMArray AryToMrk CreatePrivateVM CreateSharedVM EndWholeClothInit FontBuildInit GetDMFItem HandleStackOverflow Init_Cmds MakeCompFont MakeFontSupp PSArray PSDefUserObj PSMtx PSdummymakevm RgstPackageNames }	{ AllocAligned LAryObj NIL NOLL Object PObject integer register vmCurrent }
AllocPDict		vm/vm_alloc.c	/^public procedure AllocPDict(size, pob)  cardinal s/ ;" function 49 { DictP }	{ ABM_Allocate AllocAligned ConditionalResetRecycler DictBody KeyVal LDictObj LEVEL NOLL NULL PCard8 PDictBody PKeyVal RecordFinalizableObject dictObj false integer level register rootShared vmCurrent }
AllocPName		vm/vm_alloc.c	/^public procedure AllocPName(length, pno)/ ;" function 46 { newstn }	{ AllocAligned AllocChars ConditionalResetRecycler CurrentShared CurrentVMSegmentType DURING END_HANDLER HANDLER Level NIL NameEntry PCard8 PNameEntry RERAISE SetShared SetVMSegmentType XNameObj boolean charptr integer sharedRecycler stPermanentRAM stROM true vmShared }
AllocPNameArray		language/name.c	/^public procedure AllocPNameArray(length, pObj)/ ;" function 11 { CreateSharedVM PSSysNameMap RgstOpSet }	{ AllocGenericObject NameArrayBody PNameEntry objNameArray }
AllocPStream		vm/vm_alloc.c	/^public procedure AllocPStream(pob)/ ;" function 27 { MakePStm }	{ AllocAligned ConditionalResetRecycler CurrentVMSegmentType DURING END_HANDLER HANDLER LStmObj Level PCard8 PStmBody RERAISE RecordFinalizableObject SetVMSegmentType StmBody integer stPermanentRAM stmObj vmCurrent }
AllocPString		vm/vm_alloc.c	/^public procedure AllocPString(length, pob)  cardin/ ;" function 5 { ObjFromStrStorage PSString PSUClRead PutThresholdEntries StmToken makestring }	{ AllocChars LStrObj NIL charptr integer }
AllocPatternIndex		devpattern/patternimpl.c	/^public integer AllocPatternIndex() {/ ;" function 14 { SetPatInfo }	{ FreeOldestPattern MAXPAT NIL PPatCacheInfo PSCANTYPE PatAlloc PatCacheInfo integer lastFree patterns true }
AllocPatternStorage		devpattern/patternimpl.c	/^public PSCANTYPE AllocPatternStorage(nUnits) integ/ ;" function 3 { BuildGrayPattern BuildPattern SetupMonoPattern }	{ PSCANTYPE PatAlloc SCANTYPE integer }
AllocRAMArray		fonts/fontcache.c	/^private procedure AllocRAMArray(nItems, shared, po/ ;" function 13 { PSDefineFont }	{ AllocPArray CurrentShared DURING END_HANDLER HANDLER PCard8 RERAISE SetShared boolean p }
AllocRAMStr		fonts/fontcache.c	/^private procedure AllocRAMStr(nBytes, shared, pobj/ ;" function 14 { CheckCompositeFont }	{ AllocAligned CurrentShared DURING END_HANDLER HANDLER LStrObj PCard8 RERAISE SetShared boolean p }
AllocScanList		graphics/qreducer.c	/^private ScanList AllocScanList()/ ;" function 5 { InsertEdge }	{ LimitCheck endScanArray freeScan }
AllocScreen		devpattern/patternimpl.c	/^private DevScreen *AllocScreen(w, h) integer w, h;/ ;" function 21 { AllocHalftone }	{ DevPrivate DevScreen FreeScreen GetMemForTA NULL PCard8 PScreenPrivate dgNColors integer os_freeelement os_malloc os_newelement register s screenPool taTimeStamp }
AllocScreenPrivate		devpattern/patternimpl.c	/^private PScreenPrivate AllocScreenPrivate()/ ;" function 9 { ValidateTA }	{ Assert DEFAULTSCREEN MAXSP PScreenPrivate ScreenPrivate spCount srceenPrivates }
AllocScrnSlot		devpattern/patternimpl.c	/^private integer AllocScrnSlot()/ ;" function 9 { AllocScrnSlot GetMemForTA }	{ AllocScrnSlot MAXSCRN NULL NULLSLOT SendOldestToDisk integer screens }
AllocSmall		vm/abmimpl.c	/^private RefAny AllocSmall(size)/ ;" function 96 { AllocInternal }	{ ABM_EffectivelyNoSpace ABM_SetAllocated BitSpan BitsPerByte ByteSpan CAST Card8 DebugAssert Level NIL PCard8 PVMSegment RefAny current hiHole level locOfMax lowHole maxHole register vmCurrent }
AllocVMAligned		vm/vm_segment.c	/^public PCard8 AllocVMAligned (nBytes, shared)/ ;" function 20 { Save VMPutDict VMPutGeneric _RecordFinalizableObject saveobj }	{ AllocAligned DURING END_HANDLER HANDLER PCard8 RERAISE SetShared boolean vmCurrent }
AlreadyValidMID		fonts/fontshow.h	/^#define AlreadyValidMID() \\/ ;" macro 1 { PreBuiltChar ShowByName ValidMID }	{ NIL curMT gs }
AnamorphicNormStrkWdth		graphics/stroke.c	/^private procedure AnamorphicNormStrkWdth(w) Preal / ;" function 23 { SetHalfWidth }	{ Cd CrMtx GetNormStrkWdth Mtx OddWidth RRoundP RealLt0 d fpOne fpTwo fpZero gs integer oddXwidth oddYwidth os_fabs r real uhalfwidth }
AnyAryObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 44 { PSOpDef }	{ }
AppendCopyToPath		graphics/pathbuild.c	/^public procedure AppendCopyToPath(pe, newPath)/ ;" function 8 { MakeOwnListPath }	{ AddToPath }
AppendPath		graphics/pathops.c	/^private procedure AppendPath(p, q) PPath p, q; { \// ;" function 49 { Fill PSCharPath Stroke }	{ AllocListPathRec ConvertToListPath InitPath ListPath MakeOwnListPath NULL PPthElt PathType RemReducedRef boolean lpStorage os_freeelement p pathFree pathstart register secret start }
AppendSegmentData		vm/makevm.c	/^private procedure AppendSegmentData(type)/ ;" function 9 { WriteRelocatedVMToFile }	{ NIL PVMSegment free level vmShared }
AppendSegmentHeader		vm/makevm.c	/^private integer AppendSegmentHeader(type, base)/ ;" function 27 { WriteRelocatedVMToFile }	{ NIL PVMSegment SWAPBITS VMSegment free integer level vSWAPBITS vmShared }
AppendTraps		graphics/maketrap.c	/^public procedure AppendTraps(dp) register DevPrim / ;" function 25 { FillCircle }	{ Assert DevPrim DevTrap MergeDevBounds integer ms register }
AppendVM		vm/vm_memory.c	/^public PCard8 AppendVM(n, p)/ ;" function 22 { }	{ AllocChars PCard8 cardinal integer p register }
ApplyFootprints		coroutine/corouxfer.c	/^private ApplyFootprints(coroutine)/ ;" function 11 { CreateCoroutine }	{ FOOTPRINT integer p register }
ApplyRelocation		vm/vm_relocate.c	/^public procedure ApplyRelocation()/ ;" function 45 { StartVM WriteRelocatedVMToFile }	{ Assert DecodeAddress NIL PCard8 PRelocationEntry ResetVMSection RootPointer SWAPBITS current free level register relocationTable relocationTableSize rootShared segmentTable vSWAPBITS vmShared }
ApproxDLen		fonts/fontmatrix.c	/^public Fixed ApproxDLen(cp) register PFCd cp;/ ;" function 11 { GetDSW Len1000 PutStdW }	{ Fixed fixmul fntmtx }
Arc		graphics/pathbuild.c	/^public procedure Arc(center, radius, angStart, ang/ ;" function 9 { CCRunStd }	{ ArcInternal CallArcInit CurveTo LineTo MoveTo gs }
ArcC		graphics/pathextraops.c	/^private procedure ArcC(cv, ev, angst, angend, ccwi/ ;" function 40 { ArcC PSArcC }	{ ArcC Cd CurveTo Dist LineTo PIover2 RTfmPCd RealLt0 TwoPI gs real }
ArcCenterShift		graphics/pathbuild.c	/^private procedure ArcCenterShift(pc, pr, pdc) real/ ;" function 14 { ArcInternal }	{ RealLt0 fpHalf fpOne fpZero r real }
ArcInternal		graphics/pathbuild.c	/^public procedure ArcInternal(center, radius, angSt/ ;" function 110 { Arc CallArc QUsrPthArc UsrPthArc }	{ ArcCenterShift Cd CheckForAnamorphicMatrix DTfmPCd Dist IDTfmPCd Mtx MtxCnct RealEq0 RealNe0 RtatMtx ScalMtx SmallArc TfmPCd TlatMtx boolean false fp360 fp90 fpOne fpZero fpp552 gs integer real }
ArcToInternal		graphics/pathbuild.c	/^procedure ArcToInternal(c0, c1, c2, radius, pct1, / ;" function 47 { DoArcTo QUsrPthArcTo UsrPthArcTo }	{ Cd Dist RealEq0 TfmPCd UndefResult VecMul VecSub fp1p3333333 fpHalf fpOne os_fabs os_sqrt real }
Array		language/array.c	/^procedure Array(int len, PObject pobj)/ ;" function 32 { AryToMrk }	{ AddressInRecyclerRange AllocAligned Assert FInvlAccess LAryObj NIL Object PCard8 PObject PRecycler Underflow level opStk privateRecycler recycleType sharedRecycler vmCurrent }
ArrayFromStack		language/stack.c	/^public procedure ArrayFromStack(pao, stack)/ ;" function 15 { HandleStackOverflow PSDictStack PSExecStack }	{ APut CountStack MAXcardinal Object RangeCheck cardinal register }
ArrayInit		language/array.c	/^public procedure ArrayInit(reason)  InitReason rea/ ;" function 11 { LanguageInit }	{ AFAProc RgstMark arraycmd endswitch integer mrk2Args }
ArrayToStack		language/stack.c	/^public procedure ArrayToStack(pao, stack)/ ;" function 16 { }	{ AGetP Object StackPushP cardinal }
AryForAll		language/array.c	/^public procedure AryForAll(aryOb, procOb)/ ;" function 8 { PSForAll }	{ EPushP InvlAccess arraycmd rAccess }
AryObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 41 { AFAProc Bang CheckCompositeFont DelayedMakeFont DoStroke FDNestedDepth FontEncode GetBlueArrays GetDMFItem GetFontBBox GetStdW GetStemWidth GetWeightVector HandleStackOverflow InvalidateCachedMIDs MakeCompFont MakeFontSupp MakeMID MinEncodingLength PAryToMtx PSALoad PSAStore PSArray PSCnctMtx PSCrMtx PSDefineFont PSDevForAll PSDfMtx PSDictStack PSExecStack PSFor PSForAll PSIdentMtx PSIf PSIfElse PSInUStroke PSInvertMtx PSLoop PSMtx PSPopPMtx PSRBrak PSRepeat PSRgstNames PSSetDash PSUPath PopMtx RgstPackageNames }	{ }
AryToMrk		language/scanner.c	/^private procedure AryToMrk(pobj, nest, sqarray)/ ;" function 21 { PSRBrak StmToken }	{ AStore AllocPArray Array CountToMark DebugAssert IPopSimple Object Pkdary Xobj cardinal escObj objMark opStk packedArrayMode }
Assert		include/except.h	/^#define Assert(condition) \\/ ;" macro 1 { AcquireLock AddTrap AllocListPathRec AppendTraps BresenhamMT CIAlloc CIFree CheckCI CheckForPSNotify CheckMT CoReturn ContextOpsInit CopyTrimmedEdge CreatePSSpace CreateSharedVM DeleteCIs DestroyCoroutine DestroyPSContext EnterGlbCntr FixOnePath FlushMID FontDiskInit FontShowInit GStackRestore GetNextContext GetNextSpace GetNotifyAbortCode GlobalColoring IPopDiscard IPopNotEmpty InitCoroutine InitSortMID InsertLock InsertSelectFont MIDPurgedByGC MTAlloc MTFree MTUnlink MakeBounds NewContextID NewKeywordTables NewSpaceID PSCoProc PSFlushMasks PSFork PSSetDevice PSWait PurgeMID QDoEUsrPth ReadCtrlByte RstrSetShared SetCurrentContext SetupMaskDev ShowByName SimpleCounter SlowShow SortMIDAges SpaceExclusionSemaphore SwitchPSContext TotalExclusionSemaphore (etc) }	{ CantHappen }
AssertCheck		graphics/userpath.h	/^#define AssertCheck(assert) {if (!(assert)) TypeCh/ ;" macro 1 { CheckIfUCache DoUserPath QDoUserPath QUsrPthCurveTo UPClosePath UPCurveTo UPLineTo UsrPthArc UsrPthArcTo UsrPthBBox UsrPthCurveTo UsrPthLineTo UsrPthMoveTo }	{ TypeCheck }
AssignArrayBounds		bintree/drivers.c	/^static void AssignArrayBounds(int UseMegaPixel)/ ;" function 11 { DriverInit }	{ AssignBounds MEGAPIXEL mon monCount strcmp }
AssignBounds		bintree/drivers.c	/^static void AssignBounds(NXMonitor *a)/ ;" function 22 { AssignArrayBounds MatchMonitors }	{ NXMonitor bottom mon monCount right }
BACKCHAN		include/bintree.h	/^#define BACKCHAN	 2	\/* Backing channel *\// ;" macro 1 { BPAdjust BPAllocBag BPCompositeFrom BPCompositeTo BPCopyBitsFrom BPCopyback BPInitialize BPMark BPObscureBecause BPRenderInBounds BPReplaceBits CopyOffscreen CopyOnscreen LCompositeFrom LFill LHideInstanceIn LInitPage LMark LNewAt LPlaceAt }	{ }
BADCROSS		graphics/cscan.c	/^#define BADCROSS  ((CrossPtr)(-1))	\/* An illegal v/ ;" macro 1 { EditBlackSpace EditWhiteSpace }	{ CrossPtr }
BADCXTN		graphics/cscan.c	/^#define BADCXTN (0xFF)		\/* Illegal Cxtn: Can't fig/ ;" macro 1 { BuildCxtn GetRuleDesc }	{ }
BAD_HDR		fonts/fontrun.c	/^#define BAD_HDR -2/ ;" macro 1 { ReadIBMSegHdr ReadMacSegHdr ReadSegHeader }	{ }
BAG		include/bintree.h	/^#define BAG	 	((unsigned char) 'g')	\/* 103 *\// ;" macro 1 { BAGCompositeFrom BAGNew MPComposite }	{ }
BAGCompositeFrom		bintree/bag.c	/^void BAGCompositeFrom(CompositeOperation *cop)/ ;" function 38 { BPAdjust BPCompositeFrom BPCompositeTo BPCopyback BPCopybackBounds BPMark BPRenderInBounds BPRevealBecause LRepaintIn }	{ BAG Bounds COPY DebugAssert OFFSETBOUNDS PATTERN VISCHAN _any boundBounds }
BAGDelete		bintree/bintreetypes.h	/^#define		    BAGDelete(bag) if (--bag->refCount==0/ ;" macro 1 { BPAdjust BPFree LFree }	{ BAGFree }
BAGDup		bintree/bintreetypes.h	/^#define		    BAGDup(bag) ++bag->refCount, bag/ ;" macro 1 { BAGFind BPCopy BPNewAt }	{ }
BAGFind		bintree/bag.c	/^NXBag *BAGFind(Layer *layer, NXDevice *device)/ ;" function 9 { BPAdjust BPAllocBag LNewAt }	{ BAGDup BAGNew NXBag }
BAGFree		bintree/bag.c	/^void BAGFree(NXBag *bag)/ ;" function 19 { BAGDelete }	{ NXBag bagPool os_freeelement termwindowflag }
BAGInitialize		bintree/bag.c	/^void BAGInitialize()/ ;" function 4 { LayerInit }	{ NXBag bagPool os_newpool }
BAGNew		bintree/bag.c	/^NXBag *BAGNew(Layer *layer, NXDevice *device)/ ;" function 19 { BAGFind }	{ A_BITS BAG NONRETAINED NXBag bagPool os_newelement }
BANDMASKID		device/framemaskdev.h	/^#define BANDMASKID 256/ ;" macro 1 { BlackMasksMarkReal ClippedMasksMark ConstantMasksMark GrayMasksMark WhiteMasksMark }	{ }
BASEPSWINDOWID		include/windowdevice.h	/^#define BASEPSWINDOWID	13	\/* Id of initial window / ;" macro 1 { IniWindowOps PSMoveWindow PSOrderWindow PSPlaceWindow PSSetWindowLevel PSSetWindowType PSTermWindow }	{ }
BASICTYPES		include/package_specs.h	/^#define BASICTYPES	"basictypes.h"/ ;" macro 1 { }	{ }
BASICTYPES_H		include/basictypes.h	/^#define	BASICTYPES_H/ ;" macro 1 { }	{ }
BBCompare		graphics/graphics.c	/^public BBoxCompareResult BBCompare(figbb, clipbb) / ;" function 10 { BBoxVsClipBBox BreakUpPath CallAddTrapToPath ConvertToListPath DoImageMark DoRdcPth DoStroke FindCurrentViewInCache OverlapChunk ReducePathClipInt SetBBCompMark ShowMask XARdc XAReducePath }	{ }
BBInt		graphics/graphics.c	/^public procedure BBInt(bb1, bb2)/ ;" function 9 { ReducePathClipInt }	{ }
BBox		include/graphics.h	/^typedef struct _t_BBoxRec {/ ;" typedef 4 { DoRdcPth MakeRectPath QRdcOk ROkToBuild UCGetDevPrim UsrPthQRdcOk }	{ }
BBoxCompareResult		include/devicetypes.h	/^typedef enum {/ ;" typedef 5 { BBoxVsClipBBox BPObscureInside BoxTrapCompare ComputeHideBounds ConvertToListPath DoImageMark FastRectFill FillBevel FillCircle FillQuad FindCurrentViewInCache FloatRectFill IntersectAndCompareBounds LRemoveFromInstance Mark MultiRectFill PSRectFill ShowMask StringMark }	{ }
BBoxRec		include/graphics.h	/^typedef struct _t_BBoxRec {/ ;" typedef 4 { BreakUpPath CallAddTrapToPath ConvertToListPath DoImageMark DoRdcPth DoRdcStroke ImageInternal MultiRectFill OverlapChunk PSRectFill PSReduceRect PSSetBBox ReduceQuadPath SetBBCompMark ShowMask TransDevPrim }	{ }
BBoxTest		graphics/userpath.h	/^#define BBoxTest(cd, bbox) \\/ ;" macro 1 { UsrPthDoCurveTo UsrPthDoLineTo UsrPthDoMoveTo }	{ RangeCheck }
BBoxUpdate		graphics/userpath.h	/^#define BBoxUpdate(val, min, max) \\/ ;" macro 1 { MakeBBox QEnumOk }	{ max }
BBoxVsClipBBox		graphics/pathreduce.c	/^public BBoxCompareResult BBoxVsClipBBox(b) BBox b;/ ;" function 7 { }	{ BBCompare BBoxCompareResult Cd DevClipIsRect GetDevClipBBox }
BCERROR		fonts/fontbuild.c	/^public procedure BCERROR(code) IntX code; {/ ;" function 2 { CantHappen InvlFont OutOfMemory UndefResult }	{ buildError }
BCcmdName		fonts/fontbuild.c	/^private NameObj BCcmdName, strokewidthname, charst/ ;" global 1 { BuildChar }	{ }
BEGINSHOW		fonts/fontshow.c	/^#define BEGINSHOW { \\/ ;" macro 1 { PSAShow PSAWidthShow PSCShow PSKShow PSShow PSStrWidth PSWidthShow SimpleShow SimpleShowByName XYShow }	{ NIL NewShowState PShowState PushShowState TrimShowStates register showLevel ss ssFree ssr }
BELOW		include/bintree.h	/^#define BELOW		-1	\/* Place below another window *\// ;" macro 1 { LFill LFind LFree LMoveTo LOrder LPlaceAt PSCountScreenList PSOrderWindow PSScreenList PSSetWindowLevel }	{ }
BIF		language/stream.c	/^typedef struct {char *name, *access; Stm *stm;} BI/ ;" typedef 1 { CreateFileStm CreateFileStream }	{ }
BIGNUM		fonts/fontbuild.c	/^#define BIGNUM	255/ ;" macro 1 { CCRunStd }	{ }
BINARY_ENCODINGS		language/scanner.c	/^#define BINARY_ENCODINGS false/ ;" macro 1 { }	{ false }
BINTREE		include/package_specs.h	/^#define BINTREE		"bintree.h"/ ;" macro 1 { }	{ }
BINTREE_H		include/bintree.h	/^#define BINTREE_H/ ;" macro 1 { }	{ }
BITMAP		include/package_specs.h	/^#define BITMAP		"bitmap.h"/ ;" macro 1 { }	{ }
BITPIECE		bintree/bintreetypes.h	/^#define BITPIECE ((unsigned char)'b')	\/*  98 *\// ;" macro 1 { BPAdjust BPBecomeDivAt BPCompositeFrom BPCompositeTo BPCopy BPCopyback BPDivideAt BPFindPieceBounds BPFree BPIsObscured BPMark BPNewAt BPObscureBecause BPObscureInside BPPrintOn BPRevealBecause BPRevealInside DPCompositeFrom DPCompositeTo DPRevealInside LCompositeFrom }	{ }
BLACK		bitmap/bm38.c	/^#define BLACK	0x00000000/ ;" macro 1 { }	{ }
BLACK_COLOR		include/bintree.h	/^#define BLACK_COLOR	0x00000000/ ;" macro 1 { PInitialize }	{ }
BLIMIT		graphics/ucache.c	/^#define BLIMIT   (333)  \/* max size for reduction / ;" macro 1 { PSSetUCacheParams UCacheDataHandler }	{ }
BLIMMAX		graphics/ucache.c	/^#define BLIMMAX  (666)     \/* max for blimit, *BMA/ ;" macro 1 { }	{ }
BLUESCALE		fonts/fontbuild.c	/^#define BLUESCALE 2597/ ;" macro 1 { CCRunStd }	{ }
BLUNDERKEY		vm/staticdata.c	/^#define	BLUNDERKEY	((integer)&staticData)	\/* To ch/ ;" macro 1 { CreateData LoadData }	{ integer staticData }
BLUNDEROVERHEAD		vm/staticdata.c	/^#define	BLUNDEROVERHEAD	sizeof(integer)/ ;" macro 1 { Init_StaticData LoadPointers }	{ integer }
BM12Class		include/bitmap.h	/^typedef struct _BM12Class { \/* two-bit gray bitmap/ ;" typedef 3 { }	{ }
BM18Class		include/bitmap.h	/^typedef struct _BM18Class { \/* eight-bit gray bitm/ ;" typedef 3 { }	{ }
BM34Class		include/bitmap.h	/^typedef struct _BM34Class { \/* twelve-bit RGB bitm/ ;" typedef 3 { }	{ }
BM34Composite		bitmap/bm34.c	/^static void BM34Composite(Bitmap *bm, BMCompOp *bc/ ;" function 94 { BM34InitClassVars }	{ BMComposite34 BMCompositeShortcut BM_BITMAPSRC BM_NOSRC BM_PATTERNSRC COPY LocalBitmap Pattern s }
BM34Convert2to16		bitmap/bm34conv.c	/^void BM34Convert2to16(LocalBitmap *dbm, LocalBitma/ ;" function 57 { BM34ConvertFrom }	{ DevPoint expand2to16 expand2to4 uchar }
BM34Convert32to16		bitmap/bm34conv.c	/^void BM34Convert32to16(LocalBitmap *dbm, LocalBitm/ ;" function 35 { BM34ConvertFrom }	{ s }
BM34Convert8to16		bitmap/bm34conv.c	/^void BM34Convert8to16(LocalBitmap *dbm, LocalBitma/ ;" function 46 { BM34ConvertFrom }	{ s }
BM34ConvertFrom		bitmap/bm34.c	/^static void BM34ConvertFrom(Bitmap *db, Bitmap *sb/ ;" function 33 { BM34InitClassVars }	{ BM34Convert2to16 BM34Convert32to16 BM34Convert8to16 BMCompOp BM_BITMAPSRC COPY LocalBitmap NX_EIGHTBITGRAY NX_OTHERBMTYPE NX_TWELVEBITRGB NX_TWENTYFOURBITRGB NX_TWOBITGRAY bm_composite }
BM34Grays		bitmap/bm34.c	/^static const PatternData BM34Grays[3] = {/ ;" global 9 { BM34InitClassVars }	{ }
BM34InitClassVars		bitmap/bm34.c	/^static void BM34InitClassVars(BMClass *class)/ ;" function 53 { }	{ BM34Composite BM34ConvertFrom BM34Grays BM34NewAlpha BM34NewFromData BM34SetupPattern BM34SizeBits BM34_Mark DevAddHalftoneRef ImageArgs LocalBMClass NIL NXGrayPat PMarkProcs RGBPattern bm34DevHalftone bm34DevScreen bm34Thresholds data defaultHalftone fmImageProcs localBM wdMarkProcs }
BM34MoveRect		bitmap/bm34comp.c	/^BM34MoveRect(pixel_t *sp,int srb,pixel_t *dp,int d/ ;" function 74 { BMComposite34 }	{ ASSIGNLO HIWORD LOOP32 STOREIT SWAP doLong doShort doSkip isAligned volatile }
BM34New		bitmap/bm34.c	/^static Bitmap *BM34New(BMClass *class, Bounds *b, / ;" function 17 { }	{ BMClass Bitmap NX_RGBCOLORSPACE NX_TWELVEBITRGB localBM }
BM34NewAlpha		bitmap/bm34.c	/^static void BM34NewAlpha(Bitmap *bm, int initializ/ ;" function 14 { BM34InitClassVars }	{ LocalBitmap }
BM34NewFromData		bitmap/bm34.c	/^static Bitmap *BM34NewFromData(LocalBMClass *class/ ;" function 20 { BM34InitClassVars }	{ Bitmap LocalBMClass NX_RGBCOLORSPACE NX_TWELVEBITRGB localBM }
BM34SetupPattern		bitmap/bm34.c	/^static void BM34SetupPattern(PatternHandle h, DevM/ ;" function 19 { BM34InitClassVars }	{ ALPHAVALUE data start true }
BM34SizeBits		bitmap/bm34.c	/^static void BM34SizeBits(BMClass *class, Bounds *b/ ;" function 5 { BM34InitClassVars }	{ }
BM34_Mark		bitmap/bm34.c	/^static void BM34_Mark(Bitmap *bm, MarkRec *mrec, D/ ;" function 7 { BM34InitClassVars }	{ LocalBitmap Mark framebase framebytewidth }
BM38Class		include/bitmap.h	/^typedef struct _BM38Class { \/* twenty-four-bit RGB/ ;" typedef 3 { }	{ }
BM38Composite		bitmap/bm38.c	/^static void BM38Composite(Bitmap *bm, BMCompOp *bc/ ;" function 88 { BM38InitClassVars }	{ AMASK BMComposite38 BMCompositeShortcut BM_BITMAPSRC BM_NOSRC BM_PATTERNSRC COPY LocalBitmap Pattern }
BM38Convert16to32		bitmap/bm38conv.c	/^void BM38Convert16to32(LocalBitmap *dbm, LocalBitm/ ;" function 31 { BM38ConvertFrom }	{ CONVERT16TO32 d s }
BM38Convert2to32		bitmap/bm38conv.c	/^void BM38Convert2to32(LocalBitmap *dbm, LocalBitma/ ;" function 56 { BM38ConvertFrom }	{ DevPoint expand2to32 expand2to8 uchar uint }
BM38Convert8to32		bitmap/bm38conv.c	/^void BM38Convert8to32(LocalBitmap *dbm, LocalBitma/ ;" function 45 { BM38ConvertFrom }	{ s }
BM38ConvertFrom		bitmap/bm38.c	/^static void BM38ConvertFrom(Bitmap *db, Bitmap *sb/ ;" function 37 { BM38InitClassVars }	{ BM38Convert16to32 BM38Convert2to32 BM38Convert8to32 BMCompOp BM_BITMAPSRC COPY LocalBitmap NX_EIGHTBITGRAY NX_OTHERBMTYPE NX_TWELVEBITRGB NX_TWENTYFOURBITRGB NX_TWOBITGRAY bm_composite bm_newAlpha false }
BM38Grays		bitmap/bm38.c	/^static PatternData BM38Grays[6] = {/ ;" global 8 { BM38InitClassVars }	{ }
BM38InitClassVars		bitmap/bm38.c	/^static void BM38InitClassVars(BMClass *class)/ ;" function 46 { }	{ BM38Composite BM38ConvertFrom BM38Grays BM38NewAlpha BM38NewFromData BM38SetupPattern BM38SizeBits BM38_Mark ConstRGBPattern ImageArgs LocalBMClass NIL NXGrayPat PMarkProcs data fmImageProcs localBM wdMarkProcs }
BM38New		bitmap/bm38.c	/^static Bitmap *BM38New(BMClass *class, Bounds *b, / ;" function 17 { }	{ BMClass Bitmap NX_RGBCOLORSPACE NX_TWENTYFOURBITRGB localBM }
BM38NewAlpha		bitmap/bm38.c	/^static void BM38NewAlpha(Bitmap *bm, int initializ/ ;" function 14 { BM38InitClassVars }	{ LocalBitmap }
BM38NewFromData		bitmap/bm38.c	/^static Bitmap *BM38NewFromData(LocalBMClass *class/ ;" function 18 { BM38InitClassVars }	{ Bitmap LocalBMClass NX_RGBCOLORSPACE NX_TWENTYFOURBITRGB localBM }
BM38SetupPattern		bitmap/bm38.c	/^static void BM38SetupPattern(PatternHandle h, DevM/ ;" function 12 { BM38InitClassVars }	{ ALPHAVALUE data start true }
BM38SizeBits		bitmap/bm38.c	/^static void BM38SizeBits(BMClass *class, Bounds *b/ ;" function 5 { BM38InitClassVars }	{ }
BM38_Mark		bitmap/bm38.c	/^static void BM38_Mark(Bitmap *bm, MarkRec *mrec, D/ ;" function 7 { BM38InitClassVars }	{ LocalBitmap Mark framebase framebytewidth }
BMAX		graphics/ucache.c	/^#define BMAX     (300000) \/* total size for everyt/ ;" macro 1 { IniUCache PSNormalUCache }	{ }
BMAlloc		device/maskcache.c	/^private PBMItem BMAlloc(nBytes) integer nBytes;/ ;" function 62 { MCGetCacheBytes MCGetTempBytes }	{ Assert BMFreeTag BMHeader BMLink BMNull BMUnlink BMUsedTag Card32 CheckBM CompactBM DebugAssert FGEnterMonitor FGExitMonitor MINBMALLOC MINBMFLUSH MaskRec PBMHeader PBMItem PSFlushMasks bmFree bmSize bmUsed free header integer max mcdebug mchange os_eprintf register true }
BMClass		include/bitmap.h	/^typedef struct _BMClass {/ ;" typedef 30 { BM34New BM38New LBMInitClassVars LBMNewFromData LCopyBitsFrom MP12New MPPromoteWindow bm12 bm18 bm34 bm38 bmClass bm_composite bm_convertFrom bm_free bm_makePublic bm_mark bm_new bm_newAlpha bm_offset bm_sizeBits bm_sizeInfo localBM mp12 }	{ }
BMCompOp		include/bitmap.h	/^typedef struct _BMCompOp {/ ;" typedef 15 { BM34ConvertFrom BM38ConvertFrom BPCopyBitsFrom LCopyBitsFrom MPComposite }	{ }
BMComposite34		bitmap/bm34comp.c	/^void BMComposite34(RectOp *ro)/ ;" function 326 { BM34Composite }	{ ADDC ALPHA BM34MoveRect CLEAR COLOR COPY CantHappen DATOP DIN DISSOLVE DOUT DOVER HIGHLIGHT LOOP32 MUL NEGALPHA PLUSD PLUSL SATOP SIN SOUT SOVER XOR d register s volatile }
BMComposite38		bitmap/bm38comp.c	/^void BMComposite38(RectOp *ro)/ ;" function 323 { BM38Composite }	{ ADDC ALPHA CLEAR COLOR COPY CantHappen DATOP DIN DISSOLVE DOUT DOVER HIGHLIGHT LOOP32 MUL NEGALPHA PLUSD PLUSL SATOP SIN SOUT SOVER XOR d register s volatile }
BMCompositeShortcut		bitmap/bitmap.c	/^const char BMCompositeShortcut[NCOMPOSITEOPS][2][2/ ;" global 17 { BM34Composite BM38Composite }	{ }
BMFree		bitmap/bitmap.c	/^static void BMFree(Bitmap *bm)/ ;" function 4 { BMInitClassVars MCFreeBytes }	{ free }
BMFreeHeader		device/maskcache.h	/^typedef struct {	\/* header for free list entries i/ ;" typedef 5 { }	{ }
BMFreeTag		device/maskcache.h	/^#define BMFreeTag 0/ ;" macro 1 { BMAlloc BMFree BMUnlink CheckBM CompactBM InitMaskCache Length }	{ }
BMHeader		device/maskcache.h	/^typedef union {/ ;" typedef 4 { BMAlloc CheckBM CompactBM Data GrowBM Header InitMaskCache MCFreeBytes MINBMALLOC ShrinkBM }	{ }
BMInitClassVars		bitmap/bitmap.c	/^static void BMInitClassVars(BMClass *class)/ ;" function 6 { }	{ BMFree Bitmap }
BMItem		device/maskcache.h	/^typedef struct _t_BMItem {/ ;" typedef 4 { MINBMALLOC }	{ }
BMLink		device/maskcache.c	/^private procedure BMLink(item) register PBMItem it/ ;" function 7 { BMAlloc BMFree CompactBM }	{ BMNull bmFree }
BMNew		bitmap/bitmap.c	/^static Bitmap *BMNew(BMClass *class, Bounds *b, in/ ;" function 15 { }	{ Bitmap NX_OTHERBMTYPE }
BMNull		device/maskcache.h	/^#define BMNull (PBMItem)(NULL)/ ;" macro 1 { BMAlloc BMLink BMUnlink CheckBM CompactBM MCGetCacheBytes MCGetTempBytes }	{ NULL PBMItem }
BMPinnedTag		device/maskcache.h	/^#define BMPinnedTag 2/ ;" macro 1 { BMFree CheckBM CompactBM MCGetTempBytes }	{ }
BMRun		fonts/fontbuild.c	/^private procedure BMRun (fd, pcn, s, privdict)/ ;" function 101 { ChrMapBuildChar PSBMRun }	{ Cd Component DEVGRAY_COLOR_SPACE F2RMetrics FMetrics GetMetrics GetMetrics2 GetStdByte GetStream ImageInternal InvlFont Known LStmObj Length ModifyCachingParams Mtx NIL NULL Object PStmBody PccCount RMetrics RangeCheck Scal SetCchDevice Stm StmBody StmRec boolean cdevprocname d fMetrics false integer level real register s stmObj strObj strStmProcs string true }
BMUnlink		device/maskcache.c	/^private procedure BMUnlink(item) register PBMItem / ;" function 14 { BMAlloc BMFree }	{ BMFreeTag BMNull DebugAssert PBMItem bmFree free header register }
BMUsedHeader		device/maskcache.h	/^typedef struct {	\/* header for mask entries in the/ ;" typedef 5 { }	{ }
BMUsedTag		device/maskcache.h	/^#define BMUsedTag 1/ ;" macro 1 { BMAlloc BMFree CheckBM CompactBM GrowBM InitMaskCache ShrinkBM }	{ }
BM_BITMAPSRC		include/bitmap.h	/^#define BM_BITMAPSRC 1/ ;" macro 1 { BM34Composite BM34ConvertFrom BM38Composite BM38ConvertFrom BPCopyBitsFrom LCopyBitsFrom MP12Composite MPComposite }	{ }
BM_NOSRC		include/bitmap.h	/^#define BM_NOSRC 0/ ;" macro 1 { BM34Composite BM38Composite MPComposite }	{ }
BM_PATTERNSRC		include/bitmap.h	/^#define BM_PATTERNSRC 2/ ;" macro 1 { BM34Composite BM38Composite BPCopyBitsFrom MP12Composite MPComposite }	{ }
BOOLEANTYPE		language/opcodes.h	/^#define BOOLEANTYPE		7/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
BOSHeader		language/scanner.h	/^typedef struct {/ ;" typedef 5 { ReadBinObjSeq WriteObject }	{ }
BOVRcmd		fonts/fontbuild.c	/^#define BOVRcmd	28/ ;" macro 1 { BuildChar CCRunStd }	{ }
BObject		language/scanner.h	/^typedef struct {	\/* binary object, as defined by l/ ;" typedef 6 { BinObjInit }	{ }
BPAdjust		bintree/bitpiece.c	/^void BPAdjust(BitPiece *bp, short dx, short dy)/ ;" function 63 { }	{ BACKCHAN BAGCompositeFrom BAGDelete BAGFind BITPIECE CompositeOperation DebugAssert LRedraw NONRETAINED NULL NXBag OFFSETBOUNDS REDRAW_CHANGED VISCHAN VISIBLE copyCO }
BPAllocBag		bintree/bitpiece.c	/^void BPAllocBag(BitPiece *bp)/ ;" function 9 { LNewAt }	{ BACKCHAN BAGFind NULL }
BPApplyBounds		bintree/bitpiece.c	/^void BPApplyBounds(BitPiece *bp, Bounds *bounds, v/ ;" function 8 { }	{ Bounds BoundsBundle data register sectBounds }
BPApplyBoundsProc		bintree/bitpiece.c	/^void BPApplyBoundsProc(BitPiece *bp, Bounds *bound/ ;" function 5 { }	{ data }
BPApplyProc		bintree/bitpiece.c	/^void BPApplyProc(BitPiece *bp, void (*proc)())/ ;" function 4 { }	{ }
BPBecomeDivAt		bintree/bitpiece.c	/^DivPiece *BPBecomeDivAt(BitPiece *bp, int coord, u/ ;" function 5 { DPRevealInside }	{ BITPIECE BPDivideAt DebugAssert NOREASON }
BPCHAN		include/bintree.h	/^#define BPCHAN		 0	\/* BitPiece channel *\// ;" macro 1 { BPCompositeFrom BPCompositeTo BPMark BPRenderInBounds CopyOffscreen CopyOnscreen LInitPage LMark }	{ }
BPCompositeFrom		bintree/bitpiece.c	/^void BPCompositeFrom(CompositeOperation *cop)/ ;" function 83 { }	{ A_BITS BACKCHAN BAGCompositeFrom BITPIECE BPCHAN BitPiece Bounds COPY CantHappen DIVPIECE DPCompositeTo DebugAssert NONRETAINED NXBag OFFSETBOUNDS PATTERN RETAINED VISCHAN VISIBLE flushCo os_fprintf os_stderr withinBounds }
BPCompositeTo		bintree/bitpiece.c	/^void BPCompositeTo(CompositeOperation *cop)/ ;" function 61 { }	{ A_BITS BACKCHAN BAGCompositeFrom BITPIECE BPCHAN BitPiece COPY CantHappen DIVPIECE DPCompositeFrom DebugAssert NONRETAINED NULL OFFSETBOUNDS RETAINED VISCHAN VISIBLE flushCo os_fprintf os_stderr withinBounds }
BPCopy		bintree/bitpiece.c	/^BitPiece *BPCopy(BitPiece *frombp)/ ;" function 10 { BPDivideAt DPRevealInside }	{ BAGDup BITPIECE BitPiece DebugAssert bitPiecePool os_newelement }
BPCopyBitsFrom		bintree/bitpiece.c	/^void BPCopyBitsFrom(BitPiece *bp, Bounds *bounds, / ;" function 46 { LCopyBitsFrom }	{ A_BITS BACKCHAN BMCompOp BM_BITMAPSRC BM_PATTERNSRC Bitmap CBStruct Cleanup NONRETAINED NULL RETAINED VISCHAN bm_composite bm_convertFrom bm_delete bm_makePublic data sectBounds }
BPCopyback		bintree/bitpiece.c	/^void BPCopyback(BitPiece *bp)/ ;" function 28 { BPObscureBecause BPObscureInside LPromoteLayer LSetAlphaBits LSetDepthLimit LSetType }	{ BACKCHAN BAGCompositeFrom BITPIECE BPCopybackBounds CompositeOperation DebugAssert VISCHAN VISIBLE copyCO }
BPCopybackBounds		bintree/bitpiece.c	/^static void BPCopybackBounds(Bounds *bounds, Compo/ ;" function 5 { BPCopyback }	{ BAGCompositeFrom }
BPDivideAt		bintree/bitpiece.c	/^DivPiece *BPDivideAt(BitPiece *bp, int coord, unsi/ ;" function 10 { BPBecomeDivAt BPObscureInside }	{ BITPIECE BPCopy DPNewAt DebugAssert MaxBound MinBound Piece p }
BPFindPieceBounds		bintree/bitpiece.c	/^Bounds *BPFindPieceBounds(BitPiece *bp, Point pt)/ ;" function 5 { }	{ BITPIECE DebugAssert }
BPFree		bintree/bitpiece.c	/^void BPFree(BitPiece *bp)/ ;" function 7 { }	{ BAGDelete BITPIECE DebugAssert bitPiecePool os_freeelement }
BPInitialize		bintree/bitpiece.c	/^void BPInitialize()/ ;" function 7 { LayerInit }	{ BACKCHAN BitPiece VISCHAN bitPiecePool copyCO flushCo os_newpool }
BPIsObscured		bintree/bitpiece.c	/^int BPIsObscured(BitPiece *bp)/ ;" function 5 { DPRevealInside }	{ BITPIECE DebugAssert OFFSCREEN }
BPMark		bintree/bitpiece.c	/^BitPiece *BPMark(BitPiece *bp, MarkRec *mrec, Boun/ ;" function 26 { LMark }	{ A_BITS BACKCHAN BAGCompositeFrom BITPIECE BPCHAN COPY DebugAssert Mark NONRETAINED RETAINED VISCHAN VISIBLE flushCo sectBounds }
BPNewAt		bintree/bitpiece.c	/^BitPiece *BPNewAt(NXBag *bag, int channel, Bounds / ;" function 17 { EXBuildExtents EXDummyScreens LNewAt }	{ BAGDup BITPIECE BitPiece bitPiecePool os_newelement }
BPObscureBecause		bintree/bitpiece.c	/^BitPiece *BPObscureBecause(BitPiece *bp, int cause/ ;" function 30 { BPObscureInside }	{ BACKCHAN BITPIECE BPCopyback CopybackRetained DebugAssert NXBag OFFSCREEN OFFSCREENREASON VISIBLE d hookData }
BPObscureInside		bintree/bitpiece.c	/^Piece BPObscureInside(BitPiece *bp, Bounds rect, i/ ;" function 40 { }	{ BBoxCompareResult BITPIECE BPCopyback BPDivideAt BPObscureBecause Bounds CopybackRetained DPObscureInside DebugAssert H ISCONVERTCAUSE IntersectAndCompareBounds Piece V deviceCause p }
BPP		devpattern/ims12d12notfr.c	/^#define BPP 2/ ;" macro 1 { ImS1XD11 SHIFTPIXEL }	{ }
BPPointScreen		bintree/bitpiece.c	/^void BPPointScreen(BitPiece *bp)/ ;" function 4 { LPlaceAt }	{ VISCHAN VISIBLE }
BPPrintOn		bintree/bitpiece.c	/^void BPPrintOn(BitPiece *bp, int blanks)/ ;" function 26 { }	{ BITPIECE DebugAssert OFFSCREEN VISIBLE os_fprintf os_stdout }
BPRenderInBounds		bintree/bitpiece.c	/^void BPRenderInBounds(BitPiece *bp, Bounds *bounds/ ;" function 20 { }	{ A_BITS BACKCHAN BAGCompositeFrom BPCHAN BoundsBundle COPY NONRETAINED RETAINED VISCHAN data flushCo sectBounds }
BPReplaceBits		bintree/bitpiece.c	/^void BPReplaceBits(BitPiece *bp)/ ;" function 4 { LPlaceAt }	{ BACKCHAN VISIBLE }
BPRevealBecause		bintree/bitpiece.c	/^BitPiece *BPRevealBecause(BitPiece *bp, int cause)/ ;" function 58 { BPRevealInside DPRevealInside }	{ BAGCompositeFrom BITPIECE CompositeOperation DebugAssert LRepaintIn NONRETAINED NXBag OFFSCREEN ONSCREENREASON VISCHAN VISIBLE copyCO d hookData os_fprintf os_stderr }
BPRevealInside		bintree/bitpiece.c	/^BitPiece *BPRevealInside(BitPiece *bp, Bounds rect/ ;" function 7 { }	{ BITPIECE BPRevealBecause DebugAssert ISCONVERTCAUSE TOUCHBOUNDS }
BPorC		mp/mp12.h	/^typedef enum {/ ;" typedef 3 { }	{ }
BRIEF		include/copyright.h	/^#define BRIEF 0/ ;" macro 1 { }	{ }
BROTZOFILL		graphics/pathpriv.c	/^#define BROTZOFILL 0/ ;" macro 1 { }	{ }
BRXCA		include/monitor.h	/^#define BRXCA 2		\/* channel B receive character av/ ;" macro 1 { }	{ }
BS		language/grammar.h	/^#define BS  '\\010'/ ;" macro 1 { }	{ }
BSLNcmd		fonts/fontbuild.c	/^#define BSLNcmd	26/ ;" macro 1 { BuildChar CCRunStd }	{ }
BSPCOND		include/monitor.h	/^#define BSPCOND 3	\/* channel B special receive con/ ;" macro 1 { }	{ }
BSTCHG		include/monitor.h	/^#define BSTCHG 1	\/* channel B external status chan/ ;" macro 1 { }	{ }
BTXBE		include/monitor.h	/^#define BTXBE 0		\/* channel B transmit buffer empt/ ;" macro 1 { }	{ }
BUFFERED		include/bintree.h	/^#define BUFFERED	 2/ ;" macro 1 { LAddToDirty LCompositeFrom LFill LFlushBits LInitPage LMark LPrintOn LSetType PSSetWindowType PSWindow WBCopyLayer }	{ }
BUFFERSOURCE		mp/moverect.c	/^#define BUFFERSOURCE(n, func) \\/ ;" macro 1 { MRMoveRect }	{ SBMA data moveLineDispatch moverectbuff }
BUFFERSOURCEHW		mp/moverect.c	/^#define BUFFERSOURCEHW(n, func) \\/ ;" macro 1 { MRMoveRect }	{ SBMA WCOPY WF4 data memoryOffsets moveLineDispatch moverectbuff mpAddr screenOffsets }
BUFSIZ		stodev/stodevfont.c	/^#define BUFSIZ 1024/ ;" macro 1 { FontReadAttr MPWUDReadAttr UDReadAttr UFFlush UFilBuf UFlsBuf }	{ }
BUF_SIZE		fonts/fontrun.c	/^#define BUF_SIZE 128/ ;" macro 1 { KACharDef KARdSubrsData }	{ }
BUILD_CROSSES		graphics/cscan.c	/^#define BUILD_CROSSES 0		\/* Return Cross Array dir/ ;" macro 1 { }	{ }
BUILTINKEY		fonts/fontbuild.h	/^#define BUILTINKEY 5839/ ;" macro 1 { KAPassword }	{ }
BandProc		include/devcreate.h	/^typedef PPixelBuffer (*BandProc)(\/*/ ;" typedef 1 { }	{ }
Bang		unix_product/unix.c	/^private character *Bang()/ ;" function 27 { PSUCall PSUClRead }	{ AryObj CloseFile FilterRegion GetStream NIL Object PopPArray PopPStream Stm StmObj TypeCheck VMCarCdr VMGetText character integer os_fileno strObj true }
Begin		language/dict.c	/^public procedure Begin(dict)  DictObj dict;/ ;" function 7 { BinObjInit CCRunStd ChrMapBuildChar ControlInit CreatePSContext DictInit ExecInit FontBuildInit FontCacheInit GetErosion Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 IniFmDevImpl InitMakeVM InitPostScript Init_Cmds Init_VM_Memory InternalBuildChar KAEndCSDict NameInit PSBegin PSEExec PSRegisterStatusDict StateInit UnixInit }	{ BumpCETimeStamp DPushP InvlAccess PDictObj XlatDictRef nAccess }
BeginFlush		product/event.c	/^static void BeginFlush()/ ;" function 4 { PSGetEvents }	{ currentPSContext scheduler true }
BeginParseArguments		vm/arguments.c	/^public procedure BeginParseArguments (argc, argv)/ ;" function 12 { GetCArg GetCSwitch Mnextmain }	{ CantHappen NIL argsUsed os_sureCalloc savedArgc savedArgv }
BezierDivide		graphics/pathops.c	/^#define BezierDivide(a0, a1, a2, a3, b0, b1, b2, b/ ;" macro 1 { FltnCurve }	{ MidPoint a0 }
BinObjInit		language/binaryobject.c	/^public procedure BinObjInit(reason)  InitReason re/ ;" function 58 { LanguageInit }	{ Assert BObject Begin End GetCArg Globals GlobalsRec InitBOSTypeMap LBoolObj MakeStr NIL Object RgstObject SWAPBITS UObject arrayObj bo_immEvalName bo_mark boolObj bt_objSeqHiIEEE bt_objSeqHiNative bt_objSeqLoIEEE bt_objSeqLoNative endswitch formatToType globals iLAryObj iLBoolObj iLGenericObj iLIntObj iLNameObj iLNullObj iLRealObj iLStrObj intObj nameObj nullObj os_eprintf os_sureCalloc rAccess realObj rootPrivate s strObj string vmShared }
BindArray		language/exec.c	/^public procedure BindArray(ao)/ ;" function 31 { BindArray BindPkdary PSBind }	{ AGetP APut BindArray BindPkdary Load Object Xobj arrayObj cardinal cmdObj integer nameObj pkdaryObj wAccess }
BindPkdary		language/packedarray.c	/^public procedure BindPkdary(pa)/ ;" function 46 { BindArray BindPkdary PSBind }	{ BindArray BindPkdary CantHappen CmdBase Code DecodeObj EncodeObj Load Object ObjectEscape PCard8 Xobj arrayObj charptr cmdObj nameObj p pkdaryObj wAccess }
Bit		include/windowdevice.h	/^#define Bit unsigned short/ ;" macro 1 { }	{ }
BitField		include/publictypes.h	/^typedef unsigned BitField;/ ;" typedef 1 { DoStrkPth InitClipPath InitPath ReducePathClipInt ReduceQuadPath SetupFntMtx }	{ }
BitPiece		bintree/bintreetypes.h	/^typedef struct _bitpiece   BitPiece;/ ;" typedef 1 { BPCompositeFrom BPCompositeTo BPCopy BPInitialize BPNewAt DPMark }	{ }
BitSpan		vm/abm.h	/^#define	BitSpan		8/ ;" macro 1 { ABM_Allocate ABM_AllocateVM ABM_BitsForBitmap AllocLarge AllocSmall ByteSpan FreeBytesBehindStack GC_MoveRecycleRange ResetSegFreePtr }	{ }
BitVector		include/basictypes.h	/^typedef Card32 BitVector;/ ;" typedef 1 { trytoload }	{ }
Bitmap		include/bitmap.h	/^typedef struct _Bitmap {/ ;" typedef 16 { BM34New BM34NewFromData BM38New BM38NewFromData BMInitClassVars BMNew BPCopyBitsFrom LBMBecomePSDevice LBMMakePublic LBMNew LBMNewFromData LCopyBitsFrom LNewAt MP12MakePublic MP12New MP12NewFromData MPComposite MPMark MPPromoteWindow bm__mark bm_becomePSDevice bm_composite bm_convertFrom bm_delete bm_dup bm_free bm_makePublic bm_mark bm_newAlpha bm_offset bm_sizeInfo }	{ }
Bitmap12		include/bitmap.h	/^typedef struct _Bitmap12 {/ ;" typedef 3 { }	{ }
Bitmap18		include/bitmap.h	/^typedef struct _Bitmap18 {/ ;" typedef 3 { }	{ }
Bitmap34		include/bitmap.h	/^typedef struct _Bitmap34 {/ ;" typedef 3 { }	{ }
Bitmap38		include/bitmap.h	/^typedef struct _Bitmap38 {/ ;" typedef 3 { }	{ }
BitmapByte		graphics/cscan.c	/^private procedure BitmapByte(val)/ ;" function 6 { PrintBitmap }	{ hexchars putc }
BitmapWidthsFID		fonts/fontspriv.h	/^#define BitmapWidthsFID(fid) (((fid)>>shiftFIDType/ ;" macro 1 { PreBuiltChar }	{ shiftFIDType useBitmapWidthsFID }
BitsForLength		language/opcodes.h	/^#define BitsForLength		5	\/* field size for length / ;" macro 1 { MAXArrayLength }	{ }
BitsForOffset		language/opcodes.h	/^#define BitsForOffset		11	\/* field size for offset/ ;" macro 1 { DecodeObj EncodeObj MAXOffset RelocateObj }	{ }
BitsInGenericGeneration		include/publictypes.h	/^#define	BitsInGenericGeneration	(32 - BitsInGeneri/ ;" macro 1 { MAXGenericIDGeneration }	{ BitsInGenericIndex }
BitsInGenericIndex		include/publictypes.h	/^#define	BitsInGenericIndex	10/ ;" macro 1 { BitsInGenericGeneration MAXGenericIDIndex }	{ }
BitsOrPatInfo		mp/mp12.h	/^typedef struct _bitsorpatinfo {/ ;" typedef 21 { MP12Composite SetUpSource }	{ }
BitsPerByte		vm/abm.h	/^#define	BitsPerByte	8/ ;" macro 1 { ABM_BytesForSize ABM_SetAllocated AllocSmall ByteSpan FreeBytesBehindStack ResetSegFreePtr }	{ }
BlackMasksMark		device/blackmask.c	/^void BlackMasksMark(DevMask *masks, int items, Mar/ ;" function 52 { IniFmDevImpl }	{ BlackMasksMarkReal LSHIFT PCard16 PMask PSCANTYPE RSHIFT SCANMASK SCANSHIFT SCANTYPE SCANUNIT data framebase framebytewidth framelog2BD integer source2bits uchar }
BlackMasksMarkReal		device/blackmask.c	/^public procedure BlackMasksMarkReal(masks, items, / ;" function 366 { BlackMasksMark }	{ Assert BANDMASKID DevMarkInfo DevPoint ExpandMask LSHIFT PCard16 PCard8 PMask PSCANTYPE RSHIFT SCANMASK SCANSHIFT SCANTYPE SCANUNIT boolean data devXAOffset false framebase framebytewidth framelog2BD integer register source2bits source4bits source8bits true until }
BlackRunMark		device/blackrun.c	/^public procedure BlackRunMark(run, args)/ ;" function 49 { IniFmDevImpl }	{ DevMarkInfo DevShort PSCANTYPE SCANSHIFT SCANTYPE data devXAOffset framebase framebytewidth framelog2BD integer leftBitArray lines register rightBitArray }
BlueLock		fonts/fontbuild.c	/^internal procedure BlueLock(yf, yn,/ ;" function 145 { ProcessGlbClrs RBLock }	{ Adjust Bpick CalcAnchGlbClrLocs CalcGlbClrLocs CalcHW2 FCd FRoundF Fixed FixedHalf FixedOne FntDTfmP FntITfmP FntTfmP IntX MAXBLUESHIFT NULL SetYLock UseStdWidth blueScale blueShiftStart boolean devsweven erosion false fixmul isoutline lenstdhw locktype os_labs register stdhw true }
BmALine		mp/funcline.c	/^#define BmALine(wf)						\\/ ;" macro 1 { }	{ LineOperation data s uint }
BmRLine		mp/funcline.c	/^#define BmRLine(wf)						\\/ ;" macro 1 { }	{ LineOperation MP12LOG2BD MP12SCANUNIT data s uint }
BmULine		mp/funcline.c	/^#define BmULine(wf)						\\/ ;" macro 1 { }	{ LineOperation MP12LOG2BD MP12SCANUNIT data uint }
BoolObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 36 { }	{ }
BooleanBase		language/opcodes.h	/^#define BooleanBase	(IntegerBase+IntegerCodes)	\/* / ;" macro 1 { DecodeObj EncodeObj RelPkdary RelocateObj }	{ IntegerBase IntegerCodes }
BooleanCodes		language/opcodes.h	/^#define	BooleanCodes	2/ ;" macro 1 { RelPkdary }	{ }
BoostBotLocs		fonts/fontbuild.c	/^internal procedure BoostBotLocs(botLocs, lenBotBan/ ;" function 18 { BuildChar CCRunStd }	{ Bpick Fixed FixedHalf FixedOne IntX locktype os_labs register }
Bounds		include/bintree.h	/^typedef struct _bounds {/ ;" typedef 3 { BAGCompositeFrom BPApplyBounds BPCompositeFrom BPObscureInside CheckShield CompositePriv CompositeRun CompositeTraps DPRevealInside GlobalToLocal LAddToDirty LAddToInstance LCompositeFrom LCopyContents LFill LMark LMoveTo LNewAt LObscureInside LPlaceAt LRedraw LRemoveFromInstance LRevealInside LocalToGlobal MP12New MPDisplayCursor16 MPDisplayCursor2 MPRemoveCursor16 MPRemoveCursor2 PSAdjustMouse PSBaseToCurrent PSBaseToScreen PSCurrentToBase PSCurrentToScreen PSCurrentWindowBounds PSHideInstance PSMoveWindow PSPlaceWindow PSReadImage PSScreenToCurrent PSSetMouse PSSetNRect PSSizeImage PSWindow RecalcMouseRect SanityCheck ScreenToBase SetGSCursor WBChangeBitmap WBCopyLayer WBGetBitmap WBGetDeviceInfo WBMarkBitmap WBOpenBitmap }	{ }
BoundsBundle		bintree/bintreetypes.h	/^typedef struct {/ ;" typedef 5 { BPApplyBounds BPRenderInBounds }	{ }
BoundsCompare		device/devbounds.c	/^public BBoxCompareResult BoundsCompare(figb, clipb/ ;" function 11 { FastRectFill FloatRectFill IntersectDP Mark MultiRectFill PSRectFill PointInDevPrim ShowMask }	{ }
BoundsFromIPrim		bintree/bounds.c	/^void BoundsFromIPrim(DevPrim *ip, Bounds *b)/ ;" function 17 { LMark }	{ }
BoxTrapCompare		graphics/maketrap.c	/^public BBoxCompareResult BoxTrapCompare(figbb, cli/ ;" function 97 { ClipTrapsRunDispatch ClipTrapsStringDispatch EnclosesRect IntersectDP LBMMark TrapTrapDispatch }	{ BBoxCompareResult CopyTrimmedEdge register }
Bpick		fonts/fontbuild.c	/^#define Bpick(cd) ((locktype < 0) ? cd.x : cd.y)/ ;" macro 1 { AdjustBlues BlueLock BoostBotLocs PrintBlueLocs }	{ locktype }
BreakLooseCV		postscript/contextimpl.c	/^private procedure BreakLooseCV(ctx) PSContext ctx;/ ;" function 11 { PSWait WaitOnJoinable }	{ NIL PSContext }
BreakLooseLK		postscript/contextimpl.c	/^private procedure BreakLooseLK(ctx) PSContext ctx;/ ;" function 11 { AcquireLock }	{ NIL PSContext }
BreakUpPath		graphics/pathops.c	/^public procedure BreakUpPath(pathproc,path,bool,us/ ;" function 93 { Fill FillUserPath PSUStroke Stroke }	{ BBCompare BBoxRec Cd ConvertToListPath DTfmPCd PUserPathContext PathType TlatBBox TlatPath UOffset chunkBBox gs maxXChunk maxYChunk os_labs strokeOp xChunkOffset xaOffset yChunkOffset }
BresenhamMT		graphics/maketrap.c	/^BresenhamMT(x, y, dx, dy) \/* always gives Closed r/ ;" function 105 { FF_Vector VecStrkTrp }	{ Assert DevPrim DevTrap EdgeInit FTrunc FixInt Fixed HALF OKTrap ONE boolean false integer lines lowpart max ms os_labs register xaOffset }
Bubble		graphics/fastfillquad.c	/^#define Bubble(qcp1,qcp2) if (qcp1->c.y > qcp2->c./ ;" macro 1 { FastFillQuad }	{ PQdCorner integer }
BufItem		language/stodevedit.c	/^typedef struct _BufItem {/ ;" typedef 5 { LineEdit LineFAvail LineFClose LineFilBuf LineUnGetc Truncate }	{ }
BuildChar		fonts/fontbuild.c	/^public boolean BuildChar(c,pcn) integer c; PObject/ ;" function 73 { ShowByName }	{ BCcmdName CHRMAPtype ChrMapBuildChar CmdObj Cnct Code DURING DictGetP DictObj ECHRMAPtype ENCRPTFILEtype ENCRPTVMtype END_HANDLER GRstr GSave HANDLER IntObj InternalBuildChar InvlFont Mtx NIL NewPath Object PAryToMtx PSFILEtype PSVMtype PushInteger PushP SetAbort boolean false fntypname fontDict fontSemaphore gs intObj integer matrixname ss true }
BuildCxtn		graphics/cscan.c	/^private Cxtn BuildCxtn(cleft, x, deleted)/ ;" function 147 { GetRuleDesc }	{ BADCXTN CrossPtr Cxtn DEBUGERROR Fixed IntX MAXFixed MINFixed NOCXTN NULL PathCross Pixel REG ScanLineCxtn YCROSS boolean false true }
BuildEdge		graphics/qreducer.c	/^private Edge BuildEdge(fx0, fy0, fx1, fy1) Fixed f/ ;" function 91 { QFNewPoint QNewPoint QRdcClose }	{ Edge FTrunc FixOne Fixed HighMask LimitCheck NIL boolean edgemaxx edgemaxy edgeminx edgeminy endEdgeArray false fixmul freeEdge os_labs r register right s true }
BuildGlbCntrs		fonts/fontbuild.c	/^private procedure BuildGlbCntrs() {/ ;" function 13 { ProcessGlbClrs }	{ EnterGlbCntr Fixed PGlbClr boolean glbClrLst register }
BuildGrayPattern		devpattern/graypattern.c	/^private procedure BuildGrayPattern(/ ;" function 96 { SetupGrayPattern }	{ AllocPatternStorage CantHappen Card8 GCD LSHIFT MAXCOLOR MakeConstValue SCANTYPE SCANUNIT boolean data deepPixOneVals false integer maxPatternSize register start true }
BuildInitialRuns		graphics/cscan.c	/^private procedure BuildInitialRuns(offset)/ ;" function 59 { CScan }	{ CrossPtr DEBUGERROR FRound Fixed Int16 IntX NULL Pixel REG SlopesArray YCROSS true xBoxMax xBoxMin yBoxMax yBoxMin }
BuildInitialState		postscript/postscript.c	/^private procedure BuildInitialState (vmStm)/ ;" function 41 { InitPostScript }	{ CantHappen CheckVersion CreateSharedVM EXPORT GetCSwitch LANGUAGE_LEVEL NIL PREFERREDALIGN SWAPBITS StartVM fclose os_fprintf os_stderr vISP vLANGUAGE_LEVEL vOS vPREFERREDALIGN vSTAGE vSWAPBITS }
BuildMultiRectPath		graphics/rect.c	/^public procedure BuildMultiRectPath()/ ;" function 83 { PSRectClip PSRectFill PSRectStroke PSRectViewClip }	{ Cd ClosePath LineTo MoveTo NewPath NumStrm Object PMtx PObject PPath PopP RealLt0 SetupNumStrm TfmPCd TypeCheck arrayObj boolean false gs intObj integer pkdaryObj procedure real realObj register strObj true }
BuildPathFreeList		graphics/pathbuild.c	/^private procedure BuildPathFreeList() {/ ;" function 11 { AddToPath PathBuildInit }	{ NEW NULL PPthElt PthElt integer pathFree register }
BuildPattern		devpattern/grypat4of4.c	/^private procedure BuildPattern(/ ;" function 90 { Gry4Of4Setup }	{ AllocPatternStorage CantHappen Card8 GCD LSHIFT MAXCOLOR SCANTYPE boolean data deepPixOneVals false integer maxPatternSize pixVals register start true }
BuildRelocationTable		vm/makevm.c	/^private procedure BuildRelocationTable ()/ ;" function 65 { WriteRelocatedVMToFile WriteVMToFile }	{ Assert HASHSIZE MarkObject NEW NIL PCard8 PRelocationEntry PackedArrayRelocator RAISE RelocateFinalizeChain Relocate_Names Relocate_Shared_Root RelocationEntry ScanFromAry ScanFromDict ScanNameArray ecLimitCheck fflush mark os_printf os_stdout os_sureCalloc os_sureMalloc relocationTable relocationTableLimit relocationTableSize rootShared true }
BuildRunIndex		device/qintersect.c	/^public procedure BuildRunIndex(r) DevRun *r; {/ ;" function 16 { AddRunIndexes RunRunClipCallBack }	{ BytesForRunIndex DevShort INDXMASK NULL PInt16 data p r register }
BuildSegmentTable		vm/vm_relocate.c	/^public procedure BuildSegmentTable(rombase, rambas/ ;" function 58 { StartVM WriteRelocatedVMToFile WriteVMToFile }	{ CantHappen Card32 DebugAssert NIL PCard8 PSegmentTable PVMSegment SegmentTable boolean doTarget free level os_sureMalloc segmentTable stPermanentRAM stROM stVolatileRAM vPREFERREDALIGN vmShared }
BuildYCross		graphics/cscan.c	/^private boolean BuildYCross()/ ;" function 68 { CScan }	{ Cross CrossPtr Int32 IntX MEMZERO MINFixed NULL OutOfMemory Pixel REG SubtractPtr YCROSS currentCross false firstCross limitCross true yBoxMax yBoxMin yCross yCrossZero yMax yPathMax yPathMin }
BumpCETimeStamp		language/dict.c	/^private procedure BumpCETimeStamp()/ ;" function 12 { Begin CopyTrickyDict End }	{ MAXGenericIDGeneration ResetNameCache integer timestamp }
ByteSpan		vm/abmimpl.c	/^#define	ByteSpan	(BitsPerByte * BitSpan)/ ;" macro 1 { AllocLarge AllocSmall ResetSegFreePtr }	{ BitSpan BitsPerByte }
BytefromString		fonts/compshow.c	/^#define BytefromString(A,E) VMGetChar(A,(cardinal)/ ;" macro 1 { }	{ VMGetChar cardinal }
BytesForMTPE		fonts/fontspriv.h	/^#define BytesForMTPE(n) (((n)+1)>>1)/ ;" macro 1 { CheckCompositeFont MakeCompFont }	{ }
BytesForMask		device/framemaskdev.c	/^private integer BytesForMask (width, height, maskI/ ;" function 4 { FmMakeMaskDevice }	{ SCANTYPE SCANUNIT }
BytesForRunIndex		device/qintersect.c	/^public integer BytesForRunIndex(r) DevRun *r; {/ ;" function 4 { BuildRunIndex }	{ DevShort INDXMASK INDXSHFT r }
BytesInSeg		fonts/fontrun.c	/^#define BytesInSeg(stm) *(long int *)&(stm)->data./ ;" macro 1 { ComStmFRead ComStmFilBuf ComStmUnGetc CreateFilterStm KACharDef OCFetchFromDisk ReadSegHeader }	{ data }
C1		fonts/fontbuild.c	/^#define C1 ((Card16) 52845)/ ;" macro 1 { Decrypt Encrypt Rnum8 }	{ Card16 }
C1o		fonts/fontbuild.c	/^#define C1o 16477/ ;" macro 1 { PSeCCRun }	{ }
C2		fonts/fontbuild.c	/^#define C2 ((Card16) 22719)/ ;" macro 1 { Decrypt Encrypt Rnum8 }	{ Card16 }
C2o		fonts/fontbuild.c	/^#define C2o 21483/ ;" macro 1 { PSeCCRun }	{ }
CACHEIMPL_H		fonts/cacheimpl.h	/^#define	CACHEIMPL_H/ ;" macro 1 { }	{ }
CACHESIZE		device/nextprebuilt.c	/^#define CACHESIZE 4/ ;" macro 1 { IniPreBuiltChars }	{ }
CACHE_H		fonts/cache.h	/^#define	CACHE_H/ ;" macro 1 { }	{ }
CANREVERSEVM		vm/vm_reverse.h	/^#define CANREVERSEVM (OS==os_sun && STAGE==DEVELOP/ ;" macro 1 { }	{ DEVELOP os_sun }
CAN_WRITE_OBJ		vm/makevm.c	/^#define CAN_WRITE_OBJ (OS==os_sun && STAGE==DEVELO/ ;" macro 1 { }	{ DEVELOP os_sun }
CAPOVResc		fonts/fontbuild.c	/^#define CAPOVResc 23/ ;" macro 1 { CCRunStd }	{ }
CAST		vm/gcinternal.h	/^#define	CAST(value, type)	((type)(value))/ ;" macro 1 { ABM_SetAllocated AddProcToList AllocLarge AllocSmall CreateStack GCDATA GCInternal_AllocStack GCInternal_GrowStack GCInternal_VMChange InSegment PSTrashVM TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
CAT		include/environment.h	/^#define CAT(a,b) a##b/ ;" macro 1 { ENTRY }	{ }
CBStruct		bintree/bintreetypes.h	/^typedef struct {/ ;" typedef 4 { BPCopyBitsFrom LCopyBitsFrom }	{ }
CBcmd		fonts/fontbuild.c	/^#define CBcmd	0/ ;" macro 1 { BuildChar CCRunStd }	{ }
CCBMRun		fonts/fontbuild.c	/^private procedure CCBMRun(proc) PVoidProc proc; {/ ;" function 22 { PSBMRun PSCCRun PSeCCRun }	{ AGetP DictGetFontP DictGetP DictObj InvlFont Object PopInteger PopP PopPDict cardinal character dictObj encname nullObj prvtnm s }
CCBuild		fonts/fontbuild.c	/^private PCCInfo CCBuild(pcn, p,fd,sbx,cpx,cpy,swva/ ;" function 71 { BuildChar CCRunStd }	{ CCInfo F2RMetrics FTrunc Fixed FontEncode GetFontBBox MIN ModifyCachingParams NEW NULL Object PCCInfo PFCdToPRCd PccCount RCd RMetrics SetCchDevice SysDictGetP VecSub fixtopflt hasCDevProc integer p register stdencname stdencvec }
CCInfo		fonts/fontbuild.c	/^typedef struct{/ ;" typedef 6 { CCBuild }	{ }
CCRun		fonts/fontbuild.c	/^private procedure CCRun(fd, pcn, s, privdict)/ ;" function 42 { ChrMapBuildChar InternalBuildChar PSCCRun PSeCCRun }	{ CCRunStd Cnct DURING DictGetP END_HANDLER FREE GRstr GSave HANDLER MoveTo MtxInvert NIL Object PAryToMtx PCCInfo PccCount RCd RERAISE SimpleShowByName TfmP fpZero gs matrixname s }
CCRunStd		fonts/fontbuild.c	/^private PCCInfo CCRunStd(fd,pcn,s,privdict)/ ;" function 845 { CCRun }	{ Arc BLUESCALE Begin BoostBotLocs CSClose Card16 CheckBlueScale Code DURING DictGetP DictPut END_HANDLER End FCd FFCurveTo FMetrics FRound FTrunc FTruncF FamilyBlueLocs Fill FixInt Fixed FixedOne FixedValue FntIDTfmP ForceAGetP ForceGetP ForceKnown FrPth FudgeBlueBands GRstr GSave GetBlueValues GetErosion GetFromPrivDict GetMetrics GetMetrics2 GetMtxInfo GetStandardWidths GetStemWidth GetStream GetWeightVector HANDLER ITfmP IntX InvlFont Known LIntObj MAX MIN NIL NULL NewPath Object OffsetFill PCCInfo PFCd PFixed PS_ERROR (etc) }
CCesc		fonts/fontbuild.c	/^#define CCesc 6/ ;" macro 1 { BuildChar CCRunStd }	{ }
CDist		graphics/pathbuild.c	/^public real CDist(v)  Cd v; {/ ;" function 6 { }	{ fpTwo max os_fabs real }
CDistFixed		graphics/pathpriv.c	/^private Fixed CDistFixed(a)  FCd a;/ ;" function 7 { OFIntersect }	{ Fixed max os_labs }
CENTRONICS		include/package_specs.h	/^#define CENTRONICS	"centronics.h"/ ;" macro 1 { }	{ }
CExec		language/exec.c	/^private procedure CExec() {execAbort = PS_DONE; ex/ ;" function 1 { ExecInit }	{ PS_DONE execAbort execAbortPending }
CHARMAP_LEN		fonts/fontrun.c	/^#define CHARMAP_LEN 7/ ;" macro 1 { KAEndCSDict }	{ }
CHECKOKBUILD		fonts/fontbuild.c	/^#define CHECKOKBUILD (false) \/* OkToBuild must be / ;" macro 1 { }	{ false }
CHECKOPEN		mousekeyboard/routines.c	/^#define CHECKOPEN() if (!evp) return/ ;" macro 1 { }	{ evp }
CHECKRUNBUFF		graphics/cscan.c	/^#define CHECKRUNBUFF() \\/ ;" macro 1 { ReturnBits }	{ GrowRunBuff }
CHORDTHRESHOLD		graphics/stroke.c	/^#define CHORDTHRESHOLD (0.9) \/* greater than 0.25 / ;" macro 1 { GetMaxBevelChord }	{ }
CHRMAPtype		fonts/fontspriv.h	/^#define CHRMAPtype 5/ ;" macro 1 { BuildChar ChrMapBuildChar }	{ }
CHUNKSIZE		graphics/path.h	/^#define CHUNKSIZE 224L  \/* Not a convenient number/ ;" macro 1 { SetXABounds XA_MAX XA_MIN }	{ }
CI		fonts/cicache.c	/^public PCIItem CI, CIEnd;/ ;" global 1 { CIAlloc CIFree CheckCI CompositeShow DeleteCIs FastShow FasterShow FindInCache FlushMID FontDiskInit GetFlushArgs InitFontCache IsConnected PSFlushMasks PurgeCI ReleaseCI RelinkCIItem ShowByName SortCharAges TrimCI UnlinkCI forallCI pCIs }	{ }
CIAlloc		fonts/cicache.c	/^public CIOffset CIAlloc() {/ ;" function 18 { PreBuiltChar SetupMaskDev }	{ Assert CI CIFreeHead CINULL CIOffset CISortedEnd CISortedList PCIItem TrimCI allocmem fcData freemem register }
CIELAB_COLOR_SPACE		include/devicetypes.h	/^#define CIELAB_COLOR_SPACE -5/ ;" macro 1 { ImageDict PopColorValues }	{ }
CIELIGHTNESS_COLOR_SPACE		include/devicetypes.h	/^#define CIELIGHTNESS_COLOR_SPACE -4/ ;" macro 1 { PopColorValues TableSampleProc }	{ }
CIEnd		fonts/cicache.c	/^public PCIItem CI, CIEnd;/ ;" global 1 { InitFontCache forallCI }	{ }
CIFor		language/exec.c	/^private procedure CIFor()/ ;" function 18 { ExecInit }	{ EPopInteger EPopP EPushInteger EPushP ETopP Object PushInteger integer intforcmd }
CIFree		fonts/cicache.c	/^public procedure CIFree(c)/ ;" function 24 { CleanShowState PurgeCI ReleaseCI ShowByName }	{ Assert CI CIFreeHead CINULL CISortedEnd CISortedList CIUNLINKED CN MIDNULL NIL PCIItem fcData freemem register }
CIFreeHead		fonts/cicache.c	/^public CIOffset CIFreeHead, CISortedList, CISorted/ ;" global 1 { CIAlloc CIFree InitFontCache }	{ }
CIItem		include/graphics.h	/^typedef struct _t_CIItem {		\/* Cache Item *\// ;" typedef 11 { FasterShow InitFontCache StartCache }	{ }
CINULL		include/graphics.h	/^#define CINULL 0/ ;" macro 1 { CIAlloc CIFree CheckCI CleanShowState CompositeShow DeleteCIs FastShow FindInCache FlushMID FontShowInit InitFontCache IsCleanShowState IsConnected IsFreeCI IsNonNull IsNull PSFlushMasks PurgeCI RelinkCIItem ShowByName SortCharAges TrimCI UnlinkCI pCIs }	{ }
CIOffset		include/graphics.h	/^typedef	Card16	CIOffset;/ ;" typedef 1 { CIAlloc CheckCI CompositeShow DeleteCIs FSInit FastShow FasterShow FindInCache FlushMID PSFlushFontCache PSFlushMasks PurgeCI PurgeMID ShowByName SortCharAges TrimCI UnlinkCI pCIs }	{ }
CIRCMASKMAX		graphics/ucache.c	/^#define CIRCMASKMAX (32)/ ;" macro 1 { EnterMask FlushCircle FreeCircles FreeStrokeCircle IniUCache }	{ }
CISize		fonts/cicache.c	/^public integer CISize;/ ;" global 1 { InitFontCache PSCacheStatus TrimCI }	{ }
CISortedEnd		fonts/cicache.c	/^public CIOffset CIFreeHead, CISortedList, CISorted/ ;" global 1 { CIAlloc CIFree RelinkCIItem SortCharAges }	{ }
CISortedList		fonts/cicache.c	/^public CIOffset CIFreeHead, CISortedList, CISorted/ ;" global 1 { CIAlloc CIFree CheckCI DeleteCIs FlushMID PSFlushMasks RelinkCIItem SortCharAges TrimCI }	{ }
CIUNLINKED		include/graphics.h	/^#define CIUNLINKED MAXCard16/ ;" macro 1 { CIFree CheckCI IsAllocatedCI IsFreeCI IsNormalCI IsReleasedCI UnlinkCI }	{ MAXCard16 }
CItype		include/graphics.h	/^typedef BitField CItype; \/* type of storage curren/ ;" typedef 1 { }	{ }
CLEAR		include/bintree.h	/^#define CLEAR		0	\/* Clear destination *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
CLOCK		include/package_specs.h	/^#define CLOCK		"clock.h"/ ;" macro 1 { }	{ }
CLoop		language/exec.c	/^private procedure CLoop()/ ;" function 6 { ExecInit }	{ IPush execStk loopcmd }
CMDTYPE		language/opcodes.h	/^#define CMDTYPE			4/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
CMYKConstColorSetup		devpattern/colorpattern.c	/^private procedure CMYKConstColorSetup(h, markInfo,/ ;" function 19 { ConstCMYKPattern }	{ ColorPatHandle DevColorVal PatternData SCANTYPE data integer start true }
CN		fonts/cicache.c	/^public PNameEntry *CN;/ ;" global 1 { CIFree CheckCI FontDiskInit GetFlushArgs InitFontCache IsAllocatedCI IsFreeCI IsNormalCI IsReleasedCI ShowByName UnlinkCI }	{ }
COLOR		bitmap/bm34comp.c	/^#define COLOR(s)	((s) & RGBMASK)/ ;" macro 1 { BMComposite34 BMComposite38 }	{ s }
COMPOSEDtype		fonts/fontspriv.h	/^#define COMPOSEDtype 0/ ;" macro 1 { CheckCompositeFont FDNestedDepth InvalidateCachedMIDs MakeCompFont MakeFont MinEncodingLength PSDefineFont SetFont }	{ }
COMPRESSED		fonts/fontrun.h	/^#define COMPRESSED 1/ ;" macro 1 { }	{ }
CONSTSOURCE		mp/moverect.c	/^#define CONSTSOURCE(n, val) \\/ ;" macro 1 { MRMoveRect }	{ NULL SCON WCOPY data moveLineDispatch }
CONTROLLER		include/package_specs.h	/^#define CONTROLLER	"controller.h"/ ;" macro 1 { }	{ }
CONTROLLER_DEFS		include/controller.h	/^#define CONTROLLER_DEFS GARNET/ ;" macro 1 { }	{ }
CONTROLLER_H		include/controller.h	/^#define	CONTROLLER_H/ ;" macro 1 { }	{ }
CONVERT16TO32		bitmap/bm38conv.c	/^#define CONVERT16TO32(R,V)\\/ ;" macro 1 { BM38Convert16to32 }	{ V }
CONVERT16TO8		mp/mpconv12.c	/^#define CONVERT16TO8(V,R) \\/ ;" macro 1 { MP12Convert16to2 }	{ MASKB34 MASKG34 MASKR34 V }
CONVERT32TO8		mp/mpconv12.c	/^#define CONVERT32TO8(V,R) \\/ ;" macro 1 { MP12Convert32to2 }	{ MASKB38 MASKG38 MASKR38 V }
COPY		include/bintree.h	/^#define COPY		1	\/* Copy source to destination *\// ;" macro 1 { BAGCompositeFrom BM34Composite BM34ConvertFrom BM38Composite BM38ConvertFrom BMComposite34 BMComposite38 BPCompositeFrom BPCompositeTo BPMark BPRenderInBounds LCompositeFrom LCopyBitsFrom LCopyContents LFill MPComposite copyCO }	{ }
COPYRIGHT		include/package_specs.h	/^#define COPYRIGHT	"copyright.h"/ ;" macro 1 { }	{ }
COROUTINE		include/package_specs.h	/^#define COROUTINE	"coroutine.h"/ ;" macro 1 { }	{ }
COROUTINESTACKSIZE		product/ipcscheduler.c	/^#define	COROUTINESTACKSIZE 32700 \/* Max stack usag/ ;" macro 1 { CreateTypedContext SchedulerInit }	{ }
COROUTINE_H		include/coroutine.h	/^#define	COROUTINE_H/ ;" macro 1 { }	{ }
COUNTCROSSES		graphics/cscan.c	/^#define COUNTCROSSES 0		\/* Count different kinds o/ ;" macro 1 { }	{ }
CPHGHTcmd		fonts/fontbuild.c	/^#define CPHGHTcmd	27/ ;" macro 1 { BuildChar CCRunStd }	{ }
CPSI		include/package_specs.h	/^#define CPSI		"cpsi.h"/ ;" macro 1 { }	{ }
CPcmd		fonts/fontbuild.c	/^#define CPcmd	9/ ;" macro 1 { BuildChar CCRunStd }	{ }
CR		language/grammar.h	/^#define CR  '\\015'/ ;" macro 1 { EOL StmToken }	{ }
CRBesc		fonts/fontbuild.c	/^#define CRBesc 30/ ;" macro 1 { CCRunStd }	{ }
CRFor		language/exec.c	/^private procedure CRFor()/ ;" function 19 { ExecInit }	{ EPopP EPopPReal EPushP EPushPReal ETopP Object PushPReal RealGt0 real realforcmd }
CRYesc		fonts/fontbuild.c	/^#define CRYesc 31/ ;" macro 1 { CCRunStd }	{ }
CRepeat		language/exec.c	/^private procedure CRepeat()/ ;" function 11 { ExecInit }	{ EPopInteger EPushInteger IPopDiscard IPush execStk integer reptcmd }
CRun		language/exec.c	/^\/*private*\/ procedure CRun()	\/* Omit "private" for/ ;" function 10 { ClearExecStack ExecInit PSExit }	{ CloseFile DebugAssert EPopP Object false nullObj stmObj }
CSAdd		bintree/causeset.c	/^CauseSet *CSAdd(CauseSet *cs, int newCause)/ ;" function 15 { DPDivideAt DPNewAt DPObscureInside }	{ CSExpand NOREASON }
CSAddSet		bintree/causeset.c	/^CauseSet *CSAddSet(CauseSet *cs, CauseSet *ocs)/ ;" function 22 { DPBecomeDivAt DPRevealInside }	{ CSExpand }
CSCANRETRIES		fonts/fontbuild.c	/^#define CSCANRETRIES	10/ ;" macro 1 { CCRunStd }	{ }
CSClose		graphics/cscan.c	/^public procedure CSClose()/ ;" function 4 { BuildChar CCRunStd }	{ CSPathPoints pointArray pointCount true }
CSContains		bintree/causeset.c	/^static int CSContains(CauseSet *cs, int theCause)/ ;" function 9 { }	{ false true }
CSCopy		bintree/causeset.c	/^CauseSet *CSCopy(CauseSet *ocs)/ ;" function 11 { DPBecomeDivAt DPRevealInside }	{ CSExpand CSNew CauseSet }
CSEndChar		fonts/fontbuild.c	/^private procedure CSEndChar(fd, pcn, fm)/ ;" function 19 { CCRunStd }	{ CSRun CScan FCd IntX SetupCacheDevice false setupCache }
CSExpand		bintree/causeset.c	/^static CauseSet *CSExpand(CauseSet *cs)/ ;" function 19 { CSAdd CSAddSet CSCopy CSNew }	{ CSGROWINC csCausePool free os_freeelement os_newelement }
CSFree		bintree/causeset.c	/^void CSFree(CauseSet *cs)/ ;" function 8 { DPBecomeDivAt DPFree DPRevealInside }	{ CSGROWINC csCausePool csPool free os_freeelement }
CSGCh		fonts/compshow.c	/^#define CSGCh() (*cp++)/ ;" macro 1 { CompositeShow ScanCompString }	{ }
CSGROWINC		bintree/causeset.c	/^#define CSGROWINC 2		\/* Amount to expand by when f/ ;" macro 1 { CSExpand CSFree CSInitialize }	{ }
CSGetChar		fonts/compshow.c	/^#define CSGetChar(d) d = *cp++;/ ;" macro 1 { CompositeShow ScanCompString }	{ d }
CSInitialize		bintree/causeset.c	/^void CSInitialize()/ ;" function 5 { LayerInit }	{ CSGROWINC CauseSet csCausePool csPool os_newpool }
CSLIMIT		fonts/fontbuild.c	/^#define CSLIMIT cslimit  \/* max pixelsize at which/ ;" macro 1 { CCRunStd }	{ cslimit }
CSNew		bintree/causeset.c	/^CauseSet *CSNew()/ ;" function 8 { CSCopy DPNewAt }	{ CSExpand CauseSet csPool os_newelement }
CSNewFCd		graphics/cscan.c	/^private procedure CSNewFCd(c)/ ;" function 5 { ResetCScan }	{ }
CSPathPoints		graphics/cscan.c	/^internal procedure CSPathPoints(buff, count, close/ ;" function 65 { CSClose }	{ DEBUGERROR FinishPath LeftDir MAXFixed NULL NoDir PFCd RightDir VertDir fakePrevCross false firstPathBuffer firstPoint havePathCross keepPointsFlag offsetCenterFlag pathMaxX pathMinX printf saveHorizDir savePrevCross savePrevPoint saveVertDir start xPathMax xPathMin yPathMax yPathMin }
CSPrintOn		bintree/causeset.c	/^void CSPrintOn(CauseSet *cs)/ ;" function 10 { DPPrintOn }	{ STRIPCONVERTCAUSE os_fprintf os_stdout }
CSRemove		bintree/causeset.c	/^int CSRemove(CauseSet *cs, int oldCause)/ ;" function 14 { DPRevealInside }	{ NOREASON }
CSRun		fonts/cachedev.c	/^public procedure CSRun(run) DevRun *run; {/ ;" function 5 { CSEndChar }	{ AddRunMark FRound ShowState TransDevRun register ss ssr }
CSSwapFor		bintree/causeset.c	/^void CSSwapFor(CauseSet *cs, int newCause, int old/ ;" function 11 { DPSwapCause }	{ }
CSTestChar		fonts/compshow.c	/^#define CSTestChar() if (cp >= cplimit) RangeCheck/ ;" macro 1 { CompositeShow ScanCompString }	{ RangeCheck }
CScan		graphics/cscan.c	/^public procedure CScan(callBack, delta)/ ;" function 1 { BuildChar CSEndChar }	{ }
CScanBuffer		graphics/cscan.c	/^typedef struct _CScanBuffer {/ ;" typedef 4 { }	{ }
CStmBFilBuf		language/stream.c	/^private int CStmBFilBuf(stm)/ ;" function 13 { }	{ CStmLeftover CStmRndNum CStmSource Decrypt EOF GetStream Stm getc integer register }
CStmClose		language/stream.c	/^private int CStmClose(stm)/ ;" function 13 { }	{ CStmSource CloseFile End GetStream Stm StmDestroy StmObj dictStk false feof rootShared }
CStmFAvail		language/stream.c	/^private int CStmFAvail(stm)/ ;" function 8 { }	{ CStmSource EOF GetStream Stm favail }
CStmFSeek		language/stream.c	/^private int CStmFSeek(stm, offset, base)/ ;" function 9 { }	{ CStmSource GetStream Stm fseek }
CStmFTell		language/stream.c	/^private long int CStmFTell(stm)/ ;" function 7 { }	{ CStmSource GetStream Stm ftell }
CStmFlush		language/stream.c	/^private int CStmFlush(stm)/ ;" function 10 { }	{ CStmLeftover CStmSource GetStream Stm fflush integer }
CStmHFilBuf		language/stream.c	/^private int CStmHFilBuf(stm)/ ;" function 20 { }	{ CStmLeftover CStmRndNum CStmSource Decrypt EOF GetStream NOTHEX Stm getc hexToBinary register true }
CStmLeftover		language/stream.c	/^#define CStmLeftover(stm) *(integer *)&(stm)->ptr/ ;" macro 1 { CStmBFilBuf CStmFlush CStmHFilBuf CStmUnGetc MakeDecryptionStm }	{ integer }
CStmRndNum		language/stream.c	/^#define CStmRndNum(stm) *(longcardinal *)&(stm)->b/ ;" macro 1 { CStmBFilBuf CStmHFilBuf GetStmDecryptionKey PSEExec SetStmDecryptionKey }	{ longcardinal }
CStmSource		language/stream.c	/^#define CStmSource(stm) *(StmObj *)&(stm)->data/ ;" macro 1 { CStmBFilBuf CStmClose CStmFAvail CStmFSeek CStmFTell CStmFlush CStmHFilBuf MakeDecryptionStm }	{ StmObj data }
CStmUnGetc		language/stream.c	/^private int CStmUnGetc(ch, stm)/ ;" function 7 { }	{ CStmLeftover EOF }
CStopped		language/exec.c	/^private procedure CStopped() {PushBoolean(false);}/ ;" function 1 { ExecInit }	{ PushBoolean false }
CTcmd		fonts/fontbuild.c	/^#define CTcmd 17/ ;" macro 1 { BuildChar CCRunStd }	{ }
CURSORHEIGHT		mousekeyboard/vars.h	/^#define CURSORHEIGHT	16	\/* pixels *\// ;" macro 1 { CheckShield DisplayCursor }	{ }
CURSORSIZE		product/mouse_driver.c	/^#define CURSORSIZE 16/ ;" macro 1 { SetGSCursor }	{ }
CURSORWIDTH		mousekeyboard/vars.h	/^#define CURSORWIDTH	16	\/* pixels *\// ;" macro 1 { CheckShield DisplayCursor MPDisplayCursor16 MPDisplayCursor2 MPSetCursor }	{ }
CURWINDOW		product/mouse_driver.c	/^#define CURWINDOW NULL		\/* Parameter to some windo/ ;" macro 1 { PSButton PSRightButton PSRightStillDown PSStillDown }	{ NULL }
CUSTOMOPS		include/package_specs.h	/^#define CUSTOMOPS	"customops.h"/ ;" macro 1 { }	{ }
CUSTOMOPS_H		include/customops.h	/^#define    CUSTOMOPS_H/ ;" macro 1 { }	{ }
CVT		unix_product/unix.c	/^private procedure CVT()/ ;" function 21 { }	{ MAXtimeString NUL PopInteger PopPString PushP RangeCheck StrObj VMPutText integer s string }
CYcmd		fonts/fontbuild.c	/^#define CYcmd	2/ ;" macro 1 { BuildChar CCRunStd }	{ }
C_LANGUAGE		coroutine/xfersun.s	/^#define	 C_LANGUAGE 0/ ;" macro 1 { }	{ }
CaData		fonts/cache.h	/^typedef char *CaData;/ ;" typedef 1 { CacheReuseEntry FCOpenStream FetchCharOutline GetFontStream OCFetchFromDisk }	{ }
CaTag		fonts/cache.h	/^typedef char *CaTag;/ ;" typedef 1 { FetchCharOutline GetFontStream PSCacheFlush PSCacheInit }	{ }
Cache		fonts/cacheimpl.h	/^typedef struct _t_Cache {/ ;" typedef 15 { CacheCreate }	{ }
CacheAddEntry		fonts/cacheimpl.c	/^public boolean CacheAddEntry(cache, tag, data, siz/ ;" function 21 { }	{ AddEntry FreeHdr Lookup NULL PCacheEntHdr RAISE data false true }
CacheCreate		fonts/cacheimpl.c	/^public PCache CacheCreate(name, procs, limit, buck/ ;" function 23 { FontRunInit }	{ Cache CacheHashTbl InitLink PCache cacheChain os_sureCalloc }
CacheEntHdr		fonts/cacheimpl.h	/^typedef struct _t_CacheEntHdr {/ ;" typedef 8 { AllocHdr }	{ }
CacheHashTbl		fonts/cacheimpl.h	/^typedef Links CacheHashTbl;/ ;" typedef 1 { CacheCreate }	{ }
CacheInvalidate		fonts/cacheimpl.c	/^public procedure CacheInvalidate(cache, tag, selec/ ;" function 23 { PSCacheFlush PSCacheInit }	{ CacheStat DisposeEntry Links NHdr PCacheEntHdr UnlinkEntry boolean data register true }
CacheLookup		fonts/cacheimpl.c	/^public boolean CacheLookup(cache, tag, data)/ ;" function 34 { FetchCharOutline GetFontStream }	{ AddEntry CacheStat InsertLink Links Lookup NULL PCacheEntHdr RemoveLink boolean data false longcardinal lookups os_clock start }
CacheProcs		fonts/cache.h	/^typedef struct _t_CacheProcs {/ ;" typedef 7 { }	{ }
CacheRemoveEntry		fonts/cacheimpl.c	/^public procedure CacheRemoveEntry(cache, tag)/ ;" function 12 { }	{ DisposeEntry Lookup NULL PCacheEntHdr UnlinkEntry }
CacheReuseEntry		fonts/cacheimpl.c	/^public CaData CacheReuseEntry(cache, needed, pHand/ ;" function 16 { FCOpenStream OCFetchFromDisk }	{ CaData DisplaceEntries NULL data false }
CacheStat		fonts/cacheimpl.h	/^#define CacheStat(code)	{ code; }/ ;" macro 1 { AddEntry CacheInvalidate CacheLookup DisplaceEntries }	{ }
CacheStats		fonts/cacheimpl.h	/^typedef struct {/ ;" typedef 8 { PSCacheFlush PSCacheInit }	{ }
CachedColor		devpattern/colorpattern.c	/^typedef struct _t_CachedColor {/ ;" typedef 5 { ComposeColors GetCachePlace }	{ }
CachedHalftone		devpattern/patternpriv.h	/^typedef PCard8 CachedHalftone[dgNColors], *PCached/ ;" typedef 1 { }	{ }
CalcAnchGlbClrLocs		fonts/fontbuild.c	/^internal procedure CalcAnchGlbClrLocs(g, w) regist/ ;" function 4 { BlueLock }	{ FinGlbClrLocs true }
CalcGlbClrLocs		fonts/fontbuild.c	/^internal procedure CalcGlbClrLocs(g) register PGlb/ ;" function 5 { BlueLock ProcessGlbClrs }	{ Adjust FinGlbClrLocs Fixed }
CalcHW2		fonts/fontbuild.c	/^internal Fixed CalcHW2(hw1, wd1, wd2, yflg)/ ;" function 60 { BlueLock FinGlbClrLocs PreXLock PreYLock }	{ FCd FD FRoundF Fixed FixedHalf FixedOne FntIDTfmP T1 T2 T3 erosion gmscale isoutline locktype os_labs printf }
CalcThresholds		graphics/graypriv.c	/^private procedure CalcThresholds(nums, pSpot, devS/ ;" function 77 { GenerateThresholds }	{ Cd DURING END_HANDLER FractPart FreePatternBase GetPatternBase HANDLER INIT_RAND MAXCOLOR MAXcardinal NIL PCard8 PGrayQ PopPReal PushPCd RAISE RERAISE RRoundP RangeCheck SortGQ cardinal d fpHalf fpOne fpTwo integer os_fabs real true }
CallAddTrapToPath		graphics/pathreduce.c	/^private procedure CallAddTrapToPath(yt, yb, xtl, x/ ;" function 33 { ConvertToListPath }	{ AddTrapezoidToPath BBCompare BBoxRec MAX MIN RdcToDev addPath chunkBBox fixtodbl fixtopflt pathOffset }
CallArc		graphics/pathbuild.c	/^private procedure CallArc(ccwise)  boolean ccwise;/ ;" function 11 { PSArc PSArcN }	{ ArcInternal CallArcInit Cd CurveTo LineTo MoveTo PopPCd PopPReal gs real }
CallArcInit		graphics/pathbuild.c	/^public boolean CallArcInit(path) PPath path; {/ ;" function 3 { Arc CallArc DoArcTo }	{ HasCurrentPoint }
CallAsCoroutine		coroutine/corouxfer.c	/^public integer CallAsCoroutine(proc, arg, stackSiz/ ;" function 13 { }	{ CoReturn Coroutine CreateCoroutine DestroyCoroutine TEMPCOROUTINEOVERHEAD TempCoroutineParam TempCoroutineProc arg }
CallBackItem		vm/gcinternal.h	/^typedef struct callBackItem {	\/* Callback proc lis/ ;" typedef 5 { AddProcToList GC_CollectPrivate GC_CollectShared TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
CallDataProcedures		vm/staticdata.c	/^public procedure CallDataProcedures (Code)/ ;" function 21 { CreateData DestroyData DestroyVM LoadData UnloadData }	{ Code DataRecord NIL STATICEVENTFLAG integer staticData }
CallFinalizeProc		vm/saverestore.h	/^#define CallFinalizeProc(type, obj, reason) \\/ ;" macro 1 { HandleGCFinalize PerformFinalization VMCopyGeneric VMPutGeneric }	{ WantToFinalize finalizeProcs }
CallFromPS		fonts/debug.c	/^private procedure CallFromPS(proc)/ ;" function 13 { PSpEldest PSpFD PSpMM PSpMS PSpSFC }	{ DURING END_HANDLER HANDLER RERAISE calledFromPS false fflush os_stdout true }
CanSkipTrap		graphics/fastfillquad.c	/^#define CanSkipTrap() \\/ ;" macro 1 { FastFillQuad QuadTrap }	{ FTrunc FracPart }
CantHappen		fonts/fontbuild.c	/^public procedure CantHappen() { BCERROR(BE_CANTHAP/ ;" function 1 { ATail AddCirclePath AddPathRef BMComposite34 BMComposite38 BPCompositeFrom BPCompositeTo BuildGrayPattern BuildInitialState BuildPattern CCRunStd CheckForPSNotify CheckVersion ClearExecStack ClipDevPrim ClippedMasksMark ConvertToListPath CopyDevPrim CopyNumStrmForCache CoroutineRootProc CreateFilterStm DebugAssert DepthToLog2BD DevPrimBytes DictFinalize DoQuit DoRdcPth DumpBuff EnclosesRect EnterCirclesInCache EqNumStrmCache ExpandOneLine Fill FreeSelectFont GSFinalize GSaveProc GetNotifyAbortCode Gry4Of4Setup HandleStackOverflow HashArray HashObject Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImageTrapsOrRun InternalBuildChar IntersectDP KAClosefile LBMMark MRMoveRect MTUnlink Mark MonoSetup NXGrayPatInfo NXGrayPatSetup NameIndexObj NextGStatesProc NextKeyVal NoClipMark (etc) }	{ BCERROR }
Card16		vm/rgstcmds.c	/^private Card16	\/* variables for dynamically regist/ ;" global 1 { AddUn4 AllocCmds BuildChar C1 C2 CCRunStd ClipVect CmdIndexObj CodePoint Decrypt Div3By2 EnterCircle EnterPathInCache FONTKEY FindOpSet FreePath GC_MoveRecycleRange HashMID InitFontCache Init_Cmds InsertMID KAEndCSDict MulUn22 PSDefSysName PSDefUserName PSRgstOps PSStObjFormat PopLimitCard ReadNumAry RgstDynamicCmd RgstOpSet SCANTYPE ScanPkdAry StartCache SubUn4 Un4Comp VMExpandDict }	{ }
Card32		include/publictypes.h	/^typedef unsigned long int Card32, *PCard32;/ ;" typedef 1 { ABM_SetAllocated AllocInternal BMAlloc BuildSegmentTable ConstantRunMark ConstantTrapsMark CopyNumStrmForCache CreateContext CreateSharedVM Div3By2 EnterPathInCache EnterRdcInCache EnumerateComposites FindFreeBytes GCInternal_GrowStack GC_HandleIndex GetProcSource GetStreamSource GetStringSource HF2F HF4F HF4R HIRR HNRF HNRR HashArray HashMID HashPath HashSFC InitFontCache LF2F LF4F LF4R LIRR LNRF LNRR MAXGenericIDGeneration MAXGenericIDIndex MMEldest MSEldest MapFontDirectory Mul2By2 MulUn22 NumEncode PSCVRS PurgeMM QDoEUsrPth QuickSort RdcSize ReadBinObjSeq ResizeCrossBuf ScannerInit SendOldestToDisk SetFont SizeNumStrmForCache StartCache StmToken TracePrivateForShared TracePrivateVM TraceSharedVM (etc) }	{ }
Card8		include/publictypes.h	/^typedef unsigned char Card8, *PCard8;/ ;" typedef 1 { ABM_Init AllocInfoVector AllocSmall BuildGrayPattern BuildPattern FreeInfoVector GetDevComponent GetLComponent Gry4Of4Setup HandleGCFinalize MonoSetup PATTERNKEY PSAllocBM PSTrashVM PerformFinalization ROTATELEFT8 ReadBinObjSeq SCANTYPE SWAP2 SWAP4 SetPatInfo SetupGrayPattern SetupMonoPattern WriteObject }	{ }
CardFromOb		language/type.c	/^private cardinal CardFromOb(ob)  Object ob;/ ;" function 7 { PSCopy PSGet PSPut }	{ MAXcardinal RangeCheck TypeCheck cardinal intObj integer }
CarefulFree		product/machportdevice.c	/^#define CarefulFree(p) if(p) os_free(p)/ ;" macro 1 { PSMachPortDevice }	{ p }
CarefulPushP		language/exec.c	/^private CarefulPushP(pob)  PObject pob;/ ;" function 6 { HandleStackOverflow }	{ Object PopP PushP discard opStk }
CauseSet		bintree/bintreetypes.h	/^typedef struct _causeset {	\/* 8 bytes *\// ;" typedef 5 { CSCopy CSInitialize CSNew DPBecomeDivAt DPRevealInside }	{ }
Cd		include/publictypes.h	/^typedef struct _t_Cd {/ ;" typedef 4 { AddTrapezoidToPath ArcC ArcInternal ArcToInternal BMRun BreakUpPath CalcThresholds CallArc CompSlowShow CompositeShow ConvertToListPath DoArcTo DoPath FFltnCurve FMiniFltn FixedMoveTo FltnCurve GetPathBBoxUserCds GetXDistYDist ImageInternal InFill InStroke InUFill MakeRectPath MinimumClip OffsetFill PSAShow PSAWidthShow PSArcC PSCrPoint PSCurveTo PSDTfm PSIDTfm PSITfm PSInUStroke PSLck PSLineTo PSMoveTo PSPathBBox PSRCurveTo PSRLineTo PSRMoveTo PSReduceRect PSScal PSSetCharWidth PSStrWidth PSTfm PSTlat PSWidthShow PathForAll QDoEUsrPth RCBotNew RCRtNew RCTopNew ROkToBuild SetCch ShowByName SlowShow SmallArc TfmToBB (etc) }	{ }
ChangeColor		graphics/colorops1.c	/^public Color ChangeColor() {/ ;" function 14 { PSSetAlpha PSSetCMYKColor PSSetGrayPattern SetGray SetRGBColor SetTransfer }	{ Color ColorRec NIL PGState RemColorRef clrStorage false gs os_newelement register }
ChangeRecyclerExecLevel		vm/recycler.c	/^public procedure ChangeRecyclerExecLevel(newLevel,/ ;" function 14 { }	{ _ChangeRecyclerExecLevel fflush os_fprintf privateRecycler recyclerStm sharedRecycler traceRecycler }
ChangedWindowDevice		product/windowops.c	/^public procedure ChangedWindowDevice(PWindowDevice/ ;" function 9 { LRedraw }	{ anyRedraws boundBounds true }
CharData		fonts/fontrun.h	/^typedef struct _t_CharData {/ ;" typedef 10 { KADict }	{ }
CharMetrics		include/devicetypes.h	/^typedef struct _t_CharMetrics/ ;" typedef 6 { CompositeShow FastShow FasterShow ShowByName }	{ }
CharNameProc		include/devicetypes.h	/^typedef char * (*CharNameProc)( / ;" typedef 2 { }	{ }
CharOffsetsEntry		fonts/fontrun.h	/^typedef struct _t_CharOffsetsEntry {/ ;" typedef 8 { KAEndCSDict }	{ }
CharOffsetsPtr		fonts/fontrun.h	/^#define CharOffsetsPtr(p) \\/ ;" macro 1 { KAEndCSDict OCFetchFromDisk }	{ FontInfo PCharOffsetsEntry p }
CharStringsVal		fonts/fontbuild.c	/^public boolean CharStringsVal(fd,pn,pi)/ ;" function 10 { }	{ DictGetP DictObj IntObj Known charstringsname false true }
CheckAllStacks		language/stack.c	/^private boolean CheckAllStacks(n)/ ;" function 7 { StackInit }	{ CheckStack dictStk execStk opStk }
CheckBM		device/maskcache.c	/^public procedure CheckBM()/ ;" function 53 { BMAlloc BMFree CompactBM SortCharAges }	{ Assert BMFreeTag BMHeader BMNull BMPinnedTag BMUsedTag FGEnterMonitor FGExitMonitor Length MINBMALLOC MaskRec NULL PBMHeader PBMItem PMask bmBase bmFree bmScratch bmSize bmUsed data false fflush free header integer mcCheck mcdebug mchange mskFree os_eprintf os_stderr os_stdout register }
CheckBlackDown		graphics/cscan.c	/^private procedure CheckBlackDown(topc, botc)/ ;" function 16 { EditBlackSpace }	{ CrossPtr FillInPairs }
CheckBlueScale		fonts/fontbuild.c	/^internal procedure CheckBlueScale(botBands, lenBot/ ;" function 20 { BuildChar CCRunStd }	{ Fixed FixedOne IntX blueScale boolean false fixdiv fixmul register true }
CheckCI		fonts/cicache.c	/^public CheckCI()/ ;" function 50 { CopyDelayedFont DMFRestore DelayedMakeFont DeleteCIs FlushMID PSFlushMasks PurgeCI SSSOutCall ShowByName SortCharAges TrimCI ZapDelayedDict }	{ Assert CI CINULL CIOffset CISortedList CIUNLINKED CN IsAllocatedCI IsFreeCI IsNormalCI IsReleasedCI MIDCount MTSize PCIItem Vmem fcCheck forallCI integer nUsedMasks register true }
CheckCol		graphics/cscan.c	/^#define CheckCol(x, y) ( PixelIsBlack(x,y-1) || Pi/ ;" macro 1 { DoFixupAction }	{ PixelIsBlack }
CheckCompositeFont		fonts/fontcache.c	/^private procedure CheckCompositeFont(fdict, enc, f/ ;" function 93 { PSDefineFont }	{ AllocRAMStr AryObj BytesForMTPE COMPOSEDtype DictGetP DictObj DictTestPType FDNestedDepth FMap17 FMap88 FMap97 FMapEscape FMapGen ForcePut IntObj InvlFont LIntObj LimitCheck MTMASK MaxSSS Mtx PCard8 PEMASK RangeCheck SetMTPE StrObj TypeCheck UniqueMID VMGetElem arrayObj dictObj fontsNames iLAryObj intObj integer nAccess strObj }
CheckCurPt		graphics/pathbuild.c	/^#define CheckCurPt(path) \\/ ;" macro 1 { CurveTo LineTo PSRMoveTo }	{ NULL NoCurrentPoint PathType }
CheckDeletePixel		graphics/cscan.c	/^private boolean CheckDeletePixel(ll, x)/ ;" function 19 { DoFixupAction }	{ CrossPtr DEBUGERROR REG false true }
CheckErrno		fp/os_math.h	/^#define CheckErrno() {if (errno != 0) ReportErrno(/ ;" macro 1 { }	{ ReportErrno }
CheckFixCd		graphics/userpath.c	/^private procedure CheckFixCd(cd, dc, bb)/ ;" function 6 { QUsrPthCurveTo QUsrPthLineTo }	{ FixCd RangeCheck }
CheckForAnamorphicMatrix		graphics/strokeops.c	/^public boolean CheckForAnamorphicMatrix(m) registe/ ;" function 15 { ArcInternal SetHalfWidth }	{ d fpp001 os_abs real register true }
CheckForCurrentPoint		graphics/pathbuild.c	/^public procedure CheckForCurrentPoint(path) PPath / ;" function 4 { DoArcTo GetPathBBoxUserCds PSArcC PSCrPoint PSUPath ShowInternal SimpleShowByName UsrPthArcTo }	{ HasCurrentPoint NoCurrentPoint }
CheckForMtx		graphics/userpath.c	/^public boolean CheckForMtx() {/ ;" function 30 { PSInUStroke PSRectStroke PSUStroke PSUStrokePath }	{ Object PObject TopP VMCarCdr arrayObj false intObj integer pkdaryObj realObj register true }
CheckForPSNotify		postscript/contextimpl.c	/^public procedure CheckForPSNotify() {/ ;" function 37 { NSCheckNotifyPS }	{ Assert CantHappen LNullObj NIL NotifyAbort Object RAISE Xobj currentPSContext false }
CheckForRectangle		graphics/stroke.c	/^private boolean CheckForRectangle(c1, c2) Cd c1, c/ ;" function 95 { DoStroke }	{ DevCd F_NormPair F_VecSub FixCd Fixed StrkTrp boolean crDash dashLength dashLim dashed dc1 dc2 fDshLen f_dP1 false fcrDash ffldDsh filledDash integer normalize os_labs pflttofix register true uhalfwidth }
CheckHorizWhite		graphics/cscan.c	/^private procedure CheckHorizWhite(ll, rl, known, k/ ;" function 59 { EditBlackHoriz }	{ ConnectedRunOpposite CrossPtr ExchangeCrossPtr FillInRange IntX MIN NULL Pixel REG ValidateCrossPtr boolean printf start }
CheckIfEncodedUserPath		graphics/userpath.c	/^private boolean CheckIfEncodedUserPath(context)/ ;" function 28 { GetUsrPthAry }	{ InvlAccess Object PObject SetupNumStrm TypeCheck VMCarCdr arrayObj false pkdaryObj rAccess register strObj true }
CheckIfOkToBuild		fonts/fontbuild.c	/^private boolean CheckIfOkToBuild(fd,swval,wid)/ ;" function 7 { CCRunStd }	{ FCd GetFontBBox boolean }
CheckIfUCache		graphics/userpath.c	/^private boolean CheckIfUCache(context)/ ;" function 17 { GetUsrPthAry }	{ AssertCheck Object VMCarCdr cmdObj false nameObj true ucacheNm }
CheckInListenPort		product/listener.c	/^private procedure CheckInListenPort(char *name)/ ;" function 7 { PSResetUser PrivateListenPort PublicListenPort }	{ PSLimitCheck listenPort portName signaturePort strcpy }
CheckIntersection		graphics/reducer.c	/^private procedure CheckIntersection(lf, rt, callBa/ ;" function 87 { CheckIntersection RdcBend RdcEntry RdcExit }	{ CheckIntersection DebugPrintIntersect Int32 Interchange Intersect LF LnOffset MAX MIN MakeLine MakePoint PLine PLn PPt PQInsert PRg PtOffset Rational debugOn register true }
CheckMT		fonts/midcache.c	/^public CheckMT()/ ;" function 32 { MTAlloc MTFree PurgeMID }	{ Assert IsAllocMT IsFreeMT MID MIDCount MIDNULL MT MTFreeHead PMTItem fcData forallMT freemem integer register }
CheckOutListenPort		product/listener.c	/^private procedure CheckOutListenPort(char *name)/ ;" function 4 { PSResetUser PrivateListenPort PublicListenPort }	{ portName signaturePort }
CheckPkdMtLt		graphics/userpath.c	/^private boolean CheckPkdMtLt(pAryObj, pc1, pc2)/ ;" function 51 { UsrPthCheckMtLt }	{ Cd Component Object PNameEntry RTfmPCd TfmPCd VMCarCdr cmdObj false gs intObj linetoNm movetoNm nameObj realObj rlinetoNm true }
CheckPrebuiltMatrix		device/nextprebuilt.c	/^static inline boolean CheckPrebuiltMatrix(Mtx *m)/ ;" function 6 { GetPreBuiltChar }	{ MAXIMUMSIZE MINIMUMSIZE d }
CheckPrebuiltOptions		fonts/fontcache.c	/^private integer CheckPrebuiltOptions(fdict) DictOb/ ;" function 21 { PSDefineFont }	{ DictTestP GetBuildingOption InvlFont Object PREBUILT_CLOSEST PREBUILT_OUTLINE boolObj exactSizeFIDFactor fontsNames inBetweenSizeFIDFactor integer nm_ExactSize nm_InBetweenSize nm_TransformedChar transformFIDShift transformedCharFIDFactor true useBitmapWidthsFID }
CheckRow		graphics/cscan.c	/^#define CheckRow(x, y) ( PixelIsBlack(x-1,y) || Pi/ ;" macro 1 { DoFixupAction }	{ PixelIsBlack }
CheckScreenDims		devpattern/patternimpl.c	/^public boolean CheckScreenDims (width, height) Dev/ ;" function 4 { DevCheckScreenDims }	{ SCANTYPE false maxPatternSize true }
CheckSharable		vm/saverestore.c	/^#define CheckSharable(o) { \\/ ;" macro 1 { VMCopyArray VMPutDKeyVal VMPutDValue VMPutElem }	{ FInvlAccess }
CheckShield		mousekeyboard/common.c	/^void CheckShield()/ ;" function 20 { }	{ Bounds CURSORHEIGHT CURSORWIDTH SysHideCursor SysShowCursor TOUCHBOUNDS eventGlobals evp }
CheckStack		language/stack.c	/^private boolean CheckStack(stack, n)/ ;" function 12 { CheckAllStacks }	{ CheckStackElement CheckStackStruct EnumStack charptr false }
CheckStackElement		language/stack.c	/^private boolean CheckStackElement(obj, data)/ ;" function 50 { CheckStack }	{ AddressValidAtLevel CheckStackStruct LNullObj Xobj data escObj execStk false level objSave stmObj true }
CheckStackStruct		language/stack.c	/^struct CheckStackStruct {/ ;" struct 5 { CheckStack CheckStackElement }	{ }
CheckUCache		graphics/ucache.c	/^private procedure CheckUCache() {/ ;" function 38 { PSFlushUCache UCGetDevPrim }	{ Assert NULL PRdc PUCache TABLEINDEX UCSZ UCache bsize integer lruNewest lruOldest rsize }
CheckUprightMtx		product/windowgraphics.c	/^static int CheckUprightMtx(PMtx m)/ ;" function 6 { CompositePriv }	{ d }
CheckVersion		postscript/postscript.c	/^private CheckVersion ()/ ;" function 13 { BuildInitialState }	{ CantHappen VMVERSION exitError os_fprintf os_stderr rootShared }
CheckWindow		include/windowdevice.h	/^#define CheckWindow() if (PSGetDevice(NULL)->procs/ ;" macro 1 { CompositePriv PSAdjustCursor PSAdjustMouse PSAlphaImage PSCompositeRect PSFlushGraphics PSHideInstance PSNewInstance PSReadImage PSSetCursor PSSetExposureColor PSSetGrayPattern PSSetMouse }	{ NULL PSGetDevice PSInvalidID wdProcs }
CheckWindowDev		product/coordinates.c	/^#define CheckWindowDev(d) if (((PWindowDevice)d)->/ ;" macro 1 { GetBoundsPopCd GlobalToLocal LocalToGlobal PSScreenToBase PSSizeImage }	{ PSInvalidID PWindowDevice d wdProcs }
ChrMapBuildChar		fonts/fontbuild.c	/^private boolean ChrMapBuildChar(f, c, pcn, ftype)/ ;" function 94 { BuildChar }	{ BMRun Begin CCRun CHRMAPtype DictGetFontP DictObj End Equal InvlFont Known Lookup NIL Object PushInteger StrObj SubPString arrayObj boolean cardinal chardataname charoffsetsname charstringsname false fontSemaphore fontsNames intObj integer notdefname nullObj pkdaryObj prvtnm register rootSysDict string true }
ChunkSize		language/name.c	/^#define ChunkSize 20	\/* ARBITRARY	*\// ;" macro 1 { AddToGCTable }	{ }
CircMask		graphics/ucache.c	/^typedef struct { \/* for circle masks *\// ;" typedef 5 { EnterMask FlushCircle FreeCircles FreeStrokeCircle IniUCache }	{ }
CircMaskTable		graphics/ucache.c	/^private CircMask *CircMaskTable;/ ;" global 1 { EnterMask FlushCircle FreeCircles FreeStrokeCircle IniUCache }	{ }
CircleCache		graphics/stroke.c	/^public CircleRec *CircleCache;/ ;" global 1 { AddCircleMask DoStroke EnterCircle FillCircle FlushStrokeCircle IniStroke MkCirc SetupForCircles TransCircle }	{ }
CircleRec		graphics/stroke.h	/^typedef struct {/ ;" typedef 7 { IniStroke }	{ }
ClNewPt		graphics/graphics.c	/^public procedure ClNewPt(coord)  Cd coord;/ ;" function 2 { ConvertToListPath DoRdcPth ReduceQuadPath }	{ DevToRdc NewPoint }
ClaimPreallocChars		vm/vm_segment.c	/^public procedure ClaimPreallocChars (vmAddress, nB/ ;" function 24 { Pkdary }	{ Assert ExtendRecycler FindVMSegment NIL PVMSegment current free vmCurrent }
CleanShowState		fonts/fontshow.c	/^private procedure CleanShowState(ssr) register PSh/ ;" function 10 { SafeShowMask ShowByName }	{ CIFree CINULL NULL ssr }
Cleanup		fonts/fontrun.c	/^private procedure Cleanup(state)/ ;" function 13 { BPCopyBitsFrom Cleanup MPComposite PSFontRun RestoreState }	{ Cleanup NULL }
ClearDictStack		language/dict.c	/^public procedure ClearDictStack()/ ;" function 5 { HandleStackOverflow PSClearDictStack }	{ End PObject dictStk nPermDictEntries register }
ClearEvent		product/event.c	/^public procedure ClearEvent(NXEvent *ep)/ ;" function 8 { DispatchEvents PostChanged PostNotification PostRedraw }	{ NXEvent NX_NULLEVENT data }
ClearExecStack		language/exec.c	/^private procedure ClearExecStack()/ ;" function 30 { LanguageDataHandler }	{ Assert CRun CantHappen EPopP MonitorExit NIL Object cmdObj discard execStk integer mrk1Arg mrk2Args mrk4Args mrkExec mrkMonitor mrkNone mrkRun mrkStopped until }
ClearMark		fonts/cicache.c	/^#define ClearMark(X) CIReg [X].touched = false/ ;" macro 1 { SortCharAges }	{ false }
ClearStack		language/stack.c	/^public procedure ClearStack(stack)  register PStac/ ;" function 7 { HandleStackOverflow LanguageDataHandler PSClear }	{ PObject RecyclerPop register }
ClearWdNRect		product/windowops.c	/^private procedure ClearWdNRect(PWindowDevice win, / ;" function 24 { PSClearNRect PSSetNRect }	{ NRect NULL PSInvalidID RecalcMouseRect eventGlobals false mouseWindow nrStorage os_fprintf os_freeelement os_stderr register true }
Clip		graphics/graphics.c	/^public procedure Clip(evenOdd)  boolean evenOdd;/ ;" function 8 { PSClip PSEOClip PSRectClip }	{ ReducePathClipInt boolean gs integer secret }
ClipDevPrim		device/devprim.c	/^public DevPrim *ClipDevPrim(clip1, clip2)/ ;" function 88 { FindCurrentViewInCache ReducePathClipInt }	{ CantHappen DURING DevPrim DevRun DevTrap END_HANDLER FGEnterMonitor FGExitMonitor HANDLER InitDevPrim NULL NewDevPrim OverlapDevBounds RERAISE RunRunClip RunTrapClip TrapTrapClip }
ClipForMark		graphics/graphmark.c	/^#define ClipForMark() \\/ ;" macro 1 { AddRunMark StdTrapsFilled }	{ DevClipIsRect GetDevClipPrim NULL }
ClipRunMasksDispatch		device/mark.c	/^private procedure ClipRunMasksDispatch(/ ;" function 16 { Mark }	{ ClippedMasksMark MasksMark NULL QCompareBounds }
ClipRunTrapsDispatch		device/mark.c	/^public procedure ClipRunTrapsDispatch(/ ;" function 19 { CompositePriv Mark }	{ QCompareBounds QIntersectTrp }
ClipTrapsRunDispatch		device/mark.c	/^public procedure ClipTrapsRunDispatch(/ ;" function 21 { Mark }	{ BoxTrapCompare DevInterval DevTrap NULL QIntersectTrp }
ClipTrapsStringDispatch		device/mark.c	/^private procedure ClipTrapsStringDispatch(/ ;" function 85 { Mark }	{ BoxTrapCompare ClippedMasksMark DevInterval DevMask DevTrap LASTSCANVAL MasksMark NULL PMarkProcs PMask PSimpleMarkProcs integer register }
ClipVect		graphics/stroke.c	/^private boolean ClipVect(p0, p1) register PCd p0, / ;" function 39 { FillQuad }	{ Card16 CodePoint bottom false hiBnd left loBnd real register right top true }
ClippedMasksMark		device/clippedmask.c	/^public procedure ClippedMasksMark(t, run, masks, i/ ;" function 295 { ClipRunMasksDispatch ClipTrapsStringDispatch IniFmDevImpl }	{ Assert BANDMASKID CantHappen DevMarkInfo DevShort DevTrap ExpandMask ExpandOneLine Fix Fixed GetPatternRow IntPart IsBlack IsGray IsWhite LSHIFTEQ MAX MIN NULL PCard8 PMask PSCANTYPE PatternData RSHIFT RunArrayRow SCANMASK SCANSHIFT SCANTYPE SCANUNIT boolean data devXAOffset false framebase framebytewidth framelog2BD integer leftBitArray register rightBitArray start true }
CloseFile		language/stream.c	/^public procedure CloseFile(sob, force)/ ;" function 17 { Bang CRun CStmClose ComStmClose LineEdit PSCloseFile PSRead PSReadHexString PSReadLine PSReadString PSToken StmCtxDestroy }	{ CantHappen CloseStmForSB NIL PStmBody Stm StreamError fputeof os_clearerr register }
ClosePath		graphics/pathbuild.c	/^public procedure ClosePath(p) PPath p; {/ ;" function 12 { AddCirclePath AddTrapezoidToPath BuildChar BuildMultiRectPath ConvertToListPath DoUAppend Fill FillBevel FillQuad FlPthCls MinimumClip PSClosePath RClosePath UPClosePath UsrPthDoClsPth }	{ AddToPath ConvertToListPath ListPath NULL PPthElt PathType p pathclose register start }
CloseStmForSB		language/stream.c	/^private boolean CloseStmForSB(sb)/ ;" function 11 { CloseFile StmFinalize }	{ EOF NIL Stm boolean fclose ferror }
ClrPart		include/graphics.h	/^typedef Card8 ClrPart, *PClrPart;/ ;" typedef 1 { }	{ }
ClumpCntrs		fonts/glbclr.c	/^private void ClumpCntrs(cs, nc, diam)/ ;" function 62 { FixOnePath }	{ Fixed MAX MIN false true }
CmdBase		language/opcodes.h	/^#define CmdBase		(ExecNameBase+NameCodes)	\/* comma/ ;" macro 1 { BindPkdary DecodeObj EncodeObj EnumerateComposites RealBase RelocateObj }	{ ExecNameBase NameCodes }
CmdCodes		language/opcodes.h	/^#define CmdCodes	4/ ;" macro 1 { CmdValues RealBase }	{ }
CmdIndex		language/opcodes.h	/^typedef cardinal CmdIndex;		\/* command index *\// ;" typedef 1 { DecodeObj EncodeObj RelocateObj }	{ }
CmdIndexObj		vm/rgstcmds.c	/^public procedure CmdIndexObj(cmdIndex, pcmd)/ ;" function 25 { DecodeObj GC_HandleIndex }	{ CantHappen Card16 DebugAssert NIL NameArrayObj PNameEntry VMGetElem XCmdObj escObj nullObj objNameArray register rootShared }
CmdObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 39 { BuildChar PSExecOpNm PSRgstOps }	{ }
CmdTable		include/orphans.h	/^typedef struct _t_CmdTable {/ ;" typedef 4 { }	{ }
CmdValues		language/opcodes.h	/^#define CmdValues	CmdCodes * 256/ ;" macro 1 { EncodeObj }	{ CmdCodes }
CmptMaskBBMin		device/framemaskdev.c	/^public boolean CmptMaskBBMin(cmb, wunits, height, / ;" function 50 { MaskGoAway }	{ SCANTYPE SCANUNIT deepPixOnes false integer register true }
Cnct		graphics/graphics.c	/^public procedure Cnct(m)  PMtx m;/ ;" function 6 { BuildChar CCRun PSCnct PSRectStroke PSUStroke PSUStrokePath Rtat Scal Tlat UCGetDevPrim }	{ MIDNULL MtxCnct fpZero gs }
CoReturn		coroutine/corouxfer.c	/^public Coroutine CoReturn(destination)/ ;" function 15 { CallAsCoroutine ContextYield Scheduler TempCoroutineProc }	{ Assert Coroutine FOOTPRINT NIL _Exc_Header coroutineCheckFlag currentCoroutine xfer }
Code		language/opcodes.h	/^typedef unsigned char Code;		\/* encoded byte *\// ;" typedef 1 { BindPkdary BuildChar CCRunStd CallDataProcedures CreateNewContext DecodeObj EncodeObj EnumerateComposites InitPostScript PSListener Pkdary RERAISE RelocateObj StmToken os_raise }	{ }
CodePoint		graphics/stroke.c	/^private Card16 CodePoint(p) PCd p; {/ ;" function 12 { ClipVect }	{ Card16 bottom hiBnd left loBnd p r real register right top }
Color		include/graphics.h	/^typedef struct _t_ColorRec \/* color rendering obje/ ;" typedef 12 { ChangeColor CrRGBColor GSAddRefs GSRemRefs ImageDict ImageInternal PSCrCMYKColor PSCrGray PSSetCMYKColor ProcSampleProc SetGray SetRGBColor TableSampleProc }	{ }
ColorArray		graphics/graphicspriv.h	/^#define ColorArray(c) ((PClrPart)(&c))/ ;" macro 1 { }	{ PClrPart }
ColorIsWhite		graphics/graphicspriv.h	/^#define ColorIsWhite(c) ((boolean)((*((PInt32)(&(c/ ;" macro 1 { }	{ PInt32 boolean }
ColorPatHandle		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 5 { CMYKConstColorSetup ColorPatInfo ColorSetup ConstCMYKPattern ConstColorSetup ConstRGBPattern RGBPattern }	{ }
ColorPatInfo		devpattern/colorpattern.c	/^public integer ColorPatInfo (h, red, green, blue, / ;" function 12 { ConstCMYKPattern ConstRGBPattern RGBPattern }	{ ColorPatHandle }
ColorPatRec		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 5 { ConstCMYKPattern ConstRGBPattern RGBPattern }	{ }
ColorPattern		include/devpattern.h	/^#define ColorPattern RGBPattern/ ;" macro 1 { }	{ RGBPattern }
ColorRec		include/graphics.h	/^typedef struct _t_ColorRec \/* color rendering obje/ ;" typedef 12 { ChangeColor IniClrSpace }	{ }
ColorSetup		devpattern/colorpattern.c	/^public procedure ColorSetup(h, markInfo, data)/ ;" function 45 { RGBPattern }	{ ColorPatHandle ComposeColors DURING DevColorVal DevHalftone END_HANDLER FGEnterMonitor FGExitMonitor HANDLER PatternData RERAISE SetupGrayPattern data dgBlue dgGray dgGreen dgRed integer register start true }
ColorSpaceParams		include/graphics.h	/^typedef struct _t_ColorSpaceParams {/ ;" typedef 5 { }	{ }
ComStmClose		fonts/fontrun.c	/^private int ComStmClose(stm)/ ;" function 11 { }	{ CloseFile ComStmSource GetStream Stm StmDestroy StmObj false feof }
ComStmFAvail		fonts/fontrun.c	/^private int ComStmFAvail(stm)/ ;" function 8 { }	{ ComStmSource EOF GetStream Stm favail }
ComStmFRead		fonts/fontrun.c	/^private long int ComStmFRead(buf, itemSize, nItems/ ;" function 29 { }	{ BytesInSeg ComStmSource GetStream ReadSegHeader Stm fread register }
ComStmFSeek		fonts/fontrun.c	/^private int ComStmFSeek(stm, offset, base)/ ;" function 9 { }	{ ComStmSource GetStream Stm fseek }
ComStmFTell		fonts/fontrun.c	/^private long int ComStmFTell(stm)/ ;" function 7 { }	{ ComStmSource GetStream Stm ftell }
ComStmFilBuf		fonts/fontrun.c	/^private int ComStmFilBuf(stm)/ ;" function 16 { }	{ BytesInSeg ComStmSource EOF GetStream ReadSegHeader Stm getc integer register }
ComStmFlush		fonts/fontrun.c	/^private int ComStmFlush(stm)/ ;" function 10 { }	{ ComStmSource GetStream Stm fflush integer }
ComStmProcs		fonts/fontrun.c	/^private readonly StmProcs ComStmProcs = {/ ;" global 4 { CreateFilterStm }	{ }
ComStmSource		fonts/fontrun.c	/^#define ComStmSource(stm) *(StmObj *)((char *)(stm/ ;" macro 1 { ComStmClose ComStmFAvail ComStmFRead ComStmFSeek ComStmFTell ComStmFilBuf ComStmFlush ComStmUnGetc CreateFilterStm }	{ StmObj StmRec }
ComStmUnGetc		fonts/fontrun.c	/^private int ComStmUnGetc(ch, stm)/ ;" function 11 { }	{ BytesInSeg ComStmSource EOF GetStream Stm register ungetc }
CompEl		include/bintree.h	/^typedef union _compel {/ ;" typedef 7 { }	{ }
CompSlowShow		fonts/compshow.c	/^public procedure CompSlowShow ()/ ;" function 172 { }	{ Cd CrMtx DMFRestore DelayedMakeFont FMap17 FMap88 FMap97 FMapEscape FMapGen FMapNone Fixed GetInfo IDTfmP MIDNULL MT MoveToAfterShow Mtx NOLL NULL NameObj Object PMTItem PushInteger PushPCd SSGetChar SSRestoreState SSSOutCall SSState SSStatePtr SetMIDAge ShowByName ShowState UniqueMID VMGetElem boolean cardinal crMID curMT false fontDict gs integer pfont register ss ssr true }
CompactBM		device/maskcache.c	/^public procedure CompactBM() {/ ;" function 59 { BMAlloc GrowBM ShrinkBM }	{ Assert BMFreeTag BMHeader BMLink BMNull BMPinnedTag BMUsedTag CheckBM Data DebugAssert FGEnterMonitor FGExitMonitor NULL NULLMaskIndex PBMHeader PBMItem PCard8 bmBase bmFree bmScratch boolean data false free header integer mskBase register true }
Component		include/publictypes.h	/^typedef real Component;/ ;" typedef 1 { AObjR BMRun CheckPkdMtLt DoUserPath PkAObjR UsrPthBBox UsrPthCheckMtLt }	{ }
ComposeColors		devpattern/colorpattern.c	/^private procedure ComposeColors(/ ;" function 106 { ColorSetup }	{ CachedColor GetCachePlace InitCCCache LCM3 NULL PCachedColor PCard8 PSCANTYPE ccHead data false integer patID register start }
CompositeInfo		include/bintree.h	/^typedef struct _compositeinfo { / ;" typedef 8 { CompositePriv LCopyContents LFill }	{ }
CompositeOperation		include/bintree.h	/^typedef struct {/ ;" typedef 21 { BPAdjust BPCopyback BPRevealBecause CopyOffscreen CopyOnscreen DPCompositeFrom DPCompositeTo LCompositeFrom LFill LHideInstanceIn LInitPage LNewAt LPlaceAt LRepaintIn copyCO }	{ }
CompositePriv		product/windowgraphics.c	/^private int CompositePriv(Cd sourcePt, Cd userSize/ ;" function 263 { PSComposite PSCompositeRect PSDissolve }	{ ALPHAVALUE Bounds CantHappen Cd CheckUprightMtx CheckWindow ClipRunTrapsDispatch CompositeInfo CompositeRun CompositeTraps DISSOLVE DevBoundsCompare DevMarkInfo DevPrim DevRun DevScreen DevTrap Fix Fixed HIGHLIGHT LCompositeFrom MyCeil NULL OverlapDevBounds PDevice PMtx PPSGState PSGetClip PSGetDevice PSGetMarkInfo PSGetMatrix PSInvalidID PSReduceRect RtoI TfmPCd TrapTrapDispatch Wd2Layer boolean d register wdProcs }
CompositeRun		product/windowgraphics.c	/^private procedure CompositeRun(DevRun *run, Compos/ ;" function 26 { CompositePriv }	{ Bounds DevShort LCompositeFrom data lines register }
CompositeShow		fonts/compshow.c	/^public integer CompositeShow (showchars) boolean s/ ;" function 330 { }	{ CI CINULL CIOffset CSGCh CSGetChar CSTestChar Cd CharMetrics DebugAssert DevBB DevCd DevMask FIXINT FMap17 FMap88 FMap97 FMapEscape FMapGen FMapNone FRACTION Fixed FixedMoveTo GetInfo LOWERSHOWBOUND MID MIDNULL MT Mtx MtxType Object PCIItem PFLTTOFIX PMask PNameEntry PNameObj PShowState SSState SSStatePtr SetCharAge SetMIDAge ShowState StringMark UniqueMID boolean charptr curMT d false fdcp fixdiv fixmul fontDict gs integer llx lly nameObj os_fabs os_labs real (etc) }
CompositeTraps		product/windowgraphics.c	/^private procedure CompositeTraps(register DevTrap / ;" function 73 { CompositePriv }	{ Bounds Fixed IntPart LCompositeFrom boolean false lines register true }
ComputeDataLen		graphics/euserpath.c	/^private integer ComputeDataLen(context) PUserPathC/ ;" function 25 { GetEUsrPthBBox }	{ TypeCheck character integer register ss }
ComputeHideBounds		bintree/layer.c	/^static int ComputeHideBounds(Bounds draw, Bounds i/ ;" function 35 { LCompositeFrom LMark }	{ BBoxCompareResult IntersectAndCompareBounds false max true }
ConLine		mp/funcline.c	/^#define ConLine(wf)						\\/ ;" macro 1 { }	{ LineOperation data s uint }
CondAssign		fonts/cicache.c	/^#define CondAssign(X,Y,Z) \\/ ;" macro 1 { }	{ IsNonNull NextAge PrevAge }
CondAssignF		fonts/cicache.c	/^#define CondAssignF(X,Y,Z) {if (IsNonNull (Y)) Nex/ ;" macro 1 { SortCharAges }	{ IsNonNull NextAge }
CondObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 49 { }	{ }
Condition		postscript/contextimpl.c	/^typedef struct _t_Condition { \/* concrete represen/ ;" typedef 4 { NewCondition }	{ }
ConditionalInvalidateRecycler		include/recycler.h	/^#define ConditionalInvalidateRecycler(pObject)	\\/ ;" macro 1 { ContextOpsInit CreateContext GetDMFItem MakeCompFont MakeFontSupp PSDefUserObj PSDefineFont PSEExec PSPopManagedObject PSPutArray PSSetBlkGeneration PSSetClrTransfer PSSetColorScreen PSSetDash PSSetScreen PSSetTransfer PSSetUCRemoval Pkdary PutThresholdEntries }	{ InvalidateRecycler NIL Recyclable }
ConditionalResetRecycler		include/recycler.h	/^#define ConditionalResetRecycler(R, address)	\\/ ;" macro 1 { AllocGenericObject AllocPDict AllocPName AllocPStream Pkdary Save VMCopyArray VMExpandDict VMPutDict VMPutElem VMPutGeneric _RecordFinalizableObject saveobj }	{ AddressInRecyclerRange ResetRecycler }
ConnectWhitePairs		graphics/cscan.c	/^private procedure ConnectWhitePairs(top, bottom)/ ;" function 18 { EditWhiteSpace }	{ CrossPtr FixRuns bottom left right top }
ConnectedRunOpposite		graphics/cscan.c	/^private CrossPtr ConnectedRunOpposite(cross, below/ ;" function 26 { CheckHorizWhite }	{ CrossPtr NULL PathCross }
ConstCMYKPattern		devpattern/colorpattern.c	/^public PatternHandle ConstCMYKPattern( \/* XXX inco/ ;" function 42 { SetFmDeviceMetrics }	{ Assert CMYKConstColorSetup ColorPatHandle ColorPatInfo ColorPatRec DestroyPat DevColorData NIL RAISE SetupDeepOnes ecLimitCheck integer os_sureMalloc }
ConstColorPattern		include/devpattern.h	/^#define ConstColorPattern ConstRGBPattern/ ;" macro 1 { }	{ ConstRGBPattern }
ConstColorSetup		devpattern/constclrpat.c	/^public procedure ConstColorSetup(h, markInfo, data/ ;" function 27 { ConstRGBPattern }	{ ColorPatHandle ConstSetup DevColorVal PatternData SCANTYPE data integer start true }
ConstGrayPattern		devpattern/constgraypat.c	/^public PatternHandle ConstGrayPattern(data, bitsPe/ ;" function 21 { }	{ ConstGraySetup DestroyPat GrayPatHandle GrayPatInfo GrayPatRec NIL RAISE SetupDeepOnes data ecLimitCheck integer os_sureMalloc }
ConstGraySetup		devpattern/constgraypat.c	/^private procedure ConstGraySetup(h, markinfo, data/ ;" function 13 { ConstGrayPattern }	{ ConstSetup DevColorVal GrayPatHandle data integer start true }
ConstRGBPattern		devpattern/constclrpat.c	/^public PatternHandle ConstRGBPattern(/ ;" function 35 { BM38InitClassVars ConstColorPattern }	{ ColorPatHandle ColorPatInfo ColorPatRec ConstColorSetup DestroyPat NIL RAISE SCANUNIT SetupDeepOnes ecLimitCheck integer os_sureMalloc }
ConstSetup		devpattern/constgraypat.c	/^public SCANTYPE ConstSetup(cData, color, bitsPerPi/ ;" function 17 { ConstColorSetup ConstGraySetup }	{ SCANTYPE SCANUNIT integer }
ConstantColor		devpattern/patternimpl.c	/^public boolean ConstantColor(nGrays, screen, gray,/ ;" function 31 { Gry4Of4Setup MonoSetup SetupGrayPattern }	{ MAXinteger PCard8 boolean false integer register true }
ConstantMasksMark		device/constantmask.c	/^public procedure ConstantMasksMark(masks, items, a/ ;" function 370 { IniFmDevImpl }	{ Assert BANDMASKID DevMarkInfo DevPoint ExpandMask LSHIFT PCard16 PCard8 PMask PSCANTYPE RSHIFT RSHIFTEQ SCANMASK SCANSHIFT SCANTYPE SCANUNIT boolean data false framebase framebytewidth framelog2BD integer register source2bits source4bits source8bits true until }
ConstantRectMark		device/constanttrap.c	/^private procedure ConstantRectMark(y, lines, xl, x/ ;" function 41 { ConstantTrapsMark }	{ PSCANTYPE SCANSHIFT SCANTYPE framebase framebytewidth integer leftBitArray lines register rightBitArray }
ConstantRunMark		device/constantrun.c	/^public procedure ConstantRunMark(run, args)/ ;" function 42 { IniFmDevImpl }	{ Card32 DevMarkInfo DevShort PSCANTYPE SCANSHIFT SCANTYPE data framebase framebytewidth framelog2BD integer leftBitArray lines register rightBitArray }
ConstantTrapsMark		device/constanttrap.c	/^public procedure ConstantTrapsMark(t, items, args)/ ;" function 85 { IniFmDevImpl }	{ Card32 ConstantRectMark DevMarkInfo DevTrap Fix Fixed IntPart PSCANTYPE SCANSHIFT SCANTYPE boolean framebase framebytewidth framelog2BD integer leftBitArray lines register rightBitArray true }
ContainsRefs		vm/gcinternal.h	/^#define ContainsRefs(obj)       \\/ ;" macro 1 { GCInternal_TraceROMDict GC_Push GC_WasCollected TracePrivateForShared TracePrivateVM TraceSharedVM }	{ HasRefs escObj }
ContextID		include/postscript.h	/^typedef GenericID ContextID;/ ;" typedef 1 { PSDetach PSJoin }	{ }
ContextOpsInit		postscript/contextimpl.c	/^public procedure ContextOpsInit (reason)/ ;" function 33 { PostScriptInit }	{ Assert ConditionalInvalidateRecycler CtxItem CurrentShared GetCurrentContext GetNextContext GetNextSpace GetNotifyAbortCode Globals GlobalsRec MAXGenericIDIndex MakeXStr MonExitProc MonitorExit NIL RgstContextProcs RgstFontsSemaphoreProc RgstGCContextProcs RgstMark RgstSaveSemaphoreProc RgstStrokeSemaphoreProc SIZE_ID_SPACE SetCurrentContext SetShared SpaceExclusionSemaphore TotalExclusionSemaphore YieldByRequest YieldTimeLimit boolean ctxTab ctxTabSize currentPSContext forkStartup gTimestamp globals initCtxTabSize integer monitorcmd mrkMonitor nextFreeID nextID os_sureCalloc ps_getsize string true }
ContextYield		product/ipcscheduler.c	/^public procedure ContextYield(YieldReason  reason,/ ;" function 61 { PSListener SelfDestructPSContext WBCoProc WBMsg_send }	{ CantHappen CoReturn Coroutine NSCheckNotifyContext PSSchedulerContext ReleaseMsg RestrictInputPort SchedulerMsg UnrestrictInputPort boolean currentSchedulerContext data false header notifyPort scheduler true }
ContractVMSection		vm/vm_segment.c	/^public procedure ContractVMSection(vmStructure)/ ;" function 21 { CreateVM DestroyVM ExpandVMSection ResetVMSection WriteVMSection }	{ Assert FreeSegment NIL PVMSegment Reclaim_Reserve current }
ControlInit		postscript/control.c	/^public procedure ControlInit(reason)  InitReason r/ ;" function 18 { PostScriptInit }	{ Begin End PSUndef RgstExplicit endswitch rootShared }
ConvertColorCMYK		device/devcommon.c	/^public DevColor ConvertColorCMYK (device, colorSpa/ ;" function 58 { GenConvertColor }	{ DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DevColor DevColorVal MAXCOLOR NULL fp255 fpHalf1 integer }
ConvertColorRGB		device/devcommon.c	/^public DevColor ConvertColorRGB (device, colorSpac/ ;" function 54 { GenConvertColor WdConvertColor }	{ DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DevColor DevColorVal colorWb colorWg colorWr fp255 fpHalf1 fpOne integer real }
ConvertToListPath		graphics/pathreduce.c	/^public procedure ConvertToListPath(path) register / ;" function 151 { AddToPath AppendPath BreakUpPath ClosePath ConvertToListPath DoPath DoRdcPth PSUPath PathForAll QRdcOk ReversePath StrkInternal TlatPath }	{ BBCompare BBoxCompareResult BBoxRec CallAddTrapToPath CantHappen Cd ClNewPt ClosePath ConvertToListPath DevCd FeedPathToReducer FrPth GRstr GSave Get16KBBox IntersectPath LineTo MAX MIN MoveTo NULL PGState Path PathType QuadPath RCLastPt RCNextPt RdcClip RdcClose Reduce ResetReducer SetRdcScal SetUpForRectClip StrkPath StrkPth TlatPath addPath boolean chunkBBox false flatEps gs integer maxXChunk maxYChunk pathOffset register true xChunkOffset yChunkOffset }
Copy		language/stack.c	/^public procedure Copy(stack, n)/ ;" function 17 { PSCopy }	{ CountStack Object Overflow RecyclerPush Underflow }
CopyDelayedFont		fonts/compshow.c	/^public procedure CopyDelayedFont() {/ ;" function 15 { }	{ AllocCopyDict CheckCI CurrentShared DURING END_HANDLER HANDLER RERAISE SetShared boolean fontDict gs ss }
CopyDevPrim		device/devprim.c	/^public DevPrim *CopyDevPrim(from) DevPrim *from;/ ;" function 54 { DoRdcPth DoUAppend ReducePathTrapsFilled UCGetDevPrim UStrkPthProc }	{ CantHappen CopyRun DURING DevMask DevPrim DevRun DevTrap DisposeDevPrim END_HANDLER HANDLER NULL NewDevPrim RERAISE data integer os_sureCalloc register }
CopyDict		language/dict.c	/^public procedure CopyDict(from, pto)  DictObj from/ ;" function 6 { PSCopy }	{ XlatDictRef cardinal copydict false true }
CopyNumStrmForCache		language/numstrm.c	/^public procedure CopyNumStrmForCache(ns, s32, s8)/ ;" function 42 { EnterPathInCache }	{ CantHappen Card32 DURING END_HANDLER FREE HANDLER NEW NULL Object PCard32 PObject RERAISE VMCarCdr arrayObj integer p pkdaryObj register s strObj string }
CopyObject		language/pa_relocator.c	/^#define CopyObject(d, s) *(Object *)(d) = *(Object/ ;" macro 1 { DecodeObj EncodeObj RelocateObj }	{ Object d s }
CopyOffscreen		bintree/layer.c	/^static void CopyOffscreen(Bounds *bounds, Piece p)/ ;" function 12 { LAddToInstance }	{ BACKCHAN BPCHAN CompositeOperation copyCO p true }
CopyOnscreen		bintree/layer.c	/^static void CopyOnscreen(Bounds *bounds, Piece p)/ ;" function 11 { LFlushBits }	{ BACKCHAN BPCHAN CompositeOperation copyCO p true }
CopyPath		graphics/pathbuild.c	/^public procedure CopyPath(to, from) PPath to, from/ ;" function 5 { DoStrkPth PSClipPath PSViewClipPath PathForAll ReducePathClipInt VCSaveProc }	{ AddPathRef Assert }
CopyRun		device/devprim.c	/^private procedure CopyRun(from, to) DevRun *from, / ;" function 10 { CopyDevPrim }	{ DevShort NULL data os_sureCalloc }
CopyStack		language/stack.c	/^public procedure CopyStack(src, dst, n)/ ;" function 20 { PSFork PSJoin }	{ CountStack Object Overflow RecyclerPush Underflow }
CopySwap4		include/fp.h	/^#define CopySwap4(from, to) \\/ ;" macro 1 { IEEEHighToNative IEEELowToNative NativeToIEEEHigh NativeToIEEELow Swap4 }	{ FloatRep }
CopyThresholds		graphics/gray.c	/^private procedure CopyThresholds(to, from) DevScre/ ;" function 9 { GetType3Screen GetType4Screen MakeDefaultHalftone }	{ integer }
CopyTrickyDict		language/dict.c	/^private procedure CopyTrickyDict(pRealDict)/ ;" function 27 { PutInDict UnDef }	{ BumpCETimeStamp CurrentShared DURING DictObj END_HANDLER HANDLER RERAISE SetShared VMPutElem boolean cardinal copydict false rootPrivate true }
CopyTrimmedEdge		graphics/maketrap.c	/^CopyTrimmedEdge(eOld, eNew, yOld, yNew)/ ;" function 33 { BoxTrapCompare TrapTrapInt }	{ Assert FTrunc register }
CopybackRetained		bintree/bintreetypes.h	/^#define CopybackRetained(l) ((l)->layerType==RETAI/ ;" macro 1 { BPObscureBecause BPObscureInside LPromoteLayer LSetAlphaBits LSetDepthLimit }	{ A_BITS RETAINED }
Coroutine		include/coroutine.h	/^typedef struct _t_CoroutineRec *Coroutine;/ ;" typedef 1 { CallAsCoroutine CoReturn ContextYield CoroutineRootProc CreateCoroutine InitCoroutine }	{ }
CoroutineRec		coroutine/corouxfer.c	/^typedef struct _t_CoroutineRec {\/* Coroutine concr/ ;" typedef 8 { CreateCoroutine InitCoroutine }	{ }
CoroutineRootProc		coroutine/corouxfer.c	/^private CoroutineRootProc(arg)/ ;" function 9 { CreateCoroutine }	{ CantHappen Coroutine arg currentCoroutine }
CoroutineTopLevel		product/ipcscheduler.c	/^private procedure CoroutineTopLevel(Coroutine sour/ ;" function 5 { CreateTypedContext }	{ CantHappen }
CouldRecycle		vm/abmimpl.c	/^#define CouldRecycle(o) IsRecyclableType(o) && InR/ ;" macro 1 { GC_MoveRecycleRange }	{ InRange IsRecyclableType }
CountStack		language/stack.c	/^public cardinal CountStack(stack, max)/ ;" function 7 { AStore ArrayFromStack Copy CopyStack HandleStackOverflow PSCntDictStack PSCntExecStack PSCoProc PSCount PSFontRun PSFork Roll }	{ integer max register }
CountToMark		language/stack.c	/^public cardinal CountToMark(stack)  PStack stack;/ ;" function 12 { AryToMrk PSCntToMark PSFork PSSetUCacheParams PSStCParams }	{ PObject PSError escObj integer objMark register unmatchedmark }
CounterGt		fonts/glbclr.c	/^private boolean CounterGt(c1, c2)/ ;" function 23 { SortGroupsByFrac }	{ FTruncF Fixed FixedHalf boolean false true }
CrFile		language/stream.c	/^public procedure CrFile(pstm)/ ;" function 9 { IsCrFile PSCrFile }	{ Lobj MakePStm PObject closedStm execStk register stmObj }
CrMtx		graphics/graphics.c	/^public procedure CrMtx(m) PMtx m; {*m = gs->matrix/ ;" function 1 { AnamorphicNormStrkWdth CompSlowShow DTfmToFixed MakeCacheDev2 SetCchDevice SetCharWidth SetHalfWidth TfmToBB }	{ gs }
CrRGBColor		graphics/colorops1.c	/^private procedure CrRGBColor(r, g, b)  real *r, *g/ ;" function 35 { PSCrHSBColor PSCrRGBColor }	{ Color DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DebugAssert LimitColor fpOne fpZero gs r real }
CreateContext		postscript/contextimpl.c	/^public PSContext CreateContext (space, in, out, st/ ;" function 68 { CreatePSContext InitPostScript PSFork }	{ Card32 ConditionalInvalidateRecycler CreateData CreateSchedulerContext CreateStacks DURING DestroyPSContext END_HANDLER FREE HANDLER LimitCheck LoadVM NEW NIL NewContextID PSCoProc PSContext PSContextRec PSKernelContext PSKernelContextRec RERAISE RecycleID SetCETimeStamp UnloadContext currentPSContext dictStk execStk nullObj opStk os_stdin os_stdout scheduler staticData }
CreateCoroutine		coroutine/corouxfer.c	/^public Coroutine CreateCoroutine(proc, info, stack/ ;" function 29 { CallAsCoroutine CreateTypedContext }	{ ApplyFootprints Coroutine CoroutineRec CoroutineRootProc NIL _Exc_Header coroutineCheckFlag coroutineExtraStack initxfer integer os_malloc }
CreateData		vm/staticdata.c	/^public PCard8 CreateData ()/ ;" function 29 { CreateContext }	{ BLUNDERKEY CallDataProcedures LoadPointers NEW NIL PCard8 integer staticData }
CreateFileStm		language/stream.c	/^public Stm CreateFileStm(name, acc)/ ;" function 20 { CreateFileStream FCOpenStream }	{ BIF NIL PSError Stm StoDevCreateStm UndefFileName builtInFiles invlflaccess register }
CreateFileStream		language/stream.c	/^public procedure CreateFileStream(str, acc, psob)/ ;" function 15 { PSFile PSRun PSUClRead }	{ BIF CreateFileStm DURING END_HANDLER HANDLER LimitCheck Lobj MakePStm NIL RERAISE Stm StringText character fclose maxName register }
CreateFilterStm		fonts/fontrun.c	/^private Stm CreateFilterStm(source, fmt)/ ;" function 18 { DetermineFormat FCOpenStream }	{ BytesInSeg CantHappen ComStmProcs ComStmSource FmtIBM FmtMac ReadIBMSegHdr ReadMacSegHdr ReadSegHdr Stm StmCreate StmObj integer true }
CreateGStack		graphics/gstates.c	/^public PGStack CreateGStack()/ ;" function 12 { GStateDataHandler }	{ GState InitGS NULL PGStack PGState gStateExtProc gs gsStorage gstackStorage os_newelement register }
CreateIPCStreams		product/ipcstream.c	/^public procedure CreateIPCStreams(port_t remote_po/ ;" function 22 { NSCreatePS }	{ DURING END_HANDLER HANDLER IPCInitializeStm NIL NULL PSLimitCheck RERAISE Stm StmCreate StmDestroy ipcStmProcs register }
CreateNewContext		product/listener.c	/^private procedure CreateNewContext(notification_t / ;" function 35 { PSListener }	{ Code DURING END_HANDLER HANDLER NSContextType NSCreateContext NSGetContextType NSLoadContextType NULL PSLimitCheck PSSchedulerContext contextList os_fprintf os_stderr }
CreateNullDevice		device/nulldev.c	/^public PDevice CreateNullDevice() { \/* exported to/ ;" function 3 { Mnextmain NSCreatePS }	{ MakeNullDevice NIL nullProcs }
CreatePSContext		postscript/contextimpl.c	/^public PSContext CreatePSContext(space, in, out, d/ ;" function 41 { Mnextmain NSCreatePS }	{ Begin CreateContext DURING END_HANDLER HANDLER LoadVM MAKEVM MakeXStr NIL NewDevice PSContext PSMakeRunnable SwitchPSContext UnloadContext currentPSContext rootShared string trickyUserDict vmShared }
CreatePSSpace		postscript/contextimpl.c	/^public PSSpace CreatePSSpace() {/ ;" function 23 { InitPostScript Mnextmain NSCreatePS }	{ Assert CreatePrivateVM DURING END_HANDLER FREE HANDLER NEW NIL NewSpaceID PSSpace PSSpaceRec RecycleID s spaces }
CreatePrivateVM		postscript/psspace.c	/^public PVM CreatePrivateVM (spaceID)/ ;" function 56 { CreatePSSpace }	{ AllocChars AllocPArray CreateVM CurrentShared DURING DestroyVM END_HANDLER HANDLER LoadVM NIL PVM RERAISE RecyclerForObject ResetRecycler SetShared VMCopyArray VMRoot boolean false integer level privateRecycler rootPrivate rootShared true vmPrivate vmShared }
CreateSchedulerContext		product/pscontext.c	/^public PSSchedulerContext CreateSchedulerContext(P/ ;" function 7 { CreateContext }	{ CreateTypedContext NSGetContextType PSCONTEXTID PSSchedulerContext }
CreateSegmentPool		vm/vm_segment.c	/^public procedure CreateSegmentPool ()/ ;" function 4 { Init_VM_Memory }	{ VMSegment os_newpool segmentPool }
CreateSharedVM		postscript/postscript.c	/^private CreateSharedVM ()/ ;" function 92 { BuildInitialState }	{ AllocChars AllocPArray AllocPNameArray Assert Card32 CreateVM DictP HASHINDEXFIELD HASHINDEXMASK MAXrootParam NEASize NIL NumCArg PVMRoot ResetRecycler SetDictAccess SetShared TrickyDictP VMRoot VMSetRAMAlloc VMSetROMAlloc VMVERSION cardinal initErrorDictSize initFontDirectorySize initInternalDictSize initSharedDictSize initSharedFontDirectorySize initStatusDictSize initSysDictSize initTrickyArraySize initUserDictSize integer rAccess rootPrivate rootShared sharedRecycler tdErrorDict tdFontDirectory tdStatusDict tdUserDict trickyErrorDict trickyFontDirectory trickyStatusDict trickyUserDict true vmShared }
CreateStack		vm/abmimpl.c	/^#define	CreateStack(stk, mem, size)			\\/ ;" macro 1 { GC_MoveRecycleRange }	{ CAST GCInternal_PushNoTest NIL PObject false }
CreateStacks		language/stack.c	/^public procedure CreateStacks ()/ ;" function 9 { CreateContext }	{ NewStack dictStk execStk initDictstkSize initExecstkSize initOpstkSize initRefstkSize opStk refStk }
CreateTypedContext		product/ipcscheduler.c	/^public PSSchedulerContext CreateTypedContext(PVoid/ ;" function 32 { CreateSchedulerContext NSCreateWB }	{ COROUTINESTACKSIZE CoroutineTopLevel CreateCoroutine DEFAULT_FORMAT PSSchedulerContext contextList false initialDepthLimit objectFormat os_newelement scStorage true }
CreateVM		vm/vm_segment.c	/^public PVM  CreateVM (Shared, createSegment)/ ;" function 85 { CreatePrivateVM CreateSharedVM ReadVM }	{ ContractVMSection DURING DebugAssert DvmExpansion DvmReserve END_HANDLER ExpandVMSection FREE FreeSegment GCInternal_VMChange HANDLER NEW NIL NewRecycler NumCArg PCard8 PRecycler PVM PVMPrivateData RERAISE SIZE_VM_EXPANSION VMPrivateData VMStructure VMpassword current level ps_getsize sharedRecycler stPermanentRAM stROM stVolatileRAM vVMSPLIT }
Cross		graphics/cscan.c	/^typedef union _Cross {/ ;" typedef 16 { BuildYCross CScan MB1ALLOCINCREMENT ResetCScan }	{ }
CrossFlagField		graphics/cscan.c	/^typedef Card16 CrossFlagField;	\/* One integer *exa/ ;" typedef 1 { ResetCScan }	{ }
CrossFlags		graphics/cscan.c	/^typedef struct _CrossFlags {/ ;" typedef 12 { ResetCScan }	{ }
CrossPtr		graphics/cscan.c	/^typedef union _Cross {/ ;" typedef 16 { AddYCross BADCROSS BuildCxtn BuildInitialRuns BuildYCross CScan CheckBlackDown CheckDeletePixel CheckHorizWhite ConnectWhitePairs ConnectedRunOpposite DeletePixel DoXInflections EditBlackHoriz EditBlackSpace EditWhiteHoriz EditWhiteSpace ExchangeCrossPtr ExpandWhiteDropOuts ExtendRunDropOut FillInColumn FillInInflection FinishPath FinishSplice FixCrossFlags FixRuns FixupExtendLeft FixupExtendRight NewCross NewLinkCross NewXtraCross PixelIsBlack ResetCScan ReturnBits ScanLineCxtn SetLeftFlag SplicePixel StartSplice }	{ }
CtxItem		postscript/contextimpl.c	/^typedef struct { \/* element of the map *\// ;" typedef 4 { ContextOpsInit NewContextID NewSpaceID }	{ }
Ctxt_GetCurrentCtxt		vm/vm_garbage.c	/^public GenericID Ctxt_GetCurrentCtxt ()/ ;" function 5 { TracePrivateForShared TracePrivateVM }	{ Assert NIL gcGetCurrentCtxt }
Ctxt_GetNextCtxt		vm/vm_garbage.c	/^public GenericID Ctxt_GetNextCtxt (space, prev)/ ;" function 7 { TracePrivateForShared TracePrivateVM }	{ Assert NIL gcGetNextCtxt }
Ctxt_GetNextSpace		vm/vm_garbage.c	/^public PVM Ctxt_GetNextSpace (space)/ ;" function 6 { TraceSharedVM }	{ Assert NIL gcGetNextSpace }
Ctxt_NIL		vm/vm_garbage.c	/^public GenericID Ctxt_NIL;	\/* NIL value for a Ctxt/ ;" global 1 { Init_VM_Garbage TracePrivateForShared TracePrivateVM }	{ }
Ctxt_RestartAllCtxts		vm/vm_garbage.c	/^public procedure Ctxt_RestartAllCtxts ()/ ;" function 5 { GC_CollectShared }	{ Assert NIL gcTotalSemaphore }
Ctxt_RestartAllSiblings		vm/vm_garbage.c	/^public procedure Ctxt_RestartAllSiblings ()/ ;" function 5 { TracePrivateVM }	{ Assert NIL gcSpaceSemaphore }
Ctxt_SetCurrentCtxt		vm/vm_garbage.c	/^public procedure Ctxt_SetCurrentCtxt (context)/ ;" function 12 { TracePrivateForShared TracePrivateVM }	{ Assert LoadData LoadPointers NIL gcSetCurrentCtxt procedure }
Ctxt_StopAllCtxts		vm/vm_garbage.c	/^public procedure Ctxt_StopAllCtxts ()/ ;" function 5 { GC_CollectShared }	{ Assert NIL gcTotalSemaphore }
Ctxt_StopAllSiblings		vm/vm_garbage.c	/^public procedure Ctxt_StopAllSiblings ()/ ;" function 5 { TracePrivateVM }	{ Assert NIL gcSpaceSemaphore }
CullCounters		fonts/glbclr.c	/^private void CullCounters(ss, ns, cntrs, cs, pNcnt/ ;" function 15 { GlobalColoring }	{ NULL SimpleCounter ss }
CurIsFirst		graphics/viewclip.c	/^#define CurIsFirst() \\/ ;" macro 1 { DevClipIsRect GetDevClipBBox GetDevClipDevBBox GetDevClipPrim }	{ DevPrim NULL curVC gs viewclipCache }
CurStackUnused		coroutine/corouxfer.c	/^public integer CurStackUnused()/ ;" function 6 { }	{ MAXinteger currentCoroutine footprint integer }
CurWindowID		product/windowops.c	/^public int CurWindowID()/ ;" function 7 { PSCurrentWindow }	{ NULL PDevice PSGetDevice PSInvalidID PWindowDevice wdProcs }
CurrentDevice		device/devcommon.c	/^public PDevice CurrentDevice;/ ;" global 1 { FmWakeup GenWakeup NullWakeup }	{ }
CurrentMIDAge		fonts/midcache.c	/^public Card32 CurrentMIDAge;/ ;" global 1 { DecrSetMIDAge InitFontCache SetMIDAge SortMIDAges }	{ }
CurrentMouse		mousekeyboard/kbdroutines.c	/^void CurrentMouse(int *xAt, int *yAt)/ ;" function 8 { PSAdjustCursor PSAdjustMouse PSCurrentMouse }	{ Point eventGlobals p }
CurrentShared		include/vm.h	/^#define	CurrentShared()	(vmCurrent->shared)/ ;" macro 1 { ABM_Allocate AllocPName AllocRAMArray AllocRAMStr ContextOpsInit CopyDelayedFont CopyTrickyDict CreatePrivateVM DetermineFormat DictP GC_CollectPrivate GC_CollectShared GC_MoveRecycleRange GetDMFDict GetDMFItem Init_Cmds LStrObj MakeCompFont MakeFontSupp MakePStm MakeScreenDict PSCurrentShared PSDefUserObj PSEExec PSFontRun PSGState PSRun PSSetShared PSSetThresh PSSysNameMap PurgeSFForKey RgstOpSet RgstPackageNames TraceSharedVM TrickyDictP }	{ vmCurrent }
CurrentVMSegmentType		vm/vm_segment.c	/^public Level CurrentVMSegmentType()/ ;" function 5 { AllocPName AllocPStream Init_Cmds RgstOpSet RgstPackageNames }	{ NIL current level stPermanentRAM stVolatileRAM vVMSPLIT vmShared }
CurveTo		graphics/pathbuild.c	/^public procedure CurveTo(c1, c2, c3, p) Cd c1, c2,/ ;" function 6 { AddCirclePath Arc ArcC BuildChar CallArc DoArcTo DoUAppend FCurveTo PSCurveTo PSRCurveTo QUsrPthCurveTo RCurveTo UPCurveTo UsrPthArc UsrPthArcTo UsrPthCurveTo UsrPthDoCurveTo }	{ AddToPath CheckCurPt p pathcurveto }
CustomOpsInit		postscript/customops.c	/^public procedure CustomOpsInit (reason) InitReason/ ;" function 18 { PostScriptInit }	{ GC_RgstGetRootsProc GC_RgstSharedRootsProc Globals GlobalsRec ItemChunk NIL NULL PCard8 RefAny RegisterData STATICEVENTFLAG chunkPool chunks globals integer miFree myGetRoots myTerminateSpace os_newpool os_sureCalloc }
CvtToFixed		fonts/cachedev.c	/^public boolean CvtToFixed(pfcd,cd,lower,upper)/ ;" function 7 { CvtToXFixed SetCharWidth }	{ OkFixed pflttofix }
CvtToXFixed		fonts/fontshow.h	/^#define CvtToXFixed CvtToFixed/ ;" macro 1 { SimpleShowByName if }	{ CvtToFixed }
Cxtn		graphics/cscan.c	/^typedef Card8 Cxtn;		\/* WARNING: Can't use type as/ ;" typedef 1 { BuildCxtn GetRuleDesc ScanLineCxtn }	{ }
DAEMON_GID		product/listener.c	/^#define DAEMON_GID 1/ ;" macro 1 { PSSetJobUser PSSetUser }	{ }
DAEMON_UID		product/listener.c	/^#define DAEMON_UID 1/ ;" macro 1 { PSSetJobUser PSSetUser }	{ }
DARKGRAYPAT		include/bintree.h	/^#define DARKGRAYPAT 1/ ;" macro 1 { }	{ }
DASHLIMIT		graphics/stroke.h	/^#define DASHLIMIT 11/ ;" macro 1 { PSSetDash }	{ }
DATA_ACK_MESSAGE_ID		product/ipcstream.h	/^#define DATA_ACK_MESSAGE_ID 3052/ ;" macro 1 { IPCFillBuf sendAck }	{ }
DATA_EV_ACK_ID		product/ipcstream.h	/^#define DATA_EV_ACK_ID 3055	\/* DATA_EV_ID + reques/ ;" macro 1 { IPCFillBuf }	{ }
DATA_EV_ACK_MSG_ID		product/ipcstream.h	/^#define DATA_EV_ACK_MSG_ID 3056	\/* reply to DATA_E/ ;" macro 1 { IPCFillBuf LAST_MESSAGE_ID sendAck }	{ }
DATA_EV_ID		product/ipcstream.h	/^#define DATA_EV_ID 3054		\/* msg with data and upda/ ;" macro 1 { IPCFillBuf }	{ }
DATA_HANDLER_FLAGS		vm/recycler.c	/^#define	DATA_HANDLER_FLAGS \\/ ;" macro 1 { Init_Recycler }	{ STATICEVENTFLAG }
DATOP		include/bintree.h	/^#define DATOP		9	\/* Destination atop source *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
DCPixelArgs		include/devcreate.h	/^typedef struct _t_DCPixelArgs/ ;" typedef 21 { PSMachPortDevice }	{ }
DEALIGN		include/disk.h	/^#define DEALIGN 4		\/* align DirEntries to 4-byte b/ ;" macro 1 { }	{ }
DEBUG		fonts/atm.h	/^#define DEBUG (0)/ ;" macro 1 { }	{ }
DEBUGERROR		graphics/cscan.c	/^#define DEBUGERROR(exp, str)   \/* This is intended/ ;" macro 1 { BuildCxtn BuildInitialRuns CSPathPoints CScan CheckDeletePixel DeletePixel DoFixupAction DoXInflections FillInColumn FillInInflection FillInRange FinishPath FinishSplice ResetCScan SetLeftFlag SplicePixel }	{ exp }
DECLAREVARS		devpattern/ims11d11.c	/^#define DECLAREVARS/ ;" macro 1 { }	{ }
DEFAULTHYST		pslib/pool.c	/^#define	DEFAULTHYST	10/ ;" macro 1 { os_newpool }	{ }
DEFAULTSCREEN		devpattern/patternimpl.c	/^#define DEFAULTSCREEN -1/ ;" macro 1 { AllocScreenPrivate FreeScreen ValidateTA }	{ }
DEFAULTTABLELIMIT		graphics/transferimpl.c	/^#define DEFAULTTABLELIMIT 14/ ;" macro 1 { IniTransfer }	{ }
DEFAULT_FORMAT		product/ipcscheduler.c	/^#define DEFAULT_FORMAT 2/ ;" macro 1 { CreateTypedContext }	{ }
DEF_PAT_SIZE		graphics/gray.c	/^#define DEF_PAT_SIZE 2044/ ;" macro 1 { GetPatternBase }	{ }
DEG		include/fp.h	/^#define DEG(x) ((x)*57.29577951308232088)/ ;" macro 1 { PSATan }	{ }
DEType		include/disk.h	/^typedef short int DEType;	\/* directory entry type / ;" typedef 1 { }	{ }
DEVCMYK_COLOR_SPACE		include/devicetypes.h	/^#define DEVCMYK_COLOR_SPACE -3/ ;" macro 1 { ConvertColorCMYK ConvertColorRGB CrRGBColor ImSXXD11 ImageDict MarkNextImage PSAlphaImage PSColorImage PSCrCMYKColor PSCrGray PSSetCMYKColor PopColorValues TableSampleProc }	{ }
DEVCOMMON_H		device/devcommon.h	/^#define DEVCOMMON_H/ ;" macro 1 { }	{ }
DEVCREATE		include/package_specs.h	/^#define DEVCREATE	"devcreate.h"/ ;" macro 1 { }	{ }
DEVCREATE_H		include/devcreate.h	/^#define DEVCREATE_H/ ;" macro 1 { }	{ }
DEVELOP		include/environment.h	/^#define DEVELOP		1/ ;" macro 1 { ABM_Init CANREVERSEVM CAN_WRITE_OBJ DebugInit DictInit FontBuildInit FontCacheInit FontDiskInit FontRunInit FontShowInit GCInternal_Init IniPathPriv IniUCache InitMakeVM Init_Recycler Init_VM_Memory MAKEVM NOREGISTER NameInit StackInit StreamInit TRACE_RECYCLER VMINIT }	{ }
DEVGRAY_COLOR_SPACE		include/devicetypes.h	/^#define DEVGRAY_COLOR_SPACE -1/ ;" macro 1 { BMRun ConvertColorCMYK ConvertColorRGB CrRGBColor ImSXXD11 MarkNextImage PSAlphaImage PSColorImage PSCrCMYKColor PSCrGray PSImage PSImageMask PopColorValues SetGray TableSampleProc }	{ }
DEVICE		include/package_specs.h	/^#define DEVICE		"device.h"/ ;" macro 1 { }	{ }
DEVICETYPES		include/package_specs.h	/^#define DEVICETYPES	"devicetypes.h"/ ;" macro 1 { }	{ }
DEVICETYPES_H		include/devicetypes.h	/^#define DEVICETYPES_H/ ;" macro 1 { }	{ }
DEVICE_CONSISTENT		include/devpattern.h	/^#define	DEVICE_CONSISTENT 1/ ;" macro 1 { }	{ }
DEVICE_H		include/device.h	/^#define DEVICE_H/ ;" macro 1 { }	{ }
DEVIMAGE		include/package_specs.h	/^#define DEVIMAGE	"devimage.h"/ ;" macro 1 { }	{ }
DEVIMAGE_H		include/devimage.h	/^#define    DEVIMAGE_H/ ;" macro 1 { }	{ }
DEVMARK_H		mp/devmark.h	/^#define DEVMARK_H/ ;" macro 1 { }	{ }
DEVPATTERN		include/package_specs.h	/^#define DEVPATTERN	"devpattern.h"/ ;" macro 1 { }	{ }
DEVPATTERN_H		include/devpattern.h	/^#define    DEVPATTERN_H/ ;" macro 1 { }	{ }
DEVPRIMVALUELENGTH		device/devprim.c	/^#define DEVPRIMVALUELENGTH (100*(sizeof(DevTrap)))/ ;" macro 1 { AddDevPrimValue }	{ DevTrap }
DEVPRIM_H		device/devprim.h	/^#define DEVPRIM_H/ ;" macro 1 { }	{ }
DEVRGB_COLOR_SPACE		include/devicetypes.h	/^#define DEVRGB_COLOR_SPACE -2/ ;" macro 1 { ConvertColorCMYK ConvertColorRGB CrRGBColor ImSXXD11 ImageDict MarkNextImage PSAlphaImage PSColorImage PSCrCMYKColor PSCrGray PopColorValues SetRGBColor TableSampleProc }	{ }
DFAProc		language/dict.c	/^private procedure DFAProc()/ ;" function 25 { DictForAll DictInit }	{ DFArec DictObj EPopInteger EPopP EPushInteger EPushP ETopP MAXcardinal NextKeyVal Object PushP TypeCheck cardinal d dfacmd dictObj integer }
DFArec		language/dict.c	/^typedef struct {/ ;" typedef 5 { DFAProc }	{ }
DFArecPtr		language/dict.c	/^typedef struct {/ ;" typedef 5 { }	{ }
DFLT_IMAGE_BUF_SIZE		graphics/image.c	/^#define DFLT_IMAGE_BUF_SIZE 0x60000/ ;" macro 1 { MaxNEW }	{ }
DGColor		devpattern/patternpriv.h	/^typedef Card8 DGColor;/ ;" typedef 1 { }	{ }
DICT_H		language/dict.h	/^#define	DICT_H/ ;" macro 1 { }	{ }
DIN		include/bintree.h	/^#define DIN		7	\/* Destination in source *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
DISABLEDPS		device/framedev.c	/^#define	DISABLEDPS 0/ ;" macro 1 { }	{ }
DISK		include/package_specs.h	/^#define DISK		"disk.h"/ ;" macro 1 { }	{ }
DISKCACHE_H		fonts/diskcache.h	/^#define	DISKCACHE_H/ ;" macro 1 { }	{ }
DISKSL		devpattern/patternimpl.c	/^#define DISKSL 0/ ;" macro 1 { }	{ }
DISK_H		include/disk.h	/^#define DISK_H/ ;" macro 1 { }	{ }
DISSOLVE		include/bintree.h	/^#define DISSOLVE	14	\/* Fake operator *\// ;" macro 1 { BMComposite34 BMComposite38 CompositePriv LCompositeFrom MP12Composite PSDissolve }	{ }
DIVPIECE		bintree/bintreetypes.h	/^#define DIVPIECE ((unsigned char)'d')	\/* 100 *\// ;" macro 1 { BPCompositeFrom BPCompositeTo DPAdjust DPApplyBoundsProc DPApplyProc DPBecomeDivAt DPCompositeFrom DPCompositeTo DPDivideAt DPFindPieceBounds DPFree DPMark DPNewAt DPObscureBecause DPObscureInside DPPrintOn DPRevealBecause DPRevealInside DPSwapCause LCompositeFrom LMoveTo LNewAt }	{ }
DIVesc		fonts/fontbuild.c	/^#define DIVesc 12/ ;" macro 1 { BuildChar CCRunStd }	{ }
DKGRAY		bitmap/bm38.c	/^#define DKGRAY	0x555555ff/ ;" macro 1 { }	{ }
DKGRAY_COLOR		include/bintree.h	/^#define DKGRAY_COLOR    0x55555555/ ;" macro 1 { }	{ }
DLFullProc		include/devcreate.h	/^typedef procedure (*DLFullProc)(\/* unsigned char */ ;" typedef 1 { }	{ }
DMFRestore		fonts/compshow.c	/^private procedure DMFRestore()/ ;" function 25 { CompSlowShow }	{ CheckCI MIDNULL MT NOLL PVMRoot PurgeMID ShowState UniqueMID VMPutElem ZapDelayedDict arrayObj false register rootPrivate rootShared ss ssr tdDummy }
DOSUBcmd		fonts/fontbuild.c	/^#define DOSUBcmd 10/ ;" macro 1 { BuildChar CCRunStd }	{ }
DOUT		include/bintree.h	/^#define DOUT		8	\/* Destination out of source *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
DOVER		include/bintree.h	/^#define DOVER		6	\/* Destination over source *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
DO_OFFSET		fonts/fontbuild.c	/^#define DO_OFFSET (0)/ ;" macro 1 { }	{ }
DOesc		fonts/fontbuild.c	/^#define DOesc 16/ ;" macro 1 { BuildChar CCRunStd }	{ }
DPAdjust		bintree/divpiece.c	/^void DPAdjust(DivPiece *dp, short dx, short dy)/ ;" function 15 { }	{ DIVPIECE DebugAssert H }
DPApplyBoundsProc		bintree/divpiece.c	/^void DPApplyBoundsProc(DivPiece *dp, Bounds *bound/ ;" function 9 { }	{ DIVPIECE DebugAssert MaxBound MinBound data }
DPApplyProc		bintree/divpiece.c	/^void DPApplyProc(DivPiece *dp, void (*proc)())/ ;" function 6 { }	{ DIVPIECE DebugAssert }
DPBecomeDivAt		bintree/divpiece.c	/^DivPiece *DPBecomeDivAt(DivPiece *dp, int coord, u/ ;" function 51 { }	{ CSAddSet CSCopy CSFree CauseSet DIVPIECE DebugAssert DivPiece }
DPCompositeFrom		bintree/divpiece.c	/^void DPCompositeFrom(CompositeOperation *cop)/ ;" function 49 { BPCompositeTo }	{ BITPIECE CompositeOperation DIVPIECE DebugAssert DivPiece H MaxBound MinBound PATTERN divBoundsAt }
DPCompositeTo		bintree/divpiece.c	/^void DPCompositeTo(CompositeOperation *cop)/ ;" function 43 { BPCompositeFrom }	{ BITPIECE CompositeOperation DIVPIECE DebugAssert DivPiece H MaxBound MinBound divBoundsAt }
DPDivideAt		bintree/divpiece.c	/^DivPiece *DPDivideAt(DivPiece *dp, int coord, unsi/ ;" function 18 { }	{ CSAdd DIVPIECE DebugAssert }
DPFindPieceBounds		bintree/divpiece.c	/^Bounds *DPFindPieceBounds(DivPiece *dp, Point p)/ ;" function 6 { }	{ DIVPIECE DebugAssert H p }
DPFree		bintree/divpiece.c	/^void DPFree(DivPiece *dp)/ ;" function 9 { DPRevealInside }	{ CSFree DIVPIECE DebugAssert divPiecePool os_freeelement }
DPInitialize		bintree/divpiece.c	/^void DPInitialize()/ ;" function 5 { LayerInit }	{ DivPiece divPiecePool os_newpool }
DPMark		bintree/divpiece.c	/^BitPiece *DPMark(DivPiece *dp, MarkRec *mrec, Boun/ ;" function 12 { }	{ BitPiece DIVPIECE DebugAssert MaxBound MinBound }
DPNewAt		bintree/divpiece.c	/^DivPiece *DPNewAt(int coord, int cause, Piece less/ ;" function 15 { BPDivideAt }	{ CSAdd CSNew DIVPIECE DivPiece divPiecePool os_newelement }
DPObscureBecause		bintree/divpiece.c	/^DivPiece *DPObscureBecause(DivPiece *dp, int cause/ ;" function 7 { }	{ DIVPIECE DebugAssert }
DPObscureInside		bintree/divpiece.c	/^DivPiece *DPObscureInside(DivPiece *dp, Bounds r, / ;" function 12 { BPObscureInside }	{ CSAdd DIVPIECE DebugAssert MaxBound MinBound r }
DPPrintOn		bintree/divpiece.c	/^void DPPrintOn(DivPiece *dp, int blanks)/ ;" function 19 { }	{ CSPrintOn DIVPIECE DebugAssert H os_fprintf os_stdout }
DPRevealBecause		bintree/divpiece.c	/^DivPiece *DPRevealBecause(DivPiece *dp, int cause)/ ;" function 7 { }	{ DIVPIECE DebugAssert }
DPRevealInside		bintree/divpiece.c	/^Piece DPRevealInside(DivPiece *dp, Bounds r, int c/ ;" function 111 { DPRevealInside }	{ BITPIECE BPBecomeDivAt BPCopy BPIsObscured BPRevealBecause Bounds CSAddSet CSCopy CSFree CSRemove CauseSet DIVPIECE DPFree DPRevealInside DebugAssert MaxBound NOREASON Piece STRIPCONVERTCAUSE VISIBLE r }
DPSFPGlobalsRec		include/fp.h	/^typedef struct {/ ;" typedef 44 { FPInit }	{ }
DPSMESSAGE		include/package_specs.h	/^#define DPSMESSAGE	"dpsmessage.h"/ ;" macro 1 { }	{ }
DPSONLY		graphics/image.c	/^#define DPSONLY 0/ ;" macro 1 { }	{ }
DPSXA		graphics/image.c	/^#define DPSXA 0/ ;" macro 1 { }	{ }
DPS_CODE		fonts/fontbuild.c	/^#define DPS_CODE (0)/ ;" macro 1 { }	{ }
DPSwapCause		bintree/divpiece.c	/^void DPSwapCause(DivPiece *dp, int newCause, int o/ ;" function 9 { DPSwapCause LMoveTo LNewAt }	{ CSSwapFor DIVPIECE DPSwapCause DebugAssert }
DPopP		language/stack.c	/^public procedure DPopP(pob) PObject pob; {IPopSimp/ ;" function 1 { End }	{ IPopSimple dictStk }
DPrintSOP		fonts/debug.c	/^private DPrintSOP(sop)/ ;" function 8 { PrintNameString PrintVal pCIs }	{ Aborted GetDebugStm Stm VMGetChar cardinal fflush putc }
DPushP		language/stack.c	/^public procedure DPushP(pob) PObject pob; {IPushSi/ ;" function 1 { Begin }	{ IPushSimple dictStk }
DSCNDesc		fonts/fontbuild.c	/^#define DSCNDesc 18/ ;" macro 1 { CCRunStd }	{ }
DTcmd		fonts/fontbuild.c	/^#define DTcmd	16/ ;" macro 1 { BuildChar CCRunStd }	{ }
DTfmCd		fp/mtxvec.c	/^public Cd DTfmCd(c, m)  Cd c; PMtx m;/ ;" function 6 { }	{ Cd DTfmPCd }
DTfmP		graphics/graphics.c	/^public procedure DTfmP(c, rc) Cd c; PCd rc;/ ;" function 2 { DoStroke GetDSW GetNormStrkWdth LengthTfm NormalizeStrokeWidth PSAShow PSAWidthShow PSDTfm PSWidthShow PathEndChar }	{ DTfmPCd gs }
DTfmPCd		fp/mtxvec.c	/^public procedure DTfmPCd(c, m, ct)  Cd c;  PMtx m;/ ;" function 5 { AdjstHW ArcInternal BreakUpPath DTfmCd DTfmP DTfmToFixed DTransIfNeed DUserToDevice DoStroke MakeCacheDev2 PSDTfm RTfmPCd SetCchDevice SetCharWidth ShowByName }	{ d }
DTfmToFixed		fonts/cachedev.c	/^private boolean DTfmToFixed(fcd, rcd) PFCd fcd; RC/ ;" function 8 { MakeCacheDev2 SetCchDevice }	{ CrMtx DTfmPCd LOWERSHOWBOUND Mtx OkFixed UPPERSHOWBOUND pflttofix }
DTopP		language/stack.c	/^public procedure DTopP(pob)  PObject pob; {StackTo/ ;" function 1 { Def PSCrDict PSDef PSStore }	{ StackTopP dictStk }
DTransIfNeed		graphics/stroke.c	/^private procedure DTransIfNeed(c, pc) Cd c;  PCd p/ ;" function 2 { StrkCap }	{ DTfmPCd gs needTfm }
DUMMY		include/bintree.h	/^#define DUMMY		-1/ ;" macro 1 { LNewDummyAt LPrintOn }	{ }
DURING		include/except.h	/^#define	DURING {_Exc_Buf Exception;\\/ ;" macro 1 { AcquireLock AllocRAMArray AllocRAMStr BuildChar CCRun CCRunStd CalcThresholds CallFromPS CopyDelayedFont CreateContext CreatePSContext CreatePSSpace CreatePrivateVM DetermineFormat DoRdcPth DoRdcStroke DoStrkPth DoUAppend EnterCircle EnterPathInCache EnterRdcInCache FillBevel FillCircle FillQuad FltnPth GetDMFDict GetDMFItem ImageInternal InitChunk InitClipPath InitPostScript MakeCompFont MakeFontSupp MakeRectPath MakeScreenDict MakeType1Screen MakeType2Screen MinimumClip NewDevice NewViewClip OffsetFill PSCharPath PSFontRun PSFork PSRectClip PSRectFill PSRectStroke PSRectViewClip PSUStroke PSUStrokePath PSWait PathForAll ReducePathClipInt SafeShowMask StrkPth Stroke UCGetDevPrim UStrkPthProc WaitOnJoinable XARdc (etc) }	{ _Exc_Buf _Exc_Header }
DUserToDevice		product/coordinates.c	/^public procedure DUserToDevice(Mtx *matrix, Cd use/ ;" function 8 { PSAdjustCursor SetGSCursor }	{ Cd DTfmPCd RealRound }
Data		device/maskcache.h	/^#define Data(o) ((PCard8)o + sizeof(BMHeader))/ ;" macro 1 { CompactBM GrowBM MCGetCacheBytes MCGetTempBytes ShrinkBM }	{ BMHeader PCard8 }
DataRecord		vm/staticdata.c	/^typedef struct _DataRecord {/ ;" typedef 7 { CallDataProcedures LoadPointers RegisterData }	{ }
DebugAbort		graphics/cscan.c	/^private procedure DebugAbort(str)/ ;" function 11 { DEBUGERROR }	{ printf }
DebugAssert		bintree/bintreetypes.h	/^#define DebugAssert(condition) if (! (condition)) / ;" macro 1 { ABM_SetAllocated AddressValidAtLevel AllocLarge AllocSmall AryToMrk BAGCompositeFrom BMAlloc BMUnlink BPAdjust BPBecomeDivAt BPCompositeFrom BPCompositeTo BPCopy BPCopyback BPDivideAt BPFindPieceBounds BPFree BPIsObscured BPMark BPObscureBecause BPObscureInside BPPrintOn BPRevealBecause BPRevealInside BuildSegmentTable CRun CmdIndexObj CompactBM CompositeShow CrRGBColor CreateVM DPAdjust DPApplyBoundsProc DPApplyProc DPBecomeDivAt DPCompositeFrom DPCompositeTo DPDivideAt DPFindPieceBounds DPFree DPMark DPObscureBecause DPObscureInside DPPrintOn DPRevealBecause DPRevealInside DPSwapCause DecodeAddress DevFlushMask ENDSHOW EncodeAddress FastShow FasterShow FindFreeBytes FindInCache FindOpSet FmMark FreeSegmentTable FreeShowState GC_WasNECollected (etc) }	{ CantHappen }
DebugInit		fonts/debug.c	/^public DebugInit(reason)/ ;" function 16 { }	{ DEVELOP PSPrObject PSPrValue PSpEldest PSpFD PSpMM PSpMS PSpSFC RgstExplicit vSTAGE }
DebugPrintEvent		graphics/reducer.c	/^private procedure DebugPrintEvent(s, pt)  string s/ ;" function 16 { RdcBend RdcEntry RdcExit }	{ PLine PLn PPoint PPt fflush os_printf os_stdout s }
DebugPrintIntersect		graphics/reducer.c	/^private procedure DebugPrintIntersect(lnlf, lnrt, / ;" function 12 { CheckIntersection }	{ PLine PLn PPt fflush os_printf os_stdout }
DebugPrintMakeLine		graphics/reducer.c	/^private procedure DebugPrintMakeLine(line)  LnOffs/ ;" function 9 { MakeLine }	{ PLine PLn PPt fflush os_printf os_stdout }
DebugPrintMakePoint		graphics/reducer.c	/^private procedure DebugPrintMakePoint(pt)  PtOffse/ ;" function 9 { MakePoint }	{ PPoint PPt fflush os_printf os_stdout }
DebugPrintNewPoint		graphics/reducer.c	/^private procedure DebugPrintNewPoint(x, y)  intege/ ;" function 5 { NewPoint }	{ fflush os_printf os_stdout }
DebugPrintRdcClose		graphics/reducer.c	/^private procedure DebugPrintRdcClose()/ ;" function 5 { RdcClose }	{ fflush os_printf os_stdout }
DebugPrintRegions		graphics/reducer.c	/^private procedure DebugPrintRegions()/ ;" function 21 { Reduce }	{ PLn PPt PRegion PRg fflush fixtodbl os_printf os_stdout rgHead }
DecStmByteCnt		devpattern/patternimpl.c	/^private procedure DecStmByteCnt(fileUsage)/ ;" function 11 { FreeScreen InitSLFiles ValidateTA }	{ ferror fseek os_clearerr slstm stmBytesUsed }
DecodeAddress		vm/vm_relocate.c	/^private PCard8 DecodeAddress (segmentAddress)/ ;" function 19 { ApplyRelocation }	{ Assert DebugAssert NIL SegmentAddress segmentTable }
DecodeBbox		product/machportdevice.c	/^static int DecodeBbox(DevLBounds *bbox)/ ;" function 20 { PSMachPortDevice }	{ PSObject PSPopTempObject PSRangeCheck PSTypeCheck intType }
DecodeObj		language/packedarray.c	/^public procedure DecodeObj(pObj, robj)/ ;" function 85 { AGetP ATail BindPkdary PSCopy PSPutInterval PrPkdaryBody VMCarCdr }	{ BOOLEANTYPE BitsForOffset BooleanBase CMDTYPE CantHappen CmdBase CmdIndex CmdIndexObj Code CopyObject ESCAPETYPE EXECNAMETYPE ExecNameBase INTEGERTYPE IntegerBase LBoolObj LITNAMETYPE LIntObj LRealObj LStrObj LitNameBase Lobj MINArrayLength MINOffset MinInteger NameIndexObj Object PCard8 REALTYPE RELPKDARYTYPE RELSTRINGTYPE RelAry XPkdaryObj Xobj cardinal charptr encRealValues opType p register }
DecodePixelDict		product/machportdevice.c	/^static void DecodePixelDict(struct MachPortDevice / ;" function 47 { PSMachPortDevice }	{ DevMarkInfo ExtractBoolean ExtractBooleanDefault ExtractInt MakeDefaultHalftone PSDictGetPObj PSGetMarkInfo PSHandleExecError PSObject PSPopTempObject PSPushObject PSRangeCheck PSSetHalftone PSSetTransfer true }
DecrSetMIDAge		fonts/fontcache.h	/^#define DecrSetMIDAge(mid) MA[mid] = --CurrentMIDA/ ;" macro 1 { FindInCache InsertMID SearchSelectFont ShowInternal SimpleShowByName }	{ CurrentMIDAge MA }
Decrypt		fonts/fontbuild.c	/^#define Decrypt(r, clear, cipher)\\/ ;" macro 1 { CStmBFilBuf CStmHFilBuf PSEExec if }	{ C1 C2 Card16 cipher clear r }
DecryptionType		include/language.h	/^typedef enum {/ ;" typedef 4 { FCOpenStream }	{ }
Def		language/dict.c	/^public procedure Def(key, value)  Object key, valu/ ;" function 9 { PSOpDef RgstExplicit RgstObject StateInit }	{ DTopP KeyName KeyVal Object PutInDict true }
DelayedMakeFont		fonts/compshow.c	/^public procedure DelayedMakeFont ()/ ;" function 42 { CompSlowShow SSSOutCall ShowByName }	{ AryObj CheckCI DictGetP DictObj GetDMFDict GetDMFItem MID MT MakeFontSupp Mtx PAryToMtx PVMRoot ShowState VMPutElem ValidMID arrayObj boolean d fontDict fontsNames gs integer nullObj pfont register rootPrivate rootShared ss ssr tdDummy true }
DeleteCIs		fonts/cicache.c	/^public procedure DeleteCIs(mid) MID mid; {/ ;" function 20 { PurgeMID }	{ Assert CI CINULL CIOffset CISortedList CheckCI MIDCount PCIItem ReleaseCI integer register }
DeletePixel		graphics/cscan.c	/^private procedure DeletePixel(ll, x)/ ;" function 19 { DoFixupAction }	{ CrossPtr DEBUGERROR REG true }
DeleteScreen		graphics/gray.c	/^private procedure DeleteScreen(screen) register Sc/ ;" function 6 { MakeType1Screen MakeType2Screen RemScrRef }	{ DevFreeHalftone NIL NULL gs integer os_freeelement screenPool }
DepthToLog2BD		device/framedev.c	/^private DevShort DepthToLog2BD(depth) DevShort dep/ ;" function 12 { SetFmDeviceMetrics }	{ CantHappen }
DestroyCoroutine		coroutine/corouxfer.c	/^public DestroyCoroutine(coroutine)/ ;" function 10 { CallAsCoroutine NSDestroyContext }	{ Assert currentCoroutine }
DestroyData		vm/staticdata.c	/^public DestroyData ()/ ;" function 15 { DestroyPSContext }	{ CallDataProcedures FREE NIL staticData }
DestroyNameMap		language/name.c	/^public procedure DestroyNameMap ()/ ;" function 6 { LanguageDataHandler }	{ LNullObj NIL rootPrivate }
DestroyPSContext		postscript/contextimpl.c	/^public procedure DestroyPSContext()/ ;" function 34 { CreateContext InitPostScript NSDestroyPS }	{ Assert DestroyData FREE NIL PSContext PSSpace RecycleID currentPSContext s }
DestroyPSSpace		postscript/contextimpl.c	/^public boolean DestroyPSSpace(space) PSSpace space/ ;" function 22 { InitPostScript NSCreatePS NSDestroyPS }	{ DestroyVM FREE NIL PSSpace RecycleID false spaces true }
DestroyPat		devpattern/patternimpl.c	/^public procedure DestroyPat (h) PatternHandle h; {/ ;" function 11 { ConstCMYKPattern ConstGrayPattern ConstRGBPattern GrayPattern GryPat4Of4 MaskPattern MonochromePattern RGBPattern }	{ FGEnterMonitor FGExitMonitor FreePattern MAXPAT NIL PPatCacheInfo integer patterns }
DestroyPattern		include/devpattern.h	/^#define DestroyPattern(h) (*(h)->destroyPattern)((/ ;" macro 1 { FmGoAway }	{ }
DestroyVM		vm/vm_segment.c	/^public procedure DestroyVM (vmOld)/ ;" function 34 { CreatePrivateVM DestroyPSSpace ReadVM }	{ CallDataProcedures ContractVMSection FREE FreeSegment GCInternal_VMChange LoadVM NIL PVM current rootPrivate vmPrivate }
DetermineFormat		fonts/fontrun.c	/^private procedure DetermineFormat(state)/ ;" function 82 { PSFontRun }	{ CreateFilterStm CurrentShared DURING END_HANDLER EOF EPopP EPushP FmtAscii FmtIBM FmtMac GetIntBE GetStream HANDLER InvlReturn LINE_LEN MAC_HEADER_LENGTH MakePStm Object RERAISE SetShared Stm Xobj adobeType1FontComment boolean fclose fseek getc os_fgets otherType1FontComment true xAccess }
DetermineTieBreaker		graphics/cscan.c	/^private boolean DetermineTieBreaker(p1, x1, p2, x2/ ;" function 25 { FixPixelProblem }	{ FCd FntITfmP MidPixel cd1 cd2 printf }
DevAddHalftoneRef		device/halftone.c	/^public procedure DevAddHalftoneRef(h) DevHalftone / ;" function 9 { BM34InitClassVars MP12InitClassVars }	{ DevPrivate FGEnterMonitor FGExitMonitor NIL integer }
DevAddMaskRef		device/maskcache.c	/^public procedure DevAddMaskRef(mask) PMask mask; {/ ;" function 7 { }	{ NIL }
DevAddTfrFcnRef		device/tfrfcn.c	/^public procedure DevAddTfrFcnRef(t) DevTfrFcn *t; / ;" function 9 { }	{ DevPrivate FGEnterMonitor FGExitMonitor NIL integer }
DevAllocHalftone		device/halftone.c	/^public DevHalftone *DevAllocHalftone(/ ;" function 25 { GetType3Screen GetType4Screen MakeDefaultHalftone MakeType1Screen MakeType2Screen }	{ AllocHalftone DURING DevHalftone DevPrivate END_HANDLER FGEnterMonitor FGExitMonitor HANDLER NULL RERAISE true }
DevAllocTfrFcn		device/tfrfcn.c	/^public DevTfrFcn *DevAllocTfrFcn (white, red, gree/ ;" function 46 { ActivateTfr }	{ DURING DevFreeTfrFcn DevTfrFcn END_HANDLER FGEnterMonitor FGExitMonitor GETTABLE GETUCRTABLE HANDLER NULL RERAISE boolean false os_newelement os_newpool tfrfcnPool true }
DevAlwaysFalse		device/devcommon.c	/^public boolean DevAlwaysFalse (device) PDevice dev/ ;" function 3 { IniGenDevImpl IniMaskDevImpl IniNullDevImpl }	{ false }
DevAlwaysTrue		product/windowdevice.c	/^private DevLong DevAlwaysTrue(PDevice device) { re/ ;" function 1 { IniWdDevImpl }	{ }
DevBB		fonts/fontspriv.h	/^typedef struct {/ ;" typedef 4 { CompositeShow }	{ }
DevBBCompare		graphics/graphics.c	/^public BBoxCompareResult DevBBCompare(figbb, clipb/ ;" function 11 { DoImageMark ShowMask StringMark }	{ }
DevBBox		include/graphics.h	/^typedef struct _t_DevBBoxRec {/ ;" typedef 4 { DoRdcPth PSUStroke QUsrPthCurveTo QUsrPthLineTo ROkToBuild UXAStroke }	{ }
DevBBoxRec		include/graphics.h	/^typedef struct _t_DevBBoxRec {/ ;" typedef 4 { DoImageMark DoRdcStroke GetDevClipDevBBox QDoEUsrPth QDoEUsrPthFloat QDoUserPath QEnumOk ShowMask StringMark }	{ }
DevBounds		include/devicetypes.h	/^typedef struct _t_DevBounds/ ;" typedef 6 { DoStrkPth FindCurrentViewInCache FmMark GetDevClipDevBBox ImStretch IntersectDP Mark PointInDevPrim QDoEUsrPthFloat ReducePathClipInt TransDevPrim TrapTrapClipCallBack }	{ }
DevBoundsCompare		bintree/bounds.c	/^BBoxCompareResult DevBoundsCompare(DevBounds *figB/ ;" function 10 { CompositePriv LBMMark }	{ }
DevCd		include/publictypes.h	/^typedef struct _t_DevCd {/ ;" typedef 4 { AdjstHW CheckForRectangle CompositeShow ConvertToListPath DoPath DoRdcPth FF_StrkLnTo FFltnCurve FMiniFltn F_FillJoin F_FillLineSegment F_HalfRoundCap F_MiterPoint F_NormPair F_StrkCap F_StrkLnTo F_StrkStrt F_Vector FastFillCurveJoin FastShow FasterShow FillBevel FillQuad FltnPth Mark PSAdjustCursor PSAdjustMouse PSSetMouse PointInDevPrim PrintBitmap QDoEUsrPth QDoUserPath QEnumOk QUsrPthCurveTo QUsrPthLineTo ReduceQuadPath SetGSCursor ShowByName ShowMask StrkPthProc UnlinkDP UsrPthCurveTo UsrPthDoClsPth UsrPthDoCurveTo UsrPthDoFinish UsrPthDoLineTo UsrPthLineTo XARdc XAReducePath dc1 dc2 dc3 }	{ }
DevCheckScreenDims		device/halftone.c	/^public boolean DevCheckScreenDims (width, height) / ;" function 12 { GetType3Screen GetType4Screen GetValidFreqAngleOctet GetValidFreqAnglePair }	{ CheckScreenDims DURING END_HANDLER FGEnterMonitor FGExitMonitor HANDLER RERAISE boolean }
DevClipIsRect		graphics/viewclip.c	/^public boolean DevClipIsRect()/ ;" function 11 { BBoxVsClipBBox ClipForMark DoImageMark PSGetClip PSRectFill PSUStroke ShowMask StringMark StrkInternal UXAStroke }	{ CurIsFirst FindCurrentViewInCache PViewClipCacheEntry PathIsRect curVC gs viewclipCache }
DevColor		include/devicetypes.h	/^typedef struct _t_DevColorRec *DevColor;/ ;" typedef 1 { ConvertColorCMYK ConvertColorRGB WdConvertColor }	{ }
DevColorData		include/devpattern.h	/^typedef struct _t_DevColorData {/ ;" typedef 3 { ConstCMYKPattern FmDeviceInfo MP12InitClassVars SetFmDeviceMetrics }	{ }
DevColorVal		include/devpattern.h	/^typedef struct _t_DevColorVal {/ ;" typedef 3 { CMYKConstColorSetup ColorSetup ConstColorSetup ConstGraySetup ConvertColorCMYK ConvertColorRGB GraySetup Gry4Of4Setup LCompositeFrom LMark MP12InitBricks MP12MarkDataAndAlpha MP12SetupPat MP12SetupPattern MonoSetup }	{ }
DevEngineStatus		include/devcreate.h	/^typedef enum/ ;" typedef 8 { }	{ }
DevFixed		include/devicetypes.h	/^typedef long int DevFixed;/ ;" typedef 1 { }	{ }
DevFixedPoint		include/devicetypes.h	/^typedef struct _t_DevFixedPoint/ ;" typedef 6 { Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 }	{ }
DevFlushClip		device/devprim.c	/^public procedure DevFlushClip (clip) DevPrim *clip/ ;" function 10 { TermClipDevPrim TermViewClip TermViewClipIntersection }	{ DURING END_HANDLER FGEnterMonitor FGExitMonitor FlushClipProc HANDLER NULL RERAISE }
DevFlushMask		device/maskcache.c	/^public integer DevFlushMask(mask, args) PMask mask/ ;" function 23 { DevRemMaskRef FreeCircles FreeStrokeCircle ReleaseCI SafeShowMask ShowByName }	{ DebugAssert FGEnterMonitor FGExitMonitor MCFreeMask NIL bmUsed data integer mskBase mskLast }
DevFlushMaskArgs		include/devicetypes.h	/^typedef struct _t_DevFlushMaskArgs/ ;" typedef 9 { FlushMID ReleaseCI ShowByName }	{ }
DevFreeHalftone		device/halftone.c	/^public procedure DevFreeHalftone(h) DevHalftone *h/ ;" function 14 { DeleteScreen PSMachPortDevice mpdGoAway }	{ DURING DevPrivate END_HANDLER FGEnterMonitor FGExitMonitor FlushHalftone HANDLER NIL RERAISE integer }
DevFreeTfrFcn		device/tfrfcn.c	/^public procedure DevFreeTfrFcn (t) DevTfrFcn *t; {/ ;" function 8 { DevAllocTfrFcn ReleaseTables }	{ DevPrivate FGEnterMonitor FGExitMonitor ReclaimDevTfrFcn integer }
DevGamutTransfer		include/devicetypes.h	/^typedef struct _t_DevGamutTransferRec *DevGamutTra/ ;" typedef 1 { }	{ }
DevHalftone		include/devicetypes.h	/^typedef struct _t_DevHalftone {/ ;" typedef 7 { AllocHalftone ColorSetup DevAllocHalftone InitPatternImpl MP12_Mark MakeType2Screen SetDefaultHalftone }	{ }
DevImSampleDecode		include/devicetypes.h	/^typedef struct _t_DevImSampleDecode {/ ;" typedef 3 { ImageDict }	{ }
DevImage		include/devicetypes.h	/^typedef struct _t_DevImage/ ;" typedef 12 { FmMark Im110 ImIdent ImIdent32 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch ImageInternal ImageTrapsOrRun LMark MP12MarkDataAndAlpha Mark MarkNextImage NoClipMark }	{ }
DevImageInfo		include/devicetypes.h	/^typedef struct _t_DevImageInfo/ ;" typedef 11 { }	{ }
DevImageSource		include/devicetypes.h	/^typedef struct _t_DevImageSource/ ;" typedef 16 { Im110 ImIdent ImIdent32 ImS12D12NoTfr ImSXXD11 ImStretch ImageInternal ImageTrapsOrRun LMark MP12_Mark MarkNextImage }	{ }
DevIndependentColors		device/halftone.c	/^public boolean DevIndependentColors () {/ ;" function 12 { }	{ DURING END_HANDLER FGEnterMonitor FGExitMonitor HANDLER IndependentColors RERAISE boolean }
DevInputColor		include/devicetypes.h	/^typedef struct _t_DevInputColor {/ ;" typedef 16 { }	{ }
DevInterval		include/devicetypes.h	/^typedef struct _t_DevInterval/ ;" typedef 6 { ClipTrapsRunDispatch ClipTrapsStringDispatch EnclosesRect IntersectDP LBMMark TrapTrapClip TrapTrapDispatch TrapTrapInt XATrapTrapInt }	{ }
DevLBounds		include/devicetypes.h	/^typedef struct _t_DevLBounds/ ;" typedef 6 { GStackRestore GenInitPage GenWinToDevTranslation GetDevBBox InitClipPath PSMachPortDevice SetScal }	{ }
DevLInterval		include/devicetypes.h	/^typedef struct _t_DevLInterval/ ;" typedef 6 { }	{ }
DevLong		include/devicetypes.h	/^typedef long int DevLong;/ ;" typedef 1 { MarkDevPrim SetXABounds }	{ }
DevMarkInfo		include/devicetypes.h	/^typedef struct _t_DevMarkInfo/ ;" typedef 10 { BlackMasksMarkReal BlackRunMark ClippedMasksMark CompositePriv ConstantMasksMark ConstantRunMark ConstantTrapsMark DecodePixelDict GenInitPage GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark Im110 ImIdent ImIdent32 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch IniMpdDevImpl LPromoteLayer LSetDepthLimit LSetExposureColor MP12InitBricks MP12SetupPat MarkDevPrim MarkNextImage MaskGoAway PSRectFill ShowMask WhiteMasksMark WhiteRunMark }	{ }
DevMask		include/devicetypes.h	/^typedef struct _t_DevMask/ ;" typedef 6 { ClipTrapsStringDispatch CompositeShow CopyDevPrim DevPrimBytes EnterCirclesInCache FSInit FastShow FasterShow IniStroke MaskGoAway RdcStrkDumpMasks ShowMask TransDevPrim }	{ }
DevMaskCacheInfo		device/maskcache.c	/^public procedure DevMaskCacheInfo(used, size) inte/ ;" function 6 { PSCacheStatus PSCrCParams SetCacheLimit }	{ FGEnterMonitor FGExitMonitor bmSize bmUsed }
DevMaskDevBounds		device/devbounds.c	/^public DevBounds *DevMaskDevBounds(self, mask)/ ;" function 11 { }	{ PMask }
DevMinimizeTrapPrecision		device/trapprecision.c	/^public boolean DevMinimizeTrapPrecision() {return / ;" function 1 { IniGraphics }	{ false }
DevNoOp		device/devcommon.c	/^public procedure DevNoOp (device) PDevice device; / ;" function 2 { IniFmDevImpl IniGenDevImpl IniNullDevImpl IniWdDevImpl }	{ }
DevPageImage		include/devcreate.h	/^typedef struct _t_DevPageImageRec *DevPageImage;/ ;" typedef 1 { }	{ }
DevPageImageProcs		include/devcreate.h	/^typedef struct _t_DevPageImageProcsRec/ ;" typedef 30 { }	{ }
DevPageImageProcsRec		include/devcreate.h	/^typedef struct _t_DevPageImageProcsRec/ ;" typedef 30 { }	{ }
DevPageStatus		include/devcreate.h	/^typedef enum/ ;" typedef 11 { }	{ }
DevPoint		include/devicetypes.h	/^typedef struct _t_DevPoint/ ;" typedef 6 { BM34Convert2to16 BM38Convert2to32 BlackMasksMarkReal ConstantMasksMark FmSetupMark GrayMasksMark ImIdent32 ImS12D12NoTfr ImS1XD11 ImSXXD11 LBMMark MP12Composite MP12ConvertFrom MP12_Mark MPComposite MPSetCursor MaskGoAway PSSetHalftonePhase PSWTranslation WhiteMasksMark }	{ }
DevPrim		include/devicetypes.h	/^typedef struct _t_DevPrim/ ;" typedef 20 { AddRunMark AddTrap AppendTraps BresenhamMT ClipDevPrim CopyDevPrim CurIsFirst DevPrimBytes DisposeDevPrim DoImageMark DoRdcPth DoRdcStroke DoStrkPth DoUAppend EnterCircle FastRectFill Fill FindCurrentViewInCache FloatRectFill GenInitPage GetAperatureDP GetDevClipDevBBox GetDevClipPrim ImageInternal InFill InStroke InUFill InitChunk InitClipPath IntersectDP LBMMark LBMMarkRun MakeRectPath MarkDevPrim MarkInit MarkStrokeMasks MinimumClip MultiRectFill NewDevPrim NewViewClip PSInUStroke PSRectFill PathIsRect QBresenhamMT RdcStrkDumpMasks ReducePathClipInt ReducePathRun ReducePathTrapsFilled RemReducedRef ReverseDevPrimList ShowMask StringMark StrkPthProc TermViewClip TransDevPrim UCGetDevPrim UCacheMark UStrkPthProc UnlinkDP XARdc (etc) }	{ }
DevPrimBytes		device/devprim.c	/^public integer DevPrimBytes(dp) register DevPrim */ ;" function 28 { EnterCircle UCGetDevPrim }	{ CantHappen DevMask DevPrim DevRun DevShort DevTrap integer register }
DevPrimIsRect		device/devprim.c	/^public boolean DevPrimIsRect(p) register DevPrim */ ;" function 9 { FindCurrentViewInCache Mark PathIsRect }	{ DevTrap NULL false p register }
DevPrimType		include/devicetypes.h	/^typedef enum/ ;" typedef 9 { }	{ }
DevPrivate		include/devicetypes.h	/^typedef unsigned char DevPrivate;/ ;" typedef 1 { AddBoxDevPrim AddDevPrimValue AddRunDevPrim AllocScreen DevAddHalftoneRef DevAddTfrFcnRef DevAllocHalftone DevFreeHalftone DevFreeTfrFcn DevRemHalftoneRef DevRemTfrFcnRef IniNullDevImpl IniNullDevice LBMMark LBMMarkRun LCompositeFrom MP12MarkDataAndAlpha MakeNullDevice MarkDevPrim PSRectFill ShowMask TrapTrapClipCallBack ValidateTA }	{ }
DevProcs		include/device.h	/^typedef struct _t_DevProcs {/ ;" typedef 47 { IniFmDevImpl IniGenDevImpl IniMaskDevImpl IniMpdDevImpl IniNullDevImpl IniNullDevice IniWdDevImpl window }	{ }
DevRemHalftoneRef		device/halftone.c	/^public procedure DevRemHalftoneRef(h) DevHalftone / ;" function 17 { }	{ Assert DURING DevPrivate END_HANDLER FGEnterMonitor FGExitMonitor FlushHalftone HANDLER NIL RERAISE integer }
DevRemMaskRef		device/maskcache.c	/^public procedure DevRemMaskRef(mask) PMask mask; {/ ;" function 12 { }	{ Assert DevFlushMask NIL }
DevRemTfrFcnRef		device/tfrfcn.c	/^public procedure DevRemTfrFcnRef(t) DevTfrFcn *t; / ;" function 12 { }	{ Assert DevPrivate FGEnterMonitor FGExitMonitor NIL ReclaimDevTfrFcn integer }
DevRendering		include/devicetypes.h	/^typedef struct _t_DevRenderingRec *DevRendering;/ ;" typedef 1 { }	{ }
DevRgstPrebuiltFontInfo		device/devinit.c	/^public integer DevRgstPrebuiltFontInfo( \/* stub pr/ ;" function 7 { RgstPrebuiltInfo }	{ }
DevRun		include/devicetypes.h	/^typedef struct _t_DevRun/ ;" typedef 8 { AddRunDevPrim AddRunIndexes ClipDevPrim CompositePriv CopyDevPrim DevPrimBytes DisposeDevPrim DumpBuff EnclosesRect IntersectDP Mark NoClipMark PointInDevPrim ReducePathRun ReturnBits TransDevPrim }	{ }
DevRunDevBounds		device/devbounds.c	/^public DevBounds *DevRunDevBounds(self, run)/ ;" function 7 { }	{ }
DevScreen		include/devicetypes.h	/^typedef struct _t_DevScreen {/ ;" typedef 6 { AllocHalftone AllocScreen CompositePriv FreeScreen GetType3Screen GetType4Screen Gry4Of4Setup ImS1XD11 ImSXXD11 InitPatternImpl MakeType1Screen MonoSetup SendTAToDisk }	{ }
DevSetMaskCacheSize		device/maskcache.c	/^public procedure DevSetMaskCacheSize(size,minimum)/ ;" function 12 { PSStCParams }	{ FGEnterMonitor FGExitMonitor GrowBM ShrinkBM bmBytes bmMaxSize bmMinSize bmSize }
DevShort		include/devicetypes.h	/^typedef short int DevShort;/ ;" typedef 1 { AddRunDevPrim BlackRunMark BuildRunIndex BytesForRunIndex ClippedMasksMark CompositeRun ConstantRunMark CopyRun DevPrimBytes GETUCRTABLE GetType4Screen GetValidFreqAngleOctet GetValidFreqAnglePair GrayRunMark Im110 ImIdent ImIdent32 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch MakeCompFont MakeFontSupp PSMachPortDevice TransDevPrim TransDevRun WhiteRunMark XATrapTrapInt }	{ }
DevTfrFcn		include/devicetypes.h	/^typedef struct _t_DevTfrFcn {/ ;" typedef 9 { ActivateTfr DevAllocTfrFcn }	{ }
DevToRdc		graphics/graphics.c	/^public Fixed DevToRdc(d)  double d;/ ;" function 2 { ClNewPt }	{ FTrunc d dbltofix frdcbias gs }
DevTrackingProcs		include/devcreate.h	/^typedef struct _t_DevTrackingProcsRec/ ;" typedef 7 { }	{ }
DevTrackingProcsRec		include/devcreate.h	/^typedef struct _t_DevTrackingProcsRec/ ;" typedef 7 { }	{ }
DevTrap		include/devicetypes.h	/^typedef struct _t_DevTrap/ ;" typedef 7 { AddBoxDevPrim AddTrap AppendTraps BresenhamMT ClipDevPrim ClipTrapsRunDispatch ClipTrapsStringDispatch ClippedMasksMark CompositePriv ConstantTrapsMark CopyDevPrim DEVPRIMVALUELENGTH DevPrimBytes DevPrimIsRect DoRdcPth EnclosesRect EnterCircle FloatRectFill FmMark GenInitPage GrayTrapsMark Im110 ImIdent ImIdent32 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImageInternal IniStroke InitClipPath IntersectDP LBMMark MakeRectPath Mark MarkInit MarkNextImage MinimumClip MultiRectFill PSRectFill QBresenhamMT QIntersectBounds ReducePathClipInt ReduceQuadPath ReduceRect TransDevPrim TrapTrapClipCallBack TrapTrapDispatch TrapTrapInt XATrapTrapInt }	{ }
DevTrapDevBounds		device/devbounds.c	/^public DevBounds *DevTrapDevBounds(self, trap)/ ;" function 10 { TrapTrapClipCallBack }	{ }
DevTrapEdge		include/devicetypes.h	/^typedef struct _t_DevTrapEdge/ ;" typedef 8 { }	{ }
DevUnique		include/devicetypes.h	/^typedef DevShort DevUnique;/ ;" typedef 1 { }	{ }
DevUnsigned		include/devicetypes.h	/^typedef short unsigned int DevUnsigned;/ ;" typedef 1 { }	{ }
DevWhitePoint		include/devicetypes.h	/^typedef struct _t_DevWhitePoint {/ ;" typedef 3 { }	{ }
Device		include/device.h	/^typedef struct _t_Device {/ ;" typedef 7 { IniNullDevice MakeNullDevice mpdInitPage }	{ }
DeviceInfoArgs		include/devicetypes.h	/^typedef struct _t_DeviceInfoArgs/ ;" typedef 11 { }	{ }
DeviceStatus		include/bintree.h	/^typedef struct _devicestatus {/ ;" typedef 6 { LGetDeviceStatus PSCurrentDeviceInfo WBGetDeviceInfo }	{ }
DfMtx		graphics/graphics.c	/^public procedure DfMtx(m)  PMtx m;  {/ ;" function 2 { InitMtx PSDfMtx }	{ gs }
DictBody		include/vm.h	/^typedef struct _t_DictBody {/ ;" typedef 18 { AllocPDict DictP DumpDict PrintDOB PutInDict SetDictAccess TracePrivateForShared TracePrivateVM TraceSharedVM UnDef VMExpandDict copydict }	{ }
DictCtxDestroy		language/dict.c	/^public procedure DictCtxDestroy()/ ;" function 10 { LanguageDataHandler }	{ ResetNameCache enableTrickyDictCopy integer vmShared }
DictFinalize		language/dict.c	/^private procedure DictFinalize(obj, reason)/ ;" function 38 { DictInit SetDictAccess }	{ CantHappen NIL PDictBody PKeyVal PNameEntry nameObj register }
DictForAll		language/dict.c	/^public procedure DictForAll(dictOb, procOb)/ ;" function 13 { PSForAll }	{ DFAProc EPushInteger EPushP InvlAccess Object PDictObj XlatDictRef integer rAccess }
DictGetFontP		fonts/fontbuild.c	/^private procedure DictGetFontP(f, nm, p) DictObj f/ ;" function 4 { CCBMRun ChrMapBuildChar InternalBuildChar PSCCRun }	{ DictGetP InvlFont Known p }
DictGetP		language/dict.c	/^public procedure DictGetP(d, key, pval)  DictObj d/ ;" function 2 { BuildChar CCBMRun CCRun CCRunStd CharStringsVal CheckCompositeFont DelayedMakeFont DictGetFontP DictGetPType FDNestedDepth FillCircle FindMaxFID FindSibling FndFntSibling FontEncode GetErosion GetFontAndCharInfo GetFontBBox GetInfo GetInfoSupp GetMetrics GetMetrics2 GetWeightVector InitGS InternalBuildChar InvalidateCachedMIDs KADefinefont KAKnown MakeCompFont MakeFont MakeFontSupp MakeMID MinEncodingLength ModifyCachingParams PSDefineFont PSDictGetPObj PSDictGetTestPObj PSExecOpNm PSExecuteOperator PSGet PSSelectFont PathEndChar PrintMidDict RgstInitialFont RgstMark RgstPrebuiltInfo SetFont SysDictGetP pFD }	{ DictTestP PushP Undefined d false stackRstr true }
DictGetPType		fonts/fontcache.c	/^private procedure DictGetPType (d, n, po, t)/ ;" function 6 { PSDefineFont }	{ DictGetP TypeCheck d }
DictInit		language/dict.c	/^public procedure DictInit(reason)  InitReason reas/ ;" function 32 { LanguageInit }	{ AboutToCollectShared Begin DEVELOP DFAProc DictFinalize End GC_RgstSharedRootsProc Globals GlobalsRec NIL PSProbeStats PSTrickyDict RefAny RgstExplicit RgstMark VMRgstFinalize dfacmd dictObj dictStk endswitch frset_reclaim globals integer mrk4Args nPermDictEntries os_sureCalloc rootShared vSTAGE vmShared }
DictLength		language/dict.c	/^public cardinal DictLength(d)  DictObj d;/ ;" function 7 { PSLength }	{ InvlAccess PDictBody PDictObj XlatDictRef d rAccess }
DictObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 40 { BuildChar CCBMRun CharStringsVal CheckCompositeFont ChrMapBuildChar CopyTrickyDict DFAProc DelayedMakeFont End FndFntSibling GetDMFItem GetMetrics GetMetrics2 ImageDict InitFID InitGS InternalBuildChar InvalidateCachedMIDs KAEndCSDict KAKnown MakeFontSupp MakeMID PSBegin PSCCRun PSDefineFont PSDict PSKnown PSMakeFont PSMaxLength PSRgstOps PSScaleFont PSSelectFont PSSetFont PSSetHalftone PSStore PSTrickyDict PSUnDef PSUnDefineFont PSWhere TrickyDictP pFD }	{ }
DictP		language/dict.c	/^public procedure DictP(maxlength,  pdobj)/ ;" function 34 { AddEntry CreateSharedVM GetDMFDict GetDMFItem KAEndCSDict MakeScreenDict PSDeviceInfo PSDict TrickyDictP copydict }	{ AllocPDict CurrentShared DictBody INITSIZE VMGetDict VMPutDict cardinal false nBitVectorBits rAccess rootShared trickyFontDirectory trickyStatusDict trickyUserDict wAccess }
DictPut		language/dict.c	/^public procedure DictPut(d,key,value)  DictObj d; / ;" function 7 { AddEntry CCRunStd GetErosion KADefinefont KAEndCSDict MakeScreenDict PSDefUserObj PSPut PSRgstOps PutThresholdEntries RgstMark }	{ KeyName KeyVal PutInDict d false true }
DictTestP		language/dict.c	/^public boolean DictTestP(d, key, pval, checkacc)/ ;" function 17 { CheckPrebuiltOptions DictGetP DictTestPType FindSibling FndFntSibling ForceGetP GetFontAndCharInfo GetInt GetSpotDictEntries GetThresholdDictEntries ImageDict MakeFontSupp PSDefUserObj PSDefineFont PSDictGetTestPObj PSExecUserObj PSSetHalftone PSUnDefineFont PSUndefUserObj RgstPrebuiltInfo SetFont }	{ InvlAccess KeyName MapFontDirectory Object PDictBody PDictObj PKeyVal PNameEntry SearchDict VMGetValue XlatDictRef d false nameObj rAccess true }
DictTestPType		fonts/fontcache.c	/^private boolean DictTestPType (d, n, po, t)/ ;" function 7 { CheckCompositeFont GetBuildingOption PSDefineFont }	{ DictTestP TypeCheck d false true }
DictUnDef		language/dict.c	/^public procedure DictUnDef(dict, key)/ ;" function 5 { }	{ UnDef true }
DidInteract		product/ipcscheduler.c	/^public procedure DidInteract()/ ;" function 4 { PSButton PSCurrentMouse PSRightButton PSRightStillDown PSStillDown }	{ currentSchedulerContext true }
DigitEncode		language/string.c	/^private character DigitEncode(x)/ ;" function 7 { NumEncode }	{ }
DirEntry		include/disk.h	/^typedef struct _t_DirEntry {	\/* directory entry *\// ;" typedef 8 { }	{ }
DisableCC		postscript/contextimpl.c	/^public procedure DisableCC()/ ;" function 4 { }	{ currentPSContext }
Disk		include/filetypes.h	/^typedef struct _t_DiskRec *Disk;/ ;" typedef 1 { InitSLFiles }	{ }
DiskAddress		include/filetypes.h	/^typedef long int DiskAddress;	\/* linear (virtual) / ;" typedef 1 { }	{ }
DiskAttributes		include/filesystem.h	/^typedef struct _t_DiskAttributes {\/* disk informat/ ;" typedef 10 { InitSLFiles }	{ }
DiskCommand		include/disk.h	/^typedef short int DiskCommand;/ ;" typedef 1 { }	{ }
DiskOp		include/disk.h	/^typedef struct _t_DiskOp {	\/* disk operation recor/ ;" typedef 10 { }	{ }
DiskRec		include/disk.h	/^typedef struct _t_DiskRec {	\/* The Disk object, re/ ;" typedef 50 { }	{ }
DispatchEvents		product/event.c	/^public procedure DispatchEvents()/ ;" function 28 { PSGetEvents }	{ ClearEvent EventCodeMask MOUSEEVENTMASK NXEvent NX_BYTYPE NX_MOUSEEXITED PostEvent RecalcMouseRect eventErrorPending eventGlobals remapY }
DisplaceEntries		fonts/cacheimpl.c	/^private PCacheEntHdr DisplaceEntries(cache, needed/ ;" function 50 { AddEntry CacheReuseEntry }	{ CacheStat DisposeEntry Links NULL PCacheEntHdr PHdr UnlinkEntry register }
DisplayCursor		mousekeyboard/common.c	/^void DisplayCursor()/ ;" function 16 { DisplayCursor MPStart SysShowCursor }	{ CURSORHEIGHT CURSORWIDTH DisplayCursor NXDevice eventGlobals evp nxCursorInfo }
DisplayVMSection		vm/vm_segment.c	/^public procedure DisplayVMSection (vmStructure)/ ;" function 29 { PSDisplayVM }	{ Display_VM_Segment NIL PVMSegment VMpassword current free os_fprintf os_stderr }
Display_VM_Segment		vm/vm_segment.c	/^private procedure Display_VM_Segment (segment, cur/ ;" function 9 { DisplayVMSection }	{ VMSegmentSize current free level os_fprintf os_stderr }
DisposeDevPrim		device/devprim.c	/^public procedure DisposeDevPrim(self) register Dev/ ;" function 27 { CopyDevPrim DoRdcPth DoRdcStroke DoUAppend EnterCircle FreeRdc InFill InStroke InUFill InitClipPath MakeRectPath MinimumClip PSInUStroke ReducePathClipInt RemReducedRef SetupForCircles TermViewClipIntersection UCGetDevPrim UCacheMark XARdc XAReducePath }	{ DURING DevPrim DevRun END_HANDLER FGEnterMonitor FGExitMonitor HANDLER NULL RERAISE data devPrimStorage os_freeelement }
DisposeEntry		fonts/cacheimpl.c	/^private procedure DisposeEntry(cache, hdr)/ ;" function 8 { AddEntry CacheInvalidate CacheRemoveEntry DisplaceEntries }	{ FreeHdr NULL data true }
Dist		graphics/pathbuild.c	/^public real Dist(v) Cd v; {/ ;" function 9 { AdjstHW ArcC ArcInternal ArcToInternal DoStroke FillCurveJoin GetCurveMiddle GetNormStrkWdth LengthTfm MiterPoint NormalizeStrokeWidth StrkCap StrkLnTo }	{ fp1024 os_fabs os_sqrt real }
DistAboveFloor		graphics/stroke.c	/^#define DistAboveFloor(r) ((r) - os_floor(r))/ ;" macro 1 { NormalizePoint }	{ r }
Div3By2		graphics/reducer.c	/^private procedure Div3By2(a, b, r)  FourPlace *a; / ;" function 74 { Intersect psDiv32 }	{ Card16 Card32 FourPlace Int8 MulUn22 Sub4 UndefResult r true }
DivPiece		bintree/bintreetypes.h	/^typedef struct _divpiece   DivPiece;/ ;" typedef 1 { DPBecomeDivAt DPCompositeFrom DPCompositeTo DPInitialize DPNewAt }	{ }
DoArcTo		graphics/pathbuild.c	/^private procedure DoArcTo(pushflg) boolean pushflg/ ;" function 15 { PSArcT PSArcTo }	{ ArcToInternal CallArcInit Cd CheckForCurrentPoint CurveTo ITfmP LineTo MoveTo PopPCd PopPReal PushPCd gs real }
DoBlend		fonts/fontbuild.c	/^private PFixed DoBlend(pp, wv, k, r)/ ;" function 19 { BuildChar CCRunStd }	{ Fixed IntX NULL PFixed fixmul p r register }
DoDictXlat		include/vm.h	/^#define	DoDictXlat(pObj) \\/ ;" macro 1 { PSWhere XlatDictRef }	{ Int32 PDictObj rootPrivate }
DoEUserPath		graphics/euserpath.c	/^public procedure DoEUserPath(context)/ ;" function 98 { DoUAppend FillUserPathEnumerate StrokeUserPathEnumerate }	{ FltnRec PCard8 PNumStrm PObject ReadCtrlByte TypeCheck UsrPthArc UsrPthArcTo UsrPthDoClsPth UsrPthDoCurveTo UsrPthDoFinish UsrPthDoLineTo UsrPthDoMoveTo _t_Object boolean cd1 cd2 false fr integer procedure real register true }
DoFixupAction		graphics/cscan.c	/^private boolean DoFixupAction(actDesc, act, ll, x)/ ;" function 119 { FixPixelProblem }	{ CheckCol CheckDeletePixel CheckRow DEBUGERROR DeletePixel FixupExtendLeft FixupExtendRight IntX Pixel PixelInCxtn PixelIsBlack REG checkRuns false printf strcpy true xBoxMax xBoxMin yBoxMax yBoxMin }
DoImage		graphics/image.c	/^public procedure DoImage(nColors, colorSpace, nPro/ ;" function 26 { PSAlphaImage PSColorImage PSImage PSImageMask }	{ ImageInternal Mtx NIL Object PopBoolean PopInteger PopMtx PopP TypeCheck Undefined boolean d false gs integer }
DoImageMark		graphics/graphmark.c	/^public procedure DoImageMark(image, bnds)/ ;" function 28 { ImageInternal }	{ BBCompare BBoxCompareResult BBoxRec DevBBCompare DevBBoxRec DevClipIsRect DevPrim FixInt GetDevClipDevBBox GetDevClipPrim InitDevPrim MarkDevPrim NULL gs }
DoLock		fonts/fontbuild.c	/^internal procedure DoLock(pf, pn, yflg) Fixed *pf,/ ;" function 12 { DoTriXLock DoTriYLock RBLock RYLock }	{ FindGlbClr Fixed GetITfmX GetITfmY PGlbClr SetXLock SetYLock procedure true }
DoPath		graphics/pathops.c	/^public procedure DoPath/ ;" function 88 { FeedPathToReducer FltnPth StrkInternal StrkPthProc }	{ Cd ConvertToListPath DevCd FFltnCurve FLATTENLIMIT FixCd FltnCurve FltnRec NULL PPthElt PathType boolean dbltofix false fp16k fr pathclose pathcurveto pathlineto pathstart register true }
DoQuit		postscript/contextimpl.c	/^private procedure DoQuit() {/ ;" function 11 { PSCoProc }	{ CantHappen InnerNotify NIL PSContext currentPSContext false true }
DoRdcPth		graphics/pathreduce.c	/^public DevPrim * DoRdcPth(evenOdd, context, bBox, / ;" function 317 { DoRdcPth EnterCircle GetAperatureDP InUFill UCGetDevPrim XADoRdcPth }	{ AddRdcTrap AddRunMark AddTrap BBCompare BBox BBoxRec CantHappen Cd ClNewPt ConvertToListPath CopyDevPrim DURING DevBBox DevCd DevPrim DevTrap DisposeDevPrim DoRdcPth END_HANDLER FRCNextPt FastFillQuad FeedPathToReducer FixCd Get16KBBox GetDevBBox GetDevClipBBox GetDevClipDevBBox HANDLER InitDevPrim Int16 MAX MIN MarkState NIL NULL NewDevPrim PPath PVoidProc PathType QFNewPoint QNewPoint QRdcClose QRdcOk QReduce QResetReducer QuadPath RCLastPt RCNextPt RDCXTRA RERAISE RdcClip RdcClose Reduce ReducePathRun ReducePathTrapsFilled ReducedPath RemReducedRef ResetReducer ReverseDevPrimList SetRdcScal (etc) }
DoRdcStroke		graphics/pathreduce.c	/^public DevPrim * DoRdcStroke(context, bBox, rectan/ ;" function 59 { StrkPthProc UCGetDevPrim XADoRdcStroke }	{ Assert BBoxRec DURING DevBBoxRec DevPrim DisposeDevPrim DoStroke END_HANDLER FinStroke FixInt Get16KBBox HANDLER InitDevPrim MarkStateProcs NULL NewDevPrim PMarkStateProcs PreCacheTrapCircles RERAISE RdcStrkDumpMasks RdcStrkTermMark ReducePathTrapsFilled ReverseDevPrimList StdInitMark StdTermMark false gs ms rdcStrkMasks roundCap roundJoin true }
DoSover		mp/soverrect.c	/^#define DoSover(s,a,d) do { uint m;      		 \\/ ;" macro 1 { Sover SoverMask }	{ HMASK d s uint }
DoStrkPth		graphics/strokeops.c	/^public procedure DoStrkPth(getDP, ctx) DevPrim *(*/ ;" function 46 { PSStrkPth PSUStrokePath }	{ BitField CopyPath DURING DevBounds DevPrim END_HANDLER FrPth FullBounds GetBBoxFromDevBounds HANDLER InitPath NULL PGState Path RERAISE ReducedPath StrkPath false flatEps gs os_freeelement os_newelement register rpStorage spStorage }
DoStroke		graphics/stroke.c	/^public boolean DoStroke(/ ;" function 176 { DoRdcStroke PSUStroke StrkInternal UXAStroke }	{ AddTrap AryObj BBCompare Cd CheckForRectangle CircleCache DTfmP DTfmPCd Dist FF_StrkLnTo FF_StrkStrt FF_Vector F_StrkClose F_VecClose FixOne Fixed FreeStrokeCircle GetDevClipDevBBox MAXStrokeThrow NULL NoOp Object PGState PRealValue PreStroke RangeCheck RealEq0 RealGe0 RealGt0 RealLe0 RealLt0 RealNe0 SetTrapBounds SetupForCircles StrkCap StrkClose StrkCurve StrkLnTo StrkStrt StrkTrp VMCarCdr VecStrkTrp XA_MAX XA_MIN allSegmentsIn boolean buttCap circ_maskID circleMasks circleTraps clipBBox curIMtx dashLength dashLim dashed doingVectors fDshLen f_halfwidth f_throwThreshold false (etc) }
DoTriXLock		fonts/fontbuild.c	/^internal Fixed DoTriXLock(xf, xn, p0, p1) Fixed xf/ ;" function 2 { RMLock }	{ DoLock Fixed false }
DoTriYLock		fonts/fontbuild.c	/^internal Fixed DoTriYLock(yf, yn, p0, p1) Fixed yf/ ;" function 2 { RVLock }	{ DoLock Fixed true }
DoUAppend		graphics/userpath.c	/^private boolean DoUAppend(context, initctx, getdp)/ ;" function 37 { PSUAppend PSUStrokePath }	{ ClosePath CopyDevPrim CurveTo DURING DevPrim DisposeDevPrim DoEUserPath DoUserPath END_HANDLER GetUsrPthAry HANDLER IsPathEmpty LineTo MoveTo NULL PMtx SetAbort UCGetDevPrim UOffset UPClosePath UPCurveTo UPLineTo UPMoveTo UsrPthBBox boolean false gs integer true }
DoUserPath		graphics/userpath.c	/^private procedure DoUserPath(context)/ ;" function 114 { DoUAppend FillUserPathEnumerate StrokeUserPathEnumerate }	{ AssertCheck Component FltnRec Int16 Object PNameEntry PObject TypeCheck UsrPthArc UsrPthArcTo UsrPthDoClsPth UsrPthDoCurveTo UsrPthDoFinish UsrPthDoLineTo UsrPthDoMoveTo VMCarCdr arcNm arcnNm arctNm boolean cd1 cd2 closepathNm cmdObj curvetoNm fr intObj linetoNm movetoNm nameObj rcurvetoNm realObj register rlinetoNm rmovetoNm true }
DoXInflections		graphics/cscan.c	/^private procedure DoXInflections()/ ;" function 64 { EditBlackSpace }	{ CrossPtr DEBUGERROR FRound FillInInflection IntX NULL PathCross REG ValidateCrossPtr fixtopflt maxXInflections minXInflections printf }
DownDir		graphics/cscan.c	/^#define DownDir		5/ ;" macro 1 { }	{ }
DriverInit		bintree/drivers.c	/^void DriverInit()/ ;" function 114 { NextCustomProc }	{ AssignArrayBounds EXInitialize FreeMon GuaranteeActiveScreen LoadActiveDrivers LoadAllDrivers LoadSingleDriver MEGAPIXEL MatchMonitors NULL NXDevice NXDriver NXMonitor ReadNetInfo SanityCheck WriteDefaultNetInfo asyncDriversExist boundBounds deviceCount deviceList driverCount driverList holeDevice initialDepthLimit mon monCount net netCount os_fprintf os_stderr remapY s wsBounds }
DumpArray		fonts/debug.c	/^public DumpArray(aop, start, end)/ ;" function 6 { }	{ PrAryBody PrintObj false integer start }
DumpBuff		graphics/qreducer.c	/^private procedure DumpBuff(/ ;" function 13 { QIntersect QIntersectTrp QReduce }	{ CantHappen DevRun NULL d data }
DumpDefault		fonts/debug.c	/^public DumpDefault()/ ;" function 10 { }	{ DumpStack GetDebugStm Stm dictStk execStk opStk os_fprintf }
DumpDict		fonts/debug.c	/^public DumpDict(dict)  PDictObj dict;/ ;" function 17 { DumpSysDict PrintVal }	{ Aborted DictBody GetDebugStm PKeyVal PrintDOB PrintKeyVal Stm VMGetDict XlatDictRef integer nullObj os_fprintf }
DumpMappedFiles		product/miscops.c	/^private procedure DumpMappedFiles()/ ;" function 10 { PSMStats }	{ mappedFileSizes os_fprintf os_stdout totalMappedFiles }
DumpNameArray		fonts/debug.c	/^public DumpNameArray(aop, start, end)/ ;" function 6 { }	{ PrNameAryBody PrintObj false integer start }
DumpRoot		fonts/debug.c	/^public DumpRoot()/ ;" function 15 { }	{ DumpSysDict GetDebugStm PrNameAryBody PrintObj Stm fflush integer os_fprintf rootShared true }
DumpStack		fonts/debug.c	/^public DumpStack(x)  PStack x;/ ;" function 4 { DumpDefault }	{ EnumStack NIL PrintNode charptr }
DumpSysDict		fonts/debug.c	/^public DumpSysDict()  {DumpDict(&(rootShared->vm.S/ ;" function 1 { DumpRoot }	{ DumpDict rootShared }
DvmExpansion		vm/vm_segment.h	/^#define	DvmExpansion ((1024 * 8) - 10)/ ;" macro 1 { CreateVM ExpandVMSection }	{ }
DvmReserve		vm/vm_segment.h	/^#define	DvmReserve 1024/ ;" macro 1 { CreateVM }	{ }
DvmSharedSize		postscript/postscript.c	/^#define DvmSharedSize 22000/ ;" macro 1 { }	{ }
DynaLoadFile		product/dynaloader.c	/^int (*DynaLoadFile(char *relocFile, char *debugFil/ ;" function 30 { LoadSingleDriver NSLoadContextType }	{ NULL fileno header }
DynaUnloadFile		product/dynaloader.c	/^void DynaUnloadFile(int unloadvm)/ ;" function 7 { LoadSingleDriver }	{ fileno }
EASY_FORMAT		product/event.c	/^#define EASY_FORMAT 2/ ;" macro 1 { SendEvent WriteEvent }	{ }
EBNop		language/stodevedit.c	/^private boolean EBNop(dev)/ ;" function 5 { }	{ false }
ECHRMAPtype		fonts/fontspriv.h	/^#define ECHRMAPtype 6/ ;" macro 1 { BuildChar LASTFONTTYPE }	{ }
EDITDROPOUTS		graphics/cscan.c	/^#define EDITDROPOUTS 1		\/* Finds dropouts, etc. Us/ ;" macro 1 { }	{ }
EDcmd		fonts/fontbuild.c	/^#define EDcmd	14/ ;" macro 1 { BuildChar CCRunStd }	{ }
EDevAttr		language/stodevedit.c	/^private procedure EDevAttr(dev, attr)/ ;" function 6 { }	{ }
EIUndef		language/stodevedit.c	/^private int EIUndef(dev)/ ;" function 5 { }	{ NIL RAISE ecUndef }
ENCRPTFILEtype		fonts/fontspriv.h	/^#define ENCRPTFILEtype 2/ ;" macro 1 { BuildChar }	{ }
ENCRPTVMtype		fonts/fontspriv.h	/^#define ENCRPTVMtype 1/ ;" macro 1 { BuildChar InternalBuildChar }	{ }
ENDSHOW		fonts/fontshow.c	/^#define ENDSHOW \\/ ;" macro 1 { PSAShow PSAWidthShow PSCShow PSKShow PSShow PSStrWidth PSWidthShow SimpleShow SimpleShowByName XYShow }	{ DebugAssert FreeShowState IsCleanShowState NIL PopShowState ShowState integer level showLevel ss ssFree ssr }
END_HANDLER		include/except.h	/^#define	END_HANDLER }}/ ;" macro 1 { AcquireLock AllocRAMArray AllocRAMStr BuildChar CCRun CCRunStd CalcThresholds CallFromPS CopyDelayedFont CreateContext CreatePSContext CreatePSSpace CreatePrivateVM DetermineFormat DevFlushClip DoRdcPth DoRdcStroke DoStrkPth DoUAppend EnterCircle EnterPathInCache EnterRdcInCache FillBevel FillCircle FillQuad FltnPth GetDMFDict GetDMFItem ImageInternal InitChunk InitClipPath InitPostScript MakeCompFont MakeFontSupp MakeRectPath MakeScreenDict MakeType1Screen MakeType2Screen MinimumClip NewDevice NewViewClip PSCharPath PSFontRun PSFork PSRectClip PSRectFill PSRectStroke PSRectViewClip PSUStroke PSUStrokePath PSWait PathForAll ReducePathClipInt SafeShowMask StrkPth Stroke UCGetDevPrim UStrkPthProc WaitOnJoinable XARdc (etc) }	{ }
ENTRY		coroutine/xfersun.s	/^#define ENTRY(name) .globl CAT(_,name); CAT(_,name/ ;" macro 1 { }	{ }
ENUM_SUPPORTED		stodev/stodevfont.c	/^#define ENUM_SUPPORTED \\/ ;" macro 1 { }	{ os_bsd os_mach os_sun os_ultrix }
ENVIRONMENT		include/package_specs.h	/^#define ENVIRONMENT	"environment.h"/ ;" macro 1 { }	{ }
ENVIRONMENT_H		include/environment.h	/^#define	ENVIRONMENT_H/ ;" macro 1 { }	{ }
EOF		include/stream.h	/^#define EOF (-1)/ ;" macro 1 { CStmBFilBuf CStmFAvail CStmHFilBuf CStmUnGetc CloseStmForSB ComStmFAvail ComStmFilBuf ComStmUnGetc DetermineFormat GetIntBE GetIntLE HandlePendingEOL IPCFillBuf IPCFlushBuf IPCPutEOF LineEdit LineFAvail LineFFlush LineFilBuf LineUnGetc MFClose OCFetchFromDisk PSEExec PSRead ReadIBMSegHdr ReadMacSegHdr ReadSegHeader SSFilBuf SSUnGetc SendTAToDisk StmErr StmErrLong StmToken StmUnGetc UFClose UFFlush UFPutEOF UFSeek UFilBuf UFlsBuf }	{ }
EOF_MESSAGE_ID		product/ipcstream.h	/^#define EOF_MESSAGE_ID 3050	\/* The msg_id value in/ ;" macro 1 { IPCFillBuf IPCPutEOF }	{ }
EOL		language/grammar.h	/^#define EOL CR/ ;" macro 1 { StmToken }	{ CR }
EPopInteger		language/type.c	/^public integer EPopInteger()/ ;" function 7 { CIFor CRepeat DFAProc }	{ IPopSimple Object RecyclerPop TypeCheck execStk intObj }
EPopP		language/stack.c	/^public procedure EPopP(pob) PObject pob; {StackPop/ ;" function 1 { AFAProc CIFor CRFor CRun ClearExecStack DFAProc DetermineFormat GetProcSource ImageInternal KAClosefile MonExitProc MonitorExit PSExit ReadSlices SFAProc UnwindExecStk }	{ StackPopP execStk }
EPopPReal		language/type.c	/^public procedure EPopPReal(pr)  Preal pr;/ ;" function 11 { CRFor }	{ IPopSimple Object RecyclerPop TypeCheck execStk intObj realObj }
EPushInteger		language/type.c	/^public procedure EPushInteger(i)  integer i;/ ;" function 6 { CIFor CRepeat DFAProc DictForAll PSFor PSRepeat }	{ IPushSimple LIntObj Object execStk }
EPushP		language/stack.c	/^public procedure EPushP(pob)  PObject pob; {StackP/ ;" function 1 { AFAProc AryForAll CIFor CRFor DFAProc DetermineFormat DictForAll GetProcSource HandleStackOverflow OpDefProc PSEExec PSExit PSFor PSLoop PSMonitor PSRepeat PSRun PSStopped SFAProc StrForAll }	{ StackPushP execStk }
EPushPReal		language/type.c	/^public procedure EPushPReal(pr)  Preal pr;/ ;" function 2 { CRFor EPushReal PSFor }	{ IPushSimple LRealObj Object execStk }
EPushReal		language/type.c	/^public procedure EPushReal(r)  real r;/ ;" function 2 { }	{ EPushPReal r real }
ERROR		include/package_specs.h	/^#define ERROR		"error.h"/ ;" macro 1 { }	{ }
ERROR_H		include/error.h	/^#define	ERROR_H/ ;" macro 1 { }	{ }
ESCAPETYPE		language/opcodes.h	/^#define ESCAPETYPE		1/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
ESCcmd		fonts/fontbuild.c	/^#define ESCcmd	12/ ;" macro 1 { BuildChar CCRunStd }	{ }
ESPCesc		fonts/fontbuild.c	/^#define ESPCesc 9/ ;" macro 1 { CCRunStd }	{ }
EStmCreate		language/stodevedit.c	/^private Stm EStmCreate(dev, name, access)/ ;" function 6 { }	{ LineEdit NIL RAISE boolean ecInvalidFileAccess os_stdin os_stdout }
ETopP		language/stack.c	/^public procedure ETopP(pob)  PObject pob; {StackTo/ ;" function 1 { AFAProc CIFor CRFor DFAProc KAClosefile KAEexec PSFontRun SFAProc }	{ StackTopP execStk }
EUndef		language/stodevedit.c	/^private procedure EUndef(dev)/ ;" function 5 { }	{ NIL RAISE ecUndef }
EUsrPthCheckMtLt		graphics/euserpath.c	/^public boolean EUsrPthCheckMtLt(pAryObj, pc1, pc2)/ ;" function 5 { PSUStroke UCGetDevPrim }	{ PObject false register }
EVENT		include/package_specs.h	/^#define EVENT		"event.h"/ ;" macro 1 { }	{ }
EVENT_H		include/event.h	/^#define EVENT_H/ ;" macro 1 { }	{ }
EXABOVE		bintree/extent.c	/^#define EXABOVE(a,b)    ((a.maxy<=b.miny)&&(a.minx/ ;" macro 1 { EXBuildExtents }	{ }
EXAddToSubList		bintree/extent.c	/^static void EXAddToSubList(Layer *layer, SubList */ ;" function 12 { EXAllocDummies EXBuildExtents EXFindHoles }	{ Layer free }
EXAllocDummies		bintree/extent.c	/^static void EXAllocDummies(BitPiece *bp)/ ;" function 5 { EXDummyScreens }	{ EXAddToSubList LNewDummyAt OFFSCREEN dummySubList }
EXBELOW		bintree/extent.c	/^#define EXBELOW(a,b)    ((a.miny>=b.maxy)&&(a.minx/ ;" macro 1 { EXBuildExtents }	{ }
EXBuildExtents		bintree/extent.c	/^static void EXBuildExtents()/ ;" function 63 { EXInitialize }	{ BPNewAt EXABOVE EXAddToSubList EXBELOW EXFindHoles EXLEFT EXRIGHT HADJ INF LNewDummyAt Layer NULL NXDevice OFFSCREEN Piece SB SE VADJ deviceList extSubList holeDevice true workSpaceBounds }
EXCEPT		include/package_specs.h	/^#define EXCEPT		"except.h"/ ;" macro 1 { }	{ }
EXCEPT_H		include/except.h	/^#define EXCEPT_H/ ;" macro 1 { }	{ }
EXCHesc		fonts/fontbuild.c	/^#define EXCHesc 28/ ;" macro 1 { CCRunStd }	{ }
EXDummyScreens		bintree/extent.c	/^static void EXDummyScreens()/ ;" function 18 { EXInitialize }	{ BPNewAt EXAllocDummies NULL NXDevice OFFSCREEN ONSCREENREASON Piece d deviceList dummySubList extSubList offSubList workSpaceBounds }
EXECNAMETYPE		language/opcodes.h	/^#define EXECNAMETYPE		3/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
EXEC_H		language/exec.h	/^#define	EXEC_H/ ;" macro 1 { }	{ }
EXFindHoles		bintree/extent.c	/^static void EXFindHoles(BitPiece *bp)/ ;" function 11 { EXBuildExtents }	{ EXAddToSubList LNewDummyAt Layer OFFSCREEN extSubList holeDevice true }
EXInitialize		bintree/extent.c	/^void EXInitialize()/ ;" function 9 { DriverInit }	{ EXBuildExtents EXDummyScreens NULL deviceList extSubList }
EXLEFT		bintree/extent.c	/^#define EXLEFT(a,b)	((a.maxx<=b.minx)&&(a.miny<b.m/ ;" macro 1 { EXBuildExtents }	{ }
EXPAND		vm/vm_space.c	/^public charptr EXPAND(current, n, size)  charptr c/ ;" function 10 { AllocCmds GrowBM ShrinkBM }	{ NIL VMERROR charptr current }
EXPONENT		fp/isinfieee.c	/^#define EXPONENT 0x7ff00000/ ;" macro 1 { os_isnan }	{ }
EXPORT		include/environment.h	/^#define EXPORT		2/ ;" macro 1 { BuildInitialState MAKEVM }	{ }
EXRIGHT		bintree/extent.c	/^#define EXRIGHT(a,b)    ((a.minx>=b.maxx)&&(a.miny/ ;" macro 1 { EXBuildExtents }	{ }
EXTRA_RUNS		graphics/cscan.c	/^#define EXTRA_RUNS 1/ ;" macro 1 { GrowRunBuff ReturnBits }	{ }
E_RETURN		include/except.h	/^#define	E_RETURN(x) {_E_RESTORE; return(x);}/ ;" macro 1 { }	{ _E_RESTORE }
E_RTRN_VOID		include/except.h	/^#define	E_RTRN_VOID {_E_RESTORE; return;}/ ;" macro 1 { }	{ _E_RESTORE }
Edge		graphics/qreducer.c	/^typedef struct edgerec {/ ;" typedef 13 { AdvanceEdges BuildEdge IniQReducer InsertEdge MergeEdges QReduce SortEdges }	{ }
EdgeInit		graphics/maketrap.c	/^private procedure EdgeInit(e, x, dx, dy, yBump, li/ ;" function 39 { AddTrap BresenhamMT }	{ FTrunc Fixed ONE false fixmul integer lines minTrapPrecision muldiv os_labs tfixdiv }
EdgeRec		graphics/qreducer.c	/^typedef struct edgerec {/ ;" typedef 13 { IniQReducer }	{ }
EditBlackHoriz		graphics/cscan.c	/^private procedure EditBlackHoriz(cross, dir)/ ;" function 26 { EditBlackHoriz EditBlackSpace }	{ CheckHorizWhite CrossPtr EditBlackHoriz PathCross REG ValidateCrossPtr }
EditBlackSpace		graphics/cscan.c	/^private procedure EditBlackSpace()/ ;" function 60 { CScan }	{ BADCROSS CheckBlackDown CrossPtr DoXInflections EditBlackHoriz FillInPairs IntX NULL PathCross REG ValidateCrossPtr YCROSS true yBoxMax yBoxMin }
EditWhiteHoriz		graphics/cscan.c	/^private procedure EditWhiteHoriz(startLeft, dir)/ ;" function 35 { EditWhiteHoriz EditWhiteSpace }	{ CrossPtr EditWhiteHoriz FixRuns IntX NULL PathCross Pixel REG YCROSS boolean }
EditWhiteSpace		graphics/cscan.c	/^private procedure EditWhiteSpace()/ ;" function 58 { CScan }	{ BADCROSS ConnectWhitePairs CrossPtr EditWhiteHoriz ExpandWhiteDropOuts IntX NULL PathCross REG YCROSS true yBoxMax yBoxMin }
EmptyDevBounds		device/devbounds.c	/^public DevBounds *EmptyDevBounds(self)/ ;" function 6 { InitDevPrim LBMAddTrap LBMMark ReducePathTrapsFilled ReduceQuadPath StdInitMark StdTrapsFilled }	{ emptyDevBounds }
EnableCC		postscript/contextimpl.c	/^public procedure EnableCC()/ ;" function 7 { }	{ NotifyAbort currentPSContext }
EncCharNameProc		fonts/fontcache.c	/^private char * EncCharNameProc(index, nameLength, / ;" function 14 { RgstPrebuiltInfo }	{ NULL Object VMGetElem arrayObj fontsNames nameObj }
EnclosesRect		device/devprim.c	/^public boolean EnclosesRect(dp, r) DevPrim *dp; De/ ;" function 31 { }	{ BoxTrapCompare CantHappen DevInterval DevRun DevTrap NULL OverlapDevBounds QCompareBounds false r true }
EncodeAddress		vm/vm_relocate.c	/^public PCard8 EncodeAddress (address)/ ;" function 21 { NewRelocationEntry WriteRelocatedVMToFile WriteVMSection }	{ CantHappen DebugAssert NIL SegmentAddress segmentTable }
EncodeObj		language/packedarray.c	/^private cardinal EncodeObj(ob,codeOffset)/ ;" function 122 { BindPkdary Pkdary }	{ BitsForOffset BooleanBase CmdBase CmdIndex CmdValues Code CopyObject ExecNameBase IntegerBase LitNameBase MAXArrayLength MAXNameIndex MAXOffset MINArrayLength MINOffset MaxInteger MinInteger NameIndex Object ObjectEscape RealBase RealCodes RelAry RelPkdary RelString SAMETAGS boolObj cardinal cmdObj encRealValues iLBoolObj iLIntObj iLNameObj iLRealObj iLStrObj iXCmdObj iXNameObj iXPkdaryObj intObj integer nameObj p pkdaryObj realObj strObj }
Encrypt		fonts/fontbuild.c	/^#define Encrypt(r, clear, cipher)\\/ ;" macro 1 { PSInitWrite PSWriteData }	{ C1 C2 cipher clear r }
EncryptedStream		language/stream.c	/^public boolean EncryptedStream(so)/ ;" function 6 { }	{ GetStream Stm cStmBinProcs cStmHexProcs }
End		language/dict.c	/^public procedure End()/ ;" function 7 { BinObjInit CCRunStd CStmClose ChrMapBuildChar ClearDictStack ControlInit DictInit ExecInit FontBuildInit FontCacheInit GetErosion Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 IniFmDevImpl InitMakeVM InitPostScript Init_Cmds Init_VM_Memory InternalBuildChar KAEndCSDict NameInit PSEnd PSRegisterStatusDict StateInit UnixInit }	{ BumpCETimeStamp DPopP DictObj TypeCheck d dictObj }
EndFlush		product/event.c	/^static void EndFlush()/ ;" function 7 { PSGetEvents }	{ NULL currentPSContext fflush lastEventStm scheduler }
EndParseArguments		vm/arguments.c	/^public boolean EndParseArguments()/ ;" function 20 { Mnextmain }	{ NIL argsUsed boolean false os_eprintf register savedArgc savedArgv true }
EndWholeClothInit		language/exec.c	/^private procedure EndWholeClothInit()/ ;" function 16 { }	{ AllocPArray SetShared VMCopyArray false os_eprintf rootPrivate rootShared vmShared }
EnterCircle		graphics/stroke.c	/^private boolean EnterCircle(dp, i) Cd dp; integer / ;" function 49 { FillCircle MkCirc }	{ ATRAPLENGTH AddCirclePath Assert Card16 CircleCache DURING DevPrim DevPrimBytes DevTrap DisposeDevPrim DoRdcPth END_HANDLER FalseProc FeedPathToReducer FrPth HANDLER InitDevPrim InitPath MarkState NEW NULL NewDevPrim Path boolean circ_cannot circ_maxsize circ_size false fp16k ms true }
EnterCirclesInCache		graphics/ucache.c	/^private procedure EnterCirclesInCache(pc, strk, de/ ;" function 44 { EnterRdcInCache }	{ CantHappen DevMask EnterMask PMask boolean false gs integer register true }
EnterGlbClr		fonts/fontbuild.c	/^internal procedure EnterGlbClr(pf, pn, yflg) Fixed/ ;" function 28 { EnterTriXLock EnterTriYLock RBLock RYLock }	{ FixInt Fixed GetTfmX GetTfmY NULL NewGlbClr PGlbClr false glbClrLst glcrFailure register true }
EnterGlbCntr		fonts/fontbuild.c	/^private procedure EnterGlbCntr(upper, lower) PGlbC/ ;" function 18 { BuildGlbCntrs }	{ Assert Fixed MAX MIN NewGlbCntr PGlbCntr glbCntrLst glcrFailure register true }
EnterMask		graphics/ucache.c	/^public integer EnterMask(mask, pc)/ ;" function 28 { EnterCirclesInCache }	{ Assert CIRCMASKMAX CircMask CircMaskTable FreeRdc NULL false integer lruOldest register true }
EnterPathInCache		graphics/ucache.c	/^private PUCache EnterPathInCache(context, tableInd/ ;" function 80 { UCGetDevPrim }	{ Card16 Card32 CopyNumStrmForCache DURING END_HANDLER FREE FreeRdc HANDLER NEW NULL Object PCard32 PObject PUCache RERAISE RdcRec SizeNumStrmForCache UCache UCacheRec VMCarCdr blimit bmax bsize character integer lruOldest os_freeelement os_newelement pmax register string upcStorage }
EnterRdcInCache		graphics/ucache.c	/^private procedure EnterRdcInCache(pc, context, smt/ ;" function 69 { UCGetDevPrim }	{ Card32 DURING END_HANDLER EnterCirclesInCache FREE FreeRdc HANDLER Mtx NEW NULL Object PGState PRdc PRealValue PStrk RERAISE RdcSize VMCarCdr bmax boolean bsize d false flatEps gs integer lruNewest lruOldest os_freeelement os_newelement p rdcStorage real register rmax rsize strkStorage true }
EnterTriXLock		fonts/fontbuild.c	/^internal Fixed EnterTriXLock(xf, xn, p0, p1) Fixed/ ;" function 3 { RMLock }	{ EnterGlbClr Fixed false }
EnterTriYLock		fonts/fontbuild.c	/^internal Fixed EnterTriYLock(yf, yn, p0, p1) Fixed/ ;" function 3 { RVLock }	{ EnterGlbClr Fixed true }
EnumStack		language/stack.c	/^public procedure EnumStack(stack, callBackProc, cl/ ;" function 14 { CheckStack DumpStack }	{ PObject false register }
EnumerateComposites		language/packedarray.c	/^private Card32 EnumerateComposites(pObj, info)/ ;" function 48 { PkdaryInit }	{ BOOLEANTYPE CMDTYPE CantHappen Card32 CmdBase Code ESCAPETYPE EXECNAMETYPE ExecNameBase GC_HandleIndex GC_Push INTEGERTYPE LITNAMETYPE LitNameBase Object PCard8 PObject REALTYPE RELPKDARYTYPE RELSTRINGTYPE opType p register }
EnumerateDict		language/dict.c	/^public PKeyVal EnumerateDict(d, proc, data)/ ;" function 13 { FndFntSibling FontCacheInit InitFID }	{ NIL PDictBody PDictObj PKeyVal XlatDictRef d data nullObj }
EnumerateStmBody		language/stream.c	/^private procedure EnumerateStmBody(obj, info)/ ;" function 12 { StreamInit }	{ NIL PStmBody }
Eprocs		language/stodevedit.c	/^private readonly StoDevProcs Eprocs =/ ;" global 13 { RgstEditorDev }	{ }
EqNumStrmCache		language/numstrm.c	/^public boolean EqNumStrmCache(ns, s32, s8)/ ;" function 42 { FindPathInCache }	{ CantHappen Object PCard32 PObject VMCarCdr arrayObj boolean false integer p pkdaryObj register s strObj string true }
Equal		language/type.c	/^public boolean Equal(a,b)  Object a,b;/ ;" function 82 { ChrMapBuildChar PSEq PSNe RgstPrebuiltInfo SearchDict SetFont }	{ InvlAccess NameToPString StringMatch arrayObj boolObj boolean cmdObj dictObj escObj extended false fontObj intObj nameObj nullObj objCond objGState objLock objMark objSave pkdaryObj rAccess realObj stmObj strObj true }
ErNm		fonts/fontbuild.c	/^                   fdgbndsnm, eNm, lNm, ErNm, char/ ;" global 1 { GetErosion GetStemWidth }	{ }
Erase		language/stodevedit.c	/^private procedure Erase(c, out)/ ;" function 10 { LineEdit }	{ echo eraseStr os_fputs }
ErodeSW		fonts/fontbuild.c	/^private Fixed ErodeSW(swval, w, erode) Fixed swval/ ;" function 17 { NormalizeSW PSErodeSW }	{ FRoundF FixInt Fixed GetDSW false fixtopflt gs muldiv }
Error		stodev/stodevunix.c	/^char Error[128];	\/* Error buffer used by rename sy/ ;" global 1 { PSReadImage }	{ }
Even		fonts/glbclr.c	/^#define Even(m) (~(m) & 1)/ ;" macro 1 { SimpleCounter }	{ }
EventCodeMask		include/event.h	/^#define EventCodeMask(type) (1 << (type))/ ;" macro 1 { DispatchEvents PostEvent SendEvent }	{ }
EventFlush		product/event.c	/^static void EventFlush(Stm stm)/ ;" function 10 { SendEvent }	{ NULL currentPSContext fflush lastEventStm scheduler }
EventInit		product/event.c	/^public procedure EventInit(int reason)/ ;" function 14 { NextCustomProc }	{ MousePSContext NULL PSRgstOps cmdEvents defaultPostHow flushExposures lastEventStm postHow true }
ExchangeCrossPtr		graphics/cscan.c	/^#define ExchangeCrossPtr(c1, c2) \\/ ;" macro 1 { CheckHorizWhite FixRuns SplicePixel }	{ CrossPtr }
ExclusivePSContext		postscript/contextimpl.c	/^public PSContext ExclusivePSContext(space) PSSpace/ ;" function 3 { SwitchPSContext }	{ NIL exclusivePSContext }
ExecInit		language/exec.c	/^public procedure ExecInit(reason)  InitReason reas/ ;" function 28 { LanguageInit }	{ Begin CExec CIFor CLoop CRFor CRepeat CRun CStopped End NIL PSExit PSStopped PSSuperExec RgstExplicit RgstInternal RgstMark endswitch execcmd integer intforcmd loopcmd mrk1Arg mrk2Args mrk4Args mrkExec mrkRun mrkStopped pTimeSliceClock realforcmd reptcmd rootShared runcmd stoppedcmd unitClock useRealClock xitcmd }
ExecNameBase		language/opcodes.h	/^#define ExecNameBase	(LitNameBase+NameCodes)		\/* e/ ;" macro 1 { CmdBase DecodeObj EncodeObj EnumerateComposites RelocateObj }	{ LitNameBase NameCodes }
ExecPushP		language/exec.c	/^private ExecPushP(pob)  register PObject pob;/ ;" function 12 { PSExec PSExecUserObj PSFor PSIf PSIfElse PSLoop PSRepeat PSStopped }	{ IPush InvlAccess TypeCheck arrayObj cmdObj endswitch execStk mrkNone pkdaryObj rAccess stmObj strObj xAccess }
ExpandCharBBox		graphics/cscan.c	/^private procedure ExpandCharBBox(x, y)/ ;" function 10 { ExtendRunDropOut SplicePixel }	{ xBoxMax xBoxMin yBoxMax yBoxMin }
ExpandMask		device/blackmask.c	/^void ExpandMask(PMask m, PSCANTYPE dst)/ ;" function 12 { BlackMasksMarkReal ClippedMasksMark ConstantMasksMark GrayMasksMark WhiteMasksMark }	{ data uchar }
ExpandOneLine		device/clippedmask.c	/^private PSCANTYPE ExpandOneLine(base, width) PSCAN/ ;" function 71 { ClippedMasksMark }	{ CantHappen PCard16 PSCANTYPE SCANSHIFT SCANTYPE SCANUNIT expandedScanLine expandedScanLineLength framelog2BD integer os_sureMalloc source2bits source4bits source8bits }
ExpandTempCauses		bintree/layer.c	/^static void ExpandTempCauses()/ ;" function 14 { LInitialize LMoveTo }	{ TEMPCAUSEEXPAND UniqueCause free numTempCauses tempCauses }
ExpandVMSection		vm/vm_segment.c	/^public procedure ExpandVMSection (vmStructure, bas/ ;" function 113 { CreateVM FindFreeBytes ReadVM SetVMSegmentType }	{ Assert ContractVMSection DURING DvmExpansion END_HANDLER FreeSegment HANDLER Level NIL NewSegment PVMSegment ResetVMSection SIZE_VM_EXPANSION Use_Reserve VMERROR VMSegmentSize current free integer level ps_getsize }
ExpandWhiteDropOuts		graphics/cscan.c	/^private procedure ExpandWhiteDropOuts()/ ;" function 24 { EditWhiteSpace }	{ CrossPtr FixRuns IntX NULL REG YCROSS true yBoxMax yBoxMin }
ExpansionRoom		language/opcodes.h	/^#define ExpansionRoom	(256-RelString)/ ;" macro 1 { }	{ RelString }
ExtendRecycler		vm/recycler.c	/^public procedure ExtendRecycler(R, endOfVM)/ ;" function 14 { ClaimPreallocChars FindFreeBytes StmToken }	{ RecyclerName _ExtendRecycler fflush os_fprintf recyclerStm traceRecycler }
ExtendRunDropOut		graphics/cscan.c	/^private boolean ExtendRunDropOut(x, y, ip)/ ;" function 58 { SetPixelInDropOut }	{ CrossPtr ExpandCharBBox PathCross Pixel REG RevPathDir false printf true }
ExtendStrStorage		language/scanner.c	/^private boolean ExtendStrStorage(pss)/ ;" function 32 { StmToken }	{ MAXnameLength MAXstringLength NIL PStrExtension StrExtension false integer os_malloc strStorageBufCount true }
ExtendToAnchr		fonts/glbclr.c	/^private PGlbClr ExtendToAnchr(maxStem)/ ;" function 17 { FixBands }	{ FixInt Fixed NULL PGlbCntr register }
ExtendedGCD		graphics/graypriv.c	/^private integer ExtendedGCD(u, v, u1, u2)  integer/ ;" function 16 { FreqAngleToNumbers }	{ integer }
ExtractBoolean		product/machportdevice.c	/^#define ExtractBoolean(d,str) (PSDictGetPObj((d), / ;" macro 1 { DecodePixelDict }	{ PSDictGetPObj d }
ExtractBooleanDefault		product/machportdevice.c	/^#define ExtractBooleanDefault(d,str,deflt) ((PSDic/ ;" macro 1 { DecodePixelDict }	{ PSDictGetTestPObj d }
ExtractInt		product/machportdevice.c	/^#define ExtractInt(d,str) (PSDictGetPObj((d),str, / ;" macro 1 { DecodePixelDict }	{ PSDictGetPObj d }
F0		mp/mp12.h	/^#define F0(n) (n)/ ;" macro 1 { }	{ }
F1		mp/mp12.h	/^#define F1(n) (n + FIRSTF1OP)/ ;" macro 1 { }	{ FIRSTF1OP }
F2		mp/mp12.h	/^#define F2(n) (n + FIRSTF2OP)/ ;" macro 1 { }	{ FIRSTF2OP }
F2RMetrics		fonts/fontbuild.c	/^private procedure F2RMetrics(fm, rm) FMetrics *fm;/ ;" function 7 { BMRun CCBuild CCRunStd }	{ PFCdToPRCd }
F3		mp/mp12.h	/^#define F3(n) (n + FIRSTF3OP)/ ;" macro 1 { MP12Composite }	{ FIRSTF3OP }
FBDEBUG		fonts/fontbuild.c	/^#define FBDEBUG (0)/ ;" macro 1 { }	{ }
FCDataRec		fonts/fontcache.h	/^typedef struct {/ ;" typedef 4 { }	{ }
FCFreeEntry		fonts/fontrun.c	/^private procedure FCFreeEntry(pEntry, dispose)/ ;" function 13 { }	{ NULL fclose }
FCHashId		fonts/fontrun.c	/^private int FCHashId(tag)/ ;" function 5 { }	{ FileHashId }
FCMatch		fonts/fontrun.c	/^private boolean FCMatch(tag1, tag2)/ ;" function 6 { }	{ }
FCOpenStream		fonts/fontrun.c	/^private boolean FCOpenStream(pFTag, data, size, pH/ ;" function 52 { }	{ CaData CacheReuseEntry CreateFileStm CreateFilterStm DecryptionType FileEntry FmtAscii FontInfoPtr LStmObj MakeDecryptionStm NULL PFileEntry PFontInfo StmObj data fileCache os_sureMalloc register true }
FCd		include/publictypes.h	/^typedef struct _t_FCd {/ ;" typedef 3 { AdjustBlues BlueLock BuildChar CCBuild CCRunStd CSEndChar CalcHW2 CheckIfOkToBuild DetermineTieBreaker FSetCharWidth FlexProc GetDSW GetITfmX GetITfmY GetMetrics GetTfmX GetTfmY Len1000 LockCd OFClose OFIntersect OFLineTo OffsetFill PreXLock PreYLock PutStdW SetCch SetCchDevice SetCharWidth SetupBlueLocs TfmLockPt1 TfmLockPt2 tfmloc }	{ }
FCeil		fonts/fontbuild.c	/^#define FCeil(x) (((integer)(x+0xFFFF))>>16)/ ;" macro 1 { SetBBCompMark SetupMaskDev }	{ integer }
FCeilF		fonts/fontbuild.c	/^#define FCeilF(x) (FTruncF((x) + 0xFFFF))/ ;" macro 1 { FontPathBBox }	{ FTruncF }
FCenti		graphics/pathpriv.c	/^#define FCenti 650/ ;" macro 1 { OFLineTo }	{ }
FClNewPt		graphics/graphics.c	/^public procedure FClNewPt(c) FCd c; {/ ;" function 6 { InitOFill OffsetFill PFClNewPt }	{ FDevToRdc NewPoint edgemaxx edgemaxy edgeminx edgeminy }
FCurveTo		fonts/fontbuild.c	/^private procedure FCurveTo(c0, c1, c2, c3) PFCd c0/ ;" function 7 { SetFixedPathProcs }	{ CurveTo PFCdToPRCd RCd gs }
FD		fonts/fontbuild.c	/^#define FD(x) ((float)(x) \/ 65536.0)/ ;" macro 1 { CalcHW2 FndFntSibling InitFID PSDefineFont PSUnDefineFont PrintBlueLocs PrintBlueValues PrintCntrs PrntClr pFD printmap }	{ }
FDC		fonts/diskcache.h	/^typedef struct {/ ;" typedef 12 { }	{ }
FDNestedDepth		fonts/fontcache.c	/^private integer FDNestedDepth (fdict)/ ;" function 19 { CheckCompositeFont FDNestedDepth }	{ AryObj COMPOSEDtype DictGetP FDNestedDepth IntObj VMGetElem fontsNames integer max }
FDevToRdc		graphics/graphics.c	/^private Fixed FDevToRdc(f)  Fixed f;/ ;" function 2 { FClNewPt }	{ FTrunc frdcbias gs }
FF		language/grammar.h	/^#define FF  '\\014'/ ;" macro 1 { StmToken }	{ }
FFAAction		language/stodevsupport.c	/^private int FFAAction(name, args)/ ;" function 11 { PSFileNameForAll }	{ PushP RangeCheck StrLen StrObj VMPutText }
FFAArgs		language/stodevsupport.c	/^typedef struct {/ ;" typedef 4 { PSFileNameForAll }	{ }
FFCurveTo		graphics/graphics.c	/^public procedure FFCurveTo(c0, c1, c2, c3) PFCd c0/ ;" function 4 { CCRunStd }	{ FFltnCurve fr llx lly true }
FF_StrkLnTo		graphics/stroke.c	/^private procedure FF_StrkLnTo(dP2)  DevCd dP2; {/ ;" function 45 { DoStroke F_StrkClose F_StrkLnTo }	{ DevCd F_AdjstHW F_Dist F_FillJoin F_FillLineSegment F_NormPair F_VecAdd F_VecMul F_VecSub FixOne Fixed atcurve boolean f_dLf f_dLfSt f_dP1 f_dRt f_dRtSt f_uV1 f_uV2St false fixdiv incurve mitposs needVec normalize os_labs r strkTstRct strkll strkur true }
FF_StrkStrt		graphics/stroke.c	/^private procedure FF_StrkStrt(dP) DevCd dP;/ ;" function 5 { DoStroke F_StrkStrt }	{ atcurve f_dP1 f_dP1St false needVec true }
FF_Vector		graphics/stroke.c	/^public procedure FF_Vector(dP2) DevCd dP2; {/ ;" function 4 { DoStroke F_VecClose F_Vector }	{ BresenhamMT f_dP1 false needVec }
FFltnCurve		graphics/fflattenpath.c	/^public procedure FFltnCurve(c0, c1, c2, c3, pfr, i/ ;" function 66 { DoPath FFCurveTo FFltnCurve OffsetFill QDoEUsrPth QDoUserPath QUsrPthCurveTo UsrPthCurveTo UsrPthDoCurveTo }	{ Cd DevCd FFltnCurve FMiniFltn FixInt Fixed FixedBezDiv UnFixCd inrect integer llx lly register true urx ury }
FGEnterMonitor		include/foreground.h	/^#define FGEnterMonitor()/ ;" macro 1 { AddRunIndexes BMAlloc BMFree CheckBM ClipDevPrim ColorSetup CompactBM DestroyPat DevAddHalftoneRef DevAddTfrFcnRef DevAllocHalftone DevAllocTfrFcn DevCheckScreenDims DevFlushClip DevFlushMask DevFreeHalftone DevFreeTfrFcn DevIndependentColors DevMaskCacheInfo DevRemHalftoneRef DevRemTfrFcnRef DevSetMaskCacheSize DisposeDevPrim GraySetup Gry4Of4Setup MCFreeBytes MCFreeMask MCGetMask MCGetTempBytes MonoSetup NewDevPrim QIntersect QIntersectTrp }	{ }
FGExitMonitor		include/foreground.h	/^#define FGExitMonitor()/ ;" macro 1 { AddRunIndexes BMAlloc BMFree CheckBM ClipDevPrim ColorSetup CompactBM DestroyPat DevAddHalftoneRef DevAddTfrFcnRef DevAllocHalftone DevAllocTfrFcn DevCheckScreenDims DevFlushClip DevFlushMask DevFreeHalftone DevFreeTfrFcn DevIndependentColors DevMaskCacheInfo DevRemHalftoneRef DevRemTfrFcnRef DevSetMaskCacheSize DisposeDevPrim GraySetup Gry4Of4Setup MCFreeBytes MCFreeMask MCGetMask MCGetTempBytes MonoSetup NewDevPrim QIntersect QIntersectTrp }	{ }
FID		fonts/fontspriv.h	/^typedef Card32 FID;  \/* unique id for a font name / ;" typedef 1 { FindMaxFID MakeCompFont MakeFontSupp MakeMID }	{ }
FIDNULL		fonts/fontspriv.h	/^#define FIDNULL 0/ ;" macro 1 { }	{ }
FIFO		include/package_specs.h	/^#define FIFO		"fifo.h"/ ;" macro 1 { }	{ }
FILESYSTEM		include/package_specs.h	/^#define FILESYSTEM	"filesystem.h"/ ;" macro 1 { }	{ }
FILESYSTEM_H		include/filesystem.h	/^#define	FILESYSTEM_H/ ;" macro 1 { }	{ }
FILETYPES		include/package_specs.h	/^#define FILETYPES	"filetypes.h"/ ;" macro 1 { }	{ }
FILETYPES_H		include/filetypes.h	/^#define FILETYPES_H/ ;" macro 1 { }	{ }
FILE_CACHE_LIMIT		fonts/fontrun.h	/^#define FILE_CACHE_LIMIT 3/ ;" macro 1 { FILE_HASH_BUCKETS FontRunInit }	{ }
FILE_HASH_BUCKETS		fonts/fontrun.h	/^#define FILE_HASH_BUCKETS (FILE_CACHE_LIMIT * 2) +/ ;" macro 1 { FontRunInit }	{ FILE_CACHE_LIMIT }
FIRSTF1OP		mp/mp12.h	/^#define    FIRSTF1OP 5/ ;" macro 1 { F1 FIRSTF2OP MP12Composite MRMoveRect }	{ }
FIRSTF2OP		mp/mp12.h	/^#define    FIRSTF2OP (FIRSTF1OP+9)    \/* 14 *\// ;" macro 1 { F2 FIRSTF3OP MP12Composite MRMoveRect }	{ FIRSTF1OP }
FIRSTF3OP		mp/mp12.h	/^#define    FIRSTF3OP (FIRSTF2OP+14) \/* 28 *\// ;" macro 1 { F3 FIRSTF4OP MP12Composite MRMoveRect }	{ FIRSTF2OP }
FIRSTF4OP		mp/mp12.h	/^#define    FIRSTF4OP (FIRSTF3OP+4)/ ;" macro 1 { }	{ FIRSTF3OP }
FIRSTFILEID		include/disk.h	/^#define FIRSTFILEID 0x1000	\/* small integers aren'/ ;" macro 1 { }	{ }
FIRST_MESSAGE_ID		product/ipcstream.h	/^#define FIRST_MESSAGE_ID STREAM_DATA_MESSAGE_ID/ ;" macro 1 { IPCFillBuf }	{ STREAM_DATA_MESSAGE_ID }
FIXCD		fonts/fontshow.h	/^#define FIXCD(cd,pdc) {pdc->x=pflttoxfix(&((cd).x)/ ;" macro 1 { MakeCacheDev ShowByName }	{ }
FIXEDBITS		device/blacktrap.030.s	/^#define FIXEDBITS	16/ ;" macro 1 { }	{ }
FIXINT		fonts/fontshow.h	/^#define FIXINT(x) ((x)<<8)/ ;" macro 1 { CompositeShow FastShow FasterShow OkFixed ShowByName }	{ }
FIXTOFRAC		graphics/pathpriv.c	/^#define FIXTOFRAC(f) ((f) << 14)/ ;" macro 1 { InitOFill OffsetFill }	{ }
FIXTOPFLT		fonts/fontshow.h	/^#define FIXTOPFLT(x,y) xfixtopflt((x),(y))/ ;" macro 1 { ShowByName SimpleShowByName if }	{ }
FIXTOXFIX		fonts/fontshow.h	/^#define FIXTOXFIX(x) ((x)>>8)/ ;" macro 1 { }	{ }
FIesc		fonts/fontbuild.c	/^#define FIesc 3/ ;" macro 1 { CCRunStd }	{ }
FInvlAccess		vm/vm.c	/^public procedure FInvlAccess() {PSError(invlaccess/ ;" function 1 { Array CheckSharable PSCurrentGState PSGState TrickyDictP }	{ PSError invlaccess }
FLATTENLIMIT		graphics/path.h	/^#define FLATTENLIMIT 10/ ;" macro 1 { DoPath InitFontFlat OffsetFill QDoEUsrPth QDoUserPath QUsrPthCurveTo UsrPthCurveTo UsrPthDoCurveTo }	{ }
FLesc		fonts/fontbuild.c	/^#define FLesc 0/ ;" macro 1 { BuildChar CCRunStd }	{ }
FLineTo		fonts/fontbuild.c	/^private procedure FLineTo(c) PFCd c; {/ ;" function 5 { SetFixedPathProcs }	{ LineTo PFCdToPRCd RCd gs }
FMap17		fonts/fontspriv.h	/^#define FMap17 4/ ;" macro 1 { CheckCompositeFont CompSlowShow CompositeShow GetInfoSupp ScanCompString SetFont ShowInternal }	{ }
FMap88		fonts/fontspriv.h	/^#define FMap88 2/ ;" macro 1 { CheckCompositeFont CompSlowShow CompositeShow GetInfoSupp ScanCompString SetFont ShowInternal }	{ }
FMap97		fonts/fontspriv.h	/^#define FMap97 5/ ;" macro 1 { CheckCompositeFont CompSlowShow CompositeShow GetInfoSupp ScanCompString SetFont ShowInternal }	{ }
FMapEscape		fonts/fontspriv.h	/^#define FMapEscape 3/ ;" macro 1 { CheckCompositeFont CompSlowShow CompositeShow GetInfoSupp ScanCompString SetFont ShowInternal }	{ }
FMapFSA		fonts/fontspriv.h	/^#define FMapFSA 1/ ;" macro 1 { }	{ }
FMapGen		fonts/fontspriv.h	/^#define FMapGen 6/ ;" macro 1 { CheckCompositeFont CompSlowShow CompositeShow GetInfoSupp ScanCompString SetFont ShowInternal }	{ }
FMapNone		fonts/fontspriv.h	/^#define FMapNone 0/ ;" macro 1 { CompSlowShow CompositeShow GetInfoSupp PSAWidthShow PSKShow PSWidthShow ScanCompString SetFont ShowInternal }	{ }
FMetrics		fonts/fontdata.h	/^typedef struct _t_FMetrics {/ ;" typedef 3 { BMRun CCRunStd MakeCacheDev2 }	{ }
FMilli		graphics/pathpriv.c	/^#define FMilli 0x40/ ;" macro 1 { OFLineTo }	{ }
FMiniFltn		graphics/fflattenpath.c	/^private procedure FMiniFltn(f0, f1, f2, f3, pfr, i/ ;" function 157 { FFltnCurve }	{ Cd DevCd FixInt Fixed Int16 Int32 MFix MFixInt MiniBlkSz MiniFltnMaxDepth UnFixCd UnMFix bbox2 c0x c0y c1x c1y c2x c2y c3x c3y d d0x d0y d1x d1y d2x d2y d3x d3y eqa eqb false inbbox inrect inrect2 llx lly mdpt os_labs p r0 register true urx ury }
FMoveTo		fonts/fontbuild.c	/^private procedure FMoveTo(c) PFCd c; {/ ;" function 5 { SetFixedPathProcs }	{ MoveTo PFCdToPRCd RCd gs }
FONTBUILD_H		fonts/fontbuild.h	/^#define	FONTBUILD_H/ ;" macro 1 { }	{ }
FONTCACHE_H		fonts/fontcache.h	/^#define	FONTCACHE_H/ ;" macro 1 { }	{ }
FONTDATA_H		fonts/fontdata.h	/^#define	FONTDATA_H/ ;" macro 1 { }	{ }
FONTKEY		fonts/fontbuild.c	/^#define FONTKEY ((Card16) 4330)/ ;" macro 1 { BuildChar CCRunStd }	{ Card16 }
FONTRUN_H		fonts/fontrun.h	/^#define	FONTRUN_H/ ;" macro 1 { }	{ }
FONTRUN_LEVEL		fonts/fontrun.h	/^#define FONTRUN_LEVEL 1/ ;" macro 1 { KAFontrunType }	{ }
FONTS		include/package_specs.h	/^#define FONTS		"fonts.h"/ ;" macro 1 { }	{ }
FONTSHOW_H		fonts/fontshow.h	/^#define	FONTSHOW_H/ ;" macro 1 { }	{ }
FONTSNAMES_H		fonts/fontsnames.h	/^#define	FONTSNAMES_H/ ;" macro 1 { }	{ }
FONTSPRIV_H		fonts/fontspriv.h	/^#define	FONTSPRIV_H/ ;" macro 1 { }	{ }
FONTS_H		include/fonts.h	/^#define	FONTS_H/ ;" macro 1 { }	{ }
FOOTPRINT		coroutine/corouxfer.c	/^#define FOOTPRINT 0xBA987654/ ;" macro 1 { ApplyFootprints CoReturn MinStackUnused }	{ }
FOREGROUND		include/package_specs.h	/^#define FOREGROUND	"foreground.h"/ ;" macro 1 { }	{ }
FOREGROUND_H		include/foreground.h	/^#define	FOREGROUND_H/ ;" macro 1 { }	{ }
FP		include/package_specs.h	/^#define FP		"fp.h"/ ;" macro 1 { }	{ }
FPCONSTANTS		include/fp.h	/^#define	FPCONSTANTS 1/ ;" macro 1 { }	{ }
FPFRIENDS		include/package_specs.h	/^#define FPFRIENDS	"fpfriends.h"/ ;" macro 1 { }	{ }
FPFRIENDS_H		include/fpfriends.h	/^#define	FPFRIENDS_H/ ;" macro 1 { }	{ }
FPInit		fp/mtxvec.c	/^public procedure FPInit()/ ;" function 60 { Mnextmain }	{ DPSFPGlobalsRec IdentityMtx NumOverflow dpsfpglobals fp10 fp100 fp1024 fp1073741824 fp16k fp180 fp1p3333333 fp1p5707963268 fp270 fp3 fp360 fp3p1415926535 fp4 fp5 fp50 fp6 fp65536 fp6p2831853071 fp72 fp8 fp90 fpHalf fpOne fpTwo fpZero fpp001 fpp015 fpp03 fpp1 fpp11 fpp2 fpp25 fpp3 fpp3364 fpp45 fpp515 fpp53 fpp552 fpp59 fpp7 fpp9 integer lastm lastminv os_sureMalloc }
FP_H		include/fp.h	/^#define	FP_H/ ;" macro 1 { }	{ }
FRACTION		fonts/fontshow.h	/^#define FRACTION 8/ ;" macro 1 { CompositeShow FastShow FasterShow }	{ }
FRAMEDEVICE_H		device/framedev.h	/^#define FRAMEDEVICE_H/ ;" macro 1 { }	{ }
FRCNextPt		graphics/pathreduce.c	/^private procedure FRCNextPt(coord)  DevCd coord; {/ ;" function 6 { DoRdcPth }	{ Cd RCNextPt fixtopflt }
FRDCBIAS		graphics/graphics.c	/^#define FRDCBIAS 655360/ ;" macro 1 { SetScal }	{ }
FREE		include/vm.h	/^#define FREE(ptr)\\/ ;" macro 1 { CCRun CopyNumStrmForCache CreateContext CreatePSSpace CreateVM DestroyData DestroyPSContext DestroyPSSpace DestroyVM EnterPathInCache EnterRdcInCache FinishLock FndFntSibling FreePath FreePatternBase FreeRdc FreeSegment GCInternal_AllocStack GCInternal_FreeStack GCInternal_GrowStack GCInternal_VMChange ImageInternal InitClipPath KillStack LineFClose MakeRectPath MinimumClip PSChdir Truncate }	{ MFree PCard8 }
FROUND		fonts/fontshow.h	/^#define FROUND(x) (((x)+128)>>8)/ ;" macro 1 { ShowByName }	{ }
FRound		include/fp.h	/^#define FRound(x) ((((integer)(x))+(1<<15))>>16)/ ;" macro 1 { Adjust BuildChar BuildInitialRuns CCBuild CCRunStd CSRun DoXInflections FROUND ImSXXD11 OFAddRunMark }	{ integer }
FRoundF		fonts/flex.c	/^#define FRoundF(x) ((((integer)(x))+(1<<15)) & 0xF/ ;" macro 1 { Adjust AdjustBlues AlignIsolatedStems BlueLock BuildChar CCRunStd CalcHW2 ErodeSW FlexProc MakeCacheDev MakeCacheDev2 RoundSW SetCch }	{ integer }
FSCacheAge		fonts/fastshow.c	/^private integer FSCacheAge[FSCacheSz], fsAge, fsRe/ ;" global 1 { FastShow }	{ }
FSCacheCIO		fonts/fastshow.c	/^private CIOffset *FSCacheCIO;/ ;" global 1 { FSInit FastShow }	{ }
FSCacheEnc		fonts/fastshow.c	/^private PAryObj FSCacheEnc[FSCacheSz];/ ;" global 1 { FastShow }	{ }
FSCacheMID		fonts/fastshow.c	/^private MID FSCacheMID[FSCacheSz];/ ;" global 1 { FastShow PurgeFSCache }	{ }
FSCacheSz		fonts/fastshow.c	/^#define FSCacheSz (4)	\/* id: Was 8, but reduced to/ ;" macro 1 { FSInit FastShow PurgeFSCache }	{ }
FSInit		fonts/fastshow.c	/^public procedure FSInit() {/ ;" function 4 { FontShowInit }	{ CIOffset DevMask FSCacheCIO FSCacheSz NEW showCache sizeShowCache }
FSetCharWidth		fonts/cachedev.c	/^public boolean FSetCharWidth(w0, w1, v)  FCd w0, w/ ;" function 20 { MakeCacheDev MakeCacheDev2 SetCchDevice }	{ FCd ShowState fixtopflt gs register ss ssr }
FTRUNC		fonts/fontshow.h	/^#define FTRUNC(x) ((x)>>8)/ ;" macro 1 { }	{ }
FTfm		graphics/userpath.c	/^private procedure FTfm(x, y, fmtx, mtxtype, ct)/ ;" function 24 { QEnumOk }	{ Fixed d fixmul }
FTrunc		include/fp.h	/^#define FTrunc(x) (((integer)(x))>>16)/ ;" macro 1 { AddTrap Adjust AdjustBlues BresenhamMT BuildChar BuildEdge CCBuild CCRunStd CanSkipTrap CopyTrimmedEdge DevToRdc EdgeInit FDevToRdc FTRUNC F_FillJoin FastFillBevel FastFillQuad FixOnePath FmMark Im110 ImSXXD11 MakeBounds Pixel PointInTraps QBresenhamMT QDoEUsrPthFloat QIntersectTrp QuadTrap SetBBCompMark SimpleCounter }	{ integer }
FTruncF		fonts/fontbuild.c	/^#define FTruncF(x) ((Fixed) ((integer)(x) & 0xFFFF/ ;" macro 1 { Adjust AdjustBlues CCRunStd CounterGt FCeilF FinGlbClrLocs FixOnePath FontPathBBox PutStdW UseStdWidth }	{ Fixed integer }
FVSUBR		fp/DEFSmach.h	/^#define FVSUBR(l) 	M##l/ ;" macro 1 { }	{ }
F_AdjstHW		graphics/stroke.c	/^private Fixed F_AdjstHW(v) DevCd v; {/ ;" function 21 { AdjstHW FF_StrkLnTo }	{ Fixed f_halfwidth fixdiv fixmul normalize os_labs }
F_CHARSTRINGS_SEEN		fonts/fontrun.h	/^#define F_CHARSTRINGS_SEEN	0x20/ ;" macro 1 { KADict }	{ }
F_Dist		graphics/stroke.c	/^public Fixed F_Dist(a,b) register Fixed a, b; {/ ;" function 11 { FF_StrkLnTo F_MiterPoint F_StrkCap FastFillCurveJoin GetDSW }	{ Fixed FracOne FracSqrt2 fixratio fracmul fracsqrt fxfrmul register }
F_EEXEC_SEEN		fonts/fontrun.h	/^#define F_EEXEC_SEEN		0x2/ ;" macro 1 { F_VALID_FONT KAEexec NewState }	{ }
F_FONTTYPE_SEEN		fonts/fontrun.h	/^#define F_FONTTYPE_SEEN		0x1/ ;" macro 1 { F_VALID_FONT KAFontType }	{ }
F_FillCircle		graphics/stroke.c	/^private procedure F_FillCircle(p) DevCd p; {/ ;" function 5 { F_FillJoin F_StrkCap F_StrkClose }	{ Cd FillCircle UnFixCd p }
F_FillJoin		graphics/stroke.c	/^private procedure F_FillJoin(lf, rt, v)  DevCd lf,/ ;" function 48 { FF_StrkLnTo F_StrkClose }	{ DevCd FTrunc F_FillCircle F_HalfRoundCap F_MiterPoint F_VecTurn FastFillBevel FastFillCurveJoin FastFillQuad f_dLf f_dP1 f_dRt f_halfwidth f_uV1 gs integer miterJoin mitposs normalize register roundJoin true }
F_FillLineSegment		graphics/stroke.c	/^private procedure F_FillLineSegment(p2, leftNorm, / ;" function 9 { FF_StrkLnTo }	{ DevCd F_VecAdd F_VecSub FastFillQuad f_dLf f_dRt }
F_HalfRoundCap		graphics/stroke.c	/^private procedure F_HalfRoundCap(lf, rt) DevCd lf,/ ;" function 15 { F_FillJoin F_StrkCap }	{ Cd DevCd FastFillCurveJoin HalfRoundCap UnFixCd needTfm r }
F_MiterPoint		graphics/stroke.c	/^private boolean F_MiterPoint(p1, v1, p2, v2, i, c)/ ;" function 44 { F_FillJoin }	{ DevCd F_Dist F_VecAdd F_VecMul FixOne Fixed f_ccw f_throwThreshold false fixdiv fixmul fpp7 muldiv normalize os_labs register throwThreshold true }
F_MvStrk		graphics/stroke.c	/^private procedure F_MvStrk(p, p2) register DevCd */ ;" function 2 { }	{ }
F_NormPair		graphics/stroke.c	/^private procedure F_NormPair(v, d2) register DevCd/ ;" function 43 { CheckForRectangle FF_StrkLnTo }	{ DevCd FixOne Fixed FracPart f_dP1 fxdeps oddXwidth oddYwidth os_labs r s }
F_PASSWORD_SEEN		fonts/fontrun.h	/^#define F_PASSWORD_SEEN		0x4/ ;" macro 1 { F_VALID_FONT KAPassword }	{ }
F_SEG_HDR_IN_DATA		fonts/fontrun.h	/^#define F_SEG_HDR_IN_DATA	0x40/ ;" macro 1 { KACharDef KAEndCSDict }	{ }
F_SUBRS_SEEN		fonts/fontrun.h	/^#define F_SUBRS_SEEN		0x10/ ;" macro 1 { KAArraySubrs }	{ }
F_StrkCap		graphics/stroke.c	/^private procedure F_StrkCap()/ ;" function 57 { DoStroke }	{ DevCd F_Dist F_FillCircle F_HalfRoundCap F_VecAdd F_VecMul F_VecSub FastFillQuad Fixed buttCap f_dLf f_dLfSt f_dP1 f_dP1St f_dRt f_dRtSt f_halfwidth f_uV1 f_uV2St gs needVec normalize roundCap tenonCap }
F_StrkClose		graphics/stroke.c	/^private procedure F_StrkClose()/ ;" function 8 { DoStroke }	{ FF_StrkLnTo F_FillCircle F_FillJoin f_dLfSt f_dP1St f_dRtSt f_uV2St gs needVec roundCap }
F_StrkLnTo		graphics/stroke.c	/^private procedure F_StrkLnTo(cP2)  Cd cP2; {/ ;" function 5 { }	{ DevCd FF_StrkLnTo FixCd }
F_StrkStrt		graphics/stroke.c	/^private procedure F_StrkStrt(cP) Cd cP;/ ;" function 7 { }	{ DevCd FF_StrkStrt FixCd dP1St }
F_VALID_FONT		fonts/fontrun.h	/^#define F_VALID_FONT	(F_FONTTYPE_SEEN | F_EEXEC_SE/ ;" macro 1 { KACharStrings KASubrs }	{ F_EEXEC_SEEN F_FONTTYPE_SEEN F_PASSWORD_SEEN }
F_VecAdd		graphics/stroke.c	/^#define F_VecAdd(v1,v2,v3) {(v3).x=(v1).x+(v2).x; / ;" macro 1 { FF_StrkLnTo F_FillLineSegment F_MiterPoint F_StrkCap }	{ }
F_VecClose		graphics/stroke.c	/^private procedure F_VecClose()/ ;" function 4 { DoStroke }	{ FF_Vector f_dP1St needVec }
F_VecMul		graphics/stroke.c	/^#define F_VecMul(v,r,v2) {(v2).x=fixmul((v).x,(r))/ ;" macro 1 { FF_StrkLnTo F_MiterPoint F_StrkCap }	{ fixmul r }
F_VecSub		graphics/stroke.c	/^#define F_VecSub(v1,v2,v3) {(v3).x=(v1).x-(v2).x; / ;" macro 1 { CheckForRectangle FF_StrkLnTo F_FillLineSegment F_StrkCap }	{ }
F_VecTurn		graphics/stroke.c	/^public integer F_VecTurn(v1, v2) DevCd v1, v2;/ ;" function 8 { F_FillJoin OFIntersect }	{ Fixed fixmul register }
F_Vector		graphics/stroke.c	/^private procedure F_Vector(cP2) Cd cP2; {/ ;" function 5 { }	{ DevCd FF_Vector FixCd }
FalseProc		graphics/stroke.c	/^private boolean FalseProc() { return false; }/ ;" function 1 { EnterCircle }	{ false }
FamilyBlueLocs		fonts/fontbuild.c	/^private procedure FamilyBlueLocs(/ ;" function 13 { BuildChar CCRunStd }	{ AdjustBlues Fixed GetBlueArrays IntX famBluesNm famOtherBluesNm }
FastFillBevel		graphics/stroke.c	/^private procedure FastFillBevel(dc0, dc1, dc2, sim/ ;" function 76 { F_FillJoin FastFillCurveJoin FillBevel }	{ FTrunc Fixed FracPart StrkTrp boolean dc1 dc2 false fixratio fxfrmul integer register true }
FastFillCurveJoin		graphics/stroke.c	/^private procedure FastFillCurveJoin(dc0, dc1, dc2,/ ;" function 48 { F_FillJoin F_HalfRoundCap FastFillCurveJoin }	{ Assert Cd DevCd F_Dist FastFillBevel FastFillCurveJoin FillCurveJoin Fixed GetMaxBevelChord MAXCIRCLEJOINDEPTH UnFixCd dc1 dc2 dc3 f_halfwidth f_maxBevelChord fixdiv fixmul fpZero needMaxBevelChord needTfm normalize private procedure r register }
FastFillQuad		graphics/fastfillquad.c	/^public procedure FastFillQuad(dc0, dc1, dc2, dc3) / ;" function 96 { DoRdcPth F_FillJoin F_FillLineSegment F_StrkCap FillQuad ReduceQuadPath }	{ Bubble CanSkipTrap FTrunc Fixed FracPart PQdCorner QuadTrap StrkTrp boolean dc1 dc2 dc3 false fixratio fxfrmul integer qc register true }
FastName		language/name.c	/^public procedure FastName(str, strlen, pnobj)/ ;" function 93 { AddEntry KAEndCSDict MakePName MakeStaticPName ReadBinObjSeq StmToken StrToName }	{ MAX Maxprobe NIL Ncomp Nsearch PNameEntry XNameObj integer longcardinal newstn register rootShared s string strlen }
FastRectFill		graphics/rect.c	/^private procedure FastRectFill(Object obj)/ ;" function 30 { PSRectFill }	{ BBoxCompareResult BoundsCompare DevPrim GetDevClipPrim NumStrm ReduceRect SetupNumStrm StdInitMark StdTermMark TypeCheck gs ms procedure real true }
FastShow		fonts/fastshow.c	/^public integer FastShow(showchars) boolean showcha/ ;" function 334 { if }	{ CI CINULL CIOffset CharMetrics DebugAssert DevCd DevMask FIXINT FRACTION FSCacheAge FSCacheCIO FSCacheEnc FSCacheMID FSCacheSz FasterShow Fixed FixedMoveTo HF4F LOWERSHOWBOUND MID MIDNULL Mtx MtxType NULL PAryObj PCIItem PCIOffset PFLTTOFIX PMTItem PNameEntry PNameObj PShowState SetCharAge StringMark boolean character charptr crMID curMT d false fdcp fixdiv fixmul fsAge fsRecent gs integer llx lly nameObj os_fabs os_labs real realslow register scip showCache ss ssr (etc) }
FasterShow		fonts/fastshow.c	/^FasterShow(CIOffset *fscachecio, unsigned char *cp/ ;" function 79 { FastShow }	{ CI CIItem CIOffset CharMetrics DebugAssert DevCd DevMask FIXINT FRACTION Fixed FixedMoveTo PCIItem PMTItem SetCharAge StringMark UPPERSHOWBOUND curMT fdcp gs integer llx lly register scip showCache ss urx ury }
FeedPathToReducer		graphics/pathreduce.c	/^public procedure FeedPathToReducer(/ ;" function 7 { ConvertToListPath DoRdcPth EnterCircle Fill XAFillPath }	{ DoPath NoOp flatEps gs true }
FetchCharOutline		fonts/fontrun.c	/^public procedure FetchCharOutline(offsetStr, charI/ ;" function 22 { FontRunInit }	{ CaData CaTag CacheLookup FontInfoPtr LStrObj NULL OutlineTag PFontInfo POutlineEntry RAISE data ecIOError outlineCache register string }
FileAccess		include/filesystem.h	/^typedef enum {			\/* file access type (Stream level/ ;" typedef 5 { }	{ }
FileAttributes		include/filesystem.h	/^typedef struct _t_FileAttributes {\/* file attribut/ ;" typedef 10 { }	{ }
FileEntry		fonts/fontrun.h	/^typedef struct _t_FileEntry {/ ;" typedef 10 { FCOpenStream }	{ }
FileErrorCode		include/filetypes.h	/^typedef enum {/ ;" typedef 28 { }	{ }
FileFd		stream/unixfopen.c	/^#define FileFd(stm) ((int)(stm->data.a))/ ;" macro 1 { MFClose os_fdopen os_fileno }	{ data }
FileHashId		fonts/fontrun.h	/^#define FileHashId(tag) (tag->generation)/ ;" macro 1 { FCHashId }	{ }
FileID		include/filetypes.h	/^typedef long int FileID;	\/* file ID, unique within/ ;" typedef 1 { }	{ }
FilePage		include/filetypes.h	/^typedef long int FilePage;	\/* page number within f/ ;" typedef 1 { LEADERPAGE }	{ }
FilePathSearch		product/miscops.c	/^int FilePathSearch(char *pathName, char *fileName,/ ;" function 53 { FontPathSearch Mnextmain PSFilePath PSPlaySound }	{ myGetpwdir strcpy strlen }
FilePointer		include/filetypes.h	/^typedef struct {		\/* File designator for most oper/ ;" typedef 5 { }	{ }
FileSize		stream/unixfopen.c	/^#define FileSize(stm) ((int)((stm)->data.b))/ ;" macro 1 { MFClose MFSeek os_fdopen }	{ data }
FileTag		fonts/fontrun.h	/^typedef struct _t_FileTag {/ ;" typedef 4 { GetFontStream }	{ }
FileTime		include/filetypes.h	/^typedef unsigned long int FileTime; \/* file time s/ ;" typedef 1 { }	{ }
FileTransferOp		include/filesystem.h	/^typedef enum {			\/* transfer operation (File\/Cache/ ;" typedef 8 { }	{ }
Fill		graphics/pathops.c	/^public procedure Fill(path, evenOdd)  PPath path; / ;" function 41 { CCRunStd FillBevel FillCircle FillQuad OffsetFill PSEOFill PSFill PSRectFill PathEndChar }	{ AppendPath BreakUpPath CantHappen ClosePath DevPrim FeedPathToReducer GetDevClipPrim ListPath MarkDevPrim NULL PathType QRdcOk XAFillPath chrPth false gs pathclose procedure strokeOp }
FillBevel		graphics/stroke.c	/^private procedure FillBevel(c0, c1, c2, simpleBeve/ ;" function 62 { FillCurveJoin FillJoin }	{ BBoxCompareResult ClosePath DURING DevCd END_HANDLER FastFillBevel Fill FixCd FrPth HANDLER InitPath LineTo MoveTo Path RERAISE Reinitms XA_MAX XA_MIN allSegmentsIn clipBBox dc1 dc2 false fp16k integer isStrkPth ms real register strokePath }
FillCircle		graphics/stroke.c	/^private procedure FillCircle(p, dp)  Cd p, dp; {/ ;" function 101 { F_FillCircle FillJoin FillLineSegment StrkCap StrkClose }	{ AddCircleMask AddCirclePath AppendTraps BBoxCompareResult Cd CircleCache DURING DictGetP END_HANDLER EnterCircle Fill FindInCache FrPth GRstr GSave HANDLER InitPath MoveTo Mtx MtxCnct NIL NewPath NormalizePoint PCIItem Path RERAISE RealEq0 Reinitms SetFont SetMtx SetTrapBounds SimpleShow StrObj StrokeSemaphore TransCircle VMObjForPString boolean circleFont circleTraps d dictObj false fpOne fpTwo fpZero gPathBBox graphicsNames gs haveBounds integer isStrkPth ms needClip normalize r real register rootShared s strokePath (etc) }
FillCurveJoin		graphics/stroke.c	/^private procedure FillCurveJoin(c0, c1, c2, depth,/ ;" function 54 { FastFillCurveJoin FillCurveJoin FillJoin HalfRoundCap }	{ Cd Dist FillBevel FillCurveJoin GetCurveMiddle GetMaxBevelChord MAXCIRCLEJOINDEPTH RealEq0 TfmPCd curIMtx fpHalf gs maxBevelChord needMaxBevelChord needTfm normalize real register uhalfwidth }
FillInBG		graphics/transferimpl.c	/^private procedure FillInBG(bgOb, grayOb, tbl)/ ;" function 23 { ActivateTfr }	{ LimitColor MAXCOLOR PopPReal PushPReal fpHalf fpOne integer real register }
FillInColumn		graphics/cscan.c	/^private boolean FillInColumn(known, knownDir, xCol/ ;" function 170 { FillInRange }	{ CrossPtr DEBUGERROR Fixed Int16 Intersection MAXFixed MINFixed MidPixel NULL PIntersection PathCross PathDir Pixel PixelIsBlack REG RevPathDir SetIntersection SetPixelInDropOut YCROSS printf true }
FillInInflection		graphics/cscan.c	/^private procedure FillInInflection(known, knownDir/ ;" function 30 { DoXInflections }	{ CrossPtr DEBUGERROR Fixed Intersection MidPixel PIntersection SetIntersection SetPixelInDropOut true }
FillInPairs		graphics/cscan.c	/^private procedure FillInPairs(top, bottom, known, / ;" function 20 { CheckBlackDown EditBlackSpace }	{ FillInRange Pixel bottom printf top }
FillInRange		graphics/cscan.c	/^private procedure FillInRange(known, knownDir, sta/ ;" function 25 { CheckHorizWhite FillInPairs }	{ DEBUGERROR FillInColumn ValidateCrossPtr false start true }
FillInTfrTbl		graphics/transferimpl.c	/^private procedure FillInTfrTbl(ob, tbl)/ ;" function 19 { ActivateTfr }	{ MAXCOLOR PCard8 PopPReal PushPReal fpHalf fpOne integer real register }
FillInUCR		graphics/transferimpl.c	/^private procedure FillInUCR(ob, tbl)/ ;" function 18 { ActivateTfr }	{ MAXCOLOR PopPReal PushPReal fpHalf fpOne integer real register }
FillJoin		graphics/stroke.c	/^private procedure FillJoin(lf, rt, v)  Cd lf, rt, / ;" function 52 { StrkClose StrkLnTo }	{ Cd FillBevel FillCircle FillCurveJoin FillQuad HalfRoundCap ITransIfNeed MiterPoint RealEq0 TransIfNeed VecTurn dLf dP1 dRt fpZero gs integer miterJoin mitposs normalize register roundJoin true uP1 uV1 uhalfwidth }
FillLineSegment		graphics/stroke.c	/^private procedure FillLineSegment(p, p2, v, leftNo/ ;" function 41 { StrkLnTo }	{ AdjstHW Cd FillCircle FillQuad HalfRoundCap RealNe0 TransIfNeed VecAdd VecMul VecSub boolean crDash crDshLen dLf dRt dashLength dashLim dashed filledDash gs normalize p r real roundCap tenonCap uhalfwidth }
FillQuad		graphics/stroke.c	/^private procedure FillQuad(c0, c1, c2, c3)  Cd c0,/ ;" function 85 { FillJoin FillLineSegment StrkCap StrkLnTo }	{ BBoxCompareResult ClipVect ClosePath DURING DevCd END_HANDLER FastFillQuad Fill FixCd FrPth HANDLER InitPath LineTo MoveTo PCd Path RERAISE Reinitms StrkTrp XA_MAX XA_MIN allSegmentsIn clipBBox dc1 dc2 dc3 doingVectors false fp16k integer isStrkPth ms real register strokePath }
FillUserPath		graphics/userpath.c	/^private procedure FillUserPath(evenOdd) boolean ev/ ;" function 19 { PSUEOFill PSUFill }	{ BreakUpPath FillUserPathEnumerate GetUsrPthAry NULL PMtx QEnumOk QFillUserPathEnumerate UCacheMark UXAFillPath UserPathContext UsrPthBBox UsrPthQRdcOk true }
FillUserPathEnumerate		graphics/userpath.c	/^public procedure FillUserPathEnumerate(/ ;" function 15 { FillUserPath GetAperatureDP InUFill UCGetDevPrim UXAFillPath XADoRdcPth }	{ DoEUserPath DoUserPath NoOp PreEnumerateSetup flatEps gs true }
FilterDataRec		language/streampriv.h	/^typedef struct _t_FilterDataRec {/ ;" typedef 4 { }	{ }
FilterDirProc		bintree/drivers.c	/^static int FilterDirProc(struct direct *d)/ ;" function 13 { LoadAllDrivers }	{ d displayPath strcpy }
FilterRegion		unix_product/unix.c	/^private character *FilterRegion (input, command)/ ;" function 49 { Bang }	{ PSError character ioerror }
FinGlbClrLocs		fonts/fontbuild.c	/^private procedure FinGlbClrLocs(g, d) register PGl/ ;" function 12 { CalcAnchGlbClrLocs CalcGlbClrLocs }	{ CalcHW2 FTruncF Fixed FixedHalf FixedOne d erosion isoutline }
FinStroke		graphics/stroke.c	/^public procedure FinStroke() {/ ;" function 5 { DoRdcStroke PSUStroke StrkInternal UXAStroke }	{ circ_llx circ_lly circ_urx circ_ury circleMasks ms scip }
FinalizeNames		language/name.c	/^private procedure FinalizeNames(clientData, info)/ ;" function 34 { NameInit }	{ GC_GetCollectionType GC_WasNECollected NIL PNameArrayBody PNameEntry PurgeCI integer register rootShared }
FinalizeNode		vm/saverestore.h	/^typedef struct _t_FinalizeNode {/ ;" typedef 4 { ProcessFinalizeNodes _RecordFinalizableObject }	{ }
FinalizeProc		include/vm.h	/^typedef procedure (*FinalizeProc)(\/* Object obj, F/ ;" typedef 1 { }	{ }
FinalizeReasonSet		include/vm.h	/^typedef Card16 FinalizeReasonSet;  \/* assert: fewe/ ;" typedef 1 { }	{ }
FindCurrentViewInCache		graphics/viewclip.c	/^private PViewClipCacheEntry FindCurrentViewInCache/ ;" function 85 { DevClipIsRect GetDevClipBBox GetDevClipDevBBox GetDevClipPrim }	{ AddRunIndexes Assert BBCompare BBoxCompareResult ClipDevPrim DevBounds DevPrim DevPrimIsRect FixCd FullBounds GetBBoxFromDevBounds InitDevPrim NULL NewDevPrim PPath PViewClipCacheEntry PathIsRect TermViewClipIntersection curVC false fpZero gs os_newelement register true vcCacheStorage viewclipCache viewclipcacheMax viewclipcachelength }
FindFreeBytes		vm/vm_segment.c	/^private PCard8 FindFreeBytes (nBytes, Alignment, A/ ;" function 68 { AllocAligned AllocChars PreallocChars }	{ Card32 DebugAssert ExpandVMSection ExtendRecycler Level NIL PCard8 PVMSegment current free integer level vPREFERREDALIGN vmCurrent }
FindGlbClr		fonts/fontbuild.c	/^private PGlbClr FindGlbClr(pf, pn, yflg) Fixed *pf/ ;" function 14 { DoLock }	{ Fixed NULL PGlbClr glbClrLst register }
FindImageMessage		product/windowimage.c	/^static ImageMessage *FindImageMessage(int tag, int/ ;" function 24 { MarkNextImage ReceiveNextImage }	{ ImageMessage ImageMessageCell NULL currentPSContext imageMessageList }
FindInCache		fonts/fontshow.c	/^public PCIItem FindInCache(c)/ ;" function 25 { FillCircle }	{ CI CINULL CIOffset DebugAssert DecrSetMIDAge MID NIL PCIItem PNameObj ValidMID Vmem crMID gs nameObj register }
FindMaxFID		fonts/fontcache.c	/^private boolean FindMaxFID(data, kvp) char *data; / ;" function 13 { InitFID }	{ DictGetP FID MAX Object TypeOfFID data dictObj false fontsNames ndcFID }
FindOpDef		vm/rgstcmds.c	/^private OpDefEntry *FindOpDef(cmdIndex, new)/ ;" function 16 { OpDefProc PSOpDef }	{ CantHappen LimitCheck OpDefEntry opDefTable register }
FindOpSet		vm/rgstcmds.c	/^private integer FindOpSet(opSetID, create, pCmdInd/ ;" function 31 { PSRgstOps RgstDynamicCmd RgstOpSet }	{ Card16 DebugAssert Int16 LimitCheck NameArrayObj PInt16 VMGetElem escObj objNameArray register rootShared }
FindPathInCache		graphics/ucache.c	/^private PUCache FindPathInCache(context, tableInde/ ;" function 74 { UCGetDevPrim }	{ EqNumStrmCache NULL Object PCard32 PObject PUCache UCache VMCarCdr boolean false integer pthhits pthprobes register string true }
FindPieceBounds		product/windowops.c	/^public Bounds *FindPieceBounds(PWindowDevice win, / ;" function 10 { RecalcMouseRect }	{ LFindPieceBounds Point wsBounds }
FindRdcInCache		graphics/ucache.c	/^private PRdc FindRdcInCache(pc, context, smtx)/ ;" function 95 { UCGetDevPrim }	{ Mtx NULL Object PGState PMtx PRdc PRealValue PStrk VMCarCdr boolean d false flatEps gs integer lruNewest lruOldest p r rdchits rdcprobes real register roundCap roundJoin s true }
FindSibData		fonts/fontcache.c	/^typedef struct {/ ;" typedef 8 { FindSibling FndFntSibling }	{ }
FindSibling		fonts/fontcache.c	/^private boolean FindSibling(data, FDkvp) char *dat/ ;" function 34 { FndFntSibling }	{ DictGetP DictTestP FindSibData Known Object PKeyVal TypeOfFID data dictObj false fontsNames integer ndcFID register true }
FindVMSegment		vm/vm_segment.c	/^public PVMSegment FindVMSegment (vmStructure, o)/ ;" function 28 { AddressValidAtLevel ClaimPreallocChars InVMSection ResetAllocCounter ResetVMSection }	{ NIL PVMSegment }
FinishLock		fonts/fontbuild.c	/^private procedure FinishLock() {/ ;" function 8 { CCRunStd FontBldDataHandler }	{ FREE NIL false pLokData }
FinishPath		graphics/cscan.c	/^private procedure FinishPath(haveCrosses)/ ;" function 84 { CSPathPoints }	{ CrossPtr DEBUGERROR FixCrossFlags InitNewPath IntX LeftDir NULL NewLinkCross PathCross RightDir VertDir currentCross edgemaxx edgemaxy edgeminx edgeminy maxXInflections minXInflections oldStartLink pathMaxX pathMinX saveHorizDir startLink xPathMax xPathMin yPathMax yPathMin }
FinishSplice		graphics/cscan.c	/^private procedure FinishSplice()/ ;" function 52 { SplicePixel }	{ CrossPtr DEBUGERROR NewLinkCross spliceInsert startSplice true }
Fix		include/devicetypes.h	/^#define	Fix(a)		(((int)(a))<<16)/ ;" macro 1 { ClippedMasksMark CompositePriv ConstantTrapsMark GrayTrapsMark Im110 ImIdent ImIdent32 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch MaskGoAway }	{ }
FixBands		fonts/glbclr.c	/^private void FixBands(ss, ns, cs, ef)/ ;" function 60 { GlobalColoring }	{ ExtendToAnchr FixOnePath Fixed NULL Overlap PGlbClr PGlbCntr boolean register ss true }
FixCd		language/type.c	/^public procedure FixCd(c, d)  Cd c;  PDevCd d;/ ;" function 2 { AdjstHW CheckFixCd CheckForRectangle DoPath DoRdcPth FIXCD F_StrkLnTo F_StrkStrt F_Vector FillBevel FillQuad FindCurrentViewInCache OffsetFill ReduceQuadPath UsrPthCurveTo UsrPthDoClsPth UsrPthDoCurveTo UsrPthDoFinish UsrPthDoLineTo UsrPthLineTo }	{ d pflttofix }
FixCrossFlags		graphics/cscan.c	/^private procedure FixCrossFlags(start, end)/ ;" function 32 { FinishPath SplicePixel }	{ CrossPtr PathCross REG false start true }
FixInt		include/fp.h	/^#define FixInt(x) (((Fixed)(x)) << 16)/ ;" macro 1 { AFixedCar AObjF AddTrap AdjustBlues BresenhamMT BuildChar CCRunStd DoImageMark DoRdcStroke EnterGlbClr ErodeSW ExtendToAnchr FFltnCurve FIXINT FMiniFltn FixOnePath FixedValue FixedXatY GetBlueArrays GetDevClipDevBBox GetMaxBevelChord GetStdW GetStemWidth GlbClrLine Len1000 MarkStrokeMasks MidPixel PathEndChar PixelOrigin PkAObjF QBresenhamMT QDoUserPath QEnumOk RdcStrkDumpMasks Reduce ResetCScan SetRdcScal SetupStdWs ShowMask TransDevPrim UseStdWidth XATrapTrapInt YDelta wbnd }	{ Fixed }
FixMtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 3 { }	{ }
FixOne		graphics/qreducer.c	/^#define FixOne (1<<16)/ ;" macro 1 { BuildEdge DoStroke FF_StrkLnTo F_MiterPoint F_NormPair }	{ }
FixOnePath		fonts/glbclr.c	/^private void FixOnePath(maxStem, cs, ef)/ ;" function 104 { FixBands }	{ Assert ClumpCntrs FTrunc FTruncF FixInt Fixed Fixed0p6 FixedHalf FixedOne ISO MIN NULL PGlbClr SortGroupsByFrac false fixdiv fixmul top true }
FixPixelProblem		graphics/cscan.c	/^private procedure FixPixelProblem(ll, lx, rl, rx)/ ;" function 44 { FixRuns }	{ DetermineTieBreaker DoFixupAction FixupActionPtr GetRuleDesc NULLMERIT Pixel REG RuleDesc printf true }
FixRuns		graphics/cscan.c	/^private procedure FixRuns(run1, run2)/ ;" function 28 { ConnectWhitePairs EditWhiteHoriz ExpandWhiteDropOuts }	{ CrossPtr ExchangeCrossPtr FixPixelProblem }
Fixed		include/publictypes.h	/^typedef long int Fixed;	\/*  16 bits of integer, 16/ ;" typedef 1 { AdjustBlues BlueLock BoostBotLocs BuildChar BuildGlbCntrs CCBuild CCRunStd CalcGlbClrLocs CalcHW2 CheckBlueScale CompSlowShow CompositeShow DoBlend DoLock DoTriXLock DoTriYLock EnterGlbClr EnterGlbCntr EnterTriXLock EnterTriYLock ErodeSW FTruncF FamilyBlueLocs FastShow FasterShow FinGlbClrLocs FindGlbClr FixedfromString FlexProc FudgeBlueBands GetErosion GetFontBBox GetStemWidth GlbClrLine GlbFixLocs PSSetXLock PSSetYLock PathEndChar PreXLock PreYLock PutStdW RBLock RYLock RoundSW SetupBlueLocs SetupStdWs TriLock UseStdWidth adz_fixed_tfm adz_frac_tfm bcz_fixed_tfm bcz_frac_tfm d_adz_fixed_tfm d_adz_frac_tfm d_bcz_fixed_tfm d_bcz_frac_tfm fixupmap gen_fixed_tfm gen_frac_tfm initslope (etc) }	{ }
Fixed0p6		fonts/glbclr.c	/^#define Fixed0p6 39322	\/* 0.6 in fixed point *\// ;" macro 1 { FixOnePath }	{ }
FixedBezDiv		graphics/fflattenpath.c	/^#define FixedBezDiv(a0, a1, a2, a3, b0, b1, b2, b3/ ;" macro 1 { FFltnCurve }	{ FixedMidPoint a0 }
FixedHalf		fonts/flex.c	/^#define FixedHalf 0x8000L/ ;" macro 1 { Adjust BlueLock BoostBotLocs CCRunStd CalcHW2 CounterGt FinGlbClrLocs FixOnePath FlexProc GetErosion MAXBLUESHIFT NormalizeSW PathEndChar PutStdW SetupStdWs UseStdWidth }	{ }
FixedMidPoint		graphics/fflattenpath.c	/^#define FixedMidPoint(m,a,b) \\/ ;" macro 1 { FixedBezDiv }	{ }
FixedMoveTo		fonts/fontshow.h	/^#define FixedMoveTo(c) {Cd fmtcd; UNFIXCD(c,&fmtcd/ ;" macro 1 { CompositeShow FastShow FasterShow }	{ Cd MoveTo UNFIXCD gs }
FixedNegInf		include/fp.h	/^#define FixedNegInf MINinteger/ ;" macro 1 { }	{ MINinteger }
FixedOne		fonts/flex.c	/^#define FixedOne 0x10000/ ;" macro 1 { AdjustBlues BlueLock BoostBotLocs BuildChar CCRunStd CalcHW2 CheckBlueScale FinGlbClrLocs FixOnePath FlexProc GetErosion NormalizeSW PathEndChar PutStdW ResetCScan RoundSW SetXLock SetYLock SetupStdWs ceil }	{ }
FixedOneFive		graphics/pathpriv.c	/^#define FixedOneFive 0x18000/ ;" macro 1 { OFIntersect }	{ }
FixedPosInf		include/fp.h	/^#define FixedPosInf MAXinteger/ ;" macro 1 { }	{ MAXinteger }
FixedTwo		fonts/flex.c	/^#define FixedTwo 0x20000/ ;" macro 1 { }	{ }
FixedValue		fonts/fontbuild.c	/^private Fixed FixedValue(pobj) PObject pobj; {/ ;" function 9 { CCRunStd GetFromPrivDict GetMetrics }	{ FixInt TypeCheck intObj pflttofix realObj }
FixedXatY		graphics/reducer.c	/^private Fixed FixedXatY(line, y, chooseLeft)/ ;" function 17 { Interchange RdcEntry RdcExit ShipLeftAnchoredTrap ShipRightAnchoredTrap }	{ FixInt Int32 PLine PLn PPoint PPt RatToFixed fixdiv fixmul register }
FixedfromString		fonts/compshow.c	/^private Fixed FixedfromString(PA,E)/ ;" function 11 { }	{ Fixed VMGetChar cardinal register }
FixupAction		graphics/cscan.c	/^typedef struct {/ ;" typedef 5 { }	{ }
FixupActionPtr		graphics/cscan.c	/^typedef struct {/ ;" typedef 5 { FixPixelProblem PatternToActions }	{ }
FixupExtendLeft		graphics/cscan.c	/^private boolean FixupExtendLeft(x, y)/ ;" function 24 { DoFixupAction }	{ CrossPtr NULL REG YCROSS false left right true }
FixupExtendRight		graphics/cscan.c	/^private boolean FixupExtendRight(x, y)/ ;" function 24 { DoFixupAction }	{ CrossPtr NULL REG YCROSS false left right true }
FixupPattern		graphics/cscan.c	/^typedef struct {/ ;" typedef 4 { PatternArrayLen }	{ }
FixupPatternKey		graphics/cscan.c	/^typedef Card16 FixupPatternKey;/ ;" typedef 1 { GetRuleDesc }	{ }
FixupPatternPtr		graphics/cscan.c	/^typedef struct {/ ;" typedef 4 { }	{ }
FlPthCls		graphics/pathops.c	/^private procedure FlPthCls()  {ClosePath(&flatPth)/ ;" function 1 { FltnPth }	{ ClosePath flatPth }
FlPthLnTo		graphics/pathops.c	/^private procedure FlPthLnTo(c) Cd c;  {LineTo(c, &/ ;" function 1 { FltnPth }	{ LineTo flatPth }
FlPthMvTo		graphics/pathops.c	/^private procedure FlPthMvTo(c) Cd c;  {MoveTo(c, &/ ;" function 1 { FltnPth }	{ MoveTo flatPth }
FlexCurveTo		fonts/flex.c	/^private procedure FlexCurveTo(p0, p1, p2, p)/ ;" function 9 { FlexProc FlexProc2 }	{ FntTfmP curveto p }
FlexProc		fonts/flex.c	/^public procedure FlexProc(flexCds, dmin, p)/ ;" function 152 { BuildChar CCRunStd }	{ FCd FRoundF Fixed FixedHalf FixedOne FlexCurveTo FntDTfmP FntITfmP FntTfmP boolean ceil erosion fixdiv floor gsmatrix integer isoutline lineto os_labs p xshrink yshrink }
FlexProc2		fonts/flex.c	/^public procedure FlexProc2(flexCds, dmin, p)/ ;" function 7 { BuildChar CCRunStd }	{ FlexCurveTo p }
FloatRectFill		graphics/rect.c	/^private procedure FloatRectFill(Object obj, int fl/ ;" function 59 { PSRectFill }	{ BBoxCompareResult BoundsCompare DevPrim DevTrap GetDevClipPrim InvlAccess StdInitMark StdTermMark TypeCheck fp16k gs ms rAccess true }
FloatRep		include/fp.h	/^typedef union {	\/* Floating point representations / ;" typedef 12 { CopySwap4 IEEEHighToNative IEEELowToNative IsValidReal NativeToIEEEHigh NativeToIEEELow }	{ }
FltnCurve		graphics/pathops.c	/^public procedure FltnCurve(c0, c1, c2, c3, pfr)/ ;" function 66 { DoPath FltnCurve UsrPthCurveTo UsrPthDoCurveTo }	{ BezierDivide Cd FltnCurve RealEq0 d eqa eqb eqc eqd fpOne llx lly os_fabs urx ury }
FltnPth		graphics/pathops.c	/^public Path FltnPth(p, reps) PPath p; real reps;/ ;" function 14 { PSFltnPth }	{ DURING DevCd DoPath END_HANDLER FlPthCls FlPthLnTo FlPthMvTo FrPth HANDLER InitPath NoOp RERAISE false flatPth p secret }
FltnRec		graphics/graphicspriv.h	/^typedef struct \/* argument record for flattening */ ;" typedef 10 { DoEUserPath DoPath DoUserPath OffsetFill QDoEUsrPth QDoUserPath QUsrPthCurveTo UsrPthCurveTo }	{ }
FlushCircle		graphics/ucache.c	/^public boolean FlushCircle(mask) PMask mask; {/ ;" function 14 { ReleaseCI }	{ CIRCMASKMAX CircMask CircMaskTable FlushStrokeCircle false integer register true }
FlushClipProc		device/devprim.c	/^private PVoidProc FlushClipProc;/ ;" global 1 { DevFlushClip SetFlushClipProc }	{ }
FlushHalftone		devpattern/patternimpl.c	/^public procedure FlushHalftone(halftone) DevHalfto/ ;" function 10 { DevFreeHalftone DevRemHalftoneRef }	{ FlushPatCache FreeHalftone NIL }
FlushMID		fonts/cicache.c	/^public boolean FlushMID(mid) MID mid; {/ ;" function 25 { PSFlushCache }	{ Assert CI CINULL CIOffset CISortedList CheckCI DevFlushMaskArgs GetFlushArgs MIDCount PCIItem data false integer register true }
FlushPatCache		devpattern/patternimpl.c	/^private procedure FlushPatCache(screen) DevScreen / ;" function 13 { FlushHalftone }	{ FreeInfoVector FreePattern MAXPAT NIL PCachedHalftone PPatCacheInfo PScreenPrivate dgNColors integer patterns }
FlushRedrawRects		product/windowops.c	/^public procedure FlushRedrawRects()/ ;" function 23 { LPlaceAt PSGetEvents }	{ NULL PWindowDevice PostChanged PostRedraw anyRedraws false windowBase }
FlushStrokeCircle		graphics/stroke.c	/^public boolean FlushStrokeCircle(mask) PMask mask;/ ;" function 10 { FlushCircle }	{ CircleCache false true }
FmDeviceInfo		device/framedev.c	/^private procedure FmDeviceInfo(device, args)/ ;" function 30 { IniFmDevImpl }	{ AddIntEntry DevColorData PFmStuff PatternInfo integer }
FmGetReadWriteScanline		device/framedev.c	/^private PSCANTYPE FmGetReadWriteScanline(data, y, / ;" function 10 { IniFmDevImpl }	{ PCard8 PSCANTYPE devXAOffset framebase framebytewidth framelog2BD integer }
FmGetWriteScanline		device/framedev.c	/^private PSCANTYPE FmGetWriteScanline(data, y, xl, / ;" function 10 { IniFmDevImpl }	{ PCard8 PSCANTYPE devXAOffset framebase framebytewidth framelog2BD integer }
FmGoAway		device/framedev.c	/^private procedure FmGoAway (device) PDevice device/ ;" function 7 { IniFmDevImpl }	{ DestroyPattern PFmStuff }
FmMakeMaskDevice		device/framemaskdev.c	/^public PDevice FmMakeMaskDevice (device, args) / ;" function 64 { IniGenDevImpl }	{ Assert BytesForMask MCFreeBytes MCFreeMask MCGetMask MCGetTempBytes MaskRec MaskStuff NIL PFmStuff PMask PMaskStuff PSCANTYPE SCANTYPE SCANUNIT d data gMaskPattern integer maskProcs register true }
FmMark		device/framedev.c	/^private procedure FmMark(device, graphic, devClip,/ ;" function 96 { IniFmDevImpl }	{ DebugAssert DevBounds DevImage DevTrap FTrunc LARGE Mark NIL NULL WIDEST_DEVICE WannaYield boolean false integer }
FmPreBuiltChar		device/framedev.c	/^private boolean FmPreBuiltChar(device, args)/ ;" function 4 { IniFmDevImpl }	{ GetPreBuiltChar }
FmSetupImageArgs		device/framedev.c	/^private procedure FmSetupImageArgs(device, args)/ ;" function 18 { IniFmDevImpl }	{ NIL PFmStuff PatternInfo data fmImageProcs }
FmSetupMark		device/framedev.c	/^private integer FmSetupMark (device, clip, args)/ ;" function 16 { IniFmDevImpl }	{ DevPoint NIL PFmStuff SetupPattern defaultHalftone fmMarkProcs }
FmShowPage		device/framedev.c	/^private boolean FmShowPage (device, clear, nCopies/ ;" function 21 { IniFmDevImpl }	{ PFmStuff PPixelBuffer PSCANTYPE clear false framebase }
FmSleep		device/framedev.c	/^private procedure FmSleep (device) PDevice device;/ ;" function 5 { IniFmDevImpl }	{ PFmStuff }
FmStuff		device/framedev.h	/^typedef struct _t_FmStuff{ \/* concrete "Device" ty/ ;" typedef 14 { FrameDevice mpdGoAway }	{ }
FmWakeup		device/framedev.c	/^private procedure FmWakeup (device) PDevice device/ ;" function 11 { IniFmDevImpl }	{ CurrentDevice PFmStuff framebase framebytewidth framelog2BD }
FmtAscii		fonts/fontrun.h	/^#define FmtAscii	0/ ;" macro 1 { DetermineFormat FCOpenStream KACharDef KAEndCSDict OCFetchFromDisk }	{ }
FmtIBM		fonts/fontrun.h	/^#define FmtIBM 		2/ ;" macro 1 { CreateFilterStm DetermineFormat }	{ }
FmtMac		fonts/fontrun.h	/^#define FmtMac		1/ ;" macro 1 { CreateFilterStm DetermineFormat }	{ }
FndFntSibling		fonts/fontcache.c	/^private procedure FndFntSibling(newfnt, retobj, fi/ ;" function 85 { PSDefineFont }	{ DictGetP DictObj DictTestP EnumerateDict FD FREE FindSibData FindSibling ForceGetP ForceKnown GenFID GetPrivFontDirectory IntObj NEW NOLL Object PDictBody PKeyVal adobeFID false fontsNames intObj integer level_2 nameObj ndcFID nullObj register rootShared true userFID vLANGUAGE_LEVEL }
FndStoDev		stodev/stodevimpl.c	/^public PStoDev FndStoDev(name, suffix)/ ;" function 33 { FndStoFile PSDevDisMount PSDevFormat PSDevMount PSDevStatus PSFileNameForAll PSRenameFile StoDevCreateStm }	{ LDELIM NIL PStoDev RDELIM register stoDevList }
FndStoFile		stodev/stodevimpl.c	/^public PStoDev FndStoFile(name, suffix)/ ;" function 23 { PSDeleteFile PSRenameFile StoDevStrStatus }	{ FndStoDev NIL PStoDev boolean register stoDevList }
FntDTfmP		fonts/flex.c	/^#define FntDTfmP(c1,c2) (*gsmatrix->dtfm)(c1,c2)/ ;" macro 1 { BlueLock BuildChar CCBuild FlexProc GetDSW PreXLock PreYLock PutStdW }	{ gsmatrix }
FntIDTfmP		fonts/flex.c	/^#define FntIDTfmP(c1,c2) (*gsmatrix->idtfm)(c1,c2)/ ;" macro 1 { BuildChar CCRunStd CalcHW2 }	{ gsmatrix }
FntITfmP		fonts/flex.c	/^#define FntITfmP(c1,c2) (*gsmatrix->itfm)(c1,c2)/ ;" macro 1 { AdjustBlues BlueLock BuildChar CCRunStd DetermineTieBreaker FlexProc GetITfmX GetITfmY PreXLock PreYLock }	{ gsmatrix }
FntMtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 16 { }	{ }
FntTfmP		fonts/flex.c	/^#define FntTfmP(c1,c2) (*gsmatrix->tfm)(c1,c2)/ ;" macro 1 { BlueLock FlexCurveTo FlexProc GetTfmX GetTfmY PreXLock PreYLock SetupBlueLocs TfmLockPt1 TfmLockPt2 TfmLockPt3 tfmloc }	{ gsmatrix }
FontBldDataHandler		fonts/fontbuild.c	/^public procedure FontBldDataHandler (code)/ ;" function 12 { FontDataHandler }	{ FinishLock }
FontBuildData		fonts/fontdata.h	/^typedef struct {/ ;" typedef 35 { }	{ }
FontBuildInit		fonts/fontbuild.c	/^public procedure FontBuildInit(reason)/ ;" function 43 { FontsInit }	{ AllocPArray Begin DEVELOP End Globals GlobalsRec KEYHASH LIntObj LokData NEW NIL NumCArg Object PLokData PSIntDict RgstExplicit RgstMCmds RgstMNames VMGetElem VMPutElem alwaysErode cmdFontBuild cmdNonExport cslimit emptyarray endswitch false globals intObj integer maxOffsetVal nameFontBuild oflimit pLokData rpFontKey rpInternalKey secret stdLokData vSTAGE }
FontCacheInit		fonts/fontcache.c	/^public procedure FontCacheInit(reason)/ ;" function 52 { FontsInit }	{ Begin DEVELOP End EnumerateDict GC_RegisterFinalizeProc InitFID InitSFCache NIL NUM_PACKAGE_NAMES PACKAGE_INDEX PSFCCheck PSFCDebug PSFlushCache PSUnDefineFont PurgeOnGC PurgeOnRstr RefAny RgstExplicit RgstInitialFont RgstPackageNames RgstRstrProc endswitch false fcCheck fcdebug fchange fontsNames integer level_2 rootShared true vLANGUAGE_LEVEL vSTAGE vmShared }
FontCtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 6 { FontsInit }	{ }
FontDataHandler		fonts/fontcache.c	/^private procedure FontDataHandler (code)/ ;" function 9 { FontsInit }	{ FontBldDataHandler FontShwDataHandler PurgeOnRstr procedure }
FontDevAttr		stodev/stodevfont.c	/^private procedure FontDevAttr(dev, attr)/ ;" function 5 { }	{ }
FontDict		fonts/fontrun.h	/^typedef enum { fontDict, someOtherDict, charStrDic/ ;" typedef 1 { }	{ }
FontDiskInit		fonts/fontdisk.c	/^public procedure FontDiskInit(reason)/ ;" function 22 { FontsInit }	{ Assert CI CN DEVELOP MM MS MT MTItem NULL PSInitFontCache RgstExplicit StartCache cchInited defaultCacheThreshold defaultCompThreshold dfCacheThreshold dfCompThreshold endswitch false vSTAGE }
FontEncode		fonts/fontbuild.c	/^private integer FontEncode/ ;" function 15 { CCBuild }	{ AGetP AryObj DictGetP NameObj VMCarCdr cardinal encname integer register stdencvec }
FontEnumOneDir		stodev/stodevfont.c	/^private int FontEnumOneDir(thisDir,pattern,fullNam/ ;" function 64 { FontEnumerate }	{ DURING END_HANDLER HANDLER NIL RERAISE SimpleMatch arg myGetpwdir strcpy }
FontEnumerate		stodev/stodevfont.c	/^private int FontEnumerate(dev, pattern, action, ar/ ;" function 43 { }	{ FontEnumOneDir NIL arg fontDirPath strcpy strlen }
FontFCMask		fonts/compshow.c	/^#define FontFCMask 255/ ;" macro 1 { }	{ }
FontFIMask		fonts/compshow.c	/^#define FontFIMask 65281/ ;" macro 1 { }	{ }
FontFind		stodev/stodevfont.c	/^private boolean FontFind(dev, name)/ ;" function 7 { }	{ FontPathSearch }
FontInfo		fonts/fontrun.h	/^typedef struct _t_FontInfo {/ ;" typedef 7 { CharOffsetsPtr KAEndCSDict }	{ }
FontInfoPtr		fonts/fontrun.h	/^#define FontInfoPtr(p) ((PFontInfo) (p))/ ;" macro 1 { FCOpenStream FetchCharOutline KAEndCSDict OCFetchFromDisk }	{ PFontInfo p }
FontNop		stodev/stodevfont.c	/^private procedure FontNop (dev)/ ;" function 4 { }	{ }
FontObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 46 { MakeCompFont MakeFontSupp PSDefineFont }	{ }
FontPathBBox		graphics/graphics.c	/^public procedure FontPathBBox(ll, ur) PFCd ll, ur;/ ;" function 11 { MakeCacheDev MakeCacheDev2 }	{ FCeilF FTruncF MAXinteger edgemaxx edgemaxy edgeminx edgeminy }
FontPathSearch		stodev/stodevfont.c	/^int FontPathSearch(char *fontName, char *fileName,/ ;" function 22 { FontFind FontReadAttr FontStmCreate PrebuiltPathSearch getPrebuiltFont }	{ FilePathSearch fontDirPath strlen }
FontProcs		stodev/stodevfont.c	/^private readonly StoDevProcs FontProcs =/ ;" global 13 { RgstFontDevice }	{ }
FontReadAttr		stodev/stodevfont.c	/^private procedure FontReadAttr(dev, name, attr)/ ;" function 14 { }	{ BUFSIZ FontPathSearch MapErrno NIL RAISE ecUndefFileName integer }
FontRunInit		fonts/fontrun.c	/^public procedure FontRunInit(reason)/ ;" function 24 { }	{ CacheCreate DEVELOP FILE_CACHE_LIMIT FILE_HASH_BUCKETS FetchCharOutline OUTLINE_CACHE_LIMIT OUTLINE_HASH_BUCKETS PSCacheFlush PSCacheInit PSCacheStatistics RgstExplicit fetchCharOutline fileCache fileCacheProcs outlineCache outlineCacheProcs vSTAGE }
FontS		fonts/compshow.c	/^#define FontS 16777216/ ;" macro 1 { FontST }	{ }
FontST		fonts/compshow.c	/^#define FontST (FontS + FontT)/ ;" macro 1 { }	{ FontS FontT }
FontSTMask		fonts/compshow.c	/^#define FontSTMask 8388607/ ;" macro 1 { }	{ }
FontShowData		fonts/fontdata.h	/^typedef struct {/ ;" typedef 6 { }	{ }
FontShowInit		fonts/fontshow.c	/^public procedure FontShowInit(reason)  InitReason / ;" function 29 { FontsInit }	{ Assert CINULL DEVELOP FSInit MIDNULL NEW NSHOWSTATES PSUsePrebuilts PShowState RgstExplicit ShowState endswitch fpZero integer real ssCount ssFree ssr vSTAGE }
FontShwDataHandler		fonts/fontshow.c	/^public procedure FontShwDataHandler (code)/ ;" function 17 { FontDataHandler }	{ TrimShowStates ctxCacheThreshold ctxCompThreshold defaultCacheThreshold defaultCompThreshold showLevel }
FontStmCreate		stodev/stodevfont.c	/^private Stm FontStmCreate(dev, name, acc)/ ;" function 14 { }	{ FontPathSearch MapErrno NIL RAISE Stm ecInvalidFileAccess os_fopen }
FontStoDevInit		stodev/stodevfont.c	/^public procedure FontStoDevInit(initFontDirPath)/ ;" function 6 { Mnextmain }	{ RgstFontDevice fontDirPath }
FontT		fonts/compshow.c	/^#define FontT 8388608/ ;" macro 1 { FontST }	{ }
FontUndef		stodev/stodevfont.c	/^private procedure FontUndef (dev)/ ;" function 5 { }	{ NIL RAISE ecUndef }
FontrunState		fonts/fontrun.h	/^typedef struct _t_FontrunState {/ ;" typedef 28 { NewState RestoreState }	{ }
FontsInit		fonts/fontcache.c	/^public procedure FontsInit(reason)/ ;" function 19 { }	{ FontBuildInit FontCacheInit FontCtx FontDataHandler FontDiskInit FontShowInit PCard8 RegisterData STATICEVENTFLAG fontCtx integer }
ForAllNames		include/vm.h	/^#define ForAllNames(pno, pne, i) \\/ ;" macro 1 { InitFontCache ResetNameCache pCIs }	{ NIL rootShared }
ForAllRProcs		vm/saverestore.c	/^private ForAllRProcs(l)/ ;" function 7 { RstrToLevel }	{ RstrProcs integer nRProcs }
ForAllSProcs		vm/saverestore.c	/^private procedure ForAllSProcs(l)/ ;" function 7 { Save }	{ SaveProcs cardinal nSProcs }
ForceAGetP		language/array.c	/^public procedure ForceAGetP(a,i,pob)  AnyAryObj a;/ ;" function 5 { CCRunStd GetStemWidth }	{ AGetP rAccess }
ForceGetP		language/dict.c	/^public procedure ForceGetP(d, key, pval)  DictObj / ;" function 2 { CCRunStd FndFntSibling GetBlueArrays GetErosion GetFromPrivDict GetStdW GetStemWidth }	{ DictTestP PushP Undefined d false stackRstr }
ForceKnown		language/dict.c	/^public boolean ForceKnown(d,name)/ ;" function 5 { CCRunStd FndFntSibling FudgeBlueBands GetBlueArrays GetErosion GetFromPrivDict GetStdW GetStemWidth }	{ d dknown false }
ForcePut		language/dict.c	/^public procedure ForcePut(d,key,value)  DictObj d;/ ;" function 7 { CheckCompositeFont KAEndCSDict MakeCompFont MakeFontSupp PSDefineFont copydict }	{ KeyName KeyVal PutInDict d false }
ForceUnDef		language/dict.c	/^public procedure ForceUnDef(dict, key)/ ;" function 5 { PSMakeVM PSUnDefineFont }	{ UnDef false }
FourPlace		graphics/reducer.c	/^typedef struct/ ;" typedef 6 { Add4 Div3By2 Intersect PopFourPlace RatComp Sub4 psDiv32 psFPMult }	{ }
FrLstPth		graphics/pathbuild.c	/^private procedure FrLstPth(lp) ListPath *lp; {/ ;" function 7 { RemPathRef }	{ NULL lpStorage os_freeelement pathFree }
FrPth		graphics/pathbuild.c	/^public procedure FrPth(path) / ;" function 6 { CCRunStd ConvertToListPath DoStrkPth EnterCircle FillBevel FillCircle FillQuad FltnPth InitClipPath MinimumClip NewPath PSCharPath PSRectClip PathEndChar StrkPth Stroke }	{ InitPath RemPathRef }
Frac		include/fp.h	/^typedef long int \/* Fixed, *\/ Frac, UFrac;/ ;" typedef 1 { }	{ }
FracHalf		graphics/pathpriv.c	/^#define FracHalf 0x20000000/ ;" macro 1 { OFIntersect }	{ }
FracMilli		graphics/pathpriv.c	/^#define FracMilli 0x100000/ ;" macro 1 { OFIntersect }	{ }
FracMtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 3 { }	{ }
FracOne		graphics/pathpriv.c	/^#define FracOne 0x40000000/ ;" macro 1 { F_Dist IniPathPriv IniStroke OFLineTo }	{ }
FracPart		include/devicetypes.h	/^#define FracPart(a)	((a)&0xFFFFL)/ ;" macro 1 { CanSkipTrap F_NormPair FastFillBevel FastFillQuad }	{ }
FracSqrt2		graphics/pathpriv.c	/^private Fixed FracSqrt2;/ ;" global 1 { F_Dist IniPathPriv IniStroke OFLineTo }	{ }
FracToFixed		graphics/pathpriv.c	/^#define FracToFixed(f) ((f) >> 14)/ ;" macro 1 { OFLineTo }	{ }
FractPart		graphics/graypriv.c	/^private real FractPart(a) real a; {return a - os_f/ ;" function 1 { CalcThresholds }	{ }
FrameDevice		device/framedev.c	/^ public PDevice FrameDevice(/ ;" function 42 { }	{ AdjustDevMatrix FmStuff NIL PDevice PFmStuff PSCANTYPE SetFmDeviceMetrics d fmProcs }
FrameProc		include/devcreate.h	/^typedef PPixelBuffer (*FrameProc)(\/*/ ;" typedef 1 { }	{ }
FreeBytesBehindStack		vm/vm_segment.c	/^private Int32 FreeBytesBehindStack(seg)/ ;" function 23 { VM_Usage }	{ ABM_BytesForBitmap BitSpan BitsPerByte DebugAssert Int32 PCard8 register zeroBits }
FreeCircles		graphics/ucache.c	/^private procedure FreeCircles(strk) PStrk strk; {/ ;" function 17 { FreeRdc }	{ Assert CIRCMASKMAX CircMask CircMaskTable DevFlushMask NIL NULL integer register }
FreeHalftone		devpattern/patternimpl.c	/^private procedure FreeHalftone (h) DevHalftone *h;/ ;" function 9 { AllocHalftone FlushHalftone }	{ FreeScreen NULL halftonePool os_freeelement }
FreeHdr		fonts/cacheimpl.c	/^private procedure FreeHdr(cache, hdr)/ ;" function 7 { CacheAddEntry DisposeEntry }	{ Links }
FreeInfoVector		devpattern/patternimpl.c	/^private procedure FreeInfoVector(p) PCard8 p; {/ ;" function 5 { FlushPatCache }	{ Card8 MAXCOLOR NULL p totalAlloc }
FreeMon		bintree/drivers.c	/^static void FreeMon(NXMonitor **array, int count, / ;" function 12 { DriverInit }	{ NXMonitor free }
FreeOldestPattern		devpattern/patternimpl.c	/^private integer FreeOldestPattern() {/ ;" function 15 { AllocPatternIndex PatAlloc }	{ Assert FreePattern MAXPAT NIL PPatCacheInfo integer patTimeStamp patterns }
FreePath		graphics/ucache.c	/^private procedure FreePath(pc) register PUCache pc/ ;" function 20 { FreeRdc UCGetDevPrim }	{ Assert Card16 FREE NULL PUCache TABLEINDEX UCache bsize os_freeelement register true upcStorage }
FreePattern		devpattern/patternimpl.c	/^private procedure FreePattern(index) integer index/ ;" function 18 { DestroyPat FlushPatCache FreeOldestPattern }	{ NIL PCachedHalftone PCard8 PPatCacheInfo PScreenPrivate PatCacheInfo SCANTYPE data integer patterns start totalAlloc }
FreePatternBase		graphics/gray.c	/^public procedure FreePatternBase(pb) PGrayQ pb; {/ ;" function 4 { CalcThresholds }	{ FREE defaultInUse defaultPatBase false }
FreeRdc		graphics/ucache.c	/^private procedure FreeRdc(prdc, lockpc) register P/ ;" function 35 { EnterMask EnterPathInCache EnterRdcInCache PSFlushUCache }	{ DisposeDevPrim FREE FreeCircles FreePath NULL PRdc PUCache bsize lruNewest lruOldest os_freeelement rdcStorage register rsize strkStorage true }
FreeRegion		graphics/reducer.c	/^private procedure FreeRegion(region)  RgOffset reg/ ;" function 6 { RdcExit Reduce }	{ PRg free rgFree rgsOut }
FreeScreen		devpattern/patternimpl.c	/^private procedure FreeScreen(s) DevScreen *s; {/ ;" function 34 { AllocScreen FreeHalftone }	{ Assert DEFAULTSCREEN DecStmByteCnt DevScreen MAXSCRN NULL NULLSLOT PScreenPrivate curTAUsage largestChIndex largestChSize largestChunk os_freeelement s screenPool screens stmBytesUsed }
FreeSegment		vm/vm_segment.c	/^public procedure FreeSegment (vmSegment)/ ;" function 9 { ContractVMSection CreateVM DestroyVM ExpandVMSection }	{ Assert FREE NIL os_freeelement segmentPool }
FreeSegmentTable		vm/vm_relocate.c	/^public procedure FreeSegmentTable()/ ;" function 6 { StartVM WriteRelocatedVMToFile WriteVMToFile }	{ DebugAssert NIL segmentTable }
FreeSelectFont		fonts/selectfont.c	/^private procedure FreeSelectFont(psf)/ ;" function 12 { InsertSelectFont PurgeSFForKey PurgeSFForMID }	{ CantHappen NIL PSFCEntry register sfCache sfcFreeList }
FreeShowState		fonts/fontshow.c	/^private procedure FreeShowState(ssr)/ ;" function 23 { ENDSHOW PopShowState TrimShowStates }	{ DebugAssert IsCleanShowState NOLL PVMRoot ShowState VMPutElem arrayObj integer rootPrivate rootShared ssCount ssFree ssr tdDummy }
FreeStrStorage		language/scanner.c	/^private procedure FreeStrStorage(pss)/ ;" function 15 { ObjFromStrStorage SafeFilBuf SafeUnGetc }	{ NIL PStrExtension strStorageBufCount }
FreeStrokeCircle		graphics/ucache.c	/^public procedure FreeStrokeCircle(mask, flushed) P/ ;" function 13 { DoStroke }	{ CIRCMASKMAX CircMask CircMaskTable DevFlushMask NIL integer register }
FreqAngleToNumbers		graphics/graypriv.c	/^private FreqAngleToNumbers(xSpotSize, ySpotSize, a/ ;" function 34 { GenerateThresholds GetValidFreqAngleOctet GetValidFreqAnglePair }	{ ExtendedGCD LCM RAD RRoundP integer os_labs real }
FudgeBlueBands		fonts/fontbuild.c	/^private procedure FudgeBlueBands(privdict,bbnds,le/ ;" function 22 { CCRunStd }	{ Fixed ForceKnown RoundSW boolean fdgbndsnm integer register }
FullBounds		device/devbounds.c	/^public procedure FullBounds(self,bounds) DevPrim */ ;" function 6 { DoStrkPth FindCurrentViewInCache GetDevClipDevBBox IntersectDP Mark ReducePathClipInt TransDevPrim }	{ MergeDevBounds NULL }
GAMASK		mp/cursor.c	/^#define GAMASK	0x0F0F		\/* Short, or 16 bit format / ;" macro 1 { ADDC MPDisplayCursor16 MUL }	{ }
GATHERSTATS		vm/gcinternal.h	/^#define	GATHERSTATS	1/ ;" macro 1 { }	{ }
GC		include/package_specs.h	/^#define GC		"gc.h"/ ;" macro 1 { }	{ }
GCD		graphics/gray.c	/^public integer GCD(u, v)  integer u, v;/ ;" function 2 { BuildGrayPattern BuildPattern LCM SetupMonoPattern }	{ integer }
GCDATA		vm/gcinternal.h	/^#define	GCDATA(info)	(CAST(info, GC_PData))/ ;" macro 1 { GCInternal_MarkAllocated GCInternal_TraceROMDict GC_GetCollectionType GC_GetRoot GC_GetSpace GC_HandleIndex GC_Push GC_WasCollected GC_WasNECollected }	{ CAST GC_PData }
GCI_H		vm/gcinternal.h	/^#define	GCI_H/ ;" macro 1 { }	{ }
GCInternal_AllocStack		vm/gcmisc.c	/^GC_Stack *GCInternal_AllocStack(initSize)/ ;" function 26 { TracePrivateVM TraceSharedVM }	{ CAST DURING END_HANDLER FREE GC_PStack GC_Stack HANDLER NEW NIL PObject VMERROR }
GCInternal_FreeStack		vm/gcmisc.c	/^GC_Stack *GCInternal_FreeStack(stack)/ ;" function 8 { TracePrivateVM TraceSharedVM }	{ FREE NIL }
GCInternal_GetSegHnd		vm/gcinternal.h	/^#define	GCInternal_GetSegHnd(ref, space)		\\/ ;" macro 1 { GCInternal_MarkAllocated GCInternal_TraceROMDict GC_HandleIndex GC_WasCollected GC_WasNECollected PSAllocVM TracePrivateForShared TracePrivateVM TraceSharedVM }	{ GCInternal_LookupSegment InSegment RefAny cacheHits lookups segmentCache }
GCInternal_GrowStack		vm/gcmisc.c	/^procedure GCInternal_GrowStack(stack)/ ;" function 25 { GCInternal_PushNoTest GC_Push }	{ CAST Card32 DURING END_HANDLER FREE HANDLER NEW PObject StackGrowInc VMERROR }
GCInternal_Init		vm/gcmisc.c	/^procedure GCInternal_Init(reason)/ ;" function 31 { VMInit }	{ CantHappen DEVELOP InitRefArrays NIL PSGCStats PSSetGCLog RgstExplicit autoPrivate autoShared cacheHits false gcFd gcFinalizeProcs getRootsProcs lookups nilSegment pushGStateItems pushPkdAryComposites sharedRootsProcs vSTAGE }
GCInternal_LookupSegment		vm/gcmisc.c	/^public PVMSegment GCInternal_LookupSegment(ref, sp/ ;" function 24 { GCInternal_GetSegHnd }	{ InSegment NIL PVMSegment current register segmentCache }
GCInternal_MarkAllocated		vm/gcmisc.c	/^procedure GCInternal_MarkAllocated(info, addr, siz/ ;" function 12 { GC_MarkAllocated }	{ ABM_SetAllocated CantHappen GCDATA GCInternal_GetSegHnd NIL PVMSegment }
GCInternal_Pop		vm/gcmisc.c	/^PObject GCInternal_Pop(stack)/ ;" function 21 { GC_MoveRecycleRange TracePrivateForShared TracePrivateVM TraceSharedVM }	{ MINALIGN Object PObject integer popTemporary register }
GCInternal_PushNoTest		vm/gcmisc.c	/^procedure GCInternal_PushNoTest(stack, value)/ ;" function 12 { CreateStack GCInternal_TraceROMDict GC_MoveRecycleRange TracePrivateForShared TracePrivateVM TraceSharedVM }	{ GCInternal_GrowStack }
GCInternal_ResetFreePointer		vm/abmimpl.c	/^procedure GCInternal_ResetFreePointer(vm)/ ;" function 42 { GC_CollectPrivate GC_CollectShared TraceSharedVM }	{ InitRecycler Level NIL PCard8 PVMSegment ResetSegFreePtr ResetVMSection boolean current false free level register true }
GCInternal_TraceROMDict		vm/gcsharedimpl.c	/^public procedure GCInternal_TraceROMDict(info, obj/ ;" function 28 { PushSharedVMRoots }	{ Assert ContainsRefs GCDATA GCInternal_GetSegHnd GCInternal_PushNoTest GC_Push IsROMSegment NIL PDictBody PKeyVal PVMSegment TrickyDict dictObj register vmShared }
GCInternal_VMChange		vm/gcmisc.c	/^procedure GCInternal_VMChange(space, changeType)/ ;" function 40 { CreateVM DestroyVM }	{ CAST CantHappen DURING END_HANDLER FREE GC_Data GC_PData HANDLER NEW OEM_DefaultThreshold SIZE_GC_DEF_THRESHOLD VMERROR false ps_getsize }
GCList		fonts/fontbuild.c	/^typedef struct _gclist {/ ;" typedef 4 { }	{ }
GC_CollectPrivate		vm/gcimpl.c	/^procedure GC_CollectPrivate(space)/ ;" function 42 { PSCollect }	{ CallBackItem CurrentShared GCInternal_ResetFreePointer GC_PData InvalidateRecycler LNullObj NIL NullObj SetShared TracePrivateVM boolean false gcFd gcFinalizeProcs register true vmPrivate }
GC_CollectShared		vm/gcsharedimpl.c	/^procedure GC_CollectShared()/ ;" function 44 { PSCollect }	{ CallBackItem Ctxt_RestartAllCtxts Ctxt_StopAllCtxts CurrentShared GCInternal_ResetFreePointer InvalidateRecycler LNullObj NIL NullObj SetShared TraceSharedVM boolean false gcFd gcFinalizeProcs register true vmShared }
GC_CollectionType		include/gc.h	/^typedef enum {privateVM, privateForShared, sharedV/ ;" typedef 1 { myGetRoots }	{ }
GC_Data		vm/gcinternal.h	/^typedef struct _t_GC_Data {\/* Garbage collector pe/ ;" typedef 10 { GCInternal_VMChange }	{ }
GC_GetCollectionType		vm/gcmisc.c	/^GC_CollectionType GC_GetCollectionType(info)/ ;" function 5 { FinalizeNames HandleGCFinalize PushLangRoots PushVMRoots myGetRoots }	{ GCDATA }
GC_GetRoot		vm/gcmisc.c	/^PVMRoot GC_GetRoot(info)/ ;" function 5 { PurgeOnGC }	{ GCDATA RootPointer }
GC_GetSpace		vm/gcmisc.c	/^VMStructure *GC_GetSpace(info)/ ;" function 5 { HandleGCFinalize }	{ GCDATA }
GC_H		include/gc.h	/^#define	GC_H/ ;" macro 1 { }	{ }
GC_HandleIndex		vm/gcmisc.c	/^procedure GC_HandleIndex(index, indexType, info)/ ;" function 40 { EnumerateComposites }	{ ABM_SetAllocated Assert Card32 CmdIndexObj GCDATA GCInternal_GetSegHnd NIL NameEntry NameIndexObj Object PNameEntry PVMSegment RefAny charptr register vmShared }
GC_Info		include/gc.h	/^typedef RefAny GC_Info;/ ;" typedef 1 { MIDPurgedByGC TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
GC_MarkAllocated		include/gc.h	/^#define GC_MarkAllocated(info, addr, size)	\\/ ;" macro 1 { ProcessFinalizeNodes ProcessSaveData PushSharedVMRoots PushVMRoots }	{ Card32 GCInternal_MarkAllocated RefAny }
GC_MoveRecycleRange		vm/abmimpl.c	/^RefAny GC_MoveRecycleRange(recycler, refs, nRefs)/ ;" function 183 { InvalidateRecycler }	{ AdjustRef AllocInternal Assert BitSpan Card16 CouldRecycle CreateStack CurrentShared GCInternal_Pop GCInternal_PushNoTest GC_PStack GC_Stack InRange NIL NULL PCard8 PObject RefAny SetShared arrayObj autoPrivate autoShared boolean execStk integer opStk register sharedRecycler start true vPREFERREDALIGN vmCurrent }
GC_PData		vm/vm_memory.h	/^typedef struct _t_GC_Data *GC_PData;/ ;" typedef 1 { GCDATA GCInternal_VMChange GC_CollectPrivate PSGCStats TracePrivateForShared }	{ }
GC_PStack		vm/gcinternal.h	/^typedef struct {	\/* Stack of Object Pointers...		*/ ;" typedef 5 { GCInternal_AllocStack GC_MoveRecycleRange GC_Push }	{ }
GC_PrivGCMustTrace		include/gc.h	/^#define	GC_PrivGCMustTrace(obj)	\\/ ;" macro 1 { PutInDict }	{ PrivTraceInfo escObj }
GC_Push		vm/gcmisc.c	/^procedure GC_Push(info, value)/ ;" function 25 { EnumerateComposites GCInternal_TraceROMDict PrivateStreamRoots ProcessSaveData PushGStateItems PushSharedNames PushSharedVMRoots PushStackRoots PushVMRoots TracePath myGetRoots }	{ ContainsRefs GCDATA GCInternal_GrowStack GC_PStack MINALIGN Object PObject integer register }
GC_RegisterFinalizeProc		vm/gcmisc.c	/^procedure GC_RegisterFinalizeProc(proc, clientData/ ;" function 6 { FontCacheInit Init_SaveRestore NameInit }	{ AddProcToList gcFinalizeProcs }
GC_RgstGStateEnumerator		vm/gcmisc.c	/^procedure GC_RgstGStateEnumerator(proc)/ ;" function 5 { IniGStates }	{ pushGStateItems }
GC_RgstGetRootsProc		vm/gcmisc.c	/^procedure GC_RgstGetRootsProc(proc, clientData)/ ;" function 6 { CustomOpsInit IniGStates LanguageInit VMInit }	{ AddProcToList getRootsProcs }
GC_RgstPkdAryEnumerator		vm/gcmisc.c	/^procedure GC_RgstPkdAryEnumerator(proc)/ ;" function 5 { PkdaryInit }	{ pushPkdAryComposites }
GC_RgstSharedRootsProc		vm/gcmisc.c	/^procedure GC_RgstSharedRootsProc(proc, clientData)/ ;" function 6 { CustomOpsInit DictInit LanguageInit NameInit VMInit }	{ AddProcToList sharedRootsProcs }
GC_RgstStmEnumerator		vm/gcmisc.c	/^procedure GC_RgstStmEnumerator(proc)/ ;" function 5 { StreamInit }	{ pushStmItems }
GC_Stack		vm/gcinternal.h	/^typedef struct {	\/* Stack of Object Pointers...		*/ ;" typedef 5 { GCInternal_AllocStack GC_MoveRecycleRange TracePrivateVM TraceSharedVM }	{ }
GC_WasCollected		vm/gcmisc.c	/^boolean GC_WasCollected(obj, info)/ ;" function 54 { HandleGCFinalize MIDPurgedByGC }	{ Assert CantHappen ContainsRefs GCDATA GCInternal_GetSegHnd NIL PVMSegment XlatDictRef arrayObj boolean cmdObj dictObj escObj false header nameObj objGState objNameArray pkdaryObj stmObj strObj }
GC_WasNECollected		vm/gcmisc.c	/^boolean GC_WasNECollected(ne, info)/ ;" function 13 { FinalizeNames }	{ Assert DebugAssert GCDATA GCInternal_GetSegHnd NIL PVMSegment false }
GENDEVICE_H		device/genericdev.h	/^#define GENDEVICE_H/ ;" macro 1 { }	{ }
GETC		language/scanner.c	/^#define GETC \\/ ;" macro 1 { PSReadHexString PSReadLine StmToken }	{ SETUPSTM SafeFilBuf UPDATESTM false ss }
GETMEM		devpattern/patternimpl.c	/^#define GETMEM(n) (PSCANTYPE) os_sureMalloc((long / ;" macro 1 { SetupDeepOnes }	{ PSCANTYPE os_sureMalloc }
GETTABLE		device/tfrfcn.c	/^#define GETTABLE(n) \\/ ;" macro 1 { DevAllocTfrFcn }	{ os_malloc }
GETUCRTABLE		device/tfrfcn.c	/^#define GETUCRTABLE(n) \\/ ;" macro 1 { DevAllocTfrFcn }	{ DevShort os_malloc }
GLOBALCOLORING		fonts/atm.h	/^#define GLOBALCOLORING (1)/ ;" macro 1 { }	{ }
GRAPHCHAR		graphics/cscan.c	/^#define GRAPHCHAR 0		\/* Generate a PostScript desc/ ;" macro 1 { }	{ }
GRAPHDATA_H		graphics/graphdata.h	/^#define	GRAPHDATA_H/ ;" macro 1 { }	{ }
GRAPHICS		include/package_specs.h	/^#define GRAPHICS	"graphics.h"/ ;" macro 1 { }	{ }
GRAPHICSNAMES_H		graphics/graphicsnames.h	/^#define	GRAPHICSNAMES_H/ ;" macro 1 { }	{ }
GRAPHICSPRIV_H		graphics/graphicspriv.h	/^#define	GRAPHICSPRIV_H/ ;" macro 1 { }	{ }
GRAPHICS_H		include/graphics.h	/^#define	GRAPHICS_H/ ;" macro 1 { }	{ }
GRAPHPOINTS		graphics/cscan.c	/^#define GRAPHPOINTS 0		\/* Just generate PostScript/ ;" macro 1 { }	{ }
GRAYPATSTATE		include/bintree.h	/^#define GRAYPATSTATE(ext)((*((NextGSExt **)ext))->/ ;" macro 1 { LMark }	{ NextGSExt }
GRAY_H		graphics/gray.h	/^#define GRAY_H/ ;" macro 1 { }	{ }
GROUPCACHESIZE		product/listener.c	/^#define GROUPCACHESIZE 5/ ;" macro 1 { SetGroups }	{ }
GRestoreProc		graphics/gstates.c	/^private procedure GRestoreProc(lev)/ ;" function 10 { IniGStates }	{ GRstrAll GStackRestore false gs savelevel }
GRstr		graphics/gstates.c	/^public procedure GRstr()/ ;" function 4 { BuildChar CCRun CCRunStd ConvertToListPath FillCircle PSErasePage PSInUStroke PSRectFill PSRectStroke }	{ GStackRestore false }
GRstrAll		graphics/gstates.c	/^public procedure GRstrAll()/ ;" function 6 { GRestoreProc }	{ GStackRestore false gs }
GSAddRefs		graphics/gstates.c	/^private procedure GSAddRefs(newGS)/ ;" function 40 { GSFinalize GSave GStackCopy PSCurrentGState PSGState PSSetGState }	{ Color GamutTfr ListPath NULL PDevice ReducedPath Rendering Screen TfrFcn d gStateExtProc r register }
GSFinalize		graphics/gstates.c	/^private procedure GSFinalize(obj, reason)/ ;" function 24 { IniGStates }	{ CantHappen GSAddRefs GSRemRefs PGState }
GSHasPrivateStuff		graphics/gstates.c	/^private boolean GSHasPrivateStuff(g)/ ;" function 17 { PSCurrentGState PSGState }	{ NULL TfrFcn false fontDict true }
GSMASK		fonts/atm.h	/^#define GSMASK (1)/ ;" macro 1 { }	{ }
GSRemRefs		graphics/gstates.c	/^private procedure GSRemRefs(oldGS)/ ;" function 47 { GSFinalize GStackRestore PSSetGState }	{ Color GamutTfr NULL PDevice RemColorRef RemGTRef RemPathRef RemRndrRef RemScrRef RemTfrRef Rendering Screen TfrFcn d false gStateExtProc r register true }
GSTACK_H		graphics/gstack.h	/^#define GSTACK_H/ ;" macro 1 { }	{ }
GSTATE_GMAX		graphics/gstates.c	/^#define GSTATE_GMAX 2000 \/* Maximum global gstates/ ;" macro 1 { IniGStates }	{ }
GSTATE_MAX		graphics/gstates.c	/^#define GSTATE_MAX (32)	\/* Maximum gstates per sta/ ;" macro 1 { GSave }	{ }
GSave		graphics/gstates.c	/^public procedure GSave()/ ;" function 12 { BuildChar CCRun CCRunStd ConvertToListPath FillCircle GSaveProc GStackRestore PSErasePage PSInUStroke PSRectFill PSRectStroke }	{ GSAddRefs GSTATE_MAX LimitCheck PGState false gs gsStorage gstack os_newelement register }
GSaveProc		graphics/gstates.c	/^private procedure GSaveProc(lev)/ ;" function 7 { GStateDataHandler IniGStates }	{ CantHappen GSave gs savelevel true }
GStack		graphics/gstack.h	/^typedef struct _gstack {/ ;" typedef 4 { IniGStates }	{ }
GStackClear		graphics/gstates.c	/^public procedure GStackClear()/ ;" function 7 { GStateDataHandler }	{ GStackRestore NULL gs gstack gstackStorage os_freeelement true }
GStackCopy		graphics/gstates.c	/^public procedure GStackCopy (original)/ ;" function 23 { PSFork }	{ GSAddRefs GStackRestore NIL PGState gs gsStorage gstack os_newelement true }
GStackRestore		graphics/gstates.c	/^private procedure GStackRestore(force)/ ;" function 32 { GRestoreProc GRstr GRstrAll GStackClear GStackCopy }	{ Assert DevLBounds GSRemRefs GSave NULL PDevice PGState SetXABounds boolean gs gsStorage gstack os_freeelement register savelevel true }
GState		include/graphics.h	/^typedef struct _t_GState {/ ;" typedef 43 { CreateGStack IniGStates PSGState PushGrfxRoots }	{ }
GStateDataHandler		graphics/gstates.c	/^public procedure GStateDataHandler (code)/ ;" function 34 { GraphicsInit }	{ CreateGStack GSaveProc GStackClear NIL UCacheDataHandler false gs gsPrivate gstack procedure savelevel }
GStateEnumerator		graphics/gstates.c	/^private procedure GStateEnumerator(obj, info)/ ;" function 6 { IniGStates }	{ PushGStateItems }
GStateObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 48 { }	{ }
GStatesData		graphics/graphdata.h	/^typedef struct {/ ;" typedef 5 { }	{ }
GamutTfr		include/graphics.h	/^typedef struct _t_GamutTfrRec \/* gamut transfer ob/ ;" typedef 6 { GSAddRefs GSRemRefs }	{ }
GamutTfrRec		include/graphics.h	/^typedef struct _t_GamutTfrRec \/* gamut transfer ob/ ;" typedef 6 { }	{ }
GenConvertColor		device/genericdev.c	/^private DevColor GenConvertColor/ ;" function 12 { IniGenDevImpl }	{ ConvertColorCMYK ConvertColorRGB PGenStuff r }
GenDefaultBounds		device/genericdev.c	/^private procedure GenDefaultBounds (device, bBox)/ ;" function 5 { IniGenDevImpl }	{ PGenStuff }
GenDefaultHalftone		device/genericdev.c	/^private DevHalftone * GenDefaultHalftone (device) / ;" function 3 { IniGenDevImpl }	{ defaultHalftone }
GenDefaultMtx		device/genericdev.c	/^private procedure GenDefaultMtx (device, matrix) P/ ;" function 4 { IniGenDevImpl }	{ PGenStuff }
GenFID		fonts/fontcache.c	/^private procedure GenFID(type, val, pfo, adjust)/ ;" function 7 { FndFntSibling PSDefineFont }	{ LFontObj ndcFID nextFID shiftFIDType }
GenGoAway		device/genericdev.c	/^private procedure GenGoAway (device) PDevice devic/ ;" function 3 { IniGenDevImpl }	{ }
GenInitPage		device/genericdev.c	/^private procedure GenInitPage (device, c) PDevice / ;" function 30 { IniGenDevImpl }	{ DevLBounds DevMarkInfo DevPrim DevTrap Mark NIL NULL }
GenReadRaster		device/genericdev.c	/^private DevLong GenReadRaster (device, xbyte, ybit/ ;" function 7 { IniGenDevImpl }	{ }
GenStuff		device/genericdev.h	/^typedef struct _t_GenStuff{	\/* concrete "Device" t/ ;" typedef 8 { }	{ }
GenWakeup		device/genericdev.c	/^private procedure GenWakeup (device) PDevice devic/ ;" function 3 { IniGenDevImpl }	{ CurrentDevice }
GenWinToDevTranslation		device/genericdev.c	/^private procedure GenWinToDevTranslation (device, / ;" function 7 { IniGenDevImpl }	{ DevLBounds }
GenerateThresholds		graphics/graypriv.c	/^public procedure GenerateThresholds(pSpot, devS)/ ;" function 10 { MakeType1Screen MakeType2Screen }	{ CalcThresholds FreqAngleToNumbers GetXDistYDist Numbers fp72 real }
GenericBody		include/vm.h	/^typedef	struct _t_GenericBody {/ ;" typedef 7 { AllocGenericObject PSCurrentGState PSGState ProcessSaveData VMPutGeneric }	{ }
GenericID		include/publictypes.h	/^typedef union {/ ;" typedef 7 { GetNextContext TracePrivateForShared TracePrivateVM }	{ }
GenericObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 47 { RstrGenericObjects }	{ }
Get16KBBox		graphics/pathreduce.c	/^private procedure Get16KBBox(bbox) register BBox b/ ;" function 6 { ConvertToListPath DoRdcPth DoRdcStroke ReduceQuadPath }	{ fp16k }
GetABComponent		graphics/image.c	/^private procedure GetABComponent(table, i, r)/ ;" function 9 { TableSampleProc }	{ integer r s }
GetAperatureDP		graphics/hitdetect.c	/^private DevPrim *GetAperatureDP(ctx, dispose)/ ;" function 22 { InFill InStroke InUFill }	{ DevPrim DoRdcPth FillUserPathEnumerate GetUsrPthAry NULL QEnumOk QFillUserPathEnumerate UCGetDevPrim UsrPthBBox UsrPthQRdcOk XADoRdcPth XARdc false true }
GetBBoxFromDevBounds		graphics/graphics.c	/^public procedure GetBBoxFromDevBounds(bb, bounds)/ ;" function 7 { DoStrkPth FindCurrentViewInCache ReducePathClipInt }	{ real }
GetBBoxFromDevLBounds		graphics/graphics.c	/^public procedure GetBBoxFromDevLBounds(bb, bounds)/ ;" function 7 { }	{ real }
GetBlueArrays		fonts/fontbuild.c	/^private procedure GetBlueArrays(bnm,obnm,/ ;" function 24 { FamilyBlueLocs GetBlueValues }	{ AFixedCar AryObj ForceGetP ForceKnown IntX InvlFont MAXBLUELEN MAXOTHERBLUELEN register }
GetBluePixBuffers		devpattern/imagepriv.h	/^#define GetBluePixBuffers GetPixBuffers/ ;" macro 1 { }	{ GetPixBuffers }
GetBlueValues		fonts/fontbuild.c	/^private procedure GetBlueValues(privdict,bbnds,len/ ;" function 9 { BuildChar CCRunStd }	{ GetBlueArrays PrintBlueValues bluename otherBluesName }
GetBoundsPopCd		product/coordinates.c	/^private GetBoundsPopCd(Bounds *b, Cd *pt)/ ;" function 9 { PSBaseToCurrent PSBaseToScreen PSCurrentToBase PSCurrentToScreen PSScreenToCurrent }	{ CheckWindowDev GetWinBounds NULL PDevice PSGetDevice PSPopPCd Wd2Layer }
GetBuffers		devpattern/imsupport.c	/^private GetBuffers(v, t) PSCANTYPE *v, *t; {/ ;" function 8 { GetGreenPixBuffers GetPixBuffers GetRedPixBuffers GetWhitePixBuffers }	{ NIL NULL PSCANTYPE RAISE SCANTYPE ecLimitCheck }
GetBuildingOption		fonts/fontcache.c	/^private integer GetBuildingOption(fdict, name, dfl/ ;" function 10 { CheckPrebuiltOptions }	{ DictTestPType InvlFont Object fontsNames intObj }
GetCArg		vm/arguments.c	/^public char *GetCArg(option)/ ;" function 29 { BinObjInit InitPostScript Mnextmain NextCustomProc NumCArg StateInit }	{ BeginParseArguments NIL arg argsUsed register savedArgc savedArgv }
GetCETimeStamp		language/dict.c	/^public GenericID GetCETimeStamp() { return(timesta/ ;" function 1 { }	{ timestamp }
GetCPDelta		fonts/cachedev.c	/^private procedure GetCPDelta(ssr, delta) register / ;" function 5 { MakeCacheDev2 NoRoom ROkToBuild }	{ UNFIXCD fdcp fpHalf rdcp ssr useReal }
GetCSwitch		vm/arguments.c	/^public integer GetCSwitch(name, deflt)/ ;" function 35 { BuildInitialState Init_VM_Memory ps_getsize }	{ BeginParseArguments NIL NumFromStr arg argsUsed integer register savedArgc savedArgv }
GetCachePlace		devpattern/colorpattern.c	/^private PCachedColor GetCachePlace(n) integer n; {/ ;" function 46 { ComposeColors }	{ Assert CachedColor DebugAssert NIL PCachedColor PCard8 PSCANTYPE SCANTYPE ccEnd ccHead ccLast data integer start true }
GetCoroutineInfo		coroutine/corouxfer.c	/^public char *GetCoroutineInfo(coroutine)/ ;" function 5 { }	{ }
GetCurrentContext		postscript/contextimpl.c	/^private GenericID GetCurrentContext ()/ ;" function 4 { ContextOpsInit }	{ currentPSContext }
GetCurveMiddle		graphics/stroke.c	/^private boolean GetCurveMiddle(c0, c1, c2, len, pc/ ;" function 14 { FillCurveJoin }	{ Cd Dist false fpHalf r real register true }
GetDMFDict		fonts/compshow.c	/^private procedure GetDMFDict(shared, dSize, pobj)/ ;" function 11 { DelayedMakeFont }	{ CurrentShared DURING DictP END_HANDLER HANDLER RERAISE SetShared boolean }
GetDMFItem		fonts/compshow.c	/^private procedure GetDMFItem(shared, dSize, pobj)/ ;" function 22 { DelayedMakeFont }	{ AllocPArray AryObj ConditionalInvalidateRecycler CurrentShared DURING DictObj DictP END_HANDLER HANDLER RERAISE SetShared VMPutElem boolean d }
GetDSW		fonts/fontbuild.c	/^private boolean GetDSW(swval, p) Fixed swval, *p; / ;" function 17 { ErodeSW RoundSW }	{ DTfmP FCd F_Dist FntDTfmP RCd false fixtopflt fpZero os_sqrt p pflttofix r real true usefix }
GetDebugStm		fonts/debug.c	/^private Stm GetDebugStm()/ ;" function 6 { DPrintSOP DumpDefault DumpDict DumpRoot PrAryBody PrNameAryBody PrPkdaryBody PrStmBody PrintAccess PrintBlanks PrintBoolean PrintDOB PrintDevCoord PrintKeyVal PrintMTX PrintMidDict PrintNameEntry PrintObj PrintSOP PrintVal pCIs pEldest pFD pMID pMM pMS pSFC pcom }	{ NIL calledFromPS debugStm os_stderr os_stdout }
GetDecrypt		fonts/fontbuild.c	/^#define GetDecrypt\\/ ;" macro 1 { BuildChar CCRunStd }	{ }
GetDevBBox		graphics/pathreduce.c	/^private procedure GetDevBBox(bbox) register BBox b/ ;" function 8 { DoRdcPth }	{ DevLBounds gs }
GetDevClipBBox		graphics/viewclip.c	/^public BBox GetDevClipBBox()/ ;" function 12 { BBoxVsClipBBox DoRdcPth PSUStroke ROkToBuild SetBBCompMark StrkInternal UXAStroke }	{ CurIsFirst FindCurrentViewInCache PViewClipCacheEntry curVC gs viewclipCache }
GetDevClipDevBBox		graphics/viewclip.c	/^public DevBBox GetDevClipDevBBox()/ ;" function 21 { DoImageMark DoRdcPth DoStroke ROkToBuild ShowMask StringMark }	{ CurIsFirst DevBBoxRec DevBounds DevPrim FindCurrentViewInCache FixInt FullBounds PViewClipCacheEntry curVC gs viewclipCache }
GetDevClipPrim		graphics/viewclip.c	/^public DevPrim *GetDevClipPrim()/ ;" function 12 { ClipForMark DoImageMark FastRectFill Fill FloatRectFill MarkStrokeMasks MultiRectFill PSGetClip PSRectFill ShowMask StringMark UCacheMark }	{ CurIsFirst DevPrim FindCurrentViewInCache PViewClipCacheEntry curVC gs viewclipCache }
GetDevComponent		graphics/image.c	/^private procedure GetDevComponent(table, i, r)/ ;" function 6 { TableSampleProc }	{ Card8 r }
GetEUsrPthBBox		graphics/euserpath.c	/^public procedure GetEUsrPthBBox(context, vals)/ ;" function 10 { UsrPthBBox }	{ ComputeDataLen PNumStrm ReadCtrlByte TypeCheck integer s }
GetErosion		fonts/fontbuild.c	/^private procedure GetErosion(privdict,swval,optr,f/ ;" function 43 { CCRunStd }	{ Begin DictGetP DictPut End ErNm Fixed FixedHalf FixedOne ForceGetP ForceKnown LRealObj Object PRealValue PopFixed PushFixed PushPReal RAISE alwaysErode boolean eNm engineclassnm erodeFoo erodeOffset erosion fixmul fixtopflt maxOffsetVal r real rootInternalDict rootSysDict }
GetFlushArgs		fonts/cicache.c	/^private procedure GetFlushArgs(cio, args)/ ;" function 11 { FlushMID ReleaseCI }	{ CI CN MT PCIItem PMTItem prebuiltFIDMask }
GetFontAndCharInfo		fonts/fontshow.c	/^private procedure GetFontAndCharInfo(pcn, name, na/ ;" function 31 { GetShowFlushArgs PreBuiltChar }	{ DictGetP DictTestP Mtx MtxCnct NIL Object PAryToMtx ValidMID curMT fontDict fontsNames gs nameObj true }
GetFontBBox		fonts/fontbuild.c	/^private procedure GetFontBBox(fd,swval,bl,tr)/ ;" function 14 { CCBuild CheckIfOkToBuild }	{ AFixedCar AryObj DictGetP Fixed bboxname register }
GetFontDirectory		fonts/fontcache.c	/^public procedure GetFontDirectory (pFontDict)/ ;" function 7 { PSDefineFont PSUnDefineFont pFD }	{ SysDictGetP TrickyDict XlatDictRef fontsNames }
GetFontStream		fonts/fontrun.c	/^private PFileEntry GetFontStream(fontInfo)/ ;" function 12 { OCFetchFromDisk }	{ CaData CaTag CacheLookup FileTag NULL PFileEntry RAISE ecIOError fileCache string }
GetFromPrivDict		fonts/fontbuild.c	/^private Fixed GetFromPrivDict(privdict, nm, val)/ ;" function 8 { CCRunStd }	{ FixedValue ForceGetP ForceKnown Object }
GetFrontWindow		bintree/windowlist.c	/^Layer *GetFrontWindow()/ ;" function 4 { GetFrontWindowDevice }	{ WLAt }
GetFrontWindowDevice		product/windowops.c	/^public PWindowDevice GetFrontWindowDevice()/ ;" function 8 { PSGetFrontWindow PostEvent }	{ GetFrontWindow Layer Layer2Wd PSInvalidID }
GetGreenPixBuffers		devpattern/imsupport.c	/^public PSCANTYPE GetGreenPixBuffers() {/ ;" function 4 { }	{ GetBuffers greenThresholds greenValues }
GetITfmX		fonts/fontbuild.c	/^private procedure GetITfmX(px, p) Fixed *px, *p; {/ ;" function 7 { DoLock }	{ FCd FntITfmP locktype p }
GetITfmY		fonts/fontbuild.c	/^private procedure GetITfmY(py, p) Fixed *py, *p; {/ ;" function 7 { DoLock }	{ FCd FntITfmP locktype p }
GetInactiveTables		graphics/transferimpl.c	/^private boolean GetInactiveTables() {/ ;" function 8 { ActivateTfr }	{ NULL ReleaseTables TfrFcn false tfrFcnFirst true }
GetInfo		fonts/compshow.c	/^#define GetInfo(x) { \\/ ;" macro 1 { CompSlowShow CompositeShow ScanCompString }	{ DictGetP GetInfoSupp MTMASK Object PCard8 PEMASK RangeCheck SSStatePtr Xxxxx cardinal fontsNames integer nm_Encoding register }
GetInfoSupp		fonts/compshow.c	/^procedure GetInfoSupp (SPtr)/ ;" function 21 { GetInfo }	{ DictGetP FMap17 FMap88 FMap97 FMapEscape FMapGen FMapNone Object UniqueMID fontsNames }
GetInt		graphics/image.c	/^private integer GetInt(d, nm) DictObj d; integer n/ ;" function 7 { ImageDict }	{ DictTestP Object TypeCheck d graphicsNames intObj true }
GetIntBE		fonts/fontrun.c	/^long int GetIntBE(stm, nBytes)/ ;" function 14 { DetermineFormat ReadMacSegHdr }	{ EOF getc }
GetIntLE		fonts/fontrun.c	/^long int GetIntLE(stm, nBytes)/ ;" function 14 { ReadIBMSegHdr }	{ EOF getc }
GetLComponent		graphics/image.c	/^private procedure GetLComponent(table, i, r)/ ;" function 6 { TableSampleProc }	{ Card8 r }
GetMTPE		fonts/fontspriv.h	/^#define GetMTPE(p, i) (((i)&1)? (((p)[(i)>>1])>>4)/ ;" macro 1 { Xxxxx }	{ p }
GetMaxBevelChord		graphics/stroke.c	/^private procedure GetMaxBevelChord() {/ ;" function 21 { FastFillCurveJoin FillCurveJoin }	{ Assert CHORDTHRESHOLD FixInt LengthTfm cosTable f_maxBevelChord false fp16k fpOne fpTwo fpZero maxBevelChord needMaxBevelChord needTfm pflttofix prevRadiusForMaxBevelChord real register uhalfwidth }
GetMemForTA		devpattern/patternimpl.c	/^private boolean GetMemForTA(s)/ ;" function 59 { AllocScreen ValidateTA }	{ AllocScrnSlot Assert NULL NULLSLOT PScreenPrivate SendOldestToDisk SendTAToDisk curTAUsage false integer largestChIndex largestChSize largestChunk maxTASize maxTotalTASize s screens true }
GetMetrics		fonts/fontbuild.c	/^private procedure GetMetrics(fd,pcn,gotptr,csptr,c/ ;" function 49 { BMRun CCRunStd }	{ AFixedCar DictGetP DictObj FCd FixedValue InvlFont Known Object PccCount arrayObj intObj integer metricsname pkdaryObj realObj }
GetMetrics2		fonts/fontbuild.c	/^private boolean GetMetrics2 (fd, pcn, fm)/ ;" function 19 { BMRun CCRunStd }	{ AFixedCar DictGetP DictObj InvlFont Known Object PccCount arrayObj false metrics2name pkdaryObj true }
GetMouseMovedMask		product/windowops.c	/^private Card32 GetMouseMovedMask()/ ;" function 9 { PSSetWindowEventMask TermWindowDevice }	{ Card32 NULL PWindowDevice windowBase }
GetMtxInfo		fonts/fontbuild.c	/^private procedure GetMtxInfo() {/ ;" function 17 { CCRunStd }	{ SetFixedPathProcs SetRealPathProcs SetupFntMtx TfmLockPt1 TfmLockPt3 TfmLockPt4 gs gsmatrix locktype tfmLockPt toosmall usefix }
GetNextContext		postscript/contextimpl.c	/^private GenericID GetNextContext (privateVM, id)/ ;" function 42 { ContextOpsInit }	{ Assert GenericID NIL PSContext PSSpace boolean spaces }
GetNextSpace		postscript/contextimpl.c	/^private PVM GetNextSpace (privateVM)/ ;" function 25 { ContextOpsInit }	{ Assert NIL PSSpace spaces }
GetNextWindow		bintree/windowlist.c	/^Layer *GetNextWindow(Layer *layer)/ ;" function 4 { GetNextWindowDevice }	{ WLAt WLOffsetOf }
GetNextWindowDevice		product/windowops.c	/^public PWindowDevice GetNextWindowDevice(PWindowDe/ ;" function 4 { PostEvent }	{ GetNextWindow Layer2Wd Wd2Layer }
GetNormStrkWdth		graphics/stroke.c	/^private Cd GetNormStrkWdth(m, w, c)/ ;" function 8 { AnamorphicNormStrkWdth }	{ DTfmP Dist os_fabs r real }
GetNotifyAbortCode		postscript/contextimpl.c	/^private integer GetNotifyAbortCode() { \/* called f/ ;" function 22 { ContextOpsInit RgstContextProcs }	{ Assert CantHappen PSContext PS_INTERRUPT PS_TERMINATE PS_TIMEOUT PS_YIELD currentPSContext false true }
GetObjFormat		language/binaryobject.c	/^public integer GetObjFormat() {return (integer)obj/ ;" function 1 { PSFork }	{ integer objectFormat }
GetPUnixData		stream/unixstmpriv.h	/^#define GetPUnixData(stm) ((UnixData *) &stm->data/ ;" macro 1 { UFClose UFFlush UFSeek UFTell UFilBuf UFlsBuf UnixStmInit fileno }	{ UnixData data }
GetPathBBoxUserCds		graphics/pathops.c	/^public procedure GetPathBBoxUserCds(newbl, newtr) / ;" function 21 { PSPathBBox PSUPath }	{ Cd CheckForCurrentPoint ITfmP gs real register }
GetPatternBase		graphics/gray.c	/^public PGrayQ GetPatternBase(area) cardinal area; / ;" function 11 { CalcThresholds }	{ DEF_PAT_SIZE GrayQ NEW PGrayQ defaultInUse defaultPatBase true }
GetPatternRow		devpattern/patternimpl.c	/^public PSCANTYPE GetPatternRow (markinfo, data, y)/ ;" function 12 { ClippedMasksMark GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark }	{ data integer start }
GetPixBuffers		devpattern/imsupport.c	/^public PSCANTYPE GetPixBuffers() {/ ;" function 4 { GetBluePixBuffers ImS12D12NoTfr ImS1XD11 }	{ GetBuffers pixelThresholds pixelVals }
GetPreBuiltChar		device/nextprebuilt.c	/^int GetPreBuiltChar(int bpp, int maskID, PreBuiltA/ ;" function 30 { FmPreBuiltChar }	{ CheckPrebuiltMatrix NextPrebuiltFont PrebuiltEncoding buildPrebuilt getPrebuiltFont }
GetPrivFontDirectory		fonts/fontcache.c	/^public procedure GetPrivFontDirectory (pFontDict)/ ;" function 5 { FndFntSibling InitFID PSSelectFont }	{ rootPrivate }
GetProcSource		graphics/image.c	/^private procedure GetProcSource(pixInfo) register / ;" function 31 { ImageInternal ReadSlices }	{ Card32 EPopP EPushP IPopSimple MAXCard32 PopPString RangeCheck StrObj integer refStk true }
GetRedPixBuffers		devpattern/imsupport.c	/^public PSCANTYPE GetRedPixBuffers() {/ ;" function 4 { }	{ GetBuffers redThresholds redValues }
GetRuleDesc		graphics/cscan.c	/^private procedure GetRuleDesc(act, ll, x, ci, xi)/ ;" function 92 { FixPixelProblem }	{ BADCXTN BuildCxtn Cxtn FixupPatternKey IntX NOCXTN NULLMERIT PATTERNKEY PatternArray PatternArrayLen PatternToActions Pixel REG ROTATECXTN ROTATEPIXNUM RelPixelToPixNum false printf r true }
GetShowFlushArgs		fonts/fontshow.c	/^private procedure GetShowFlushArgs(pcn, args)/ ;" function 7 { ShowByName }	{ GetFontAndCharInfo ss }
GetSpotDictEntries		graphics/gray.c	/^private procedure GetSpotDictEntries(dict, names, / ;" function 24 { GetType1Screen GetType2Screen }	{ DictTestP Object TypeCheck intObj realObj true }
GetStandardWidths		fonts/fontbuild.c	/^private procedure GetStandardWidths(privdict, stem/ ;" function 11 { BuildChar CCRunStd }	{ SetupStdWs false lenstdhw lenstdvw stdhw stdhwNm stdvw stdvwNm stemsnaphNm stemsnapvNm true usefix }
GetStdByte		fonts/fontbuild.c	/^#define GetStdByte\\/ ;" macro 1 { BMRun }	{ }
GetStdW		fonts/fontbuild.c	/^private IntX GetStdW(privdict,nm,stdw)/ ;" function 13 { SetupStdWs }	{ AFixedCar AryObj ForceGetP ForceKnown IntX InvlFont MAXSTMS register }
GetStemWidth		fonts/fontbuild.c	/^private Fixed GetStemWidth(privdict) DictObj privd/ ;" function 18 { CCRunStd }	{ AryObj ErNm FixInt Fixed ForceAGetP ForceGetP ForceKnown Object arrayObj intObj pflttofix pkdaryObj realObj }
GetStmDecryptionKey		language/stream.c	/^public longcardinal GetStmDecryptionKey(stm)/ ;" function 5 { KACharDef }	{ CStmRndNum }
GetStream		include/language.h	/^#define GetStream(s) \\/ ;" macro 1 { BMRun Bang CCRunStd CStmBFilBuf CStmClose CStmFAvail CStmFSeek CStmFTell CStmFlush CStmHFilBuf ComStmClose ComStmFAvail ComStmFRead ComStmFSeek ComStmFTell ComStmFilBuf ComStmFlush ComStmUnGetc DetermineFormat EncryptedStream GetStreamSource KACharDef KAEndCSDict KARdSubrsData MakeDecryptionStm PSBytesAvailable PSEExec PSFilPos PSFlsFile PSFontRun PSInitWrite PSPopStream PSRead PSReadHexString PSReadLine PSReadString PSResFile PSStFilPos PSToken PSWrite PSWriteData PSWrtHexString PSWrtString WriteObject }	{ InvlStm s }
GetStreamSource		graphics/image.c	/^private procedure GetStreamSource(destbytes, bytes/ ;" function 15 { ReadSlices }	{ Card32 GetStream Stm fread integer true }
GetStringSource		graphics/image.c	/^private procedure GetStringSource(pixInfo) registe/ ;" function 19 { ImageInternal ReadSlices }	{ Card32 MAXCard32 RangeCheck StrObj integer true }
GetTLWinBounds		bintree/windowlist.c	/^void GetTLWinBounds(Layer *layer, Bounds *r)/ ;" function 4 { PSAdjustMouse PSMoveWindow PSSetMouse PSSetNRect }	{ r wsBounds }
GetTfmX		fonts/fontbuild.c	/^private procedure GetTfmX(px, p) Fixed *px, *p; {/ ;" function 3 { EnterGlbClr }	{ FCd FntTfmP locktype p }
GetTfmY		fonts/fontbuild.c	/^private procedure GetTfmY(py, p) Fixed *py, *p; {/ ;" function 3 { EnterGlbClr }	{ FCd FntTfmP locktype p }
GetTfr		graphics/transferimpl.c	/^private TfrFcn GetTfr() {/ ;" function 11 { SetTransfer }	{ NIL Object TfrFcn TfrFcnRec XAryObj os_newelement register tfrFcnStorage }
GetThresholdDictEntries		graphics/gray.c	/^private procedure GetThresholdDictEntries(dict, na/ ;" function 34 { GetType3Screen GetType4Screen }	{ DictTestP Object RangeCheck TypeCheck intObj strObj true }
GetType1Screen		graphics/gray.c	/^private Screen GetType1Screen(dict) DictObj dict; / ;" function 5 { PSSetHalftone }	{ GetSpotDictEntries MakeType1Screen SpotFunction graphicsNames }
GetType2Screen		graphics/gray.c	/^private Screen GetType2Screen(dict) DictObj dict; / ;" function 8 { PSSetHalftone }	{ GetSpotDictEntries MakeType2Screen SpotFunction graphicsNames }
GetType3Screen		graphics/gray.c	/^private Screen GetType3Screen(dict) DictObj dict; / ;" function 14 { PSSetHalftone }	{ CopyThresholds DevAllocHalftone DevCheckScreenDims DevScreen GetThresholdDictEntries LimitCheck NewScreen Screen graphicsNames register true }
GetType4Screen		graphics/gray.c	/^private Screen GetType4Screen(dict) DictObj dict; / ;" function 40 { PSSetHalftone }	{ CopyThresholds DevAllocHalftone DevCheckScreenDims DevScreen DevShort GetThresholdDictEntries LCM4 LimitCheck NewScreen Object Screen graphicsNames integer register true }
GetUsrPthAry		graphics/userpath.c	/^public procedure GetUsrPthAry(context)/ ;" function 9 { DoUAppend FillUserPath GetAperatureDP InUFill PSInUStroke PSUStroke }	{ CheckIfEncodedUserPath CheckIfUCache InvlAccess PopPArray pkdaryObj rAccess }
GetVMFirst		include/vm.h	/^#define GetVMFirst() VMPtr(vmCurrent->free)/ ;" macro 1 { }	{ free vmCurrent }
GetVMLast		include/vm.h	/^#define GetVMLast() VMPtr(vmCurrent->last)/ ;" macro 1 { }	{ vmCurrent }
GetValidFreqAngleOctet		graphics/graypriv.c	/^public procedure GetValidFreqAngleOctet(fcns, dims/ ;" function 60 { MakeType2Screen }	{ DevCheckScreenDims DevShort FreqAngleToNumbers GetXDistYDist LCM4 LimitCheck Numbers RealLe0 UndefResult fp72 grayPatternLimit integer max maxDevShort real true }
GetValidFreqAnglePair		graphics/graypriv.c	/^public procedure GetValidFreqAnglePair(pSpot, dims/ ;" function 34 { MakeType1Screen }	{ DevCheckScreenDims DevShort FreqAngleToNumbers GetXDistYDist LimitCheck Numbers RealLe0 UndefResult fp72 grayPatternLimit integer maxDevShort real true }
GetWeightVector		fonts/fontbuild.c	/^private IntX GetWeightVector(fd, wv) DictObj fd; P/ ;" function 13 { CCRunStd }	{ AFixedCar AryObj DictGetP IntX InvlFont Known MAXWEIGHTS wvname }
GetWhitePixBuffers		devpattern/imsupport.c	/^public PSCANTYPE GetWhitePixBuffers() {/ ;" function 4 { }	{ GetBuffers whiteThresholds whiteValues }
GetWinBounds		bintree/windowlist.c	/^void GetWinBounds(Layer *layer, Bounds *r)/ ;" function 9 { GetBoundsPopCd GlobalToLocal LocalToGlobal PSCurrentWindowBounds PSReadImage PSSizeImage ScreenToBase }	{ r remapY wsBounds }
GetXDistYDist		graphics/graypriv.c	/^private procedure GetXDistYDist(xdist, ydist) real/ ;" function 9 { GenerateThresholds GetValidFreqAngleOctet GetValidFreqAnglePair }	{ Cd IDTfmPCd Mtx fpOne fpZero gs os_sqrt }
GlbClr		fonts/glbclr.h	/^typedef struct _gclr { \/* stem *\// ;" typedef 24 { IniGlbClrBuffs NewGlbClr }	{ }
GlbClrLine		fonts/fontbuild.c	/^internal procedure GlbClrLine(c0, c1) FCd c0, c1; / ;" function 36 { BuildChar CCRunStd }	{ FixInt Fixed NULL PGlbClr boolean d false glbClrLst os_labs true }
GlbCntr		fonts/glbclr.h	/^typedef struct _gcntr { \/* counter *\// ;" typedef 9 { IniGlbClrBuffs NewGlbCntr }	{ }
GlbFixLocs		fonts/fontbuild.c	/^private procedure GlbFixLocs() {/ ;" function 52 { ProcessGlbClrs }	{ Fixed NULL PGlbClr glbClrLst register }
GlobalColoring		fonts/glbclr.c	/^public boolean GlobalColoring(stems, cntrs, b3, ef/ ;" function 28 { ProcessGlbClrs }	{ AlignIsolatedStems Assert CullCounters FixBands PGlbClr PGlbCntr SortCounters SortStems bprocs false true }
GlobalToLocal		product/coordinates.c	/^public procedure GlobalToLocal(PWindowDevice wd, i/ ;" function 10 { LRedraw PSAdjustMouse PSCurrentMouse SendEvent }	{ Bounds CheckWindowDev GetWinBounds NULL PSGetDevice PWindowDevice Wd2Layer }
Globals		postscript/contextimpl.c	/^typedef struct {/ ;" typedef 16 { BinObjInit ContextOpsInit CustomOpsInit DictInit FontBuildInit GrayInit IniClrSpace IniGStates IniPathPriv IniStroke IniTransfer IniUCache IniViewClip Init_SaveRestore Init_VM_Space LanguageInit }	{ }
GlobalsRec		postscript/contextimpl.c	/^typedef struct {/ ;" typedef 16 { BinObjInit ContextOpsInit CustomOpsInit DictInit FontBuildInit GrayInit IniClrSpace IniGStates IniPathPriv IniStroke IniTransfer IniUCache IniViewClip Init_SaveRestore Init_VM_Space LanguageInit }	{ }
GraphicsData		graphics/graphdata.h	/^typedef struct {/ ;" typedef 6 { GraphicsInit }	{ }
GraphicsInit		graphics/graphpak.c	/^public procedure GraphicsInit(reason)/ ;" function 46 { }	{ GStateDataHandler GraphicsData GrayInit IniClrSpace IniGStates IniGraphics IniNullDevice IniPathPriv IniReducer IniStroke IniTransfer IniUCache IniViewClip MarkInit PCard8 PathBuildInit RegisterData STATICEVENTFLAG graphicsStatics integer procedure }
GrayData		graphics/graphdata.h	/^typedef struct {/ ;" typedef 3 { }	{ }
GrayGreaterThan		graphics/graypriv.c	/^private boolean GrayGreaterThan(a, b)  cardinal a,/ ;" function 2 { SortGQ }	{ NEXT_RAND boolean }
GrayInit		graphics/gray.c	/^public procedure GrayInit(reason)  InitReason reas/ ;" function 16 { GraphicsInit }	{ Globals GlobalsRec NIL SIZE_MAX_HALFTONE_PATTERN defaultInUse endswitch false globals grayPatternLimit integer os_sureCalloc ps_getsize screenList }
GrayMasksMark		device/graymask.c	/^public procedure GrayMasksMark(masks, items, args)/ ;" function 791 { IniFmDevImpl }	{ Assert BANDMASKID DevMarkInfo DevPoint ExpandMask GetPatternRow LSHIFT PCard16 PCard8 PMask PSCANTYPE PatternData RSHIFT RSHIFTEQ SCANMASK SCANSHIFT SCANTYPE SCANUNIT boolean data devXAOffset false framebase framebytewidth framelog2BD integer register source2bits source4bits source8bits start true until }
GrayPatHandle		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 5 { ConstGrayPattern ConstGraySetup GrayPatInfo GrayPattern GraySetup GryPat4Of4 PatInfo }	{ }
GrayPatInfo		devpattern/graypattern.c	/^public integer GrayPatInfo (h, red, green, blue, g/ ;" function 11 { ConstGrayPattern GrayPattern }	{ GrayPatHandle data }
GrayPatRec		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 5 { ConstGrayPattern GrayPattern GryPat4Of4 }	{ }
GrayPattern		devpattern/graypattern.c	/^public PatternHandle GrayPattern(data, bitsPerPixe/ ;" function 23 { SetFmDeviceMetrics }	{ DestroyPat GrayPatHandle GrayPatInfo GrayPatRec GraySetup NIL RAISE SetupDeepOnes data ecLimitCheck integer os_sureMalloc }
GrayQ		graphics/gray.h	/^typedef struct {/ ;" typedef 4 { GetPatternBase SortGQ }	{ }
GrayRectMark		device/graytrap.c	/^private procedure GrayRectMark(y, lines, xl, xr, a/ ;" function 80 { GrayTrapsMark }	{ DevMarkInfo GetPatternRow PSCANTYPE PatternData SCANSHIFT SCANTYPE devXAOffset framebase framebytewidth framelog2BD integer leftBitArray lines register rightBitArray start }
GrayRunMark		device/grayrun.c	/^public procedure GrayRunMark(run, args)/ ;" function 63 { IniFmDevImpl }	{ DevMarkInfo DevShort GetPatternRow PSCANTYPE PatternData SCANSHIFT SCANTYPE data devXAOffset framebase framebytewidth framelog2BD integer leftBitArray lines register rightBitArray start }
GraySetup		devpattern/graypattern.c	/^public procedure GraySetup(h, markinfo, data)/ ;" function 15 { GrayPattern }	{ DURING DevColorVal END_HANDLER FGEnterMonitor FGExitMonitor GrayPatHandle HANDLER RERAISE SetupGrayPattern data dgGray integer }
GrayTrapsMark		device/graytrap.c	/^public procedure GrayTrapsMark(t, items, args)/ ;" function 101 { IniFmDevImpl }	{ DevMarkInfo DevTrap Fix Fixed GetPatternRow GrayRectMark IntPart PSCANTYPE PatternData SCANSHIFT SCANTYPE boolean framebase framebytewidth framelog2BD integer leftBitArray lines register rightBitArray start true }
GroupCache		product/listener.c	/^static GroupCacheItem GroupCache[GROUPCACHESIZE];/ ;" global 1 { SetGroups }	{ }
GroupCacheItem		product/listener.c	/^typedef struct {/ ;" typedef 6 { SetGroups }	{ }
GrowBM		device/maskcache.c	/^private procedure GrowBM(size)/ ;" function 26 { DevSetMaskCacheSize }	{ Assert BMHeader BMUsedTag CompactBM Data EXPAND PBMHeader PBMItem bmBase bmBytes bmFree bmScratch data free header integer mskBase register }
GrowPool		pslib/pool.c	/^private PoolElement *GrowPool(pool)/ ;" function 45 { os_newelement os_newpool }	{ DebugAssert NIL PSLimitCheck PoolChunk PoolElement chunks free }
GrowRunBuff		graphics/cscan.c	/^private procedure GrowRunBuff(pCur, pStart, pEnd)/ ;" function 22 { CHECKRUNBUFF }	{ EXTRA_RUNS Int16 MB2ALLOCINCREMENT OutOfMemory SubtractPtr bprocs memoryBuffer2 true }
GrowableBuffer		fonts/fontbuild.c	/^typedef struct {/ ;" typedef 4 { }	{ }
Gry4Of4Setup		devpattern/grypat4of4.c	/^public procedure Gry4Of4Setup(h, markInfo, data)/ ;" function 64 { GryPat4Of4 MP12InitBricks MP12SetupPattern }	{ AllocInfoVector BuildPattern CantHappen Card8 ConstantColor DURING DevColorVal DevScreen END_HANDLER FGEnterMonitor FGExitMonitor HANDLER NIL PCachedHalftone PCard8 PPatCacheInfo PScreenPrivate RAISE RERAISE RollPattern SetPatInfo ValidateTA data dgGray ecLimitCheck integer patTimeStamp patterns pixVals register start true }
GryPat4Of4		devpattern/grypat4of4.c	/^public PatternHandle GryPat4Of4() {/ ;" function 14 { MP12InitClassVars SetFmDeviceMetrics }	{ DestroyPat GrayPatHandle GrayPatRec Gry4Of4Setup PatInfo SetupDeepOnes data integer os_sureMalloc }
GuaranteeActiveScreen		bintree/drivers.c	/^static void GuaranteeActiveScreen()/ ;" function 26 { DriverInit }	{ LOG_PS_DRIVER MEGAPIXEL NXMonitor mon monCount strcmp }
H		bintree/bintreetypes.h	/^#define H 0/ ;" macro 1 { BPObscureInside DPAdjust DPCompositeFrom DPCompositeTo DPFindPieceBounds DPPrintOn }	{ }
HADJ		bintree/extent.c	/^#define HADJ(a,b)	(((a).miny<=(b).maxy)&&((a).maxy/ ;" macro 1 { EXBuildExtents }	{ }
HALF		include/devicetypes.h	/^#define	HALF		(1<<15)/ ;" macro 1 { BresenhamMT ImStretch QBresenhamMT }	{ }
HANDLER		include/except.h	/^#define	HANDLER	_E_RESTORE;} else {/ ;" macro 1 { AcquireLock AllocRAMArray AllocRAMStr BuildChar CCRun CCRunStd CalcThresholds CallFromPS CopyDelayedFont CreateContext CreatePSContext CreatePSSpace CreatePrivateVM DetermineFormat DoRdcPth DoRdcStroke DoStrkPth DoUAppend EnterCircle EnterPathInCache EnterRdcInCache FillBevel FillCircle FillQuad FltnPth GetDMFDict GetDMFItem ImageInternal InitChunk InitClipPath InitPostScript MakeCompFont MakeFontSupp MakeRectPath MakeScreenDict MakeType1Screen MakeType2Screen MinimumClip NewDevice NewViewClip OffsetFill PSCharPath PSFontRun PSFork PSRectClip PSRectFill PSRectStroke PSRectViewClip PSUStroke PSUStrokePath PSWait PathForAll ReducePathClipInt SafeShowMask StrkPth Stroke UCGetDevPrim UStrkPthProc WaitOnJoinable XARdc (etc) }	{ _E_RESTORE }
HASHINDEXFIELD		postscript/postscript.c	/^#define HASHINDEXFIELD	10			  \/* field size for NE/ ;" macro 1 { CreateSharedVM HASHINDEXMASK NEASize }	{ }
HASHINDEXMASK		postscript/postscript.c	/^#define HASHINDEXMASK	(~(-1 << HASHINDEXFIELD)) \/*/ ;" macro 1 { CreateSharedVM }	{ HASHINDEXFIELD }
HASHMASK		vm/vm_relocate.h	/^#define	HASHMASK	(HASHSIZE - 1)/ ;" macro 1 { AddMark }	{ HASHSIZE }
HASHSHIFT		graphics/ucache.c	/^#define HASHSHIFT (3)/ ;" macro 1 { HashArray HashPath TABLEINDEX }	{ }
HASHSIZE		vm/vm_relocate.h	/^#define HASHSIZE	(48 * 1024)/ ;" macro 1 { BuildRelocationTable HASHMASK }	{ }
HDTcmd		fonts/fontbuild.c	/^#define HDTcmd	6/ ;" macro 1 { BuildChar CCRunStd }	{ }
HEIGHTSANITY		include/windowdevice.h	/^#define HEIGHTSANITY    10000	\/* Maximum height of/ ;" macro 1 { PSPlaceWindow PSWindow }	{ }
HF2F		language/numstrm.c	/^private Fixed HF2F(ns) register PNumStrm ns; {/ ;" function 13 { HF2R SetupNumStrm }	{ Card32 Fixed character register ss }
HF2R		language/numstrm.c	/^private procedure HF2R(ns, p) PNumStrm ns; real *p/ ;" function 4 { SetupNumStrm }	{ HF2F fixtopflt p }
HF4F		language/numstrm.c	/^public Fixed HF4F(ns) register PNumStrm ns; {/ ;" function 21 { FastShow SetupNumStrm }	{ Card32 Fixed Int16 character register ss }
HF4R		language/numstrm.c	/^private procedure HF4R(ns, p) register PNumStrm ns/ ;" function 18 { SetupNumStrm }	{ Card32 character integer p r real register ss }
HI		fp/isinfieee.c	/^#define HI d1/ ;" macro 1 { os_isinf os_isnan }	{ }
HIGHLIGHT		include/bintree.h	/^#define HIGHLIGHT	12	\/* white > lgray > white *\// ;" macro 1 { BMComposite34 BMComposite38 CompositePriv LCompositeFrom PSComposite }	{ }
HIRF		language/numstrm.c	/^private Fixed HIRF(ns) register PNumStrm ns; {/ ;" function 6 { SetupNumStrm }	{ HIRR pflttofix r real }
HIRR		language/numstrm.c	/^private procedure HIRR(ns, p) register PNumStrm ns/ ;" function 16 { HIRF SetupNumStrm }	{ Card32 IEEEHighToNative character p r real register ss }
HIWORD		bitmap/bm34comp.c	/^#define HIWORD(a) ((unsigned short)((a) >> 16))/ ;" macro 1 { BM34MoveRect }	{ }
HLFSWesc		fonts/fontbuild.c	/^#define HLFSWesc 25/ ;" macro 1 { CCRunStd }	{ }
HMASK		mp/soverrect.c	/^#define HMASK 0xaaaaaaaa \/* 1010101010101010101010/ ;" macro 1 { DoSover }	{ }
HMTcmd		fonts/fontbuild.c	/^#define HMTcmd	22/ ;" macro 1 { BuildChar CCRunStd }	{ }
HNAHeader		language/scanner.h	/^typedef struct {/ ;" typedef 5 { }	{ }
HNRF		language/numstrm.c	/^public Fixed HNRF(ns) register PNumStrm ns; {/ ;" function 16 { QDoEUsrPthFloat SetupNumStrm }	{ Card32 character pflttofix real register ss }
HNRR		language/numstrm.c	/^private procedure HNRR(ns, p) register PNumStrm ns/ ;" function 14 { SetupNumStrm }	{ Card32 PCard32 character p register ss }
HOSTDICT_H		device/hostdict.h	/^#define HOSTDICT_H/ ;" macro 1 { }	{ }
HVCTcmd		fonts/fontbuild.c	/^#define HVCTcmd 31/ ;" macro 1 { BuildChar CCRunStd }	{ }
HZ		pslib/clockunix.c	/^#define	HZ	60/ ;" macro 1 { }	{ }
HalfRoundCap		graphics/stroke.c	/^private procedure HalfRoundCap(lf, rt) Cd lf, rt; / ;" function 13 { F_HalfRoundCap FillJoin FillLineSegment StrkCap }	{ Cd FillCurveJoin ITransIfNeed TransIfNeed fpHalf fpZero }
HandleDataMsg		product/ipcscheduler.c	/^private boolean HandleDataMsg(msg_header_t *m)/ ;" function 24 { HandleMsg }	{ PSSchedulerContext SchedulerMsg contextList false os_fprintf os_stderr portNeedsContext true }
HandleGCFinalize		vm/saverestore.c	/^private procedure HandleGCFinalize(clientData, inf/ ;" function 52 { Init_SaveRestore }	{ CallFinalizeProc CantHappen Card8 GC_GetCollectionType GC_GetSpace GC_WasCollected NIL PFinalizeNode PVMRoot RootPointer escObj register rootShared }
HandleMsg		product/ipcscheduler.c	/^private boolean HandleMsg(msg_header_t *newMsg)/ ;" function 7 { SelectPSContext }	{ HandleDataMsg HandleNotifyMsg notifyPort }
HandleNotifyMsg		product/ipcscheduler.c	/^private boolean HandleNotifyMsg(notification_t *m)/ ;" function 60 { HandleMsg }	{ NSNotifyContext NSTermContext NSUsesIPCStms NULL PSSchedulerContext contextList false notifyPort true }
HandlePendingEOL		language/stream.c	/^public procedure HandlePendingEOL(stm)/ ;" function 8 { PSEExec PSFilPos PSReadLine PSReadString }	{ EOF false getc integer register ungetc }
HandleStackOverflow		language/exec.c	/^private procedure HandleStackOverflow(stack, rob) / ;" function 27 { }	{ AllocPArray ArrayFromStack AryObj CantHappen CarefulPushP ClearDictStack ClearStack CountStack EPushP MAXcardinal Object UnwindExecStk dictStk dstkoverflow estkoverflow execStk mrkExec mrkMonitor mrkRun mrkStopped opStk refStk stackoverflow until }
HasCurrentPoint		graphics/pathbuild.c	/^public boolean HasCurrentPoint(path) register PPat/ ;" function 11 { CallArcInit CheckForCurrentPoint MinimumClip ReducePathClipInt UPArcInit }	{ NULL PathType false gs true }
HasRefs		vm/gcmisc.c	/^public boolean *HasRefs, *PrivTraceInfo;/ ;" global 1 { ContainsRefs InitRefArrays TracePrivateVM TraceSharedVM }	{ }
HashArray		graphics/ucache.c	/^private Card32 HashArray(ao) Object ao; {/ ;" function 25 { HashPath }	{ CantHappen Card32 HASHSHIFT MIN Object PObject VMCarCdr arrayObj integer pkdaryObj register }
HashMID		fonts/midcache.c	/^public Card16 HashMID(fid, mtx, maskID, tblSize)/ ;" function 16 { InsertMID }	{ Card16 Card32 RRoundP d fp1024 integer r real register }
HashObject		language/dict.c	/^private cardinal HashObject(key, length)/ ;" function 17 { }	{ CantHappen boolObj cardinal cmdObj intObj longcardinal nameObj os_fabs os_labs realObj register stmObj strObj }
HashPath		graphics/ucache.c	/^private Card32 HashPath(context) register PUserPat/ ;" function 15 { UCGetDevPrim }	{ Card32 HASHSHIFT HashArray MIN PNumStrm integer register s strObj string }
HashSFC		fonts/selectfont.c	/^#define HashSFC(key, mtx) \\/ ;" macro 1 { InsertSelectFont }	{ Card32 PCard32 rootPrivate szSelectFontHash }
Header		device/maskcache.h	/^#define Header(o) ((BMHeader)(&((o)->header)))/ ;" macro 1 { }	{ BMHeader header }
HighMask		graphics/qreducer.c	/^#define HighMask 0xFFFF0000/ ;" macro 1 { BuildEdge }	{ }
HighlightRect		mp/hlrect.c	/^void HighlightRect(register LineOperation *lop, re/ ;" function 44 { MRMoveRect }	{ LOWMASK register uchar uint }
HitRun		graphics/hitdetect.c	/^private procedure HitRun(r, hit) DevRun *r; boolea/ ;" function 3 { IntersectDP }	{ true }
HitTrap		graphics/hitdetect.c	/^private procedure HitTrap(t, hit) DevTrap *t; bool/ ;" function 3 { IntersectDP }	{ true }
HorizDir		graphics/cscan.c	/^#define HorizDir	6/ ;" macro 1 { }	{ }
HostDict		device/hostdict.h	/^typedef struct _t_HostDict {/ ;" typedef 8 { newHostDict }	{ }
HostDictEntry		device/hostdict.h	/^typedef struct _t_HostDictEntry {/ ;" typedef 6 { defHostDict disposeHostDict enumerateHostDict getHostDict hostDictPurge newHostDict }	{ }
ID2Layer		product/windowops.c	/^public Layer *ID2Layer(int wID)/ ;" function 9 { NXWID2Bag PSCurrentDeviceInfo PSCurrentWindowAlpha PSCurrentWindowBounds PSDumpWindow PSFillWindow PSFindWindow PSOrderWindow PSSetAutofill PSSetSendExposed PSSetWindowLevel checkOrderingValdity }	{ NULL PSInvalidID PWindowDevice windowBase }
ID2PrevWd		product/windowops.c	/^private PWindowDevice ID2PrevWd(int wID)/ ;" function 11 { TermWindowDevice }	{ NULL PSInvalidID PWindowDevice windowBase }
ID2Wd		product/windowops.c	/^public PWindowDevice ID2Wd(int wID)/ ;" function 9 { PSCurrentEventProcedures PSCurrentMouse PSCurrentOwner PSCurrentWindowDepth PSCurrentWindowDepthLimit PSCurrentWindowDict PSCurrentWindowLevel PSFillWindow PSGetWindowEventMask PSMoveWindow PSOrderWindow PSPlaceWindow PSSetEventProcedures PSSetOwner PSSetWindowDepthLimit PSSetWindowDict PSSetWindowEventMask PSSetWindowLevel PSSetWindowType PSTermWindow PostEvent SendEvent SetWindow }	{ NULL PSInvalidID PWindowDevice windowBase }
IDENT		include/environment.h	/^#define IDENT(x) x/ ;" macro 1 { CAT }	{ }
IDTfmCd		fp/mtxvec.c	/^public Cd IDTfmCd(c, m)  Cd c; PMtx m;/ ;" function 6 { }	{ Cd IDTfmPCd }
IDTfmP		graphics/graphics.c	/^public procedure IDTfmP(c, rc)  Cd c; PCd rc;/ ;" function 2 { CompSlowShow NormalizeStrokeWidth PSIDTfm PSSetCharWidth PSStrWidth SetCch SetDeltaAndTlate SlowShow }	{ IDTfmPCd gs }
IDTfmPCd		fp/mtxvec.c	/^public procedure IDTfmPCd(c, m, rc)  Cd c; PMtx m;/ ;" function 7 { ArcInternal GetXDistYDist IDTfmCd IDTfmP PSIDTfm }	{ Mtx MtxInvert TfmPCd fpZero }
IDToPSContext		postscript/contextimpl.c	/^public PSContext IDToPSContext (ID) ContextID ID; / ;" function 10 { PSCurrentWaitCursorEnabled PSDetach PSJoin PSSetActiveApp PSSetOwner PSSetWaitCursorEnabled SendEvent SetCurrentContext }	{ NIL PSContext ctxTab nextID timestamp }
IDToPSSpace		postscript/contextimpl.c	/^public PSSpace IDToPSSpace (S) SpaceID S; {/ ;" function 9 { }	{ NIL PSSpace ctxTab nextID s timestamp }
IEEEFLOAT		include/environment.h	/^#define IEEEFLOAT 0/ ;" macro 1 { LanguageDataHandler }	{ }
IEEEHighToNative		include/fp.h	/^#define IEEEHighToNative(from, to) CopySwap4((from/ ;" macro 1 { HIRR ReadBinObjSeq ReadNumAry StmToken }	{ CopySwap4 }
IEEELowToNative		include/fp.h	/^#define IEEELowToNative(from, to) *(to) = ((FloatR/ ;" macro 1 { LIRR ReadBinObjSeq ReadNumAry StmToken }	{ FloatRep }
IEEESOFT		include/environment.h	/^#define IEEESOFT 0/ ;" macro 1 { }	{ }
IFGTADDesc		fonts/fontbuild.c	/^#define IFGTADDesc 15/ ;" macro 1 { CCRunStd }	{ }
ILoadPNE		language/dict.h	/^#define ILoadPNE(pne, pVal)\\/ ;" macro 1 { PSLoad }	{ LoadName VMGetValue timestamp true }
IMAGEPRIV_H		devpattern/imagepriv.h	/^#define IMAGEPRIV_H/ ;" macro 1 { }	{ }
IMAGE_H		graphics/image.h	/^#define	IMAGE_H/ ;" macro 1 { }	{ }
IMG_A_SAMPLES		include/devicetypes.h	/^#define IMG_A_SAMPLES 1/ ;" macro 1 { }	{ }
IMG_BLACK_SAMPLES		include/devicetypes.h	/^#define IMG_BLACK_SAMPLES 3/ ;" macro 1 { }	{ }
IMG_BLUE_SAMPLES		include/devicetypes.h	/^#define IMG_BLUE_SAMPLES 2/ ;" macro 1 { }	{ }
IMG_B_SAMPLES		include/devicetypes.h	/^#define IMG_B_SAMPLES 2/ ;" macro 1 { }	{ }
IMG_CYAN_SAMPLES		include/devicetypes.h	/^#define IMG_CYAN_SAMPLES 0/ ;" macro 1 { }	{ }
IMG_GRAY_SAMPLES		include/devicetypes.h	/^#define IMG_GRAY_SAMPLES 0/ ;" macro 1 { }	{ }
IMG_GREEN_SAMPLES		include/devicetypes.h	/^#define IMG_GREEN_SAMPLES 1/ ;" macro 1 { }	{ }
IMG_INTERLEAVED_SAMPLES		include/devicetypes.h	/^#define IMG_INTERLEAVED_SAMPLES 0/ ;" macro 1 { }	{ }
IMG_L_SAMPLES		include/devicetypes.h	/^#define IMG_L_SAMPLES 0/ ;" macro 1 { }	{ }
IMG_MAGENTA_SAMPLES		include/devicetypes.h	/^#define IMG_MAGENTA_SAMPLES 1/ ;" macro 1 { }	{ }
IMG_RED_SAMPLES		include/devicetypes.h	/^#define IMG_RED_SAMPLES 0/ ;" macro 1 { }	{ }
IMG_YELLOW_SAMPLES		include/devicetypes.h	/^#define IMG_YELLOW_SAMPLES 2/ ;" macro 1 { }	{ }
IM_MAXFORMAT		include/imagemessage.h	/^#define IM_MAXFORMAT 1		\/* Maximum defined format / ;" macro 1 { ReceiveNextImage }	{ }
IM_MINFORMAT		include/imagemessage.h	/^#define IM_MINFORMAT 1		\/* Minimum defined format / ;" macro 1 { ReceiveNextImage }	{ }
IM_NUMFLOATPARAMS		include/imagemessage.h	/^#define IM_NUMFLOATPARAMS 4	\/* Number of float val/ ;" macro 1 { ReceiveNextImage }	{ }
IM_NUMINTPARAMS		include/imagemessage.h	/^#define IM_NUMINTPARAMS 9	\/* Number of integer val/ ;" macro 1 { ReceiveNextImage }	{ }
INDXMASK		device/qintersect.c	/^#define INDXMASK ((1 << INDXSHFT)-1)/ ;" macro 1 { BuildRunIndex BytesForRunIndex RunArrayRow }	{ INDXSHFT }
INDXSHFT		device/qintersect.c	/^#define INDXSHFT (5)/ ;" macro 1 { BytesForRunIndex INDXMASK }	{ }
INDXesc		fonts/fontbuild.c	/^#define INDXesc 29/ ;" macro 1 { CCRunStd }	{ }
INF		bintree/bintreetypes.h	/^#define INF 16000	\/* Extent of workspace bounds *\// ;" macro 1 { EXBuildExtents MatchMonitors SanityCheck }	{ }
INICSCAN_B1LEN		graphics/cscan.c	/^#define INICSCAN_B1LEN 1*1024/ ;" macro 1 { IniCScan }	{ }
INICSCAN_B2LEN		graphics/cscan.c	/^#define INICSCAN_B2LEN 1*1024/ ;" macro 1 { IniCScan }	{ }
INIT		include/package_specs.h	/^#define INIT		"init.h"/ ;" macro 1 { }	{ }
INITSIZE		language/dict.h	/^#define INITSIZE 20 	\/* initial dictionary size *\// ;" macro 1 { DictP }	{ }
INIT_RAND		graphics/graypriv.c	/^#define	INIT_RAND(x)	randx = 1/ ;" macro 1 { CalcThresholds }	{ randx }
INLINE_RECYCLER		include/recycler.h	/^#define INLINE_RECYCLER 1/ ;" macro 1 { TRACE_RECYCLER }	{ }
INSIDE		include/windowdevice.h	/^#define INSIDE 1/ ;" macro 1 { RecalcMouseRect }	{ }
INSTANCING		include/bintree.h	/^#define INSTANCING(ext) ((*((NextGSExt **)ext))->i/ ;" macro 1 { LCompositeFrom LInitPage LMark PSSetInstance }	{ NextGSExt }
INTEGERTYPE		language/opcodes.h	/^#define INTEGERTYPE		6/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
INTERNALKEY		fonts/fontbuild.h	/^#define INTERNALKEY 1183615869/ ;" macro 1 { PSIntDict }	{ }
INVALIDTYPE		language/opcodes.h	/^#define INVALIDTYPE		0/ ;" macro 1 { }	{ }
IO		include/package_specs.h	/^#define IO		"io.h"/ ;" macro 1 { }	{ }
IOStms		include/io.h	/^typedef struct _t_IOStms {	\/* return value from St/ ;" typedef 3 { }	{ }
IO_H		include/io.h	/^#define	IO_H/ ;" macro 1 { }	{ }
IPCAvail		product/ipcstream.c	/^private int IPCAvail(Stm stm)/ ;" function 4 { }	{ }
IPCClose		product/ipcstream.c	/^private int IPCClose(Stm stm)/ ;" function 18 { }	{ ReleaseMsg data stmData stmMsg stmPort stmRef stmWCParams }
IPCData		product/ipcstream.h	/^typedef struct _IPCData {/ ;" typedef 21 { IPCInitializeStm stmData }	{ }
IPCFillBuf		product/ipcstream.c	/^private int IPCFillBuf(Stm stm)/ ;" function 138 { }	{ ActiveApp DATA_ACK_MESSAGE_ID DATA_EV_ACK_ID DATA_EV_ACK_MSG_ID DATA_EV_ID EOF EOF_MESSAGE_ID FIRST_MESSAGE_ID IPCbytesIn LAST_MESSAGE_ID NEXTIMAGE_ID NULL ReceiveNextImage ReleaseMsg STREAM_DATA_MESSAGE_ID STREAM_DATA_WITH_ACK_ID YieldReason sendAck stmCount stmMsg stmNType stmPort stmSType stmType stmWCParams verifyMachType }
IPCFlush		product/ipcstream.c	/^private int IPCFlush(Stm stm)/ ;" function 10 { IPCFlushBuf IPCPutEOF IPCWrite }	{ IPCFlushOutput currentSchedulerContext }
IPCFlushBuf		product/ipcstream.c	/^private int IPCFlushBuf(int ch, Stm stm)/ ;" function 10 { }	{ EOF IPCFlush }
IPCFlushOutput		product/ipcstream.c	/^public int IPCFlushOutput(Stm stm, boolean yieldPe/ ;" function 43 { IPCFlush IPCNotifyReceived }	{ MESSAGEDATASIZE notifyInProgress stmMsg stmType }
IPCGetWCParams		product/ipcstream.c	/^public WCParams *IPCGetWCParams(Stm stm)/ ;" function 4 { PSCurrentWaitCursorEnabled PSSetActiveApp PSSetLastEventSentTime PSSetWaitCursorEnabled PSStartWaitCursorTimer SendEvent }	{ NULL ipcStmProcs stmWCParams }
IPCInitializeStm		product/ipcstream.c	/^public int IPCInitializeStm(Stm stm, port_t remote/ ;" function 39 { CreateIPCStreams }	{ IPCData MESSAGEDATASIZE MESSAGETOTALSIZE NULL PSLimitCheck STREAM_DATA_MESSAGE_ID WCParams notifyInProgress os_malloc stmData stmMsg stmPort stmRef stmRestricted stmType stmWCParams }
IPCNotifyReceived		product/ipcstream.c	/^public int IPCNotifyReceived(Stm stm)/ ;" function 11 { NSNotifyPS }	{ IPCFlushOutput false ipcStmProcs notifyInProgress }
IPCPutEOF		product/ipcstream.c	/^private int IPCPutEOF(Stm stm)/ ;" function 10 { }	{ EOF EOF_MESSAGE_ID IPCFlush stmMsg }
IPCSCHEDULER_H		product/ipcscheduler.h	/^#define IPCSCHEDULER_H/ ;" macro 1 { }	{ }
IPCWrite		product/ipcstream.c	/^public long int IPCWrite(char *ptr, int itemSize, / ;" function 49 { }	{ IPCFlush IPCbytesOut MESSAGEDATASIZE STREAM_DATA_MESSAGE_ID currentSchedulerContext notifyInProgress stmMsg }
IPCbytesIn		product/ipcstream.c	/^unsigned int IPCbytesIn = 0;  \/* Total number of b/ ;" global 1 { IPCFillBuf PSCurrentByteCount PSResetByteCount }	{ }
IPCbytesOut		product/ipcstream.c	/^unsigned int IPCbytesOut = 0; \/* Total number of b/ ;" global 1 { IPCWrite PSCurrentByteCount PSResetByteCount }	{ }
IPop		include/language.h	/^#define IPop(stack, pObj)		\\/ ;" macro 1 { KACharDef KADict KAKnown KAPutDef KARdSubrsData PSNoAccess PSRCheck PSReadOnly PSSCheck PSType PSWCheck PSXCheck PSXctOnly Pkdary StackPopP }	{ IPopSimple RecyclerPop }
IPopDiscard		include/language.h	/^#define IPopDiscard(stack)		\\/ ;" macro 1 { CRepeat KAArraySubrs KACharDef KARdSubrsData PSFontRun }	{ Assert RecyclerPop }
IPopNotEmpty		include/language.h	/^#define IPopNotEmpty(stack, pObj)	\\/ ;" macro 1 { AStore }	{ Assert RecyclerPop }
IPopOp		include/language.h	/^#define IPopOp(pObj)			\\/ ;" macro 1 { PSCvI PSCvR PSGet PSGetInterval PSLength PSPut PopPArray PopPDict PopPStream PopPString }	{ IPopSimple IPushSimple RecyclerPop opStk refStk }
IPopSimple		include/language.h	/^#define	IPopSimple(stack, pObj)		\\/ ;" macro 1 { AryToMrk DPopP EPopInteger EPopPReal GetProcSource IPop IPopOp PSPopBoolean PSPopInteger PSPopPReal PopCardinal }	{ Underflow }
IPush		include/language.h	/^#define IPush(stack, obj)		\\/ ;" macro 1 { CLoop CRepeat ExecPushP KADict KAEndCSDict KAKnown KAPutDef PSCacheStatistics PSFontRun PSGet PSGetInterval PSReadOnly StackPushP StmToken }	{ IPushSimple RecyclerPush }
IPushSimple		include/language.h	/^#define IPushSimple(stack, obj)		\\/ ;" macro 1 { DPushP EPushInteger EPushPReal IPopOp IPush PSPushBoolean PSPushInteger PSPushPReal PopP PushCardinal }	{ Overflow }
ISCONVERTCAUSE		bintree/bintreetypes.h	/^#define ISCONVERTCAUSE(c) (c & 0x80000000)/ ;" macro 1 { BPObscureInside BPRevealInside LRevealInside }	{ }
ISO		fonts/glbclr.c	/^#define ISO 2/ ;" macro 1 { FixOnePath }	{ }
ISOADOBE_CHARSET_SIZE		fonts/fontrun.h	/^#define ISOADOBE_CHARSET_SIZE 229/ ;" macro 1 { KAEndCSDict }	{ }
ITEMSPERCHUNK		postscript/customops.c	/^#define ITEMSPERCHUNK 10/ ;" macro 1 { PSPopManagedObject ValidatePObj myGetRoots myTerminateSpace }	{ }
ITfmCd		fp/mtxvec.c	/^public Cd ITfmCd(c, m)  Cd c; PMtx m;/ ;" function 6 { PSBaseToCurrent PSScreenToCurrent }	{ Cd ITfmPCd }
ITfmP		graphics/graphics.c	/^public procedure ITfmP(c, rc) Cd c; PCd rc;/ ;" function 2 { CCRunStd DoArcTo GetPathBBoxUserCds PSArcC PSCrPoint PSITfm PathEndChar QUsrPthArcTo UsrPthArcTo }	{ ITfmPCd gs }
ITfmPCd		fp/mtxvec.c	/^public procedure ITfmPCd(c, m, rc)  Cd c; PMtx m; / ;" function 5 { ITfmCd ITfmP PSITfm }	{ Mtx MtxInvert TfmPCd }
ITransIfNeed		graphics/stroke.c	/^private procedure ITransIfNeed(c, pc) Cd c;  PCd p/ ;" function 2 { AddCirclePath FillJoin HalfRoundCap StrkCap StrkLnTo StrkStrt }	{ TfmPCd curIMtx needTfm }
IdentityMtx		fp/mtxvec.c	/^public procedure IdentityMtx(m)  PMtx m;/ ;" function 2 { FPInit NullDefaultMtx PSIdentMtx PSMtx }	{ d fpOne fpZero }
Im110		devpattern/im110.c	/^public procedure Im110(items, t, run, args)/ ;" function 827 { ImageTrapsOrRun }	{ Begin CantHappen Cd DevFixedPoint DevImage DevImageSource DevMarkInfo DevShort DevTrap End FTrunc Fix Fixed ImSourceType IntPart LowMask NIL NULL ONE PCard8 PSCANTYPE RAISE SCANUNIT TfmPCd boolean d data ecLimitCheck false integer pflttofix register true twoBitSample until }
ImIdent		product/imident.c	/^public procedure ImIdent(int items, DevTrap *t, De/ ;" function 158 { ImageTrapsOrRun }	{ CantHappen DebugAssert DevImage DevImageSource DevMarkInfo DevShort DevTrap Fix IntPart Mtx NULL SCANMASK SCANSHIFT SCANUNIT boolean d data fmImageProcs framebase framebytewidth framelog2BD integer leftBitArray real rightBitArray s true uchar uint }
ImIdent32		product/imident.c	/^public procedure ImIdent32(int items, DevTrap *t, / ;" function 121 { ImageTrapsOrRun }	{ CantHappen DebugAssert DevImage DevImageSource DevMarkInfo DevPoint DevShort DevTrap Fix IntPart MP12Convert32to2 Mtx NULL boolean d data fmImageProcs framebase framebytewidth integer real true uint }
ImS12D12NoTfr		devpattern/ims12d12notfr.c	/^public procedure ImS12D12NoTfr(items, t, run, args/ ;" function 421 { ImageTrapsOrRun }	{ Begin CantHappen Cd DevFixedPoint DevImage DevImageSource DevMarkInfo DevPoint DevShort DevTrap End Fix Fixed GetPixBuffers IntPart LSHIFTEQ LowMask NIL NULL ONE PSCANTYPE RAISE SCANMASK SCANSHIFT SCANTYPE SCANUNIT SHIFTPIXEL TfmPCd boolean d data ecLimitCheck false integer leftBitArray pflttofix pixVals register rightBitArray true uchar until }
ImS1XD11		devpattern/ims1xd11.c	/^public procedure ImS1XD11(items, t, run, args)/ ;" function 807 { ImageTrapsOrRun }	{ BPP Begin CantHappen Cd DevFixedPoint DevImage DevMarkInfo DevPoint DevScreen DevShort DevTrap End Fix Fixed GetPixBuffers IntPart LOG2BPP LSHIFTEQ LowMask NIL NULL ONE PCard8 PSCANTYPE RAISE SCANTYPE SCANUNIT SMASK SSHIFT TfmPCd ValidateTA boolean d data ecLimitCheck false integer leftBitArray pflttofix register rightBitArray swapPixOnes true until }
ImSXXD11		devpattern/imsxxd11.c	/^public procedure ImSXXD11(items, t, run, args)/ ;" function 631 { ImageTrapsOrRun }	{ Begin CantHappen Cd DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DevFixedPoint DevImage DevImageSource DevMarkInfo DevPoint DevScreen DevShort DevTrap End FRound FTrunc Fix Fixed ImSourceType IntPart LSHIFTEQ LowMask NIL NULL ONE PSCANTYPE RAISE SCANMASK SCANSHIFT SCANTYPE SCANUNIT TfmPCd ValidateTA Wb Wg Wr boolean d data ecLimitCheck false initedReals integer leftBitArray pflttofix r real register rightBitArray swapPixOnes true twoBitSample until }
ImSourceType		devpattern/im110.c	/^typedef enum {/ ;" typedef 7 { Im110 ImSXXD11 }	{ }
ImStretch		product/imstretch.c	/^public procedure ImStretch(int items, DevTrap *t, / ;" function 315 { ImageTrapsOrRun }	{ CantHappen DebugAssert DevBounds DevImage DevImageSource DevMarkInfo DevShort Fix Fixed HALF IntPart NULL ONE PMtx SCANMASK SCANSHIFT SCANUNIT boolean d data fmImageProcs framebase framebytewidth framelog2BD free leftBitArray pflttofix real rightBitArray s true uchar uint word }
ImageArgs		include/devimage.h	/^typedef struct  _t_ImageArgs {/ ;" typedef 10 { BM34InitClassVars BM38InitClassVars MP12InitClassVars Mark NoClipMark }	{ }
ImageDict		graphics/image.c	/^private procedure ImageDict() {/ ;" function 61 { PSImage }	{ CIELAB_COLOR_SPACE Color DEVCMYK_COLOR_SPACE DEVRGB_COLOR_SPACE DevImSampleDecode DictObj DictTestP GetInt ImageInternal Mtx Object PAryToMtx PRealValue PopP RangeCheck TypeCheck VMCarCdr arrayObj boolObj boolean d false graphicsNames gs integer max nm_BitsPerSample nm_Height nm_ImageType nm_Width true }
ImageInternal		graphics/image.c	/^public procedure ImageInternal(/ ;" function 265 { BMRun DoImage ImageDict }	{ ActivateTfr BBoxRec Cd Color DURING DevImage DevImageSource DevPrim DevTrap DoImageMark END_HANDLER EPopP FREE GetProcSource GetStringSource HANDLER LimitCheck MaxNEW Mtx MtxCnct MtxInvert NIMAGETRAPS NULL Object PROC_SOURCE PVoidProc Path PixInfo ProcSampleProc QuadPath RERAISE RangeCheck ReadSlices ReduceQuadPath STREAM_SOURCE STRING_SOURCE TableSampleProc TlatBBox TypeCheck arrayObj boolean d false gs imageID integer maxXChunk maxYChunk pkdaryObj real stmObj strObj true xChunkOffset xaOffset yChunkOffset }
ImageMessage		include/imagemessage.h	/^typedef struct _ImageMessage {/ ;" typedef 31 { FindImageMessage MarkNextImage ReceiveNextImage }	{ }
ImageMessageCell		product/windowimage.c	/^typedef struct _ImageMessageCell {/ ;" typedef 5 { FindImageMessage ReceiveNextImage }	{ }
ImageProcsRec		include/devimage.h	/^typedef struct _t_ImageProcsRec {/ ;" typedef 27 { IniFmDevImpl }	{ }
ImageRun		device/markimage.c	/^public procedure ImageRun(run, args)/ ;" function 4 { IniFmDevImpl Mark }	{ ImageTrapsOrRun NULL }
ImageTraps		device/markimage.c	/^public procedure ImageTraps(t, nTraps, args)/ ;" function 4 { IniFmDevImpl Mark NoClipMark }	{ ImageTrapsOrRun NULL }
ImageTrapsOrRun		device/markimage.c	/^private procedure ImageTrapsOrRun(items, t, run, a/ ;" function 133 { ImageRun ImageTraps }	{ CantHappen DevImage DevImageSource Im110 ImIdent ImIdent32 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch Mtx PSRangeCheck breakeven d procedure register }
InFill		graphics/hitdetect.c	/^public boolean InFill(evenOdd) boolean evenOdd; {/ ;" function 28 { PSInEOFill PSInFill }	{ Cd DevPrim DisposeDevPrim GetAperatureDP IntersectDP NULL Object PointInDevPrim PopPCd TopP UserPathContext XAReducePath arrayObj boolean false gs pkdaryObj }
InRange		vm/abmimpl.c	/^#define InRange(o) AddressInRecyclerRange(recycler/ ;" macro 1 { CouldRecycle GC_MoveRecycleRange }	{ AddressInRecyclerRange RecyclerAddress }
InSegment		vm/gcinternal.h	/^#define	InSegment(ref, seg)				\\/ ;" macro 1 { GCInternal_GetSegHnd GCInternal_LookupSegment }	{ CAST RefAny }
InStroke		graphics/hitdetect.c	/^public boolean InStroke() {/ ;" function 36 { PSInStroke }	{ Cd DevPrim DisposeDevPrim GetAperatureDP IntersectDP NULL Object PointInDevPrim PopPCd StrkPthProc TopP UserPathContext XAReducePath XAStrkPthProc arrayObj boolean false gs pkdaryObj }
InUFill		graphics/hitdetect.c	/^private boolean InUFill(evenOdd) boolean evenOdd; / ;" function 42 { PSInUEOFill PSInUFill }	{ Cd DevPrim DisposeDevPrim DoRdcPth FillUserPathEnumerate GetAperatureDP GetUsrPthAry IntersectDP NULL Object PointInDevPrim PopPCd QEnumOk QFillUserPathEnumerate TopP UCGetDevPrim UserPathContext UsrPthBBox UsrPthQRdcOk XADoRdcPth XARdc arrayObj boolean false pkdaryObj true }
InVMSection		vm/vm_segment.c	/^public boolean InVMSection (vmStructure, o)/ ;" function 9 { Is_Shared }	{ FindVMSegment NIL }
IncrementTimeUsed		language/exec.c	/^public procedure IncrementTimeUsed (units)/ ;" function 8 { }	{ Inline_IncrementTimeUsed }
IndMArray		fonts/midcache.c	/^public PCard16 IndMArray, IndSArray;/ ;" global 1 { InitFontCache InitSortMID SortMIDAges }	{ }
IndSArray		fonts/midcache.c	/^public PCard16 IndMArray, IndSArray;/ ;" global 1 { InitFontCache InitSortMID SortMIDAges }	{ }
IndependentColors		devpattern/patternimpl.c	/^public boolean IndependentColors () {return(false)/ ;" function 1 { DevIndependentColors }	{ false }
IniCScan		graphics/cscan.c	/^public procedure IniCScan(b1, b2, b3, b4)/ ;" function 6 { BuildChar IniReducer }	{ memoryBuffer1 memoryBuffer2 }
IniClrSpace		graphics/colorops1.c	/^public procedure IniClrSpace(reason)  InitReason r/ ;" function 18 { GraphicsInit }	{ ColorRec Globals GlobalsRec Pool clrStorage colorWb colorWg colorWr fpOne fpp3 fpp59 globals integer os_newpool os_sureCalloc }
IniCoordinates		product/coordinates.c	/^public procedure IniCoordinates(int reason)/ ;" function 4 { NextCustomProc }	{ PSRgstOps cmdCoordinates }
IniDeepOnes		devpattern/patternimpl.c	/^private procedure IniDeepOnes() {/ ;" function 12 { InitPatternImpl }	{ PSCANTYPE SetupDeepOnes deepOnes deepPixOneVals deepPixOnes integer swapPixOnes }
IniDevCommon		device/devcommon.c	/^public procedure IniDevCommon() {/ ;" function 5 { PSDeviceInit }	{ colorWb colorWg colorWr fp255 fpp3 fpp59 }
IniFmDevImpl		device/framedev.c	/^public procedure IniFmDevImpl() {/ ;" function 43 { PSDeviceInit }	{ Begin BlackMasksMark BlackRunMark ClippedMasksMark ConstantMasksMark ConstantRunMark ConstantTrapsMark DevNoOp DevProcs End FmDeviceInfo FmGetReadWriteScanline FmGetWriteScanline FmGoAway FmMark FmPreBuiltChar FmSetupImageArgs FmSetupMark FmShowPage FmSleep FmWakeup GrayMasksMark GrayRunMark GrayTrapsMark ImageProcsRec ImageRun ImageTraps Mark MarkProcsRec MasksMark PImageProcs PIntProc PMarkProcs PreBuiltChar WhiteMasksMark WhiteRunMark fmImageProcs fmMarkProcs fmProcs genProcs os_sureCalloc os_sureMalloc }
IniGStates		graphics/gstates.c	/^public procedure IniGStates(reason)  InitReason re/ ;" function 21 { GraphicsInit }	{ GC_RgstGStateEnumerator GC_RgstGetRootsProc GRestoreProc GSFinalize GSTATE_GMAX GSaveProc GStack GState GStateEnumerator Globals GlobalsRec NIL NextGSExt PushGrfxRoots RefAny RgstRstrProc RgstSaveProc VMRgstFinalize frset_overwriteCopy frset_reclaim globals gsStorage gstackStorage neStorage objGState os_newpool os_sureCalloc }
IniGenDevImpl		device/genericdev.c	/^public procedure IniGenDevImpl()/ ;" function 31 { PSDeviceInit }	{ DevAlwaysFalse DevNoOp DevProcs FmMakeMaskDevice GenConvertColor GenDefaultBounds GenDefaultHalftone GenDefaultMtx GenGoAway GenInitPage GenReadRaster GenWakeup GenWinToDevTranslation MakeNullDevice Mark NULL PDevGamutTransferProc PDevRenderingProc PIntProc PreBuiltChar genProcs os_sureMalloc }
IniGlbClrBuffs		fonts/fontbuild.c	/^private procedure IniGlbClrBuffs()/ ;" function 1 { BuildChar CCRunStd }	{ }
IniGraphics		graphics/graphics.c	/^public procedure IniGraphics(reason)  InitReason r/ ;" function 19 { GraphicsInit }	{ DevMinimizeTrapPrecision NULL NUM_PACKAGE_NAMES PACKAGE_INDEX RgstPackageNames chunkqp graphicsNames integer minTrapPrecision }
IniMaskDevImpl		device/framemaskdev.c	/^public procedure IniMaskDevImpl()/ ;" function 63 { PSDeviceInit }	{ DevAlwaysFalse DevProcs LEFT2BITS LEFT4BITS LEFT_BIT MarkProcsRec MaskDeviceInfo MaskGoAway MaskInitPage MaskPattern MaskSetupImageArgs MaskSetupMark PCard16 PIntProc PMarkProcs PreBuiltChar RIGHT2BITS RIGHT4BITS RSHIFT RSHIFTEQ SCANTYPE fmMarkProcs fmProcs gMaskPattern maskMarkProcs maskProcs os_sureMalloc source2bits source4bits source8bits true }
IniMpdDevImpl		product/machportdevice.c	/^public procedure IniMpdDevImpl() {/ ;" function 16 { PSDeviceInit }	{ DevMarkInfo DevPrim DevProcs Mark PDevice fmProcs mpdGoAway mpdInitPage mpdProcs mpdShowPage mpdSleep mpdWakeup mpdWinToDevXlation os_malloc }
IniNullDevImpl		device/nulldev.c	/^public procedure IniNullDevImpl() {/ ;" function 36 { PSDeviceInit }	{ DevAlwaysFalse DevNoOp DevPrivate DevProcs MakeNullDevice Mark NULL NullDefaultBounds NullDefaultHalftone NullDefaultMtx NullGoAway NullMakeMaskDevice NullReadRaster NullWakeup NullWinToDevTranslation PDevColorProc PDevGamutTransferProc PDevRenderingProc PIntProc PreBuiltChar integer nullDevHalftone nullDevScreen nullProcs nullThresholds os_sureMalloc }
IniNullDevice		graphics/nulldevice.c	/^public procedure IniNullDevice(reason)  InitReason/ ;" function 39 { GraphicsInit }	{ DevPrivate DevProcs Device MakeNullDevice NIL NoOp NoOpBool NullDefaultBounds NullDefaultMtx NullMakeMaskDevice NullMakeNullDevice NullWinToDevTranslation PDevColorProc PDevGamutTransferProc PDevHalftoneProc PDevRenderingProc PDevice PIntProc PreBuiltChar nullProcs os_sureCalloc os_sureMalloc psNulDev }
IniPathPriv		graphics/pathpriv.c	/^public procedure IniPathPriv(reason)  InitReason r/ ;" function 23 { GraphicsInit }	{ DEVELOP FracOne FracSqrt2 Globals GlobalsRec PSDPathForAll PSOffsetFill RgstExplicit UFrac false fracsqrt globals os_sureCalloc psTraceOffsetFill traceOffsetFill vSTAGE }
IniPreBuiltChars		device/nextprebuilt.c	/^void IniPreBuiltChars()/ ;" function 5 { PSDeviceInit }	{ CACHESIZE NULL PVoidProc disposePrebuiltFont fontDict nameDict newHostDict }
IniQReducer		graphics/qreducer.c	/^public procedure IniQReducer(b1, b2, b3) PGrowable/ ;" function 8 { IniReducer }	{ Edge EdgeRec Int16 ScanList ScanRec buffData edgeArray endBuffData endEdgeArray endScanArray scanArray }
IniReducer		graphics/reducer.c	/^public procedure IniReducer(reason)  InitReason re/ ;" function 64 { GraphicsInit }	{ IniCScan IniQReducer InitReducer LENBUFF0 LENBUFF1 LENBUFF2 LENBUFF3 Line NEW PLine PPoint PPointQ PRegion Point PointQ Region RgstExplicit debugOn endLine endPntQ endPoint false gbuf integer lines maxLines maxPntQ maxPoints maxRegions pointQs points psCompRat psDiv32 psFPMult psNewPoint psRdcClose psReduce psReduceAndClip psReducerDebug psResetReducer psSetClip psSetFig regions rgsOut }
IniStroke		graphics/stroke.c	/^public procedure IniStroke(reason)  InitReason rea/ ;" function 32 { GraphicsInit }	{ CircleCache CircleRec DevMask DevTrap FracOne FracSqrt2 Globals GlobalsRec MAXStrokeThrow NULL QdCorner circ_maxsize circ_uhalfwidth circleMasks endCircleMasks fpOne fpZero fracsqrt integer os_malloc os_sureCalloc prevRadiusForMaxBevelChord qc sizeCircleMasks strkFoo strokeGlobals }
IniTransfer		graphics/transferimpl.c	/^public procedure IniTransfer(reason)  InitReason r/ ;" function 20 { GraphicsInit }	{ DEFAULTTABLELIMIT Globals GlobalsRec NULL Pool TfrFcnRec integer nTfrTables os_newpool os_sureCalloc tfrFcnFirst tfrFcnLast tfrFcnStorage tfrGlobals tfrTableLimit }
IniUCache		graphics/ucache.c	/^public procedure IniUCache(reason)  InitReason rea/ ;" function 36 { GraphicsInit }	{ BMAX CIRCMASKMAX CircMask CircMaskTable DEVELOP Globals GlobalsRec NULL PMAX PUCache RMAX RdcRec RgstMCmds SIZE_UPATH_CACHE StrkRec UCSZ UCache UCacheRec bmax bsize debugCmdDPSUCache globals integer lruNewest lruOldest os_newpool os_sureCalloc os_sureMalloc pmax ps_getsize pthhits pthprobes rdcStorage rdchits rdcprobes rmax rsize strkStorage upcStorage vSTAGE }
IniViewClip		graphics/viewclip.c	/^public procedure IniViewClip(reason)  InitReason r/ ;" function 17 { GraphicsInit }	{ Globals GlobalsRec RgstRstrProc RgstSaveProc VCRestoreProc VCSaveProc ViewClip ViewClipCacheEntry globals os_newpool os_sureCalloc vcCacheStorage vcStorage }
IniWdDevImpl		product/windowdevice.c	/^public procedure IniWdDevImpl()/ ;" function 21 { PSDeviceInit }	{ DevAlwaysTrue DevNoOp DevProcs LInitPage LMark Mark MarkProcsRec PIntProc PMarkProcs TermWindowDevice WdConvertColor WdDefaultBounds WdDefaultMtx WdDeviceInfo boolean fmMarkProcs fmProcs os_malloc wdMarkProcs wdProcs }
IniWindowGraphics		product/windowgraphics.c	/^public procedure IniWindowGraphics(int reason)/ ;" function 5 { NextCustomProc }	{ PSRgstOps cmdWindowGraphics }
IniWindowImage		product/windowimage.c	/^public procedure IniWindowImage(int reason)/ ;" function 5 { NextCustomProc }	{ PSRgstOps cmdWindowImage }
IniWindowOps		product/windowops.c	/^public procedure IniWindowOps(int reason)/ ;" function 15 { NextCustomProc }	{ BASEPSWINDOWID NRect NULL PSRgstOps WindowDevice cmdWindowOps lastWID nrStorage os_newpool wdPool windowBase }
InitBOSTypeMap		language/binaryobject.c	/^private procedure InitBOSTypeMap(binObjType, pobj)/ ;" function 11 { BinObjInit }	{ DebugAssert Lobj UObject Xobj bo_max mapLType mapXType }
InitCCCache		devpattern/colorpattern.c	/^private procedure InitCCCache() {/ ;" function 7 { ComposeColors }	{ PCachedColor PCard8 ccEnd ccHead ccLast grayPatternBase maxPatternSize }
InitChunk		graphics/graphics.c	/^private procedure InitChunk()/ ;" function 21 { SetXABounds }	{ DURING DevPrim END_HANDLER HANDLER NULL QuadPath RERAISE chunkBBox chunkqp os_freeelement os_newelement qpStorage register xChunkOffset yChunkOffset }
InitClip		graphics/graphics.c	/^public procedure InitClip() { InitClipPath(&gs->cl/ ;" function 1 { InitGraphics NewDevice }	{ InitClipPath gs }
InitClipPath		graphics/graphics.c	/^public procedure InitClipPath(path) register PPath/ ;" function 29 { InitClip PSViewClipPath }	{ BitField DURING DevLBounds END_HANDLER FrPth HANDLER NULL QuadPath RERAISE ReducedPath SetXABounds XAReducePath false gs os_freeelement os_newelement qpStorage register rpStorage secret true }
InitCoroutine		coroutine/corouxfer.c	/^public Coroutine InitCoroutine(stackSize, extraSta/ ;" function 10 { SchedulerInit }	{ Assert Coroutine CoroutineRec NIL coroutineCheckFlag coroutineExtraStack currentCoroutine footprint os_sureCalloc rootCoroutine }
InitDevPrim		device/devprim.c	/^public DevPrim *InitDevPrim(self, next) DevPrim *s/ ;" function 10 { AddDevPrimValue AddRunMark ClipDevPrim DoImageMark DoRdcPth DoRdcStroke EnterCircle FindCurrentViewInCache MarkInit MarkStrokeMasks RdcStrkDumpMasks ReducePathClipInt ShowMask XARdc XAReducePath }	{ EmptyDevBounds NULL }
InitEventTimes		product/timelog.h	/^#define InitEventTimes()/ ;" macro 1 { }	{ }
InitFID		fonts/fontcache.c	/^private procedure InitFID() {/ ;" function 11 { FontCacheInit }	{ DictObj EnumerateDict FD FindMaxFID GetPrivFontDirectory level_2 nextFID rootShared vLANGUAGE_LEVEL }
InitFontCache		fonts/fontdisk.c	/^private procedure InitFontCache(mtSize, ctSize) in/ ;" function 48 { PSInitFontCache StartCache }	{ CI CIEnd CIFreeHead CIItem CINULL CISize CN Card16 Card32 CurrentMIDAge ForAllNames IndMArray IndSArray InitSortMID MA MAX MAXMSize MAXMTSize MAXMasks MID MIDCount MIDNULL MIN MM MMEnd MMSize MS MSEnd MSSize MT MTEnd MTFreeHead MTItem MTSize Methuselah NEW NULL Object PCIItem PCard16 PCard32 PMTItem PNameEntry PeterPan allocmem cchInited fcData forallMM forallMS freemem integer register true }
InitFontFlat		graphics/graphics.c	/^public procedure InitFontFlat(proc) PVoidProc proc/ ;" function 8 { InitOFill QResetReducer ResetCScan }	{ FLATTENLIMIT MAXinteger MINinteger edgemaxx edgemaxy edgeminx edgeminy fr true }
InitGS		graphics/gstates.c	/^private procedure InitGS() {/ ;" function 22 { CreateGStack }	{ DictGetP DictObj InitGraphics InitPath NIL PGState SetFont false flatEps fpOne graphicsNames gs psNulDev register rootShared true vmShared }
InitGraphics		graphics/gstates.c	/^public procedure InitGraphics()/ ;" function 23 { InitGS PSShowPage }	{ InitClip InitMtx LAryObj NIL NULL NewPath OPAQUE PNextGSExt PSGetGStateExt SetGray buttCap fp10 fpOne fpZero gs miterJoin real }
InitHexToBin		language/stream.c	/^private void InitHexToBin(hexToBinary)/ ;" function 11 { StreamInit }	{ NOTHEX cardinal hexToBinary register }
InitLink		pslib/doublink.c	/^procedure InitLink(link)/ ;" function 5 { CacheCreate StmInit }	{ }
InitMakeVM		vm/makevm.c	/^public procedure InitMakeVM()/ ;" function 9 { Mnextmain PSInitMakeVM }	{ Begin DEVELOP End PSMakeVM PSdummymakevm RgstExplicit rootShared vSTAGE }
InitMaskCache		device/maskcache.c	/^public procedure InitMaskCache(nMasks, nBytes, min/ ;" function 33 { PSDeviceInit }	{ BMFreeTag BMHeader BMUsedTag MaskRec NULL PBMHeader PBMItem PMask bmBase bmBytes bmFree bmMaxSize bmMinSize bmScratch bmSize bmUsed data false free header integer mcCheck mskBase mskFree mskLast os_sureCalloc scratchBytes scratchInUse }
InitMtx		graphics/graphics.c	/^public procedure InitMtx()/ ;" function 6 { InitGraphics NewDevice }	{ DfMtx MIDNULL fpZero gs }
InitNewPath		graphics/cscan.c	/^private procedure InitNewPath()/ ;" function 5 { FinishPath ResetCScan }	{ firstPathBuffer pointCount true }
InitOFill		graphics/pathpriv.c	/^public procedure InitOFill(qrdc, offset, min, max,/ ;" function 30 { }	{ FClNewPt FIXTOFRAC InitFontFlat OFLineTo QFNewPoint QRdcClose QResetReducer RdcClip RdcClose RealGt0 ResetReducer SetRdcScal d doOffsetting erodeConst false fixtopflt gProcNewPoint gProcRdcClose gs max ms offsetwidth pflttofrac r real true }
InitPSContextType		product/pscontext.c	/^public procedure InitPSContextType()/ ;" function 4 { SchedulerInit }	{ NSAddContextType PSEntry }
InitPath		graphics/pathbuild.c	/^public procedure InitPath(path)  register PPath pa/ ;" function 12 { AppendPath DoStrkPth EnterCircle FillBevel FillCircle FillQuad FltnPth FrPth InitGS NewViewClip PSCharPath ReducePathClipInt StrkPth }	{ BitField NULL false fpZero secret }
InitPatternImpl		devpattern/patternimpl.c	/^public procedure InitPatternImpl(/ ;" function 34 { PSDeviceInit }	{ Assert DevHalftone DevScreen IniDeepOnes InitSLFiles MAXPAT MAXSCRN NULL NULLSLOT PSCANTYPE PatCacheInfo ScreenPrivate curTAUsage grayPatternBase halftonePool largestChIndex largestChSize largestChunk lastFree maxPatternSize maxTASize maxTotalPatternSize maxTotalTASize os_newpool os_sureMalloc patID patTimeStamp patterns screenPool screens spCount taTimeStamp totalAlloc }
InitPostScript		postscript/postscript.c	/^public procedure InitPostScript (psParameters)/ ;" function 81 { Mnextmain }	{ Begin BuildInitialState Code CreateContext CreatePSSpace DURING DestroyPSContext DestroyPSSpace END_HANDLER End GetCArg HANDLER InitializePackages LDictObj MAKEVM NIL NULL PDictBody PSContext PSSpace ResetNameCache SetDictAccess SetGStateExtProc SetRealClockAddress SetShared Stm TopError gStateExtProc iLNullObj integer os_stderr os_stdin os_stdout rAccess rootShared tdErrorDict tdFontDirectory tdStatusDict tdUserDict trickyErrorDict trickyFontDirectory trickyStatusDict trickyUserDict true vmShared }
InitReason		include/basictypes.h	/^typedef enum {/ ;" typedef 9 { }	{ }
InitRecycler		include/recycler.h	/^#define InitRecycler(R, address)	\\/ ;" macro 1 { GCInternal_ResetFreePointer ReclaimMovedVM ResetVMSection _ReclaimRecyclableVM }	{ ResetRecycler }
InitReducer		graphics/reducer.c	/^private procedure InitReducer()/ ;" function 16 { IniReducer ResetReducer }	{ Line LinkRegionFreeList Point PointQ curIsClipLine curLine curPoint curPq false firstPoint lastPoint pqHead pqRecent ptserial rgHead rgsOut trapShipped }
InitRefArrays		vm/gcmisc.c	/^private procedure InitRefArrays()/ ;" function 24 { GCInternal_Init }	{ CantHappen HasRefs NULL PrivTraceInfo boolean false nObTypes os_malloc true }
InitRnum		fonts/fontbuild.c	/^#define InitRnum(r,s) {r = s;}/ ;" macro 1 { PSInitWrite }	{ r s }
InitSFCache		fonts/selectfont.c	/^public procedure InitSFCache(reason) InitReason re/ ;" function 10 { FontCacheInit }	{ NEW NIL PSFCEntry PSFCache SFCache sfCache sfcFreeList sfcRover }
InitSLFiles		devpattern/patternimpl.c	/^private procedure InitSLFiles()/ ;" function 21 { InitPatternImpl }	{ DURING DecStmByteCnt Disk DiskAttributes END_HANDLER HANDLER MIN NIL RAISE SLName false haveFiles integer slstm stmBytesUsed true }
InitSlopes		fonts/fontbuild.c	/^private procedure InitSlopes()/ ;" function 18 { BuildChar LockPFCd TfmLockPt1 }	{ doFixupMap false fixupmap initslope mapedges pLokData printf printmap true }
InitSortMID		fonts/midcache.c	/^public procedure InitSortMID () {/ ;" function 10 { InitFontCache }	{ Assert IndMArray IndSArray IsSortedMID LastCurMID MA MMEldestPtr MSEldestPtr Methuselah PeterPan false }
InitTimedEvents		product/timelog.c	/^void InitTimedEvents()/ ;" function 10 { }	{ TIMEBUFCOLUMNS TIMEBUFLENGTH TimeLog free timeLog timeLogIndices }
Init_Cmds		vm/rgstcmds.c	/^public procedure Init_Cmds (reason)/ ;" function 54 { VMInit }	{ AllocAligned AllocPArray Assert Begin Card16 CurrentShared CurrentVMSegmentType End Int16 LStrObj NEW NumCArg OpDefEntry PSOpDef PSRgstNames PSRgstOps PSUnregistered RgstExplicit VMGetElem cmds dynamicCmdsDelta initOpDefSize initOpSetLimit integer max opDefTable pni_end procedure register rootShared sizeOpDefTable stROM tdStatusDict vmCurrent }
Init_Recycler		vm/recycler.c	/^public procedure Init_Recycler(reason)/ ;" function 28 { VMInit }	{ DATA_HANDLER_FLAGS DEVELOP PCard8 PSRecyclerStatus PSTraceRecycler RecyclerDataHandler RegisterData RgstExplicit false integer nObTypes os_sureCalloc recycleType recyclerContextHandle traceRecycler true vSTAGE }
Init_SaveRestore		vm/saverestore.c	/^public procedure Init_SaveRestore(reason)/ ;" function 23 { VMInit }	{ GC_RegisterFinalizeProc Globals GlobalsRec HandleGCFinalize LNullObj NIL NOLL Object PCard8 RefAny RegisterData SAVERESTOREEVENTS SaveRestore_Data SaveRestore_Data_Handler endswitch false globals inRestore integer os_sureCalloc saveRestoreData }
Init_StaticData		vm/staticdata.c	/^public procedure Init_StaticData (reason)/ ;" function 19 { VMInit }	{ BLUNDEROVERHEAD NEW NIL StaticData staticData }
Init_VM_Garbage		vm/vm_garbage.c	/^public procedure Init_VM_Garbage(reason)/ ;" function 9 { VMInit }	{ Ctxt_NIL }
Init_VM_Memory		vm/vm_memory.c	/^Init_VM_Memory (reason)/ ;" function 31 { VMInit }	{ Begin CreateSegmentPool DEVELOP End GetCSwitch PCard8 PSDisplayVM RegisterData RgstExplicit VMSTATICEVENTS VMSetRAMAlloc VMSetROMAlloc VM_Context_Data VM_Data VM_Data_Handler endswitch integer rootShared vSTAGE vVMSPLIT vmShared }
Init_VM_Space		vm/vm_space.c	/^Init_VM_Space (reason)/ ;" function 20 { VMInit }	{ Globals GlobalsRec PSPrintChunks RgstExplicit endswitch globals os_fopen os_sureCalloc spaceFile }
InitializePackages		postscript/package_init.c	/^void InitializePackages(Reason)/ ;" function 8 { InitPostScript }	{ NIL packageInitProcedure }
InlineRotateLeft		graphics/cscan.c	/^private inline Card8 InlineRotateLeft(p, bits)/ ;" function 7 { ROTATELEFT8 }	{ p }
Inline_IncrementTimeUsed		language/exec.c	/^#define	Inline_IncrementTimeUsed(units) \\/ ;" macro 1 { IncrementTimeUsed }	{ pTimeSliceClock useRealClock }
InnerNotify		postscript/contextimpl.c	/^private procedure InnerNotify (c) PCondition c; {/ ;" function 8 { DoQuit PSCoProc PSDetach PSJoin PSNotify }	{ NIL PSContext PSMakeRunnable }
InsertEdge		graphics/qreducer.c	/^private procedure InsertEdge(edge) Edge edge;/ ;" function 62 { QFNewPoint QNewPoint QRdcClose }	{ AllocScanList Edge NIL ScanList register s scanList scn true }
InsertLink		pslib/doublink.c	/^procedure InsertLink(where, link)/ ;" function 9 { AddEntry CacheLookup StmCreate }	{ Assert }
InsertLock		fonts/fontbuild.c	/^private boolean InsertLock(pls, lp)/ ;" function 70 { SetXLock SetYLock }	{ Assert InvlFont NIL Nlokpairs PLokPair boolean false firstPoint lokSlopesInited p pLokData register true }
InsertMID		fonts/midcache.c	/^public MID InsertMID(fid, cmtx, d, maskID, mcomp, / ;" function 68 { MakeCompFont MakeFontSupp MakeMID }	{ Card16 DecrSetMIDAge HashMID MID MIDNULL MM MMSize MS MT MTAlloc NOLL PMTItem PVMRoot SetMIDAge Vmem d false register rootPrivate rootShared true }
InsertSelectFont		fonts/selectfont.c	/^public procedure InsertSelectFont(key, mtx, shared/ ;" function 33 { PSSelectFont }	{ Assert DebugAssert FreeSelectFont HashSFC MT NIL PMTItem PSFCEntry d freemem nameObj register sfCache sfcFreeList sfcRover szSelectFontCache }
InstallNewScreen		graphics/gray.c	/^private procedure InstallNewScreen(screen) registe/ ;" function 10 { PSSetColorScreen PSSetHalftone PSSetScreen SetDefaultHalftone }	{ RemScrRef Screen gs screenList }
Int16		include/publictypes.h	/^typedef short int Int16, *PInt16;/ ;" typedef 1 { BuildInitialRuns CScan DoRdcPth DoUserPath FMiniFltn FillInColumn FindOpSet GrowRunBuff HF4F IniQReducer Init_Cmds LF4F MB2ALLOCINCREMENT PSPutInterval PSRgstOps PrintBitmap QCompareBounds QIntersect QIntersectTrp QReduce ReadBinObjSeq ResizeCrossBuf ReturnBits RunArrayRow }	{ }
Int32		include/publictypes.h	/^typedef long int Int32, *PInt32;/ ;" typedef 1 { AddUn4 BuildChar BuildYCross CScan CheckIntersection DoDictXlat FMiniFltn FixedXatY FreeBytesBehindStack Intersect LineComplete MAXInt32 MB1ALLOCINCREMENT MB2ALLOCINCREMENT MINInt32 NewGlbClr NewGlbCntr PSVMStatus PtLT ReadBinObjSeq ReadNumAry StmToken StrToken SubUn4 VM_Usage XatY YatX psDiv32 }	{ }
Int64		include/fp.h	/^typedef struct _t_Int64 {		\/* Double precision int/ ;" typedef 7 { }	{ }
Int8		include/publictypes.h	/^typedef char Int8, *PInt8;/ ;" typedef 1 { Div3By2 }	{ }
IntInterval		graphics/maketrap.c	/^IntInterval(iNew, iresult)        \/* result = inte/ ;" function 8 { TrapTrapInt }	{ }
IntObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 33 { AddIntEntry BuildChar CharStringsVal CheckCompositeFont FDNestedDepth FndFntSibling InvalidateCachedMIDs KAEndCSDict MakeCompFont MakeFont MakeScreenDict MinEncodingLength PSCacheStatistics PSDefineFont PSEExec PSSetUCacheParams PSStCParams PSStFKey PSStSKey PutThresholdEntries SetFont }	{ }
IntPart		include/devicetypes.h	/^#define	IntPart(a)	((a)>>16)/ ;" macro 1 { ClippedMasksMark CompositeTraps ConstantTrapsMark GrayTrapsMark Im110 ImIdent ImIdent32 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch }	{ }
IntX		fonts/fontbuild.c	/^typedef integer IntX;/ ;" typedef 1 { Adjust AdjustBlues BlueLock BoostBotLocs BuildChar BuildCxtn BuildInitialRuns BuildYCross CCRunStd CSEndChar CScan CheckBlueScale CheckHorizWhite DoBlend DoFixupAction DoXInflections EditBlackSpace EditWhiteHoriz EditWhiteSpace ExpandWhiteDropOuts FamilyBlueLocs FinishPath GetBlueArrays GetBlueValues GetRuleDesc GetStdW GetWeightVector IniGlbClrBuffs Map PrintBlueLocs PrintBlueValues PutStdW ResetCScan ReturnBits ScanLineCxtn SetPixelInDropOut SetupBlueLocs SetupStdWs StartSplice UseStdWidth fixupmap mapedges }	{ }
IntegerBase		language/opcodes.h	/^#define IntegerBase	(RealBase+RealCodes)		\/* small/ ;" macro 1 { BooleanBase DecodeObj EncodeObj RelocateObj }	{ RealBase RealCodes }
IntegerCodes		language/opcodes.h	/^#define IntegerCodes	(MaxInteger - MinInteger + 1)/ ;" macro 1 { BooleanBase }	{ MaxInteger MinInteger }
Interchange		graphics/reducer.c	/^private procedure Interchange(lf, rt, x, y, callBa/ ;" function 48 { CheckIntersection }	{ Fixed FixedXatY PLine PLn PRegion PRg RatToFixed RgOffset ShipTrapezoid ShortenLine debugOn false integer os_printf true }
InternalBuildChar		fonts/fontbuild.c	/^private boolean InternalBuildChar(f, c, pcn, ftype/ ;" function 51 { BuildChar }	{ Begin CCRun CantHappen DictGetFontP DictGetP DictObj ENCRPTVMtype End InvlFont Known NIL NULL Object PushInteger StrObj arrayObj boolean charstringsname false fetchCharOutline fontSemaphore fontsNames intObj integer notdefname pkdaryObj prvtnm rootSysDict strObj }
Intersect		graphics/reducer.c	/^public short int Intersect(lf, rt, x, y)/ ;" function 93 { CheckIntersection }	{ Add4 Div3By2 FourPlace Int32 Mul2By2 PLine PLn PPoint PPt PointOnLine Sub4 XatY YatX false register }
IntersectAndCompareBounds		bintree/bounds.c	/^BBoxCompareResult IntersectAndCompareBounds(Bounds/ ;" function 25 { BPObscureInside ComputeHideBounds LPlaceAt LRemoveFromInstance SanityCheck }	{ BBoxCompareResult }
IntersectDP		graphics/hitdetect.c	/^private boolean IntersectDP (dp1, dp2) DevPrim *dp/ ;" function 128 { InFill InStroke InUFill }	{ BoundsCompare BoxTrapCompare CantHappen DevBounds DevInterval DevPrim DevRun DevTrap FullBounds HitRun HitTrap NULL QIntersect QIntersectTrp TrapTrapInt boolean false integer r true xaOffset }
IntersectPath		include/graphics.h	/^typedef struct _t_IntersectPath {/ ;" typedef 5 { AddPathRef ConvertToListPath PathBuildInit ReducePathClipInt RemPathRef TracePath }	{ }
Intersection		graphics/cscan.c	/^typedef struct {/ ;" typedef 5 { FillInColumn FillInInflection }	{ }
InvalidContext		postscript/contextimpl.c	/^private procedure InvalidContext ()/ ;" function 4 { AcquireLock PSDetach PSFork PSJoin PSWait ReleaseLock }	{ PSError invlcontext }
InvalidEntry		language/opcodes.h	/^#define InvalidEntry	0				\/* invalid *\// ;" macro 1 { ObjectEscape }	{ }
InvalidateCachedMIDs		fonts/compshow.c	/^public procedure InvalidateCachedMIDs (f, miary, f/ ;" function 28 { InvalidateCachedMIDs ShowInternal }	{ AryObj COMPOSEDtype DictGetP DictObj IntObj InvalidateCachedMIDs MIDNULL StrObj UniqueMID VMGetElem curMT fontsNames integer register }
InvalidateRecycler		vm/recycler.c	/^public procedure InvalidateRecycler (pObject1, pOb/ ;" function 83 { ConditionalInvalidateRecycler GC_CollectPrivate GC_CollectShared PutInDict TraceSharedVM }	{ DebugAssert GC_MoveRecycleRange NIL PObject PRecycler ReclaimMovedVM Recyclable RecyclerForObject TraceInvalidation boolean false nullObj }
InvlAccess		language/exec.c	/^public procedure InvlAccess() {if (superExec == 0)/ ;" function 1 { AGetP AryForAll Begin CheckIfEncodedUserPath DictForAll DictLength DictTestP Equal ExecPushP FloatRectFill GetUsrPthAry LGt PSALoad PSBytesAvailable PSCopy PSCvI PSCvR PSDevForAll PSEExec PSFileNameForAll PSFork PSGet PSGetInterval PSIntDict PSLength PSMaxLength PSMonitor PSOpDef PSPopGState PSPut PSPutInterval PSRead PSReadHexString PSReadLine PSReadOnly PSReadString PSSysNameMap PSToken PSWrite PSWrtHexString PSWrtString PSXctOnly PopGState PopPRString PutInDict PutInNameMap RgstExplicit SetDictAccess SetupNumStrm ShowInternal StoDevStrStatus StrForAll StrToName UnDef VMCopyArray VMCopyGeneric VMCopyString VMGetText VMPutChar VMPutElem (etc) }	{ PSError invlaccess superExec }
InvlFont		fonts/fontbuild.c	/^internal procedure InvlFont() { BCERROR(BE_INVLFON/ ;" function 1 { BMRun BuildChar CCBMRun CCRunStd CheckCompositeFont CheckPrebuiltOptions ChrMapBuildChar DictGetFontP GetBlueArrays GetBuildingOption GetMetrics GetMetrics2 GetStdW GetWeightVector InsertLock InternalBuildChar KACharDef KARdSubrsData MakeCompFont MakeFont MakeFontSupp MakeMID ModifyCachingParams OCFetchFromDisk PSDefineFont PSKShow PathEndChar PutStdW SetFont }	{ BCERROR }
InvlReturn		fonts/fontrun.c	/^#define InvlReturn(state)		\\/ ;" macro 1 { DetermineFormat KACharStrings KAEexec KASubrs }	{ false }
InvlStm		language/stream.c	/^public Stm InvlStm(sob)/ ;" function 6 { GetStream }	{ closedStm }
IsAllocMT		fonts/midcache.c	/^#define IsAllocMT() (mp->type != freemem)/ ;" macro 1 { CheckMT MTFree }	{ freemem }
IsAllocatedCI		fonts/cicache.c	/^#define IsAllocatedCI() \\/ ;" macro 1 { CheckCI }	{ CIUNLINKED CN IsConnected MIDNULL NIL Vmem }
IsBlack		device/clippedmask.c	/^#define IsBlack (graySwitch == 0)/ ;" macro 1 { ClippedMasksMark }	{ }
IsCleanShowState		fonts/fontshow.c	/^#define IsCleanShowState(ssr) \\/ ;" macro 1 { ENDSHOW FreeShowState }	{ CINULL ssr }
IsConnected		fonts/cicache.c	/^#define IsConnected() \\/ ;" macro 1 { IsAllocatedCI IsNormalCI IsReleasedCI }	{ CI CINULL }
IsConstant		device/clippedmask.c	/^#define IsConstant (graySwitch == 1)/ ;" macro 1 { }	{ }
IsContextWriteProhibited		product/listener.c	/^public int IsContextWriteProhibited()/ ;" function 4 { UDDelete UDRename os_fopen }	{ currentPSContext scheduler }
IsCrFile		language/stream.c	/^public boolean IsCrFile(stm)  StmObj stm;/ ;" function 6 { PSRead PSReadHexString PSReadLine PSReadString PSToken }	{ CrFile StmObj }
IsFontDirectory		language/dict.c	/^#define IsFontDirectory(name) \\/ ;" macro 1 { PutInDict trytoload }	{ NIL languageNames nm_FontDirectory }
IsFreeCI		fonts/cicache.c	/^#define IsFreeCI() \\/ ;" macro 1 { CheckCI }	{ CINULL CIUNLINKED CN MIDNULL NIL Vmem }
IsFreeMT		fonts/midcache.c	/^#define IsFreeMT() \\/ ;" macro 1 { CheckMT MTAlloc }	{ MA MIDCount PeterPan freemem }
IsGray		device/clippedmask.c	/^#define IsGray (graySwitch == 2)/ ;" macro 1 { ClippedMasksMark }	{ }
IsMarked		fonts/cicache.c	/^#define IsMarked(X) (CIReg [X].touched)/ ;" macro 1 { SortCharAges }	{ }
IsNonNull		fonts/cicache.c	/^#define IsNonNull(X) X != CINULL/ ;" macro 1 { CondAssign CondAssignF SortCharAges }	{ CINULL }
IsNormalCI		fonts/cicache.c	/^#define IsNormalCI() \\/ ;" macro 1 { CheckCI }	{ CIUNLINKED CN IsConnected MIDNULL NIL Vmem }
IsNull		fonts/cicache.c	/^#define IsNull(X) X == CINULL/ ;" macro 1 { SortCharAges }	{ CINULL }
IsPathEmpty		graphics/pathbuild.c	/^public boolean IsPathEmpty(path) register PPath pa/ ;" function 8 { DoUAppend }	{ ListPath NULL PathType false pathstart register true }
IsROMSegment		vm/gcinternal.h	/^#define IsROMSegment(seg) \\/ ;" macro 1 { GCInternal_TraceROMDict TraceSharedVM }	{ NIL level stROM }
IsRecyclable		include/recycler.h	/^#define IsRecyclable(pObject,R) \\/ ;" macro 1 { VMCopyArray VMPutElem _RecyclerPop _RecyclerPush }	{ AddressInRecyclerRange IsRecyclableType RecyclerAddress }
IsRecyclableType		include/recycler.h	/^#define IsRecyclableType(pObject)	\\/ ;" macro 1 { CouldRecycle IsRecyclable _Recyclable }	{ recycleType }
IsReleasedCI		fonts/cicache.c	/^#define IsReleasedCI() \\/ ;" macro 1 { CheckCI }	{ CIUNLINKED CN IsConnected MIDNULL NIL Vmem }
IsSortedMID		fonts/midcache.c	/^private boolean IsSortedMID;/ ;" global 1 { InitSortMID MMEldest MSEldest SortMIDAges }	{ }
IsValidReal		include/fp.h	/^#define IsValidReal(pReal) (((FloatRep *) pReal)->/ ;" macro 1 { ReadBinObjSeq ReadNumAry StmToken }	{ FloatRep }
IsWhite		device/clippedmask.c	/^#define IsWhite (graySwitch < 0)/ ;" macro 1 { ClippedMasksMark }	{ }
Is_Shared		vm/vm_memory.h	/^#define	Is_Shared(o) InVMSection (vmShared, o)/ ;" macro 1 { }	{ InVMSection vmShared }
ItemChunk		postscript/customops.c	/^typedef struct _t_ItemChunk {/ ;" typedef 4 { CustomOpsInit PSPopManagedObject ValidatePObj myGetRoots myTerminateSpace }	{ }
JUST_RIGHT		product/windowops.c	/^#define JUST_RIGHT	0/ ;" macro 1 { PSOrderWindow checkOrderingValdity }	{ }
KAArraySubrs		fonts/fontrun.c	/^private procedure KAArraySubrs(state)/ ;" function 23 { }	{ F_SUBRS_SEEN IPopDiscard RestoreKeywordTables boolean false opStk }
KABegin		fonts/fontrun.c	/^private procedure KABegin(state)/ ;" function 8 { }	{ TopP fontDict }
KACharDef		fonts/fontrun.c	/^private procedure KACharDef(state)/ ;" function 57 { }	{ BUF_SIZE BytesInSeg F_SEG_HDR_IN_DATA FmtAscii GetStmDecryptionKey GetStream IPop IPopDiscard InvlFont MAXCard16 Object PCharData Stm TopP fread ftell intObj opStk }
KACharStrings		fonts/fontrun.c	/^private procedure KACharStrings(state)/ ;" function 7 { }	{ F_VALID_FONT InvlReturn }
KAClosefile		fonts/fontrun.c	/^private procedure KAClosefile(state)/ ;" function 18 { }	{ CantHappen EPopP ETopP Object TopP }
KADefSubrs		fonts/fontrun.c	/^private procedure KADefSubrs(state)/ ;" function 8 { }	{ RestoreKeywordTables true }
KADefinefont		fonts/fontrun.c	/^private procedure KADefinefont(state)/ ;" function 24 { }	{ DictGetP DictPut Known NULL RestoreState fontDict fontsNames nullObj }
KADict		fonts/fontrun.c	/^private procedure KADict(state)/ ;" function 48 { }	{ CharData F_CHARSTRINGS_SEEN IPop IPush NULL NewKeywordTables NewState Object PCharData TypeCheck charStringsKeywordsTable false fontDict intObj opStk os_sureMalloc }
KAEexec		fonts/fontrun.c	/^private procedure KAEexec(state)/ ;" function 17 { }	{ ETopP F_EEXEC_SEEN InvlReturn Object PSEExec TopP false true }
KAEndCSDict		fonts/fontrun.c	/^private procedure KAEndCSDict(state)/ ;" function 154 { }	{ AllocAligned Begin CHARMAP_LEN Card16 CharOffsetsEntry CharOffsetsPtr DictObj DictP DictPut End F_SEG_HDR_IN_DATA FastName FmtAscii FontInfo FontInfoPtr ForcePut GetStream IPush ISOADOBE_CHARSET_SIZE IntObj LIntObj LStrObj Load NULL NUM_ENTRIES NameObj PCharData PCharOffsetsEntry PFontInfo PKeyVal RestoreKeywordTables SearchDict Stm StrObj TopP ValidateObj boolean cardinal charMap charptr fontDict fontsNames iLNullObj integer nameObj opStk rAccess register rootShared stringGeneration true }
KAFontDirectory		fonts/fontrun.c	/^private procedure KAFontDirectory(state)/ ;" function 11 { }	{ NULL NewKeywordTables fontDict synthKeywordsTable true }
KAFontType		fonts/fontrun.c	/^private procedure KAFontType(state)/ ;" function 9 { }	{ F_FONTTYPE_SEEN Object TopP }
KAFontrunType		fonts/fontrun.c	/^private procedure KAFontrunType(state)/ ;" function 8 { }	{ FONTRUN_LEVEL Object TopP }
KAHires		fonts/fontrun.c	/^private procedure KAHires(state)/ ;" function 9 { }	{ Object TopP true }
KAKnown		fonts/fontrun.c	/^private procedure KAKnown(state)/ ;" function 19 { }	{ DictGetP DictObj IPop IPush Known NameObj RestoreKeywordTables TopP ValidateObj dictObj nameObj opStk }
KAPassword		fonts/fontrun.c	/^private procedure KAPassword(state)/ ;" function 9 { }	{ BUILTINKEY F_PASSWORD_SEEN Object TopP }
KAPutDef		fonts/fontrun.c	/^private procedure KAPutDef(state)/ ;" function 26 { }	{ ActOnKeyword IPop IPush Object PKeywordAction TopP boolObj defBoolKeywordsTable defIntKeywordsTable intObj opStk }
KARdSubrsData		fonts/fontrun.c	/^private procedure KARdSubrsData(state)/ ;" function 39 { }	{ BUF_SIZE GetStream IPop IPopDiscard InvlFont Object Stm TopP fread intObj opStk }
KASaveSubrs		fonts/fontrun.c	/^private procedure KASaveSubrs(state)/ ;" function 5 { }	{ RestoreKeywordTables }
KASubrs		fonts/fontrun.c	/^private procedure KASubrs(state)/ ;" function 10 { }	{ F_VALID_FONT InvlReturn NULL NewKeywordTables subrsKeywordsTable }
KEYHASH		fonts/fontbuild.c	/^#define KEYHASH 0x3f8927b5/ ;" macro 1 { FontBuildInit PSEExec PSIntDict PSStFKey PSStSKey StreamInit }	{ }
KeyName		language/dict.c	/^#define KeyName(k,n) {if ((k).type==strObj) StrToN/ ;" macro 1 { Def DictPut DictTestP ForcePut PSDef PSLoad PSStore UnDef dknown trytoload }	{ StrToName strObj }
KeyVal		include/vm.h	/^typedef struct _t_KeyVal {/ ;" typedef 4 { AllocPDict Def DictPut ForcePut NextKeyVal PSDef PSStore PrintKeyVal ProcessSaveData TracePrivateForShared TracePrivateVM TraceSharedVM UnDef VMExpandDict ZapDelayedDict }	{ }
KeywordAction		fonts/fontrun.h	/^typedef struct _t_KeywordAction {/ ;" typedef 4 { }	{ }
KillStack		language/stack.c	/^KillStack(stack)/ ;" function 6 { LanguageDataHandler }	{ FREE }
Known		language/dict.c	/^public boolean Known(d,name)/ ;" function 5 { BMRun CCRunStd CharStringsVal ChrMapBuildChar DictGetFontP FindSibling GetMetrics GetMetrics2 GetWeightVector InternalBuildChar KADefinefont KAKnown MakeMID PSDefineFont PSKnown PSSelectFont PrintMidDict RgstMark StateInit pFD }	{ d dknown true }
LANGDATA_H		language/langdata.h	/^#define	LANGDATA_H/ ;" macro 1 { }	{ }
LANGUAGE		include/package_specs.h	/^#define LANGUAGE	"language.h"/ ;" macro 1 { }	{ }
LANGUAGENAMES_H		language/languagenames.h	/^#define	LANGUAGENAMES_H/ ;" macro 1 { }	{ }
LANGUAGESTATICEVENTS		language/exec.c	/^#define	LANGUAGESTATICEVENTS \\/ ;" macro 1 { LanguageInit }	{ STATICEVENTFLAG }
LANGUAGE_H		include/language.h	/^#define	LANGUAGE_H/ ;" macro 1 { }	{ }
LANGUAGE_LEVEL		include/environment.h	/^#define LANGUAGE_LEVEL level_dps/ ;" macro 1 { BuildInitialState }	{ level_dps }
LARGE		device/framedev.c	/^#define LARGE 100000	\/* most image procs do this m/ ;" macro 1 { FmMark }	{ }
LASTFONTTYPE		fonts/fontspriv.h	/^#define LASTFONTTYPE ECHRMAPtype/ ;" macro 1 { }	{ ECHRMAPtype }
LASTSCANVAL		include/devpattern.h	/^#define LASTSCANVAL 0xFF/ ;" macro 1 { ClipTrapsStringDispatch Mark MaskSetup MasksMark MonoSetup SetupMonoPattern }	{ }
LAST_MESSAGE_ID		product/ipcstream.h	/^#define LAST_MESSAGE_ID DATA_EV_ACK_MSG_ID/ ;" macro 1 { IPCFillBuf }	{ DATA_EV_ACK_MSG_ID }
LAYER		bintree/bintreetypes.h	/^#define LAYER    ((unsigned char)'l')	\/* 108 *\// ;" macro 1 { LAddToInstance LBackingBounds LBoundsAt LCompositeFrom LCopyBitsFrom LCurrentAlphaState LCurrentDepth LDepthLimit LFindPieceBounds LFlushBits LFree LGetBacking LGetDeviceStatus LGetSize LHideInstance LHideInstanceIn LMark LMoveTo LNew LNewInstance LObscureInside LOrder LPlaceAt LPrintOn LRemoveFromInstance LRepaintIn LRevealInside LSetAlphaBits LSetAlphaOpaque LSetAutofill LSetDepthLimit LSetExposureColor LSetSendRepaint LSetType Layer2Wd NXGetWindowInfo }	{ }
LAddToDirty		bintree/layer.c	/^void LAddToDirty(Layer *layer, Bounds *bounds)/ ;" function 9 { WBMarkBitmap }	{ BUFFERED Bounds boundBounds sectBounds }
LAddToInstance		bintree/layer.c	/^static void LAddToInstance(Layer *layer, Bounds *b/ ;" function 22 { LCompositeFrom LInitPage LMark }	{ Bounds CopyOffscreen DebugAssert LAYER RETAINED boundBounds true }
LAryObj		include/basictypes.h	/^#define	LAryObj(o,l,v)						\\/ ;" macro 1 { AllocPArray Array InitGraphics ReadNumAry SetMaskDevice }	{ LEVEL iLAryObj level vmCurrent }
LBMAddTrap		bitmap/bmlocal.c	/^static void LBMAddTrap(DevTrap *t, TrapTrapInfo *t/ ;" function 23 { LBMMark }	{ EmptyDevBounds MAXTRAPS bm__mark }
LBMBecomePSDevice		bitmap/bmlocal.c	/^static void LBMBecomePSDevice(LocalBitmap *lbm)/ ;" function 15 { }	{ Bitmap LocalBMClass NULL current wdProcs }
LBMFree		bitmap/bmlocal.c	/^static void LBMFree(Bitmap *bm)/ ;" function 20 { LBMInitClassVars }	{ LBM_FREE LBM_VMDEALLOCATE LocalBitmap bmClass free }
LBMInitClassVars		bitmap/bmlocal.c	/^static void LBMInitClassVars(BMClass *class)/ ;" function 20 { }	{ BMClass LBMFree LBMMakePublic LBMMark LBMNewAlpha LBMOffset LBMSizeInfo LocalBMClass LocalBitmap bmClass localBM mark }
LBMInitSinglePrim		bitmap/bmlocal.c	/^static inline void LBMInitSinglePrim(DevPrim *self/ ;" function 8 { LBMMark LBMMarkRun }	{ NULL }
LBMMakePublic		bitmap/bmlocal.c	/^static Bitmap *LBMMakePublic(Bitmap *bm, Bounds *h/ ;" function 11 { LBMInitClassVars }	{ Bitmap NX_OTHERBMTYPE bm_dup }
LBMMark		bitmap/bmlocal.c	/^static void LBMMark(Bitmap *bm, MarkRec *mrec, Bou/ ;" function 95 { LBMInitClassVars }	{ BoxTrapCompare CantHappen DevBoundsCompare DevInterval DevPoint DevPrim DevPrivate DevTrap EmptyDevBounds LBMAddTrap LBMInitSinglePrim LBMMarkRun MAXTRAPS NULL QIntersectTrp TrapTrapInfo TrapTrapInt bm__mark bm_becomePSDevice integer withinBounds }
LBMMarkRun		bitmap/bmlocal.c	/^static void LBMMarkRun(DevRun *intcliprun, TrapTra/ ;" function 8 { LBMMark }	{ DevPrim DevPrivate LBMInitSinglePrim bm__mark }
LBMNew		bitmap/bmlocal.c	/^static Bitmap *LBMNew(BMClass *class, Bounds *b, i/ ;" function 21 { }	{ Bitmap LBM_FREE LBM_VMDEALLOCATE LocalBitmap bmClass bm_sizeBits true }
LBMNewAlpha		bitmap/bmlocal.c	/^static void LBMNewAlpha(Bitmap *bm, int initialize/ ;" function 19 { LBMInitClassVars }	{ LBM_VMDEALLOCATE LocalBitmap true }
LBMNewFromData		bitmap/bmlocal.c	/^static Bitmap *LBMNewFromData(LocalBMClass *class,/ ;" function 16 { }	{ BMClass Bitmap LocalBitmap bmClass false }
LBMOffset		bitmap/bmlocal.c	/^static void LBMOffset(Bitmap *bm, short dx, short / ;" function 4 { LBMInitClassVars }	{ OFFSETBOUNDS }
LBMSetupImageArgs		bitmap/bmlocal.c	/^static void LBMSetupImageArgs(PDevice device, Imag/ ;" function 4 { }	{ current }
LBMSetupMark		bitmap/bmlocal.c	/^static void LBMSetupMark(PDevice device, DevPrim */ ;" function 13 { }	{ PNextGSExt SetupPattern current wdMarkProcs }
LBMSizeInfo		bitmap/bmlocal.c	/^static int LBMSizeInfo(Bitmap *bm, int *localSize,/ ;" function 8 { LBMInitClassVars }	{ LocalBitmap }
LBMWakeUp		bitmap/bmlocal.c	/^static void LBMWakeUp(PDevice device)/ ;" function 7 { }	{ PIntProc current defaultHalftone framelog2BD wdMarkProcs wdProcs }
LBM_DONTFREE		include/bitmap.h	/^#define LBM_DONTFREE 0/ ;" macro 1 { MPInitScreen }	{ }
LBM_FREE		include/bitmap.h	/^#define LBM_FREE 1/ ;" macro 1 { LBMFree LBMNew }	{ }
LBM_VMDEALLOCATE		include/bitmap.h	/^#define LBM_VMDEALLOCATE 2/ ;" macro 1 { LBMFree LBMNew LBMNewAlpha MPPromoteWindow }	{ }
LBackingBounds		bintree/layer.c	/^Bounds *LBackingBounds(Layer *layer)/ ;" function 10 { WBGetBitmap WBGetDeviceInfo WBMarkBitmap }	{ DebugAssert LAYER NULL NXBag }
LBoolObj		include/basictypes.h	/^#define	LBoolObj(o,v)	o = iLBoolObj; (o).val.bval=/ ;" macro 1 { BinObjInit DecodeObj PSPushBoolean RelocateObj StmToken TypeInit }	{ iLBoolObj }
LBoundsAt		bintree/layer.c	/^Bounds *LBoundsAt(Layer *layer)/ ;" function 5 { SetGSCursor WBChangeBitmap WBCopyLayer WBGetBitmap WBGetDeviceInfo WBOpenBitmap }	{ DebugAssert LAYER }
LCM		graphics/graypriv.c	/^private integer LCM(u, v)  integer u, v; {return (/ ;" function 1 { FreqAngleToNumbers LCM3 LCM4 }	{ GCD }
LCM3		devpattern/colorpattern.c	/^private integer LCM3(u, v, w) integer u, v, w; {re/ ;" function 1 { ComposeColors }	{ LCM }
LCM4		graphics/graypriv.c	/^public integer LCM4(u, v, w, x)  integer u, v, w, / ;" function 3 { GetType4Screen GetValidFreqAngleOctet }	{ LCM }
LCompositeFrom		bintree/layer.c	/^void LCompositeFrom(CompositeInfo *ci, Bounds dstB/ ;" function 123 { CompositePriv CompositeRun CompositeTraps LCopyContents LFill }	{ ALPHAVALUE A_BITS A_ONE BACKCHAN BITPIECE BUFFERED Bounds COPY CompositeOperation ComputeHideBounds DISSOLVE DIVPIECE DebugAssert DevColorVal DevPrivate HIGHLIGHT INSTANCING LAYER LAddToInstance LHideInstanceIn LPromoteLayer LSetAlphaBits Layer NULL NULLBOUNDS NX_BLACK NX_DKGRAY NX_LTGRAY NX_WHITE OFFSETBOUNDS OPAQUE PATTERN PSGetGStateExt PSetHalftone Pattern RETAINED TRANSPARENT boolean boundBounds clipBounds false needAlphaBits promoteDepths promoteParms }
LCondObj		include/basictypes.h	/^#define	LCondObj(o,v)					\\/ ;" macro 1 { }	{ LEVEL iLCondObj level vmCurrent }
LCopyBitsFrom		bintree/layer.c	/^LocalBitmap *LCopyBitsFrom(Layer *layer, Bounds bo/ ;" function 34 { PSReadImage }	{ BMClass BMCompOp BM_BITMAPSRC BPCopyBitsFrom Bitmap CBStruct COPY DebugAssert LAYER LocalBitmap NULL OFFSETBOUNDS PSGetMarkInfo bmClassFromDepth bm_delete bm_makePublic bm_new bm_newAlpha false sectBounds true }
LCopyContents		bintree/layer.c	/^void LCopyContents(Layer *src, Layer *dst)/ ;" function 13 { WBOpenBitmap }	{ Bounds COPY CompositeInfo LCompositeFrom NULL PSGetMarkInfo }
LCurrentAlphaState		bintree/layer.c	/^int LCurrentAlphaState(Layer *layer)/ ;" function 5 { PSCurrentWindowAlpha }	{ DebugAssert LAYER }
LCurrentDepth		bintree/layer.c	/^int LCurrentDepth(Layer *layer)/ ;" function 5 { }	{ DebugAssert LAYER }
LDELIM		include/stodev.h	/^#define LDELIM '%'/ ;" macro 1 { FndStoDev }	{ }
LDepthLimit		bintree/layer.c	/^int LDepthLimit(Layer *layer)/ ;" function 5 { }	{ DebugAssert LAYER }
LDictObj		include/basictypes.h	/^#define	LDictObj(o,v)						\\/ ;" macro 1 { AllocPDict InitPostScript PSStore PSWhere TrickyDictP }	{ LEVEL iLDictObj level vmCurrent }
LEADERPAGE		include/disk.h	/^#define LEADERPAGE (FilePage)(-1000) \/* file "page/ ;" macro 1 { }	{ FilePage }
LEADERSEAL		include/disk.h	/^#define LEADERSEAL 0x1eade460	\/* seal of leader pa/ ;" macro 1 { }	{ }
LEFT2BITS		device/framemaskdev.c	/^#define	LEFT2BITS	0x03/ ;" macro 1 { IniMaskDevImpl }	{ }
LEFT4BITS		device/framemaskdev.c	/^#define	LEFT4BITS	0x0F/ ;" macro 1 { IniMaskDevImpl }	{ }
LEFT_BIT		device/framemaskdev.c	/^#define	LEFT_BIT	0x01/ ;" macro 1 { IniMaskDevImpl }	{ }
LENBUFF0		graphics/reducer.h	/^#define LENBUFF0 48000/ ;" macro 1 { IniReducer }	{ }
LENBUFF1		graphics/reducer.h	/^#define LENBUFF1 24000/ ;" macro 1 { IniReducer }	{ }
LENBUFF2		graphics/reducer.h	/^#define LENBUFF2 12000/ ;" macro 1 { IniReducer }	{ }
LENBUFF3		graphics/reducer.h	/^#define LENBUFF3 4800/ ;" macro 1 { IniReducer }	{ }
LEVEL		language/packedarray.c	/^#define LEVEL pObj->level/ ;" macro 1 { AllocGenericObject AllocPDict LAryObj LCondObj LDictObj LGStateObj LGenericObj LLockObj LPkdaryObj LSaveObj LStmObj LStrObj XAryObj XPkdaryObj XStrObj }	{ level }
LF		language/grammar.h	/^#define LF  '\\012'/ ;" macro 1 { CheckIntersection EOL LineComplete StmToken }	{ }
LF2F		language/numstrm.c	/^private Fixed LF2F(ns) register PNumStrm ns; {/ ;" function 13 { LF2R SetupNumStrm }	{ Card32 Fixed character register ss }
LF2R		language/numstrm.c	/^private procedure LF2R(ns, p) register PNumStrm ns/ ;" function 4 { SetupNumStrm }	{ LF2F fixtopflt p }
LF4F		language/numstrm.c	/^private Fixed LF4F(ns) register PNumStrm ns; {/ ;" function 18 { SetupNumStrm }	{ Card32 Fixed Int16 character register ss }
LF4R		language/numstrm.c	/^private procedure LF4R(ns, p) register PNumStrm ns/ ;" function 15 { SetupNumStrm }	{ Card32 character integer p r real register ss }
LFill		bintree/layer.c	/^void LFill(Layer *layer, int op, Layer *otherLayer/ ;" function 45 { PSFillWindow }	{ BACKCHAN BELOW BUFFERED Bounds COPY CompositeInfo CompositeOperation LCompositeFrom Layer NONRETAINED NULL OFFSETBOUNDS SubList TOUCHBOUNDS WLBelowButNotBelow boundBounds copyCO sectBounds }
LFind		bintree/layer.c	/^Layer *LFind(int x, int y, int op, Layer *relWin)/ ;" function 14 { PSFindWindow RecalcMouseRect }	{ BELOW Layer NULL SubList WLBelowButNotBelow }
LFindPieceBounds		bintree/layer.c	/^Bounds *LFindPieceBounds(Layer *layer, Point pt)/ ;" function 12 { FindPieceBounds }	{ DebugAssert LAYER os_stderr printf }
LFlushBits		bintree/layer.c	/^void LFlushBits(Layer *layer)/ ;" function 9 { LPlaceAt LSetType PSFlushGraphics WBFlushBitmap }	{ BUFFERED CopyOnscreen DebugAssert LAYER NULLBOUNDS collapseBounds }
LFontObj		include/basictypes.h	/^#define	LFontObj(o,v)						\\/ ;" macro 1 { GenFID }	{ iLFontObj }
LFree		bintree/layer.c	/^void LFree(Layer *layer)/ ;" function 22 { LPlaceAt TermWindowDevice WBCloseBitmap WBOpenBitmap }	{ BAGDelete BELOW DebugAssert LAYER LRevealSubList NULL NXBag PFree WLBelowButNotBelow WLRemove false layerPool os_freeelement termwindowflag true }
LGStateObj		include/basictypes.h	/^#define	LGStateObj(o,v)					\\/ ;" macro 1 { }	{ LEVEL iLGStateObj level vmCurrent }
LGenericObj		include/basictypes.h	/^#define	LGenericObj(o,t,v)					\\/ ;" macro 1 { AllocGenericObject PutInNameMap RstrGenericObjects }	{ LEVEL iLGenericObj level vmCurrent }
LGetBacking		bintree/layer.c	/^int LGetBacking(Layer *layer, unsigned int **bits,/ ;" function 13 { WBChangeBitmap WBGetDeviceInfo WBOpenBitmap }	{ DebugAssert LAYER LocalBitmap NXBag }
LGetDeviceStatus		bintree/layer.c	/^DeviceStatus LGetDeviceStatus(Layer *layer)/ ;" function 24 { PSCurrentDeviceInfo WBGetDeviceInfo }	{ DebugAssert DeviceStatus LAYER NXBag NX_EIGHTBITGRAY NX_TWELVEBITRGB NX_TWENTYFOURBITRGB NX_TWOBITGRAY }
LGetSize		bintree/layer.c	/^void LGetSize(Layer *layer, short *wp, short *hp)/ ;" function 6 { WdDefaultBounds WdDefaultMtx }	{ DebugAssert LAYER }
LGt		language/math.c	/^private boolean LGt(a, b) Object a, b; { \/* Gt(a,b/ ;" function 38 { PSGe PSGt PSLe PSLt }	{ InvlAccess StringCompare TypeCheck boolean extended intObj integer rAccess realObj strObj }
LHideInstance		bintree/layer.c	/^void LHideInstance(Layer *layer, Bounds hideBounds/ ;" function 8 { PSHideInstance }	{ DebugAssert LAYER LHideInstanceIn OFFSETBOUNDS }
LHideInstanceIn		bintree/layer.c	/^static void LHideInstanceIn(Layer *layer, Bounds h/ ;" function 17 { LCompositeFrom LHideInstance LMark LNewInstance }	{ BACKCHAN CompositeOperation DebugAssert LAYER LRemoveFromInstance NONRETAINED copyCO sectBounds true }
LINE_LEN		fonts/fontrun.c	/^#define LINE_LEN 20/ ;" macro 1 { DetermineFormat }	{ }
LINK		fp/DEFSmach.h	/^#define LINK		link  a6,\\#0/ ;" macro 1 { ENTRY RTENTRY }	{ }
LINOTYPE		include/copyright.h	/^#define LINOTYPE 0/ ;" macro 1 { }	{ }
LIRF		language/numstrm.c	/^private Fixed LIRF(ns) register PNumStrm ns; {/ ;" function 6 { SetupNumStrm }	{ LIRR pflttofix r real }
LIRR		language/numstrm.c	/^private procedure LIRR(ns, p) register PNumStrm ns/ ;" function 13 { LIRF SetupNumStrm }	{ Card32 IEEELowToNative character p r real register ss }
LITEGRAYPAT		include/bintree.h	/^#define LITEGRAYPAT 3/ ;" macro 1 { }	{ }
LITNAMETYPE		language/opcodes.h	/^#define LITNAMETYPE		2/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
LInitPage		bintree/layer.c	/^void LInitPage(PDevice pdevice)/ ;" function 20 { IniWdDevImpl }	{ BACKCHAN BPCHAN BUFFERED CompositeOperation INSTANCING LAddToInstance LSetAlphaOpaque Layer NULL PSGetGStateExt Wd2Layer copyCO uchar whitepattern }
LInitialize		bintree/layer.c	/^static void LInitialize()/ ;" function 11 { LayerInit }	{ ExpandTempCauses Layer NULL layerPool numTempCauses os_newpool tempCauses }
LIntObj		include/basictypes.h	/^#define	LIntObj(o,v)	o = iLIntObj; (o).val.ival=(v/ ;" macro 1 { AddIntEntry CCRunStd CheckCompositeFont DecodeObj EPushInteger FontBuildInit KAEndCSDict MakeScreenDict PSCacheStatistics PSLIntObj PSPushInteger PSStFKey PSStSKey PushCardinal PutThresholdEntries ReadNumAry RelocateObj StmToken StreamInit }	{ iLIntObj }
LLEventPost		mousekeyboard/common.c	/^void LLEventPost(int what, Point location, NXEvent/ ;" function 9 { PostDeathEvent }	{ data }
LLockObj		include/basictypes.h	/^#define	LLockObj(o,v)					\\/ ;" macro 1 { }	{ LEVEL iLLockObj level vmCurrent }
LMASK		mp/soverrect.c	/^#define LMASK 0x55555555 \/* 0101010101010101010101/ ;" macro 1 { }	{ }
LMark		bintree/layer.c	/^void LMark(PDevice pdevice, DevPrim *graphic, DevP/ ;" function 108 { IniWdDevImpl }	{ ALPHAVALUE A_BITS BACKCHAN BPCHAN BPMark BUFFERED Bounds BoundsFromIPrim ComputeHideBounds DebugAssert DevColorVal DevImage DevImageSource GRAYPATSTATE INSTANCING LAYER LAddToInstance LHideInstanceIn LPromoteLayer LSetAlphaBits Layer MarkRec NONRETAINED NULL NX_BLACK NX_DKGRAY NX_LTGRAY NX_WHITE OFFSETBOUNDS OPAQUE PSGetGStateExt PSInvalidID RETAINED Wd2Layer boolean boundBounds false promoteParms sectBounds true withinBounds }
LMarkObj		include/basictypes.h	/^#define	LMarkObj(o)	o = iLMarkObj/ ;" macro 1 { PSCrCParams PSLBrak PSMark StmToken }	{ iLMarkObj }
LMoveTo		bintree/layer.c	/^void LMoveTo(Layer *layer, Point newOrigin)/ ;" function 136 { PSMoveWindow }	{ ABOVE BELOW Bounds DIVPIECE DPSwapCause DebugAssert ExpandTempCauses LAYER LObscureInside LRevealInside Layer MAKECONVERTCAUSE NULL NXBag OFFSETBOUNDS SubList TOUCHBOUNDS UniqueCause WLAboveButNotAbove WLBelowButNotBelow d deviceCause dummySubList extSubList hookData numTempCauses offSubList tempCauses withinBounds }
LNRF		language/numstrm.c	/^private Fixed LNRF(ns) register PNumStrm ns; {/ ;" function 13 { SetupNumStrm }	{ Card32 character pflttofix real register ss }
LNRR		language/numstrm.c	/^private procedure LNRR(ns, p) register PNumStrm ns/ ;" function 11 { SetupNumStrm }	{ Card32 PCard32 character p register ss }
LNameArrayObj		include/basictypes.h	/^#define	LNameArrayObj(o,v) LGenericObject(o,objNam/ ;" macro 1 { }	{ objNameArray }
LNameObj		include/basictypes.h	/^#define	LNameObj(o,v)	o = iLNameObj; (o).val.nmval/ ;" macro 1 { LoadName NameIndexObj PSExecuteOperator PrNameAryBody PrintObj StmToken pSFC }	{ iLNameObj }
LNew		bintree/layer.c	/^static Layer *LNew()/ ;" function 9 { LNewAt LNewDummyAt }	{ LAYER Layer layerPool os_newelement }
LNewAt		bintree/layer.c	/^Layer *LNewAt(int type, Bounds pane, int *win, int/ ;" function 62 { LPlaceAt WBCopyLayer window }	{ A_ONE BACKCHAN BAGFind BPAllocBag BPNewAt Bitmap Bounds CompositeOperation DIVPIECE DPSwapCause LNew Layer MAKECONVERTCAUSE NULL NXDevice OFFSCREEN UniqueCause collapseBounds copyCO deviceCause deviceList extSubList holeDevice r sectBounds strcmp true whitepattern }
LNewDummyAt		bintree/layer.c	/^Layer *LNewDummyAt(Bounds pane)/ ;" function 11 { EXAllocDummies EXBuildExtents EXFindHoles }	{ DUMMY LNew Layer UniqueCause collapseBounds }
LNewInstance		bintree/layer.c	/^void LNewInstance(Layer *layer)/ ;" function 8 { PSNewInstance }	{ DebugAssert LAYER LHideInstanceIn false }
LNullObj		include/basictypes.h	/^#define	LNullObj(o)	o = iLNullObj/ ;" macro 1 { CheckForPSNotify CheckStackElement DestroyNameMap GC_CollectPrivate GC_CollectShared Init_SaveRestore MakeNullObjects PSDeviceInfo PSExecUserObj PSLNullObj PSSetColorScreen PSSetScreen PSUndefUserObj TraceSharedVM TypeInit UnDef }	{ iLNullObj }
LO		fp/isinfieee.c	/^#define LO d0/ ;" macro 1 { os_isinf os_isnan }	{ }
LOCommon		mp/mp12.h	/^typedef struct _lineoperationcommon {/ ;" typedef 8 { }	{ }
LOG2BPP		devpattern/ims11d11.c	/^#define LOG2BPP 0/ ;" macro 1 { ImS1XD11 SMASK SSHIFT }	{ }
LOG_PS_DRIVER		bintree/drivers.c	/^#define LOG_PS_DRIVER	(LOG_ERR)/ ;" macro 1 { GuaranteeActiveScreen LoadSingleDriver }	{ }
LOOP32		bitmap/bm34comp.c	/^#define LOOP32(nwords, op) { \\/ ;" macro 1 { BM34MoveRect BMComposite34 BMComposite38 }	{ register }
LOWERSHOWBOUND		fonts/fontshow.c	/^if (!CvtToXFixed(&(ss-->fdcp), ssr->rdcp, LOWERSHO/ ;" global 1 { CompositeShow DTfmToFixed FastShow MakeCacheDev SetCharWidth ShowByName SimpleShowByName TfmToBB if }	{ }
LOWMASK		mp/hlrect.c	/^#define LOWMASK (0x55555555) \/* Low order bit mask/ ;" macro 1 { HighlightRect }	{ }
LOWORD		bitmap/bm34comp.c	/^#define LOWORD(a) ((unsigned short)((a)&0xffff))/ ;" macro 1 { }	{ }
LObscureInside		bintree/layer.c	/^static void LObscureInside(Layer *layer, Bounds *r/ ;" function 10 { LMoveTo LObscureSubList LSubListObscure }	{ Bounds DebugAssert LAYER NULL sectBounds }
LObscureSubList		bintree/layer.c	/^static void LObscureSubList(Layer *layer, SubList / ;" function 9 { LOrder }	{ LObscureInside Layer TOUCHBOUNDS }
LOrder		bintree/layer.c	/^void LOrder(Layer *layer, int op, Layer *otherLaye/ ;" function 75 { LPlaceAt PSOrderWindow PSSetWindowLevel TermWindow }	{ ABOVE BELOW DebugAssert LAYER LObscureSubList LRevealSubList LSubListObscure LSubListReveal NXBag OFFSCREENREASON ONSCREENREASON OUT PSInvalidID WLAboveButNotAbove WLBelowButNotBelow WLPutAfter WLPutBefore WLRemove d hookData offSubList }
LPkdaryObj		include/basictypes.h	/^#define	LPkdaryObj(o,l,v)					\\/ ;" macro 1 { Pkdary }	{ LEVEL iLPkdaryObj level vmCurrent }
LPlaceAt		bintree/layer.c	/^Layer *LPlaceAt(Layer *layer, Bounds newBounds)/ ;" function 87 { PSPlaceWindow }	{ A_BITS BACKCHAN BELOW BPPointScreen BPReplaceBits Bounds CompositeOperation DebugAssert FlushRedrawRects IntersectAndCompareBounds LAYER LFlushBits LFree LNewAt LOrder LRedraw LSetAlphaBits Layer NONRETAINED NULL NXBag REDRAW_CHANGED copyCO d hookData sectBounds }
LPreCopyBitsFrom		bintree/layer.c	/^int LPreCopyBitsFrom(Layer *layer)/ ;" function 4 { PSSizeImage }	{ logToPhysDepth }
LPrintOn		bintree/layer.c	/^void LPrintOn(Layer *layer, int dumpLevel)/ ;" function 31 { PSDumpWindow PSDumpWindows }	{ A_BITS BUFFERED DUMMY DebugAssert LAYER NONRETAINED NXBag RETAINED const fflush os_fprintf os_stdout }
LPromoteLayer		bintree/layer.c	/^static void LPromoteLayer(Layer *layer, int depth)/ ;" function 17 { LCompositeFrom LMark }	{ BPCopyback CopybackRetained DevMarkInfo NULL NXBag PSGetMarkInfo }
LRealObj		include/basictypes.h	/^#define	LRealObj(o,v)	o = iLRealObj; (o).val.rval=/ ;" macro 1 { AddRealEntry DecodeObj EPushPReal GetErosion MtxToPAry PSPushPReal PSUPath ReadNumAry RelocateObj StmToken }	{ iLRealObj }
LRedraw		bintree/layer.c	/^void LRedraw(Layer *layer, Bounds *rp, int why)/ ;" function 20 { BPAdjust LPlaceAt LRepaintIn }	{ Bounds ChangedWindowDevice GlobalToLocal Layer2Wd REDRAW_EXPOSED RedrawWindowDevice r wsBounds }
LRemoveFromInstance		bintree/layer.c	/^static void LRemoveFromInstance(Layer *layer, Boun/ ;" function 32 { LHideInstanceIn }	{ BBoxCompareResult Bounds DebugAssert IntersectAndCompareBounds LAYER false }
LRepaintIn		bintree/layer.c	/^void LRepaintIn(Layer *layer, Bounds bounds, NXBag/ ;" function 24 { BPRevealBecause }	{ BAGCompositeFrom CompositeOperation DebugAssert LAYER LRedraw REDRAW_EXPOSED VISCHAN copyCO d hookData }
LRevealInside		bintree/layer.c	/^static void LRevealInside(Layer *layer, Bounds *re/ ;" function 11 { LMoveTo LRevealSubList LSubListReveal }	{ Bounds DebugAssert ISCONVERTCAUSE LAYER NULL sectBounds }
LRevealSubList		bintree/layer.c	/^static void LRevealSubList(Layer *layer, SubList s/ ;" function 9 { LFree LOrder }	{ LRevealInside Layer TOUCHBOUNDS }
LSData		language/stodevedit.c	/^typedef struct {BufItem *firstBuf, *curBuf;} LSDat/ ;" typedef 1 { LineEdit LineFAvail LineFClose LineFilBuf LineUnGetc Rewind Truncate }	{ }
LSHIFT		include/devpattern.h	/^#define LSHIFT >>/ ;" macro 1 { BlackMasksMark BlackMasksMarkReal BuildGrayPattern BuildPattern ConstantMasksMark GrayMasksMark MP12Convert2to2 RollPattern RollRight SetupMonoPattern WhiteMasksMark rotate }	{ }
LSHIFTEQ		include/devpattern.h	/^#define LSHIFTEQ >>=/ ;" macro 1 { ClippedMasksMark ImS12D12NoTfr ImS1XD11 ImSXXD11 }	{ }
LSaveObj		include/basictypes.h	/^#define	LSaveObj(o,v)						\\/ ;" macro 1 { PSSave }	{ LEVEL iLSaveObj level }
LSetAlphaBits		bintree/layer.c	/^static void LSetAlphaBits(Layer *layer)/ ;" function 25 { LCompositeFrom LMark LPlaceAt }	{ A_BITS BPCopyback CopybackRetained DebugAssert LAYER NONRETAINED NXBag }
LSetAlphaOpaque		bintree/layer.c	/^static void LSetAlphaOpaque(Layer *layer)/ ;" function 5 { LInitPage }	{ A_ONE DebugAssert LAYER }
LSetAutofill		bintree/layer.c	/^void LSetAutofill(Layer *layer, int flag)/ ;" function 5 { PSSetAutofill }	{ DebugAssert LAYER }
LSetDepthLimit		bintree/layer.c	/^void LSetDepthLimit(Layer *layer, int cap)/ ;" function 19 { PSSetWindowDepthLimit }	{ BPCopyback CopybackRetained DebugAssert DevMarkInfo LAYER NULL NXBag PSGetMarkInfo }
LSetExposureColor		bintree/layer.c	/^void LSetExposureColor(Layer *layer)/ ;" function 11 { PSSetExposureColor }	{ DebugAssert DevMarkInfo LAYER NULL OPAQUE PNew PSGetMarkInfo PSetHalftone }
LSetSendRepaint		bintree/layer.c	/^void LSetSendRepaint(Layer *layer, int update)/ ;" function 5 { PSSetSendExposed }	{ DebugAssert LAYER }
LSetType		bintree/layer.c	/^int LSetType(Layer *layer, int newtype)/ ;" function 17 { PSSetWindowType }	{ A_BITS BPCopyback BUFFERED DebugAssert LAYER LFlushBits RETAINED collapseBounds }
LStmObj		include/basictypes.h	/^#define	LStmObj(o,i,s)						\\/ ;" macro 1 { AllocPStream BMRun FCOpenStream MakePStm }	{ LEVEL iLStmObj level s vmCurrent }
LStrObj		language/scanner.c	/^#define	LStrObj(o,l,v) \\/ ;" macro 1 { AllocPString AllocRAMStr DecodeObj FetchCharOutline Init_Cmds KAEndCSDict MakeCompFont NameToPString PSDumpNames RelocateObj StmToken VMObjForPString pCIs }	{ CurrentShared false iLStrObj level true }
LSubListObscure		bintree/layer.c	/^static void LSubListObscure(Layer *layer, SubList / ;" function 9 { LOrder }	{ LObscureInside Layer TOUCHBOUNDS }
LSubListReveal		bintree/layer.c	/^static void LSubListReveal(Layer *layer, SubList s/ ;" function 9 { LOrder }	{ LRevealInside Layer TOUCHBOUNDS }
LTGRAY		bitmap/bm38.c	/^#define LTGRAY 	0xaaaaaaff/ ;" macro 1 { }	{ }
LTGRAY_COLOR		include/bintree.h	/^#define LTGRAY_COLOR    0xAAAAAAAA/ ;" macro 1 { }	{ }
LanguageData		language/langdata.h	/^typedef struct {/ ;" typedef 8 { LanguageInit }	{ }
LanguageDataHandler		language/exec.c	/^private procedure LanguageDataHandler (code)/ ;" function 64 { LanguageInit }	{ ClearExecStack ClearStack DestroyNameMap DictCtxDestroy IEEEFLOAT KillStack NIL STKSIZELIMIT SWAPBITS StmCtxCreate curStackLimit dictStk echo execStk languageCtxt objectFormat of_highIEEE of_highNative of_lowIEEE of_lowNative opStk os_ps randx refStk stackRstr timestamp true }
LanguageInit		language/exec.c	/^public procedure LanguageInit(reason)/ ;" function 37 { }	{ ArrayInit BinObjInit DictInit ExecInit GC_RgstGetRootsProc GC_RgstSharedRootsProc Globals GlobalsRec LANGUAGESTATICEVENTS LanguageData LanguageDataHandler MathInit NIL NUM_PACKAGE_NAMES NameInit PACKAGE_INDEX PCard8 PSRun PVoidProc PkdaryInit PubLangCtxt PushLangRoots RefAny RegisterData RgstExplicit RgstPackageNames ScannerInit StackInit StreamInit StringInit TypeInit checkingYield globals integer languageCtxt languageNames os_sureCalloc pubLangCtxt yieldLoc1 yieldLoc2 }
LargeAllocThreshold		vm/abmimpl.c	/^#define	LargeAllocThreshold 80	\/* ARBITRARY	*\// ;" macro 1 { AllocInternal }	{ }
LastCurMID		fonts/midcache.c	/^private MID LastCurMID;/ ;" global 1 { InitSortMID MMEldest MSEldest SortMIDAges }	{ }
Layer		include/bintree.h	/^typedef struct _layer Layer;/ ;" typedef 1 { EXAddToSubList EXBuildExtents EXFindHoles GetFrontWindowDevice LCompositeFrom LFill LFind LInitPage LInitialize LMark LMoveTo LNew LNewAt LNewDummyAt LObscureSubList LPlaceAt LRevealSubList LSubListObscure LSubListReveal NXSetHookMask NXWID2Bag PSAdjustMouse PSDumpWindow PSFillWindow PSFindWindow PSOrderWindow PSReadImage PSSetWindowLevel PSSizeImage SetGSCursor WBChangeBitmap WBCloseBitmap WBCurrentLayer WBGetDeviceInfo WBOpenBitmap WLExpand WLInitialize WLOffsetOf WLPutAfter WLPutBefore checkOrderingValdity }	{ }
Layer2Wd		bintree/layer.c	/^WindowDevice *Layer2Wd(Layer *layer)/ ;" function 6 { GetFrontWindowDevice GetNextWindowDevice LRedraw PSCountScreenList PSFindWindow PSScreenList RecalcMouseRect checkOrderingValdity highestWindowInTier lowestWindowInTier }	{ DebugAssert LAYER NULL WindowDevice }
LayerInit		bintree/layer.c	/^void LayerInit(int reason)/ ;" function 12 { NextCustomProc }	{ BAGInitialize BPInitialize CSInitialize DPInitialize LInitialize PInitialize WLInitialize }
LdrHeader		include/disk.h	/^typedef struct _t_LdrHeader {	\/* fixed header for / ;" typedef 11 { }	{ }
LdrOffset		include/disk.h	/^typedef unsigned short int LdrOffset; \/* offset fr/ ;" typedef 1 { }	{ }
LeftDir		graphics/cscan.c	/^#define LeftDir		1/ ;" macro 1 { CSPathPoints FinishPath }	{ }
Len1000		fonts/fontmatrix.c	/^private Fixed Len1000() {/ ;" function 6 { SetupFntMtx }	{ ApproxDLen FCd FixInt Fixed MAX l1 }
Length		device/maskcache.h	/^#define Length(o) ((o->header.free.tag == BMFreeTa/ ;" macro 1 { BMRun CheckBM }	{ BMFreeTag free header }
LengthTfm		graphics/stroke.c	/^private real LengthTfm(u, maxFlg) Component u; boo/ ;" function 12 { GetMaxBevelChord SetHalfWidth }	{ Cd DTfmP Dist fpZero real }
Level		include/basictypes.h	/^typedef Card8 Level;/ ;" typedef 1 { AllocLarge AllocPName AllocPStream AllocSmall ExpandVMSection FindFreeBytes GCInternal_ResetFreePointer PSRstr PSSave ReadVM RgstOpSet RgstPackageNames VMExpandDict }	{ }
LimitCheck		include/error.h	/^#define LimitCheck	PSLimitCheck/ ;" macro 1 { ActivateTfr AddToPath AllocScanList BuildEdge CheckCompositeFont CreateContext CreateFileStream FindOpDef FindOpSet GSave GetType3Screen GetType4Screen GetValidFreqAngleOctet GetValidFreqAnglePair ImageInternal LineEdit MNew MakeLine MakePoint MakeRegion MakeType1Screen MakeType2Screen MaxNEW NewContextID NewScreen NewSpaceID NewStack OutOfMemory Overflow PQInsert PSEExec PSFork PSInitFontCache PSSetDash PopFlName PopLimitCard PutInNameMap RdBytes ReadBinObjSeq Save SetCacheLimit StmToken StoDevStrStatus TrickyDictP WriteObject newstn }	{ PSLimitCheck }
LimitColor		graphics/colorops1.c	/^public procedure LimitColor(r) Preal r; {/ ;" function 7 { CrRGBColor FillInBG PSCrCMYKColor PSCrGray PopPColorVal }	{ RealLt0 fpOne fpZero r real }
Line		graphics/reducer.c	/^  typedef struct/ ;" typedef 13 { IniReducer InitReducer MakeLine }	{ }
LineComplete		language/scanner.c	/^public boolean LineComplete(stm)/ ;" function 78 { LineEdit }	{ CantHappen Int32 LF NEWSTATE PCard8 PStateRec _empty _errhex _errini _errstr _strg _strnest _uename _uinum _ulname _urnum _uxname axbeg axend binClassArray cdisceol disceol false fflush getc litstrState noBinClassArray objectFormat register startState true ungetc }
LineEdit		language/stodevedit.c	/^private Stm LineEdit(in, out, stmt)/ ;" function 113 { EStmCreate }	{ BufItem CloseFile DURING END_HANDLER EOF Erase HANDLER LSData LimitCheck LineComplete Lobj MakePStm NBUFCHARS NEW NIL NULL RERAISE Rewind Stm StmCreate StmObj StreamError Truncate character data echo false fclose ferror fflush getc integer lineStmProcs os_fgetc os_fputc r true ungetc }
LineFAvail		language/stodevedit.c	/^private int LineFAvail(stm)/ ;" function 12 { }	{ BufItem EOF LSData NIL data integer }
LineFClose		language/stodevedit.c	/^private int LineFClose(stm)/ ;" function 10 { }	{ BufItem FREE LSData NIL StmDestroy data }
LineFFlush		language/stodevedit.c	/^private int LineFFlush(stm)/ ;" function 6 { }	{ EOF LineFilBuf }
LineFilBuf		language/stodevedit.c	/^private int LineFilBuf(stm)/ ;" function 11 { LineFFlush }	{ BufItem EOF LSData NIL data getc }
LineOperation		mp/mp12.h	/^typedef struct _lineoperation {/ ;" typedef 5 { BmALine BmRLine BmULine ConLine MRMoveRect PatLine }	{ }
LineSource		mp/mp12.h	/^typedef struct {/ ;" typedef 17 { }	{ }
LineTo		graphics/pathbuild.c	/^public procedure LineTo(c, p) / ;" function 7 { AddTrapezoidToPath Arc ArcC BuildChar BuildMultiRectPath CallArc ConvertToListPath DoArcTo DoUAppend FLineTo FillBevel FillQuad FlPthLnTo PSLineTo PSRLineTo RLineTo UPLineTo UsrPthArc UsrPthArcTo UsrPthDoLineTo UsrPthLineTo }	{ AddToPath CheckCurPt p pathlineto }
LineUnGetc		language/stodevedit.c	/^private int LineUnGetc(ch, stm)/ ;" function 15 { }	{ BufItem EOF LSData NBUFCHARS NIL data }
LinkDP		graphics/graphics.c	/^public procedure LinkDP (dp, nextDP)/ ;" function 6 { MarkDevPrim ReducePathClipInt ShowMask }	{ NULL }
LinkRegionFreeList		graphics/reducer.c	/^private procedure LinkRegionFreeList()/ ;" function 8 { InitReducer }	{ PRegion PRg Region RgOffset free maxRegions rgFree rgsOut }
LinkTfr		graphics/transferimpl.c	/^private procedure LinkTfr(t) register TfrFcn t; {/ ;" function 5 { ActivateTfr }	{ NIL tfrFcnFirst tfrFcnLast }
Links		include/pslib.h	/^typedef struct _t_Links {/ ;" typedef 3 { AddEntry CacheInvalidate CacheLookup DisplaceEntries FreeHdr NHdr PHdr StmDestroy UnlinkEntry }	{ }
LinoCpyrt		include/copyright.h	/^static char LinoCpyrt[] =/ ;" global 4 { }	{ }
LinoCpyrtMore		include/copyright.h	/^static char LinoCpyrtMore[] =/ ;" global 13 { }	{ }
ListPath		include/graphics.h	/^typedef struct _t_ListPath {/ ;" typedef 6 { AddPathRef AddToBBox AddToPath AllocListPathRec AppendPath ClosePath Fill GSAddRefs IsPathEmpty MakeOwnListPath PathBuildInit PathIsRect RemPathRef ReversePath StrkInternal TlatPath }	{ }
ListenerInit		product/listener.c	/^public procedure ListenerInit(int reason)/ ;" function 12 { NextCustomProc }	{ PSRgstOps cmdListener false globalUserSet loginContextSet }
ListenerState		product/listener.c	/^typedef enum _ListenerState {/ ;" typedef 6 { }	{ }
LitNameBase		language/opcodes.h	/^#define LitNameBase	(ObjectEscape+1)		\/* literal n/ ;" macro 1 { DecodeObj EncodeObj EnumerateComposites ExecNameBase RelocateObj }	{ ObjectEscape }
LnOffset		graphics/reducer.c	/^typedef Card32 LnOffset;/ ;" typedef 1 { CheckIntersection MakeLine RdcBend RdcEntry RdcExit }	{ }
Load		language/dict.c	/^public boolean Load(key, pVal)/ ;" function 12 { BindArray BindPkdary KAEndCSDict PSLoad PSOpDef PSRgstOps RgstExplicit RgstObject }	{ MapFontDirectory TTLRec VMGetValue boolean d trytoload }
LoadActiveDrivers		bintree/drivers.c	/^static int LoadActiveDrivers()/ ;" function 19 { DriverInit }	{ LoadSingleDriver NXDriver NXMonitor d driverList net netCount strcmp }
LoadAllDrivers		bintree/drivers.c	/^static void LoadAllDrivers(int unref)/ ;" function 26 { DriverInit }	{ FilterDirProc LoadSingleDriver displayPath free net netCount strcmp }
LoadData		vm/staticdata.c	/^public procedure LoadData (To_StaticData)/ ;" function 21 { Ctxt_SetCurrentCtxt SwitchPSContext }	{ Assert BLUNDERKEY CallDataProcedures LoadPointers NIL integer staticData }
LoadName		language/dict.c	/^public boolean LoadName(key, pVal)/ ;" function 14 { ILoadPNE ReadBinObjSeq StmToken }	{ LNameObj MapFontDirectory NameObj TTLRec VMGetValue boolean d trytoload }
LoadPointers		vm/staticdata.c	/^public procedure LoadPointers (To_StaticData)/ ;" function 19 { CreateData Ctxt_SetCurrentCtxt LoadData }	{ BLUNDEROVERHEAD DataRecord NIL PCard8 integer staticData }
LoadSingleDriver		bintree/drivers.c	/^static int LoadSingleDriver(char *name)/ ;" function 51 { DriverInit LoadActiveDrivers LoadAllDrivers }	{ DynaLoadFile DynaUnloadFile LOG_PS_DRIVER MEGAPIXEL MPStart NULL NXDriver NXStartDriver START_SYMBOL displayPath driverCount driverList false free header os_fprintf os_stderr sprintf start strcmp true }
LoadVM		vm/saverestore.c	/^public procedure LoadVM (newVM)/ ;" function 17 { CreateContext CreatePSContext CreatePrivateVM DestroyVM }	{ NOLL RootPointer SetShared false level privateRecycler rootPrivate vmPrivate }
Lobj		include/basictypes.h	/^#define	Lobj	0	\/* tag for literal object *\// ;" macro 1 { CrFile CreateFileStream DecodeObj InitBOSTypeMap LineEdit MakeStr PSCrFile PSCvLit PSEExec PSExecuteOperator PSFontRun RelocateObj StmCtxCreate StmToken WriteObject pcom }	{ }
LocalBMClass		include/bitmap.h	/^typedef struct _LocalBMClass {/ ;" typedef 24 { BM34InitClassVars BM34NewFromData BM38InitClassVars BM38NewFromData LBMBecomePSDevice LBMInitClassVars MP12InitBricks MP12InitClassVars MP12NewFromData bm__mark bm_becomePSDevice bm_newFromData }	{ }
LocalBitmap		include/bitmap.h	/^typedef struct _LocalBitmap {/ ;" typedef 9 { BM34Composite BM34ConvertFrom BM34NewAlpha BM34_Mark BM38Composite BM38ConvertFrom BM38NewAlpha BM38_Mark LBMFree LBMInitClassVars LBMNew LBMNewAlpha LBMNewFromData LBMSizeInfo LCopyBitsFrom LGetBacking MP12Composite MP12ConvertFrom MP12MakePublic MP12New MP12NewAlpha MP12NewFromData MP12_Mark MPDisplayCursor16 MPDisplayCursor2 MPPromoteWindow MPRemoveCursor16 MPRemoveCursor2 PSReadImage bm_becomePSDevice }	{ }
LocalToGlobal		product/coordinates.c	/^public procedure LocalToGlobal(PWindowDevice wd, i/ ;" function 10 { PostEvent }	{ Bounds CheckWindowDev GetWinBounds NULL PSGetDevice PWindowDevice Wd2Layer }
Lock		postscript/contextimpl.c	/^typedef struct _t_Lock { \/* concrete representatio/ ;" typedef 5 { NewLock }	{ }
LockCd		fonts/fontbuild.c	/^public Cd LockCd(cp)  Cd cp;/ ;" function 8 { PSLck }	{ FCd LockPFCd PFCdToPRCd PRCdToPFCd }
LockObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 50 { }	{ }
LockPFCd		fonts/fontbuild.c	/^private procedure LockPFCd(pfcd, pfcdret)  PFCd pf/ ;" function 6 { CCRunStd LockCd }	{ InitSlopes Map pLokData }
LoginContextKilled		product/listener.c	/^public procedure LoginContextKilled()/ ;" function 4 { NSDestroyPS }	{ false loginContextSet }
LokData		fonts/fontbuild.c	/^typedef struct _LokData/ ;" typedef 10 { BuildChar FontBuildInit StartLock }	{ }
LokPair		fonts/fontbuild.c	/^typedef struct/ ;" typedef 9 { SetXLock SetYLock }	{ }
LokSeq		fonts/fontbuild.c	/^typedef struct/ ;" typedef 7 { }	{ }
Lookup		fonts/cacheimpl.c	/^private PCacheEntHdr Lookup(cache, tag, id)/ ;" function 17 { CacheAddEntry CacheLookup CacheRemoveEntry ChrMapBuildChar }	{ NULL PCacheEntHdr boolean register }
LowMask		devpattern/imagepriv.h	/^#define LowMask (0xFFFFL)/ ;" macro 1 { Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 }	{ }
MA		fonts/midcache.c	/^public PCard32 MA;/ ;" global 1 { DecrSetMIDAge InitFontCache InitSortMID IsFreeMT MMEldest MSEldest MTAlloc MTFree QuickSort SetMIDAge SortMIDAges }	{ }
MAC_HEADER_LENGTH		fonts/fontrun.h	/^#define MAC_HEADER_LENGTH 256/ ;" macro 1 { DetermineFormat }	{ }
MAKECONVERTCAUSE		bintree/bintreetypes.h	/^#define MAKECONVERTCAUSE(c) (c | 0x80000000)/ ;" macro 1 { LMoveTo LNewAt }	{ }
MAKEVM		include/environment.h	/^#define MAKEVM (STAGE==DEVELOP && vSTAGE==EXPORT)/ ;" macro 1 { CreatePSContext InitPostScript PathExtraOpsInit UnixInit }	{ DEVELOP EXPORT vSTAGE }
MAPLOG		stream/unixfopen.c	/^#define MAPLOG 1/ ;" macro 1 { }	{ }
MASKA34		mp/mpconv12.c	/^#define MASKA34 0x000F/ ;" macro 1 { MP12Convert16to2 }	{ }
MASKA38		mp/mpconv12.c	/^#define MASKA38 0x000000FF/ ;" macro 1 { MP12Convert32to2 }	{ }
MASKB34		mp/mpconv12.c	/^#define MASKB34 0x00F0/ ;" macro 1 { CONVERT16TO8 }	{ }
MASKB38		mp/mpconv12.c	/^#define MASKB38 0x0000FF00/ ;" macro 1 { CONVERT32TO8 }	{ }
MASKCACHE_H		device/maskcache.h	/^#define	MASKCACHE_H/ ;" macro 1 { }	{ }
MASKCOMPRESSION		device/genericdev.h	/^#define MASKCOMPRESSION 0/ ;" macro 1 { }	{ }
MASKDEVICE_H		device/framemaskdev.h	/^#define MASKDEVICE_H/ ;" macro 1 { }	{ }
MASKG34		mp/mpconv12.c	/^#define MASKG34 0x0F00/ ;" macro 1 { CONVERT16TO8 }	{ }
MASKG38		mp/mpconv12.c	/^#define MASKG38 0x00FF0000/ ;" macro 1 { CONVERT32TO8 }	{ }
MASKGA		product/windowdevice.c	/^#define MASKGA 0x0ff00ff/ ;" macro 1 { AMulInPlace MASKRB }	{ }
MASKR34		mp/mpconv12.c	/^#define MASKR34 0xF000/ ;" macro 1 { CONVERT16TO8 }	{ }
MASKR38		mp/mpconv12.c	/^#define MASKR38 0xFF000000/ ;" macro 1 { CONVERT32TO8 }	{ }
MASKRB		product/windowdevice.c	/^#define MASKRB ~MASKGA/ ;" macro 1 { AMulInPlace }	{ MASKGA }
MATCH_ANY_NAME		fonts/fontrun.h	/^#define MATCH_ANY_NAME 32767/ ;" macro 1 { ActOnKeyword }	{ }
MAX		include/publictypes.h	/^#define MAX(a,b) ((a)>(b)?(a):(b))/ ;" macro 1 { AdvanceEdges CCRunStd CallAddTrapToPath CheckIntersection ClippedMasksMark ClumpCntrs ConvertToListPath DoRdcPth EnterGlbCntr FastName FindMaxFID InitFontCache Len1000 OffsetFill Overlap QIntersect QIntersectTrp ReduceQuadPath SearchDict SetScal SetScalFromBBoxes ShipTrapezoid SimpleCounter StartCache TfmToBB TrapTrapDispatch TriLock }	{ }
MAXArrayLength		language/opcodes.h	/^#define MAXArrayLength		(MINArrayLength + (1<<Bits/ ;" macro 1 { EncodeObj }	{ BitsForLength MINArrayLength }
MAXBANDS		fonts/glbclr.h	/^#define MAXBANDS 32	\/* Maximum number of bands. *\// ;" macro 1 { IniGlbClrBuffs MAXBEDGE NDIFF }	{ }
MAXBEDGE		fonts/glbclr.h	/^#define MAXBEDGE MAXBANDS*2   \/* maximum number of/ ;" macro 1 { }	{ MAXBANDS }
MAXBINOBJSEQLENGTH		language/binaryobject.c	/^#define MAXBINOBJSEQLENGTH 0x480000/ ;" macro 1 { ReadBinObjSeq }	{ }
MAXBLUELEN		fonts/fontdata.h	/^#define MAXBLUELEN (MAXBLUES+2)/ ;" macro 1 { GetBlueArrays }	{ MAXBLUES }
MAXBLUES		fonts/fontdata.h	/^#define MAXBLUES (12)/ ;" macro 1 { MAXBLUELEN MAXOTHERBLUELEN }	{ }
MAXBLUESHIFT		fonts/fontbuild.c	/^#define MAXBLUESHIFT (FixedHalf-1)/ ;" macro 1 { BlueLock }	{ FixedHalf }
MAXCDs		fonts/fontbuild.c	/^#define MAXCDs 12/ ;" macro 1 { }	{ }
MAXCIRCLEJOINDEPTH		graphics/stroke.c	/^#define MAXCIRCLEJOINDEPTH (4)/ ;" macro 1 { FastFillCurveJoin FillCurveJoin }	{ }
MAXCISize		include/graphics.h	/^#define MAXCISize (MAXCard16-1)/ ;" macro 1 { PSInitFontCache }	{ MAXCard16 }
MAXCOLOR		device/devcommon.h	/^#define MAXCOLOR MAXCard8/ ;" macro 1 { AllocInfoVector BuildGrayPattern BuildPattern CalcThresholds ConvertColorCMYK FillInBG FillInTfrTbl FillInUCR FreeInfoVector MonoSetup SetTransfer SetupMonoPattern }	{ MAXCard8 }
MAXCard16		include/publictypes.h	/^#define MAXCard16 0xFFFF/ ;" macro 1 { CIUNLINKED KACharDef MAXCISize MAXcardinal NULLMaskIndex PSCoProc PSFork PopLimitCard WriteObject newstn }	{ }
MAXCard32		include/publictypes.h	/^#define MAXCard32 ((unsigned long)0xFFFFFFFF)/ ;" macro 1 { GetProcSource GetStringSource MAXlongcardinal MAXunsignedinteger StmToken }	{ }
MAXCard8		include/publictypes.h	/^#define MAXCard8 0xFF/ ;" macro 1 { MAXCOLOR WriteObject }	{ }
MAXDCMPUNITS		graphics/graphicspriv.h	/^#define MAXDCMPUNITS 128/ ;" macro 1 { }	{ }
MAXDIRSIZE		include/disk.h	/^#define MAXDIRSIZE 30		\/* max length of directory / ;" macro 1 { }	{ }
MAXEntries		language/name.c	/^#define MAXEntries 10			\/* record [0...10] entries/ ;" macro 1 { PSDumpNames }	{ }
MAXFILEPAGE		include/filetypes.h	/^#define MAXFILEPAGE 0x40000000	\/* max data pages i/ ;" macro 1 { }	{ }
MAXFLEX		fonts/fontbuild.c	/^#define MAXFLEX (8)/ ;" macro 1 { BuildChar CCRunStd }	{ }
MAXFixed		graphics/cscan.c	/^#define MAXFixed MAXInt32	\/* Maximum Fixed value */ ;" macro 1 { BuildCxtn CSPathPoints FillInColumn ResetCScan }	{ MAXInt32 }
MAXGenericIDGeneration		include/publictypes.h	/^#define	MAXGenericIDGeneration	((Card32)((1 << Bit/ ;" macro 1 { BumpCETimeStamp }	{ BitsInGenericGeneration Card32 }
MAXGenericIDIndex		include/publictypes.h	/^#define	MAXGenericIDIndex	((Card32)((1 << BitsInGe/ ;" macro 1 { ContextOpsInit SetCETimeStamp }	{ BitsInGenericIndex Card32 }
MAXIMUMSIZE		device/nextprebuilt.h	/^#define MAXIMUMSIZE 24.0/ ;" macro 1 { CheckPrebuiltMatrix }	{ }
MAXInt32		include/publictypes.h	/^#define MAXInt32 ((Int32)0x7FFFFFFF)/ ;" macro 1 { MAXFixed PSCVRS ReadSegHeader ResetReducer ScannerInit os_newpool }	{ Int32 }
MAXMID		include/graphics.h	/^#define MAXMID 07777	\/* maximum of 12 bits *\// ;" macro 1 { PSInitFontCache }	{ }
MAXMSize		fonts/fontspriv.h	/^#define MAXMSize          256/ ;" macro 1 { InitFontCache }	{ }
MAXMTSize		fonts/fontspriv.h	/^#define MAXMTSize         MAXMasks\/12/ ;" macro 1 { InitFontCache }	{ }
MAXMasks		fonts/fontspriv.h	/^#define MAXMasks          8000/ ;" macro 1 { InitFontCache }	{ }
MAXNAMELENGTH		include/stodev.h	/^#define MAXNAMELENGTH 100/ ;" macro 1 { PopFlName StoDevStrStatus }	{ }
MAXNAMESIZE		include/filetypes.h	/^#define MAXNAMESIZE 100		\/* maximum length of file/ ;" macro 1 { }	{ }
MAXNUMCHANNELS		include/imagemessage.h	/^#define MAXNUMCHANNELS 5/ ;" macro 1 { }	{ }
MAXNameIndex		language/opcodes.h	/^#define MAXNameIndex	(NameCodes * 256 - 1)/ ;" macro 1 { EncodeObj }	{ NameCodes }
MAXOTHERBLUELEN		fonts/fontdata.h	/^#define MAXOTHERBLUELEN (MAXBLUES-2)/ ;" macro 1 { GetBlueArrays }	{ MAXBLUES }
MAXOffset		language/opcodes.h	/^#define MAXOffset		(MINOffset - ((1<<BitsForOffset/ ;" macro 1 { EncodeObj }	{ BitsForOffset MINOffset }
MAXPAT		devpattern/patternpriv.h	/^#define MAXPAT (256)/ ;" macro 1 { AllocPatternIndex DestroyPat FlushPatCache FreeOldestPattern InitPatternImpl }	{ }
MAXPATTERNACTIONS		graphics/cscan.c	/^#define MAXPATTERNACTIONS 3	\/* Maximum number of a/ ;" macro 1 { }	{ }
MAXPERMDICTS		language/dict.h	/^#define	MAXPERMDICTS 10	\/* max number of permenant/ ;" macro 1 { }	{ }
MAXSCRN		devpattern/patternpriv.h	/^#define MAXSCRN 32/ ;" macro 1 { AllocScrnSlot FreeScreen InitPatternImpl SendOldestToDisk }	{ }
MAXSP		devpattern/patternimpl.c	/^#define MAXSP 2/ ;" macro 1 { AllocScreenPrivate }	{ }
MAXSTDW		fonts/fontdata.h	/^#define MAXSTDW (12)/ ;" macro 1 { }	{ }
MAXSTMS		fonts/fontdata.h	/^#define MAXSTMS (12)/ ;" macro 1 { GetStdW }	{ }
MAXSUB		fonts/fontbuild.c	/^#define MAXSUB 10/ ;" macro 1 { BuildChar CCRunStd }	{ }
MAXStrokeThrow		graphics/stroke.c	/^          MAXStrokeThrow;/ ;" global 1 { DoStroke IniStroke }	{ }
MAXTRAPS		device/mark.c	/^#define MAXTRAPS (15)/ ;" macro 1 { AddTrap LBMAddTrap LBMMark }	{ }
MAXUSEROBJECTINDEX		language/exec.h	/^#define MAXUSEROBJECTINDEX 800/ ;" macro 1 { }	{ }
MAXWEIGHTS		fonts/fontdata.h	/^#define MAXWEIGHTS (16)/ ;" macro 1 { GetWeightVector }	{ }
MAXWLSIZE		bintree/windowlist.c	/^#define MAXWLSIZE 30000		\/* Maximum legal size *\// ;" macro 1 { WLExpand }	{ }
MAXarrayLength		language/array.h	/^#define MAXarrayLength MAXcardinal/ ;" macro 1 { PSDefUserObj TypeInit }	{ MAXcardinal }
MAXcardinal		include/publictypes.h	/^#define MAXcardinal MAXCard16/ ;" macro 1 { ArrayFromStack CalcThresholds CardFromOb DFAProc HandleStackOverflow MAXarrayLength MAXdctCount MAXstringLength PSCntDictStack PSCntExecStack PSCount PSFontRun PSRoll PopCardinal TypeInit }	{ MAXCard16 }
MAXdctCount		include/language.h	/^#define MAXdctCount MAXcardinal/ ;" macro 1 { TypeInit }	{ MAXcardinal }
MAXesc		fonts/fontbuild.c	/^#define MAXesc 13/ ;" macro 1 { CCRunStd }	{ }
MAXexecLevel		language/exec.h	/^#define MAXexecLevel 10		\/* max recursion level of/ ;" macro 1 { }	{ }
MAXinteger		include/publictypes.h	/^#define MAXinteger ((integer)0x7FFFFFFF)/ ;" macro 1 { ConstantColor CurStackUnused FixedPosInf FontPathBBox InitFontFlat MinStackUnused NEXT_RAND PSCvI PSMul }	{ integer }
MAXlevel		include/vm.h	/^#define MAXlevel 15		\/* max save level *\// ;" macro 1 { Save stPermanentRAM stROM stVolatileRAM }	{ }
MAXlokpairIndex		fonts/fontbuild.c	/^#define MAXlokpairIndex 63/ ;" macro 1 { Nlokpairs }	{ }
MAXlongcardinal		include/publictypes.h	/^#define MAXlongcardinal MAXCard32/ ;" macro 1 { }	{ MAXCard32 }
MAXnSRQProcs		vm/saverestore.c	/^#define MAXnSRQProcs 10/ ;" macro 1 { RgstRstrProc RgstSaveProc }	{ }
MAXnameLength		include/language.h	/^#define MAXnameLength 127/ ;" macro 1 { ExtendStrStorage ObjFromStrStorage PSCVN PSUndef ReadBinObjSeq StmToken newstn }	{ }
MAXnumeralString		include/language.h	/^#define MAXnumeralString 35	\/* must be at least 32/ ;" macro 1 { }	{ }
MAXrootParam		include/vm.h	/^#define MAXrootParam 4		\/* leave a couple spares */ ;" macro 1 { CreateSharedVM }	{ }
MAXstringLength		include/language.h	/^#define MAXstringLength MAXcardinal/ ;" macro 1 { ExtendStrStorage ObjFromStrStorage StmToken TypeInit }	{ MAXcardinal }
MAXtimeString		include/language.h	/^#define MAXtimeString 24	\/* must be at least 24 on/ ;" macro 1 { CVT }	{ }
MAXunsignedinteger		include/publictypes.h	/^#define MAXunsignedinteger MAXCard32/ ;" macro 1 { trytoload }	{ MAXCard32 }
MB1ALLOCINCREMENT		graphics/cscan.c	/^#define MB1ALLOCINCREMENT (Int32)sizeof(Cross)*102/ ;" macro 1 { ResizeCrossBuf }	{ Cross Int32 }
MB2ALLOCINCREMENT		graphics/cscan.c	/^#define MB2ALLOCINCREMENT (Int32)sizeof(Int16)*10/ ;" macro 1 { GrowRunBuff }	{ Int16 Int32 }
MC68K		include/environment.h	/^#define MC68K 0/ ;" macro 1 { PCOFFSET }	{ }
MCFreeBytes		device/maskcache.c	/^public procedure MCFreeBytes(bytes) char *bytes; {/ ;" function 11 { FmMakeMaskDevice MCFreeMask MaskGoAway }	{ BMFree BMHeader FGEnterMonitor FGExitMonitor PBMItem bmScratch bmUsed false header scratchInUse }
MCFreeMask		device/maskcache.c	/^public procedure MCFreeMask(mask) PMask mask; {/ ;" function 12 { DevFlushMask FmMakeMaskDevice buildPrebuilt }	{ FGEnterMonitor FGExitMonitor MCFreeBytes NULL data mskFree nUsedMasks }
MCGetCacheBytes		device/maskcache.c	/^public procedure MCGetCacheBytes(mask, nBytes) PMa/ ;" function 9 { MaskGoAway buildPrebuilt }	{ BMAlloc BMNull Data MCMaskIndex NIL PBMItem data header }
MCGetMask		device/maskcache.c	/^public PMask MCGetMask() {/ ;" function 19 { FmMakeMaskDevice buildPrebuilt }	{ FGEnterMonitor FGExitMonitor MaskRec NIL NULL PMask PSFlushMasks data mskFree nUsedMasks true }
MCGetTempBytes		device/maskcache.c	/^public char *MCGetTempBytes(nBytes) integer nBytes/ ;" function 18 { FmMakeMaskDevice buildPrebuilt }	{ BMAlloc BMNull BMPinnedTag Data FGEnterMonitor FGExitMonitor NULL PBMItem bmScratch header scratchBytes scratchInUse true }
MCMaskIndex		device/maskcache.c	/^public integer MCMaskIndex(mask) PMask mask; {/ ;" function 3 { MCGetCacheBytes }	{ integer mskBase }
MCOUNT		fp/DEFSmach.h	/^#define MCOUNT/ ;" macro 1 { ENTRY RTMCOUNT }	{ }
MEDGRAYPAT		include/bintree.h	/^#define MEDGRAYPAT 2/ ;" macro 1 { }	{ }
MEGAPIXEL		bintree/drivers.c	/^#define MEGAPIXEL	"MegaPixel"/ ;" macro 1 { AssignArrayBounds DriverInit GuaranteeActiveScreen LoadSingleDriver WriteDefaultNetInfo }	{ }
MEMMOVE		graphics/cscan.c	/^#define MEMMOVE bcopy/ ;" macro 1 { ResetCScan }	{ }
MEMZERO		graphics/cscan.c	/^#define MEMZERO bzero/ ;" macro 1 { BuildYCross }	{ }
MERCURY		fonts/atm.h	/^#define MERCURY ((!ATM) && (!PPS))/ ;" macro 1 { }	{ ATM PPS }
MERITQUANTUM		graphics/cscan.c	/^#define MERITQUANTUM 2		\/* Minimum space between m/ ;" macro 1 { ACTCLASS }	{ }
MESSAGEDATASIZE		product/ipcstream.h	/^#define MESSAGEDATASIZE (MESSAGETOTALSIZE-sizeof(m/ ;" macro 1 { IPCFlushOutput IPCInitializeStm IPCWrite }	{ MESSAGETOTALSIZE }
MESSAGETOTALSIZE		product/ipcstream.h	/^#define MESSAGETOTALSIZE 1000	\/* Length of message/ ;" macro 1 { AcquireMsg IPCInitializeStm MESSAGEDATASIZE }	{ }
MFAvail		product/mappedstream.c	/^private int MFAvail(stm)/ ;" function 7 { }	{ }
MFClose		product/mappedstream.c	/^private int MFClose(stm)/ ;" function 17 { }	{ EOF FileFd FileSize RemoveMappedFile StmDestroy r }
MFFilBuf		product/mappedstream.c	/^private int MFFilBuf(stm)/ ;" function 10 { }	{ }
MFFlush		product/mappedstream.c	/^private int MFFlush(stm)/ ;" function 7 { }	{ }
MFMcomp		fonts/fontshow.c	/^private boolean MFMcomp(amtx, bmtx)/ ;" function 7 { MakeCompFont MakeFontSupp }	{ d }
MFRead		product/mappedstream.c	/^private long int MFRead(ptr,itemSize,nItems,stm)/ ;" function 18 { }	{ }
MFSeek		product/mappedstream.c	/^private int MFSeek(stm, offset, origin)/ ;" function 19 { }	{ FileSize }
MFTell		product/mappedstream.c	/^private long int MFTell(stm)/ ;" function 5 { }	{ }
MFUnGetc		product/mappedstream.c	/^private int MFUnGetc(ch,stm)/ ;" function 11 { }	{ }
MFix		graphics/fflattenpath.c	/^#define MFix(f) ((f)>>8)/ ;" macro 1 { FMiniFltn }	{ }
MFixInt		graphics/fflattenpath.c	/^#define MFixInt(f) ((f)<<8)/ ;" macro 1 { FMiniFltn }	{ }
MFree		vm/vm_space.c	/^public procedure MFree(ptr)  charptr ptr;/ ;" function 22 { FREE }	{ CantHappen fwrite integer register spaceFile }
MID		include/graphics.h	/^typedef unsigned int MID; \/* should be a cardinal / ;" typedef 1 { CheckMT CompositeShow DelayedMakeFont FastShow FindInCache InitFontCache InsertMID MMEldest MSEldest MTAlloc MakeCompFont MakeFontSupp PSFlushCache PSFlushMasks PSSelectFont PurgeFSCache PurgeFontRefs PurgeMM QuickSort ReValidateMID ShowByName TrimEldestMID pEldest pMM pMS }	{ }
MIDCount		fonts/midcache.c	/^public integer *MIDCount;/ ;" global 1 { CheckCI CheckMT DeleteCIs FlushMID InitFontCache IsFreeMT MTFree PSFlushMasks PurgeCI ShowByName TrimCI }	{ }
MIDNULL		include/graphics.h	/^#define MIDNULL 0	\/* valid as MID or as UniqueMID./ ;" macro 1 { CIFree CheckMT Cnct CompSlowShow CompositeShow DMFRestore FastShow FontShowInit InitFontCache InitMtx InsertMID InvalidateCachedMIDs IsAllocatedCI IsFreeCI IsNormalCI IsReleasedCI MMEldest MSEldest MTAlloc MTUnlink MakeCompFont MakeFont MakeFontSupp PSFlushCache PSFlushFontCache PSSelectFont PurgeCI PurgeFSCache PurgeFontRefs PurgeMM ReValidateMID SetFont SetMtx TrimEldestMID pMM pMS }	{ }
MIDPurgedByGC		fonts/midcache.c	/^private boolean MIDPurgedByGC(mp, arg)/ ;" function 17 { PurgeOnGC }	{ Assert GC_Info GC_WasCollected arg boolean dictObj }
MIDPurgedByRestore		fonts/midcache.c	/^private boolean MIDPurgedByRestore(mp, arg)/ ;" function 7 { PurgeOnRstr }	{ DebugAssert arg dictObj integer level }
MIN		include/publictypes.h	/^#define MIN(a,b) ((a)<(b)?(a):(b))/ ;" macro 1 { CCBuild CCRunStd CallAddTrapToPath CheckHorizWhite CheckIntersection ClippedMasksMark ClumpCntrs ConvertToListPath DoRdcPth EnterGlbCntr FixOnePath HashArray HashPath InitFontCache InitSLFiles OffsetFill Overlap PSRoll PSUndef QCompareBounds QIntersect QIntersectTrp ReduceQuadPath SetScalFromBBoxes ShipTrapezoid SimpleCounter StringCompare TfmToBB TrapTrapDispatch TriLock VMCopyArray }	{ }
MINALIGN		include/environment.h	/^#define MINALIGN 1/ ;" macro 1 { GCInternal_Pop GC_Push WriteObject }	{ }
MINArrayLength		language/opcodes.h	/^#define MINArrayLength		1/ ;" macro 1 { DecodeObj EncodeObj MAXArrayLength RelocateObj }	{ }
MINBMALLOC		device/maskcache.c	/^#define MINBMALLOC ((2 * sizeof(BMItem)) \/ sizeof(/ ;" macro 1 { BMAlloc BMFree CheckBM }	{ BMHeader BMItem }
MINBMFLUSH		device/maskcache.c	/^#define MINBMFLUSH 10000/ ;" macro 1 { BMAlloc }	{ }
MINFixed		graphics/cscan.c	/^#define MINFixed MINInt32	\/* Minimum Fixed value */ ;" macro 1 { BuildCxtn BuildYCross FillInColumn ResetCScan }	{ MINInt32 }
MINIMUMSIZE		device/nextprebuilt.h	/^#define MINIMUMSIZE 5.0/ ;" macro 1 { CheckPrebuiltMatrix }	{ }
MINInt32		include/publictypes.h	/^#define MINInt32 ((Int32)0x80000000)/ ;" macro 1 { MINFixed PSCVRS }	{ Int32 }
MINOffset		language/opcodes.h	/^#define MINOffset		-1/ ;" macro 1 { DecodeObj EncodeObj MAXOffset RelocateObj }	{ }
MINcmd		fonts/fontbuild.c	/^#define MINcmd	18/ ;" macro 1 { BuildChar CCRunStd }	{ }
MINinteger		include/publictypes.h	/^#define MINinteger ((integer)0x80000000)/ ;" macro 1 { FixedNegInf InitFontFlat PSAbs PSCvI PSIDiv PSMul PSNeg }	{ integer }
MM		fonts/midcache.c	/^public MID *MM, *MMEnd;/ ;" global 1 { FontDiskInit InitFontCache InsertMID MTUnlink forallMM }	{ }
MMEldest		fonts/midcache.c	/^public MID MMEldest ()/ ;" function 19 { TrimEldestMID pEldest }	{ Card32 IsSortedMID LastCurMID MA MID MIDNULL MMEldestPtr PCard16 PeterPan false register true }
MMEldestPtr		fonts/midcache.c	/^private PCard16 MMEldestPtr, MSEldestPtr;/ ;" global 1 { InitSortMID MMEldest SortMIDAges }	{ }
MMEnd		fonts/midcache.c	/^public MID *MM, *MMEnd;/ ;" global 1 { InitFontCache forallMM }	{ }
MMSize		fonts/midcache.c	/^public integer MMSize;/ ;" global 1 { InitFontCache InsertMID }	{ }
MNew		vm/vm_space.c	/^public charptr MNew(n, size)  integer n, size;/ ;" function 31 { MRInitialize MRMoveRect NEW }	{ CantHappen LimitCheck NIL charptr fwrite integer register spaceFile }
MONITOR		include/package_specs.h	/^#define MONITOR		"monitor.h"/ ;" macro 1 { }	{ }
MONITOR_H		include/monitor.h	/^#define	MONITOR_H/ ;" macro 1 { }	{ }
MOUSEEVENTMASK		product/event.c	/^#define MOUSEEVENTMASK (NX_LMOUSEDOWNMASK | NX_LMO/ ;" macro 1 { DispatchEvents }	{ NX_LMOUSEDOWNMASK NX_LMOUSEUPMASK NX_MOUSEEXITEDMASK NX_RMOUSEDOWNMASK NX_RMOUSEUPMASK }
MOUSEKEYBOARD		include/package_specs.h	/^#define MOUSEKEYBOARD	"mousekeyboard.h"/ ;" macro 1 { }	{ }
MOUSEKEYBOARD_H		include/mousekeyboard.h	/^#define	MOUSEKEYBOARD_H/ ;" macro 1 { }	{ }
MOVEDEVENTMASK		mousekeyboard/vars.h	/^#define MOVEDEVENTMASK (NX_MOUSEMOVEDMASK | NX_LMO/ ;" macro 1 { }	{ NX_LMOUSEDRAGGEDMASK NX_MOUSEMOVEDMASK NX_RMOUSEDRAGGEDMASK }
MOVELEFT		graphics/cscan.c	/^#define MOVELEFT  7/ ;" macro 1 { }	{ }
MOVERECTSAFETY		mp/moverect.c	/^#define MOVERECTSAFETY 1/ ;" macro 1 { MRMoveRect }	{ }
MOVERIGHT		graphics/cscan.c	/^#define MOVERIGHT 3/ ;" macro 1 { }	{ }
MOVEUP		graphics/cscan.c	/^#define MOVEUP    1/ ;" macro 1 { }	{ }
MP		include/package_specs.h	/^#define MP		"mp.h"/ ;" macro 1 { }	{ }
MP12BPP		mp/mp12.h	/^#define MP12BPP		2/ ;" macro 1 { MP12InitClassVars }	{ }
MP12BPS		mp/mp12.h	/^#define MP12BPS		2/ ;" macro 1 { }	{ }
MP12Class		mp/mp12.h	/^typedef struct _MP12Class {/ ;" typedef 3 { }	{ }
MP12Composite		mp/mp12.c	/^void MP12Composite(Bitmap *bm, BMCompOp *bcop)/ ;" function 105 { MP12InitClassVars }	{ A_BITS BM_BITMAPSRC BM_PATTERNSRC BitsOrPatInfo DISSOLVE DevPoint F3 FIRSTF1OP FIRSTF2OP FIRSTF3OP LocalBitmap MP12SetupBits MP12SetupPat MP12scanmask MP12scanshift MRMoveRect PFree PNewColorAlpha Pattern alphaOp blackpattern bm_becomePSDevice dataOp false mpDevHalftone register s s0FromAlphaToData s1FromAlphaToData s2FromAlphaToData sFromDestToData true }
MP12Convert16to2		mp/mpconv12.c	/^void MP12Convert16to2(unsigned short *sp, unsigned/ ;" function 107 { MP12ConvertFrom MPSetCursor }	{ CONVERT16TO8 MASKA34 MP12InitBricks RollRight leftBitArray mpBrick rightBitArray }
MP12Convert2to2		mp/mpconv12.c	/^void MP12Convert2to2(LocalBitmap *sbm, LocalBitmap/ ;" function 124 { MP12ConvertFrom MP12MakePublic }	{ LSHIFT MRMasks RSHIFT s }
MP12Convert32to2		mp/mpconv12.c	/^void MP12Convert32to2(unsigned int *sp, unsigned i/ ;" function 103 { ImIdent32 MP12ConvertFrom MPSetCursor }	{ CONVERT32TO8 MASKA38 MP12InitBricks RollRight leftBitArray mpBrick rightBitArray }
MP12ConvertFrom		mp/mp12.c	/^static void MP12ConvertFrom(Bitmap *d, Bitmap *s, / ;" function 39 { MP12InitClassVars }	{ DevPoint LocalBitmap MP12Convert16to2 MP12Convert2to2 MP12Convert32to2 NX_EIGHTBITGRAY NX_OTHERBMTYPE NX_TWELVEBITRGB NX_TWENTYFOURBITRGB NX_TWOBITGRAY bm_newAlpha d false s }
MP12GRAYS		mp/mp12.h	/^#define MP12GRAYS	4/ ;" macro 1 { MP12InitClassVars }	{ }
MP12Grays		mp/mp12.c	/^static const PatternData MP12Grays[6] = {/ ;" global 9 { MP12InitClassVars }	{ }
MP12InitBricks		mp/mpconv12.c	/^static void MP12InitBricks()/ ;" function 23 { MP12Convert16to2 MP12Convert32to2 }	{ DevColorVal DevMarkInfo Gry4Of4Setup LocalBMClass NULL PatternData data mp12 mpBrick mpDevHalftone start }
MP12InitClassVars		mp/mp12.c	/^static void MP12InitClassVars(BMClass *class)/ ;" function 54 { }	{ DevAddHalftoneRef DevColorData GryPat4Of4 ImageArgs LocalBMClass MP12BPP MP12Composite MP12ConvertFrom MP12GRAYS MP12Grays MP12LOG2BD MP12MakePublic MP12NewAlpha MP12NewFromData MP12SetupPattern MP12SizeBits MP12_Mark MRInitialize NIL NXGrayPat PMarkProcs data defaultHalftone fmImageProcs localBM mpDevHalftone mpDevScreen mpThresholds wdMarkProcs }
MP12LOG2BD		mp/mp12.h	/^#define MP12LOG2BD	1/ ;" macro 1 { BmRLine BmULine MP12InitClassVars MP12scanmask MP12scanshift MRMasks MRMoveRect RWCOPYBmULine WCOPYBmULine }	{ }
MP12MakePublic		mp/mp12.c	/^static Bitmap *MP12MakePublic(Bitmap *bm, Bounds */ ;" function 13 { MP12InitClassVars }	{ Bitmap LocalBitmap MP12Convert2to2 NX_ONEISWHITECOLORSPACE NX_TWOBITGRAY bm_new bm_newAlpha false mp12 }
MP12MarkDataAndAlpha		mp/mp12.c	/^static void MP12MarkDataAndAlpha(MPMarkInfo *mpmi)/ ;" function 56 { MP12_Mark }	{ ALPHAVALUE DevColorVal DevImage DevPrivate Mark NULL OPAQUE PSGetGStateExt framebase }
MP12New		mp/mp12.c	/^static Bitmap *MP12New(BMClass *class, Bounds *bou/ ;" function 22 { }	{ BMClass Bitmap Bounds LocalBitmap MP12SetBitmapExtent NX_ONEISBLACKCOLORSPACE NX_OTHERBMTYPE localBM use_wf_hardware }
MP12NewAlpha		mp/mp12.c	/^static void MP12NewAlpha(Bitmap *bm, int initializ/ ;" function 10 { MP12InitClassVars }	{ LocalBitmap MP12SetBitmapExtent localBM use_wf_hardware }
MP12NewFromData		mp/mp12.c	/^static Bitmap *MP12NewFromData(LocalBMClass *class/ ;" function 22 { MP12InitClassVars }	{ Bitmap LocalBMClass LocalBitmap MP12SetBitmapExtent NULL NX_ONEISBLACKCOLORSPACE NX_OTHERBMTYPE localBM use_wf_hardware }
MP12SCANMASK		mp/mp12.h	/^#define MP12SCANMASK	0x1F/ ;" macro 1 { MP12scanmask MRMasks }	{ }
MP12SCANSHIFT		mp/mp12.h	/^#define MP12SCANSHIFT	5/ ;" macro 1 { MP12scanshift MRMasks }	{ }
MP12SCANUNIT		mp/mp12.h	/^#define MP12SCANUNIT	32/ ;" macro 1 { BmRLine BmULine RWCOPYBmULine WCOPYBmULine }	{ }
MP12SPP		mp/mp12.h	/^#define MP12SPP		1/ ;" macro 1 { }	{ }
MP12SetBitmapExtent		mp/mp.c	/^void MP12SetBitmapExtent(unsigned int *first, unsi/ ;" function 30 { MP12New MP12NewAlpha MP12NewFromData MRInitialize MRMoveRect }	{ bitmapAddrInited highestBitmapAddr lowestBitmapAddr max memoryOffsets mpFd }
MP12SetupBits		mp/mp12.c	/^void MP12SetupBits(LocalBitmap *ebm, Bounds *bound/ ;" function 26 { MP12Composite }	{ MP12scanmask MP12scanshift data uint }
MP12SetupPat		mp/mp12.c	/^void MP12SetupPat(Pattern *pat, DevPoint bmOffset,/ ;" function 54 { MP12Composite }	{ DevColorVal DevMarkInfo MP12scanshift NULL NextGSExt OPAQUE PCard8 PatternData SetupPattern _mp12 data mpDevHalftone start uint }
MP12SetupPattern		mp/mp12.c	/^static void MP12SetupPattern(PatternHandle h, DevM/ ;" function 29 { MP12InitClassVars }	{ DebugAssert DevColorVal Gry4Of4Setup NULL OPAQUE PNextGSExt data start true }
MP12SizeBits		mp/mp12.c	/^static void MP12SizeBits(BMClass *class, Bounds *b/ ;" function 5 { MP12InitClassVars }	{ }
MP12_Mark		mp/mp12.c	/^void MP12_Mark(Bitmap *bm, MarkRec *mrec, DevPrim / ;" function 167 { MP12InitClassVars }	{ DevHalftone DevImageSource DevPoint LocalBitmap MP12MarkDataAndAlpha MPMarkInfo NULL PSRangeCheck d false framebytewidth free mpDevHalftone true }
MP12scanmask		mp/mp12.h	/^#define MP12scanmask (MP12SCANMASK >> MP12LOG2BD)/ ;" macro 1 { MP12Composite MP12SetupBits }	{ MP12LOG2BD MP12SCANMASK }
MP12scanshift		mp/mp12.h	/^#define MP12scanshift (MP12SCANSHIFT - MP12LOG2BD)/ ;" macro 1 { MP12Composite MP12SetupBits MP12SetupPat }	{ MP12LOG2BD MP12SCANSHIFT }
MPBitmap		mp/mp12.h	/^typedef struct _MPBitmap {/ ;" typedef 3 { }	{ }
MPComposite		mp/mp.c	/^void MPComposite(CompositeOperation *cop, Bounds */ ;" function 58 { }	{ BAG BMCompOp BM_BITMAPSRC BM_NOSRC BM_PATTERNSRC Bitmap COPY Cleanup DevPoint NULL PATTERN VISCHAN bm_composite bm_convertFrom bm_delete bm_makePublic bm_new false }
MPDisplayCursor16		mp/cursor.c	/^void MPDisplayCursor16(NXDevice *device, NXCursorI/ ;" function 47 { MPStart }	{ AMASK Bounds CURSORWIDTH GAMASK LocalBitmap RBMASK d s volatile }
MPDisplayCursor2		mp/cursor.c	/^void MPDisplayCursor2(NXDevice *device, NXCursorIn/ ;" function 52 { }	{ Bounds CURSORWIDTH LocalBitmap PPXMASK register volatile }
MPFreeWindow		mp/mp.c	/^void MPFreeWindow(NXBag *bag, int termflag)/ ;" function 4 { }	{ bm_delete }
MPInitScreen		mp/mp.c	/^void MPInitScreen(NXDevice *device)/ ;" function 18 { }	{ LBM_DONTFREE MPSCREEN_ROWBYTES MP_COLOR_SCREEN MP_ROMID NULL NX_TWELVEBITRGB NX_TWOBITGRAY bm34 bm_newFromData km_coni monitorType mp12 mpAddr true }
MPMark		mp/mp.c	/^void MPMark(NXBag *bag, int channel, MarkRec *mrec/ ;" function 6 { }	{ Bitmap VISCHAN bm_mark }
MPMarkImageType		mp/mp12.h	/^typedef enum {none, regular, alphaimage} MPMarkIma/ ;" typedef 1 { }	{ }
MPMarkInfo		mp/mp12.h	/^typedef struct _MPMarkInfo {/ ;" typedef 7 { MP12_Mark }	{ }
MPMoveWindow		mp/mp.c	/^void MPMoveWindow(NXBag *bag, short dx, short dy, / ;" function 4 { }	{ bm_offset }
MPNewAlpha		mp/mp.c	/^void MPNewAlpha(NXBag *bag)/ ;" function 4 { }	{ bm_newAlpha true }
MPNewWindow		mp/mp.c	/^void MPNewWindow(NXBag *bag, Bounds *bounds, int w/ ;" function 16 { }	{ NONRETAINED NXWindowInfo NX_OTHERBMTYPE NX_TWENTYFOURBITRGB NX_TWOBITGRAY bmClassFromDepth bm_new }
MPPromoteWindow		mp/mp.c	/^void MPPromoteWindow(NXBag *bag, Bounds *bounds, i/ ;" function 21 { }	{ BMClass Bitmap LBM_VMDEALLOCATE LocalBitmap NONRETAINED bmClassFromDepth bm_convertFrom bm_delete bm_makePublic bm_new mp12 }
MPRegisterScreen		mp/mp.c	/^void MPRegisterScreen(NXDevice *device)/ ;" function 7 { }	{ mpFd }
MPRemoveCursor16		mp/cursor.c	/^void MPRemoveCursor16(NXDevice *device, NXCursorIn/ ;" function 20 { MPStart }	{ Bounds LocalBitmap volatile }
MPRemoveCursor2		mp/cursor.c	/^void MPRemoveCursor2(NXDevice *device, NXCursorInf/ ;" function 30 { }	{ Bounds LocalBitmap const volatile }
MPSCREEN_HEIGHT		mp/mp.h	/^#define MPSCREEN_HEIGHT 832	\/* Visible number of l/ ;" macro 1 { MPStart }	{ }
MPSCREEN_ROMID		mp/mp.h	/^#define MPSCREEN_ROMID 512	\/* Unique value for thi/ ;" macro 1 { }	{ }
MPSCREEN_ROWBYTES		mp/mp.h	/^#define MPSCREEN_ROWBYTES 288	\/* Actual rowBytes t/ ;" macro 1 { MPInitScreen }	{ }
MPSCREEN_ROWWORDS		mp/mp.h	/^#define MPSCREEN_ROWWORDS 72	\/* Max words per scan/ ;" macro 1 { MRInitialize }	{ }
MPSCREEN_WIDTH		mp/mp.h	/^#define MPSCREEN_WIDTH 1120	\/* Visible pixels per / ;" macro 1 { MPStart }	{ }
MPSetCursor		mp/cursor.c	/^void MPSetCursor(NXDevice *d, NXCursorInfo *nxci, / ;" function 99 { }	{ CURSORWIDTH DevPoint MP12Convert16to2 MP12Convert32to2 MP_MONO_SCREEN NX_TWELVEBITRGB NX_TWENTYFOURBITRGB NX_TWOBITGRAY d monitorType register s }
MPStart		mp/mp.c	/^int MPStart(NXDriver *driver)/ ;" function 37 { LoadSingleDriver }	{ DisplayCursor MPDisplayCursor16 MPRemoveCursor16 MPSCREEN_HEIGHT MPSCREEN_WIDTH MP_COLOR_SCREEN MP_MONO_SCREEN NULL NXRegisterScreen RemoveCursor bmClassFromDepth bmClassFromDepth_COLOR bmClassFromDepth_MONO km_coni monitorType mpAddr mpFd mpProcs os_fprintf os_stderr screenOffsets use_wf_hardware }
MPWUDReadAttr		stodev/stodevunix.c	/^private OSErr MPWUDReadAttr(dev, name, attr)/ ;" function 20 { UDReadAttr }	{ BUFSIZ false }
MPWindowSize		mp/mp.c	/^int MPWindowSize(NXBag *bag)/ ;" function 6 { }	{ bm_sizeInfo r }
MP_COLOR_SCREEN		mp/mp.h	/^#define MP_COLOR_SCREEN 1	\/* Color monitor type *\// ;" macro 1 { MPInitScreen MPStart }	{ }
MP_H		include/mp.h	/^#define	MP_H/ ;" macro 1 { }	{ }
MP_MONO_SCREEN		mp/mp.h	/^#define MP_MONO_SCREEN 0	\/* Monochrome monitor typ/ ;" macro 1 { MPSetCursor MPStart }	{ }
MP_ROMID		mp/mp.h	/^#define MP_ROMID 0/ ;" macro 1 { MPInitScreen }	{ }
MRInitialize		mp/moverect.c	/^void MRInitialize()/ ;" function 9 { MP12InitClassVars }	{ MNew MP12SetBitmapExtent MPSCREEN_ROWWORDS moveLineDispatch moveLineDispatchSW moverectbuff moverectlen uint use_wf_hardware }
MRMasks		mp/moverect.c	/^void MRMasks(uint *leftMask, uint *rightMask, int/ ;" function 22 { MP12Convert2to2 MRMoveRect }	{ MP12LOG2BD MP12SCANMASK MP12SCANSHIFT ONES leftBitArray rightBitArray }
MRMoveRect		mp/moverect.c	/^void MRMoveRect(BitsOrPatInfo *sI[3], BitsOrPatInf/ ;" function 224 { MP12Composite }	{ BUFFERSOURCE BUFFERSOURCEHW CONSTSOURCE CantHappen FIRSTF1OP FIRSTF2OP FIRSTF3OP HighlightRect LineOperation MNew MOVERECTSAFETY MP12LOG2BD MP12SetBitmapExtent MRMasks ONES SCANTYPE SOURCEADVANCE SetUpSource SoverRect WCOPY WF0 WF1 WF2 WF3 WF4 const data free moverectbuff moverectlen uchar uint use_wf_hardware }
MRPatternAdvance		mp/moverect.c	/^void MRPatternAdvance(LineSource *lS, BitsOrPatInf/ ;" function 30 { SOURCEADVANCE }	{ PAABS SPAT data }
MS		fonts/midcache.c	/^public MID *MS, *MSEnd;/ ;" global 1 { FontDiskInit InitFontCache InsertMID MTUnlink forallMS }	{ }
MSEldest		fonts/midcache.c	/^public MID MSEldest ()/ ;" function 25 { TrimEldestMID }	{ Card32 IsSortedMID LastCurMID MA MID MIDNULL MSEldestPtr PCard16 PeterPan SortMIDAges false register true }
MSEldestPtr		fonts/midcache.c	/^private PCard16 MMEldestPtr, MSEldestPtr;/ ;" global 1 { InitSortMID MSEldest SortMIDAges }	{ }
MSEnd		fonts/midcache.c	/^public MID *MS, *MSEnd;/ ;" global 1 { InitFontCache forallMS }	{ }
MSSize		fonts/midcache.c	/^public integer MSSize;/ ;" global 1 { InitFontCache }	{ }
MT		fonts/fontcache.c	/^public PMTItem MT, MTEnd;/ ;" global 1 { CheckMT CompSlowShow CompositeShow DMFRestore DelayedMakeFont FontDiskInit GetFlushArgs InitFontCache InsertMID InsertSelectFont MTAlloc MTFree MTUnlink MakeCompFont MakeFontSupp PSFlushCache PurgeFontRefs PurgeMID PurgeMM PurgeSFForKey ReValidateMID SearchSelectFont SortMIDAges forallMT pMID pMM pMS }	{ }
MTAlloc		fonts/midcache.c	/^private MID MTAlloc()/ ;" function 26 { InsertMID }	{ Assert CheckMT IsFreeMT MA MID MIDNULL MT MTFreeHead Methuselah PMTItem TrimEldestMID allocmem fcData freemem register }
MTEnd		fonts/fontcache.c	/^public PMTItem MT, MTEnd;/ ;" global 1 { InitFontCache forallMT }	{ }
MTFree		fonts/midcache.c	/^private procedure MTFree(m, unlink)/ ;" function 23 { PurgeMID PurgeMM }	{ Assert CheckMT DebugAssert IsAllocMT MA MIDCount MT MTFreeHead MTUnlink PMTItem PeterPan fcData freemem register }
MTFreeHead		fonts/midcache.c	/^public MID MTFreeHead;/ ;" global 1 { CheckMT InitFontCache MTAlloc MTFree }	{ }
MTItem		fonts/fontspriv.h	/^typedef struct {/ ;" typedef 38 { FontDiskInit InitFontCache StartCache }	{ }
MTMASK		fonts/fontspriv.h	/^#define MTMASK 7/ ;" macro 1 { CheckCompositeFont GetInfo }	{ }
MTSize		fonts/midcache.c	/^public integer MTSize;/ ;" global 1 { CheckCI InitFontCache PSCacheStatus SortMIDAges TrimEldestMID }	{ }
MTUnlink		fonts/midcache.c	/^private procedure MTUnlink(m)/ ;" function 22 { MTFree }	{ Assert CantHappen MIDNULL MM MS MT PMTItem register }
MTcmd		fonts/fontbuild.c	/^#define MTcmd	15/ ;" macro 1 { BuildChar CCRunStd }	{ }
MUL		bitmap/bm34comp.c	/^#define MUL(a,b) ((((((a) & RBMASK)>>4)*(b) + GAMA/ ;" macro 1 { BMComposite34 BMComposite38 }	{ GAMASK RBMASK }
MULTICHROME		device/genericdev.h	/^#define MULTICHROME 1/ ;" macro 1 { }	{ }
MULcmd		fonts/fontbuild.c	/^#define MULcmd	24/ ;" macro 1 { BuildChar CCRunStd }	{ }
MachPortDevice		product/machportdevice.c	/^struct MachPortDevice {/ ;" struct 20 { PSMachPortDevice }	{ }
MakeBBox		graphics/userpath.c	/^private MakeBBox(mtx, vals, bbox) PMtx mtx; real */ ;" function 22 { PSSetBBox UsrPthBBox }	{ BBoxUpdate Cd TfmPCd cd1 cd2 cd3 cd4 fpOne }
MakeBounds		graphics/maketrap.c	/^MakeBounds(b, yl, yg, xl, xg)/ ;" function 15 { MarkStrokeMasks RdcStrkDumpMasks ReduceQuadPath SetTrapBounds ShowMask StringMark }	{ Assert FTrunc }
MakeCacheDev		fonts/cachedev.c	/^public boolean MakeCacheDev(fm) FMetrics *fm; {/ ;" function 47 { SetupCacheDevice }	{ FIXCD FRoundF FSetCharWidth FontPathBBox LOWERSHOWBOUND OkFixed SetBBCompMark SetupMaskDev ShowState UPPERSHOWBOUND false fdcp fntmtx gs rdcp register ss ssr true useReal }
MakeCacheDev2		fonts/cachedev.c	/^public boolean MakeCacheDev2(fm) FMetrics *fm; {/ ;" function 74 { SetupCacheDevice }	{ CrMtx DTfmPCd DTfmToFixed FMetrics FRoundF FSetCharWidth FontPathBBox GetCPDelta ModifyCachingParams Mtx PFCdToPRCd PRCdToPFCd RCd RMetrics SetBBCompMark SetCharWidth SetupMaskDev ShowState TfmPCd UNFIXCD boolean false fdcp fntmtx fontDict gs pflttofix rdcp register ss ssr true useReal }
MakeCompFont		fonts/fontshow.c	/^private procedure MakeCompFont(old, mtx, new)/ ;" function 89 { MakeFont }	{ AllocAligned AllocCopyDict AllocPArray AryObj BytesForMTPE COMPOSEDtype ConditionalInvalidateRecycler CurrentShared DURING DevShort DictGetP END_HANDLER FID FontObj ForcePut HANDLER InsertMID IntObj InvlFont LStrObj MFMcomp MID MIDNULL MT MakeFont Mtx MtxCnct MtxToPAry Object PAryToMtx PCard8 PVMRoot RERAISE SetShared StrObj UniqueMID VMGetElem VMPutElem boolean dictObj fontObj fontsNames integer nAccess rootPrivate rootShared true }
MakeConstValue		devpattern/graypattern.c	/^private SCANTYPE MakeConstValue(pixelValue, bitsPe/ ;" function 11 { BuildGrayPattern SetupGrayPattern }	{ SCANTYPE SCANUNIT }
MakeDecryptionStm		language/stream.c	/^public Stm MakeDecryptionStm(source, kind)/ ;" function 20 { FCOpenStream PSEExec }	{ CStmLeftover CStmSource CantHappen GetStream Stm StmCreate StmProcs cStmBinProcs cStmHexProcs integer register true }
MakeDefaultHalftone		product/machportdevice.c	/^static void MakeDefaultHalftone(struct MachPortDev/ ;" function 15 { DecodePixelDict }	{ CopyThresholds DevAllocHalftone }
MakeFont		fonts/fontshow.c	/^public MID MakeFont(old, mtx, new)/ ;" function 13 { MakeCompFont PSDefineFont PSMakeFont PSScaleFont PSSelectFont }	{ COMPOSEDtype DictGetP IntObj InvlFont MIDNULL MakeCompFont MakeFontSupp NOLL TrickyDict boolean fontsNames }
MakeFontSupp		fonts/fontshow.c	/^public MID MakeFontSupp(old,mtx,new,ar,pnewmid)/ ;" function 73 { DelayedMakeFont MakeFont }	{ AllocCopyDict AllocPArray AryObj ConditionalInvalidateRecycler CurrentShared DURING DevShort DictGetP DictObj DictTestP END_HANDLER FID FontObj ForcePut HANDLER InsertMID InvlFont MFMcomp MID MIDNULL MT Mtx MtxCnct MtxToPAry PAryToMtx PVMRoot RERAISE ReallocDict SetShared VMGetElem boolean dictObj false fontObj fontsNames integer nullObj rootPrivate rootShared true }
MakeLine		graphics/reducer.c	/^private procedure MakeLine(pt1, pt2, oldln1, oldln/ ;" function 36 { CheckIntersection NewPoint RdcClose }	{ DebugPrintMakeLine LimitCheck Line LnOffset NIL PLine PLn PPoint PPt PtLT curIsClipLine curLine debugOn endLine }
MakeMID		fonts/midcache.c	/^public MID MakeMID(d, curmtx, maskID)/ ;" function 29 { ReValidateMID }	{ AryObj DictGetP DictObj FID InsertMID InvlFont Known Mtx MtxCnct MtxEqAlmost Object PAryToMtx PMTItem TrickyDict d dictObj false fontObj fontsNames register }
MakeMaskDevArgs		include/devicetypes.h	/^typedef struct _t_MakeMaskDevArgs/ ;" typedef 9 { SetupMaskDev }	{ }
MakeNullDevice		device/nulldev.c	/^public PDevice MakeNullDevice(device) PDevice devi/ ;" function 8 { CreateNullDevice IniGenDevImpl IniNullDevImpl IniNullDevice NullDevice }	{ DevPrivate Device NULL PDevice integer nullProcs os_sureCalloc }
MakeNullObjects		language/stack.c	/^private procedure MakeNullObjects(stack, objPtr)/ ;" function 10 { NewStack Overflow }	{ LNullObj Object PObject register }
MakeOwnListPath		graphics/pathbuild.c	/^public ListPath *MakeOwnListPath(path) PPath path;/ ;" function 12 { AddToPath AppendPath ReversePath TlatPath }	{ AppendCopyToPath Assert ListPath NULL PathType RemReducedRef }
MakePName		language/name.c	/^public procedure MakePName(str, pnobj)  char *str;/ ;" function 2 { PSDictGetPObj PSDictGetTestPObj PSMakeVM PSRgstOps RgstExplicit RgstMNames RgstMark RgstPackageNames ScannerInit StateInit UndefNameIndex }	{ FastName StrLen cardinal string }
MakePStm		language/stream.c	/^public procedure MakePStm(stm, tag, pobj)/ ;" function 48 { CrFile CreateFileStream DetermineFormat LineEdit PSEExec PSPushStream StmCtxCreate }	{ AllocPStream CurrentShared LStmObj NIL PStmBody PVMRoot closedStm integer level rAccess register rootPrivate rootShared wAccess xAccess }
MakePoint		graphics/reducer.c	/^private PtOffset MakePoint(x, y)  Rational *x, *y;/ ;" function 17 { CheckIntersection NewPoint RdcClose ShortenLine }	{ DebugPrintMakePoint LimitCheck PPoint PPt Point PtOffset curPoint debugOn endPoint ptserial register }
MakeRectPath		graphics/graphics.c	/^public procedure MakeRectPath(path) PPath path; {/ ;" function 28 { PSRectClip PSRectViewClip }	{ BBox Cd DURING DevPrim DevTrap DisposeDevPrim END_HANDLER FREE HANDLER NEW NULL NewDevPrim PopPReal QuadPath RERAISE ReduceQuadPath gs os_freeelement os_newelement qpStorage real }
MakeRegion		graphics/reducer.c	/^private RgOffset MakeRegion(linelf, linert)  LnOff/ ;" function 17 { RdcEntry Reduce }	{ LimitCheck PLn PRegion PRg RgOffset false free rgFree rgsOut }
MakeScreenDict		graphics/gray.c	/^private procedure MakeScreenDict() {/ ;" function 32 { PSCrHalftone }	{ CurrentShared DURING DictP DictPut END_HANDLER HANDLER IntObj LIntObj PutThresholdEntries RERAISE Screen SetShared StrObj boolean cardinal graphicsNames gs nullObj register s true }
MakeStaticPName		language/name.c	/^public procedure MakeStaticPName(str, pnobj)/ ;" function 9 { RgstObject }	{ AddToGCTable FastName StrLen cardinal string }
MakeStr		include/language.h	/^#define MakeStr(s)\\/ ;" macro 1 { AddStringEntry BinObjInit PSCacheFlush PSCacheInit PSCacheStatistics StateInit }	{ Lobj makestring s }
MakeType1Screen		graphics/gray.c	/^private Screen MakeType1Screen(dict, pSpot)/ ;" function 21 { GetType1Screen PSSetScreen }	{ DURING DeleteScreen DevAllocHalftone DevScreen END_HANDLER GenerateThresholds GetValidFreqAnglePair HANDLER LimitCheck NULL NewScreen RERAISE Screen integer register true }
MakeType2Screen		graphics/gray.c	/^private Screen MakeType2Screen(dict, fcns)/ ;" function 30 { GetType2Screen PSSetColorScreen }	{ DURING DeleteScreen DevAllocHalftone DevHalftone END_HANDLER GenerateThresholds GetValidFreqAngleOctet HANDLER LimitCheck NULL NewScreen RERAISE Screen integer register true }
MakeXStr		include/language.h	/^#define MakeXStr(s)\\/ ;" macro 1 { ContextOpsInit CreatePSContext PSExecuteString PSPushString }	{ Xobj makestring s }
ManagedItem		postscript/customops.c	/^typedef struct { \/* element of the map *\// ;" typedef 5 { PSPopManagedObject PSReleaseManagedObject ValidatePObj myGetRoots myTerminateSpace }	{ }
Map		fonts/fontbuild.c	/^private Fixed Map(pls, x)/ ;" function 20 { BuildChar LockPFCd TfmLockPt1 }	{ IntX PLokPair fixmul p register }
MapErrno		stodev/stodevfont.c	/^private procedure MapErrno()/ ;" function 17 { FontReadAttr FontStmCreate UDDelete UDReadAttr UDRename UDiskStmCreate }	{ NIL RAISE ecIOError ecInvalidFileAccess ecUndefFileName }
MapFontDirectory		language/dict.c	/^#define	MapFontDirectory(dictBody, pObj) \\/ ;" macro 1 { DictTestP Load LoadName }	{ Card32 dictObj rootShared tdFontDirectory vmCurrent }
Mark		device/mark.c	/^public procedure Mark(device, graphic, devClip, ma/ ;" function 179 { BM34_Mark BM38_Mark BPMark FmMark GenInitPage IniFmDevImpl IniGenDevImpl IniMpdDevImpl IniNullDevImpl IniWdDevImpl MP12MarkDataAndAlpha MarkDevPrim MarkNextImage PSRectFill ShowMask }	{ BBoxCompareResult BoundsCompare CantHappen ClipRunMasksDispatch ClipRunTrapsDispatch ClipTrapsRunDispatch ClipTrapsStringDispatch DevBounds DevCd DevImage DevPrim DevPrimIsRect DevRun DevTrap FullBounds ImageArgs ImageRun ImageTraps LASTSCANVAL MarkArgs NULL NoClipMark PMarkProcs PSimpleMarkProcs QIntersect TrapTrapDispatch devXAOffset integer string xaOffset }
MarkArgs		mp/devmark.h	/^typedef struct {/ ;" typedef 7 { Mark MaskGoAway }	{ }
MarkDevPrim		graphics/graphmark.c	/^public procedure MarkDevPrim(dp, clip) DevPrim *dp/ ;" function 57 { AddRunMark DoImageMark Fill MarkStrokeMasks ShowMask StdTrapsFilled StringMark UCacheMark }	{ DevLong DevMarkInfo DevPrim DevPrivate LinkDP Mark NULL OverlapChunk PGState UnlinkDP gs register xaOffset }
MarkInit		graphics/graphmark.c	/^public procedure MarkInit(reason)  InitReason reas/ ;" function 26 { GraphicsInit }	{ ATRAPLENGTH DevPrim DevTrap InitDevPrim MarkState MarkStateProcs MarkStrokeMasks NEW NULL NewDevPrim PMarkState PMarkStateProcs StdInitMark StdTermMark StdTrapsFilled ms stdMarkProcs }
MarkNextImage		product/windowimage.c	/^void MarkNextImage(int tag)/ ;" function 152 { PSNextImage }	{ DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DevImage DevImageSource DevMarkInfo DevPrim DevTrap FindImageMessage ImageMessage Mark Mtx MtxCnct MtxInvert NULL PDevice PSGetClip PSGetDevice PSGetMarkInfo PSGetMatrix PSGetTfrFcn PSInvalidID PSRangeCheck PSReduceRect PVoidProc ReleaseMsg d imageID }
MarkObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 42 { PSCrCParams PSLBrak }	{ }
MarkObject		vm/vm_relocate.h	/^typedef struct _t_MarkObject {/ ;" typedef 8 { BuildRelocationTable }	{ }
MarkProcsRec		mp/devmark.h	/^typedef struct {/ ;" typedef 12 { IniFmDevImpl IniMaskDevImpl IniWdDevImpl }	{ }
MarkRec		include/bintree.h	/^typedef struct _markrec {/ ;" typedef 6 { LMark }	{ }
MarkState		graphics/graphicspriv.h	/^typedef struct {/ ;" typedef 9 { DoRdcPth EnterCircle MarkInit ReduceQuadPath }	{ }
MarkStateProcs		graphics/graphicspriv.h	/^typedef struct {/ ;" typedef 6 { DoRdcStroke MarkInit }	{ }
MarkStrokeMasks		graphics/graphmark.c	/^private procedure MarkStrokeMasks(devmask, len, ll/ ;" function 16 { MarkInit }	{ DevPrim FixInt GetDevClipPrim InitDevPrim MakeBounds MarkDevPrim NULL llx lly ms string urx ury xaOffset }
MarkSystemContexts		product/ipcscheduler.c	/^public procedure MarkSystemContexts()/ ;" function 7 { PSSetLoginContext }	{ NULL PSSchedulerContext contextList true }
MaskDeviceInfo		device/framemaskdev.c	/^private procedure MaskDeviceInfo(device, args)/ ;" function 7 { IniMaskDevImpl }	{ AddIntEntry }
MaskGoAway		device/framemaskdev.c	/^private procedure MaskGoAway(device) PDevice devic/ ;" function 83 { IniMaskDevImpl }	{ CmptMaskBBMin DevMarkInfo DevMask DevPoint Fix MCFreeBytes MCGetCacheBytes MarkArgs MaskRec MaskStuff MaskUnitWidth MasksMark NIL NULL PCard8 PMask PSCANTYPE SCANTYPE SCANUNIT data false fmMarkProcs framebase framebytewidth framelog2BD integer true }
MaskInitPage		device/framemaskdev.c	/^private procedure MaskInitPage (device, c) PDevice/ ;" function 5 { IniMaskDevImpl }	{ Assert NIL PMaskStuff }
MaskPatHandle		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 4 { MaskPatInfo MaskPattern MaskSetup }	{ }
MaskPatInfo		devpattern/maskpattern.c	/^public integer MaskPatInfo (h, red, green, blue, g/ ;" function 15 { MaskPattern }	{ MaskPatHandle }
MaskPatRec		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 4 { MaskPattern }	{ }
MaskPattern		devpattern/maskpattern.c	/^public PatternHandle MaskPattern(positive) boolean/ ;" function 8 { IniMaskDevImpl }	{ DestroyPat MaskPatHandle MaskPatInfo MaskPatRec MaskSetup os_sureMalloc }
MaskRec		include/devicetypes.h	/^typedef struct _t_MaskRec/ ;" typedef 10 { BMAlloc CheckBM FmMakeMaskDevice InitMaskCache MCGetMask MaskGoAway }	{ }
MaskSetup		devpattern/maskpattern.c	/^public procedure MaskSetup(h, markinfo, data)/ ;" function 11 { MaskPattern }	{ LASTSCANVAL MaskPatHandle data start true }
MaskSetupImageArgs		device/framemaskdev.c	/^private procedure MaskSetupImageArgs(device, args)/ ;" function 13 { IniMaskDevImpl }	{ NIL PatternInfo data fmImageProcs gMaskPattern }
MaskSetupMark		device/framemaskdev.c	/^private integer MaskSetupMark (device, clip, args)/ ;" function 16 { IniMaskDevImpl }	{ NIL PMaskStuff SetupPattern defaultHalftone maskMarkProcs }
MaskStuff		device/framemaskdev.h	/^typedef struct {	\/* concrete "Device" type for a c/ ;" typedef 5 { FmMakeMaskDevice MaskGoAway }	{ }
MaskUnitWidth		device/framemaskdev.h	/^#define MaskUnitWidth(mask) (((mask)->width + SCAN/ ;" macro 1 { MaskGoAway }	{ SCANSHIFT SCANUNIT }
MasksMark		device/mark.c	/^public procedure MasksMark(masks, items, args)/ ;" function 13 { ClipRunMasksDispatch ClipTrapsStringDispatch IniFmDevImpl MaskGoAway MasksMark NoClipMark }	{ LASTSCANVAL MasksMark PMarkProcs procedure }
MatchBackup		fonts/compshow.c	/^#define MatchBackup 6/ ;" macro 1 { }	{ }
MatchChar		fonts/compshow.c	/^#define MatchChar 0/ ;" macro 1 { }	{ }
MatchFIC		fonts/compshow.c	/^#define MatchFIC 7/ ;" macro 1 { }	{ }
MatchMonitors		bintree/drivers.c	/^static void MatchMonitors()/ ;" function 88 { DriverInit }	{ AssignBounds INF NXMonitor OFFSETBOUNDS Point mon monCount net netCount p strcmp }
MathInit		language/math.c	/^public procedure MathInit(reason)  InitReason reas/ ;" function 11 { LanguageInit }	{ }
MaxBound		bintree/bintreetypes.h	/^#define MaxBound(b, o) ((o) ? (&((b)->maxx)) : (&(/ ;" macro 1 { BPDivideAt DPApplyBoundsProc DPCompositeFrom DPCompositeTo DPMark DPObscureInside DPRevealInside divBoundsAt }	{ }
MaxCharSortInterval		fonts/fontcache.h	/^#define MaxCharSortInterval 300/ ;" macro 1 { PreBuiltChar ShowByName }	{ }
MaxInt16		graphics/pathpriv.c	/^#define MaxInt16 ((short int) 0x7FFF)/ ;" macro 1 { OFMark QIntersect QIntersectTrp QReduce }	{ }
MaxInteger		language/opcodes.h	/^#define MaxInteger	18/ ;" macro 1 { EncodeObj IntegerCodes }	{ }
MaxMCount		fonts/cicache.c	/^#define MaxMCount 20/ ;" macro 1 { PSFlushMasks TrimCI }	{ }
MaxNEW		graphics/image.c	/^private charptr MaxNEW(minCount, pMaxCount, size)/ ;" function 24 { ImageInternal }	{ DFLT_IMAGE_BUF_SIZE LimitCheck NEW NULL SIZE_IMAGE_BUFFER charptr integer p ps_getsize register true }
MaxSSS		fonts/fontspriv.h	/^#define MaxSSS 6/ ;" macro 1 { CheckCompositeFont }	{ }
Maxprobe		language/name.c	/^private integer Nsearch, Ncomp, Maxprobe;/ ;" global 1 { FastName PSNProbeStats }	{ }
MergeDevBounds		device/devbounds.c	/^public DevBounds *MergeDevBounds(self, a, b)/ ;" function 11 { AddDevPrim AppendTraps FullBounds MultiRectFill }	{ }
MergeEdges		graphics/qreducer.c	/^private Edge MergeEdges(e1, e2) register Edge e1, / ;" function 31 { QReduce }	{ Edge NIL register true }
Methuselah		fonts/fontcache.h	/^#define Methuselah 0xffffffff/ ;" macro 1 { InitFontCache InitSortMID MTAlloc }	{ }
MidPixel		graphics/cscan.c	/^#define MidPixel(pix) ((Fixed)(FixInt(pix) | 0x800/ ;" macro 1 { DetermineTieBreaker FillInColumn FillInInflection SetPixelInDropOut SplicePixel }	{ FixInt Fixed }
MidPoint		graphics/pathops.c	/^#define MidPoint(m,a,b) (m).x=((a).x+(b).x)\/fpTwo;/ ;" macro 1 { BezierDivide }	{ }
MinBound		bintree/bintreetypes.h	/^#define MinBound(b, o) ((o) ? (&((b)->minx)) : (&(/ ;" macro 1 { BPDivideAt DPApplyBoundsProc DPCompositeFrom DPCompositeTo DPMark DPObscureInside divBoundsAt }	{ }
MinEncodingLength		fonts/fontshow.c	/^private integer MinEncodingLength(fdict) DictObj f/ ;" function 19 { MinEncodingLength SetFont }	{ AryObj COMPOSEDtype DictGetP IntObj MinEncodingLength VMGetElem fontsNames integer }
MinInt16		graphics/pathpriv.c	/^#define MinInt16 ((short int) 0x8000)/ ;" macro 1 { OFMark QIntersect QIntersectTrp QReduce }	{ }
MinInteger		language/opcodes.h	/^#define MinInteger	-1/ ;" macro 1 { DecodeObj EncodeObj IntegerCodes RelocateObj }	{ }
MinStackUnused		coroutine/corouxfer.c	/^public integer MinStackUnused(coroutine)/ ;" function 8 { }	{ FOOTPRINT MAXinteger footprint integer p register }
MiniBlkSz		graphics/fflattenpath.c	/^#define MiniBlkSz (10)/ ;" macro 1 { FMiniFltn }	{ }
MiniFltnMaxDepth		graphics/fflattenpath.c	/^#define MiniFltnMaxDepth (6)/ ;" macro 1 { FMiniFltn }	{ }
MinimumClip		graphics/graphics.c	/^public procedure MinimumClip()/ ;" function 40 { ReducePathClipInt }	{ Cd ClosePath DURING DevPrim DevTrap DisposeDevPrim END_HANDLER FREE FrPth HANDLER HasCurrentPoint MoveTo NEW NULL NewDevPrim PPath RERAISE ReducedPath false gs os_freeelement os_newelement rpStorage secret }
MiscOpsInit		product/miscops.c	/^public procedure MiscOpsInit(int reason)/ ;" function 4 { NextCustomProc }	{ PSRgstOps cmdMiscops }
MiterPoint		graphics/stroke.c	/^private boolean MiterPoint(p1, v1, p2, v2, i, c) C/ ;" function 41 { FillJoin }	{ Cd Dist RealEq0 VecAdd VecMul ccw false fpOne fpp7 normalize os_fabs real throwThreshold true }
MkCirc		graphics/stroke.c	/^private procedure MkCirc(c) Cd c; {/ ;" function 11 { PreCacheTrapCircles }	{ CircleCache EnterCircle NULL integer real register xHiCirCenter xLowCirCenter yHiCirCenter yLowCirCenter }
Mnextmain		product/nextmain.c	/^main(int argc, char *argv[])/ ;" function 141 { }	{ BeginParseArguments CreateNullDevice CreatePSContext CreatePSSpace EndParseArguments FPInit FilePathSearch FontStoDevInit GetCArg InitMakeVM InitPostScript NIL NULL NextCustomProc NextGStatesProc PCard32 PSContext PSDeviceInit PSSetTimeLimit PSSpace PostScriptParameters RgstPARelocator SIGNALSTACKSIZE Scheduler SchedulerInit Stm StmInit StoDevInit UnixStmInit UnixStoDevInit dummyClock gStateExtProc initString mntring os_fopen os_malloc os_stderr os_stdin os_stdout procedure readonly signalStackArea true }
ModifyCachingParams		fonts/fontbuild.c	/^public procedure ModifyCachingParams (fd, pcn, m)/ ;" function 27 { BMRun CCBuild CCRunStd MakeCacheDev2 PathEndChar }	{ DictGetP InvlFont Object PopPCd PushP PushPCd arrayObj boolean cdevprocname pkdaryObj real }
MonExitProc		postscript/contextimpl.c	/^private procedure MonExitProc() {/ ;" function 8 { ContextOpsInit }	{ EPopP Object ReleaseLock TypeCheck escObj objLock }
MonitorExit		postscript/contextimpl.c	/^private procedure MonitorExit() { \/* called back f/ ;" function 7 { ClearExecStack ContextOpsInit PSExit RgstContextProcs }	{ EPopP Object ReleaseLock TypeCheck escObj objLock }
MonoPatHandle		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 4 { MonoPatInfo MonoSetup MonochromePattern }	{ }
MonoPatInfo		devpattern/monopattern.c	/^public integer MonoPatInfo (h, red, green, blue, g/ ;" function 21 { MonochromePattern }	{ MonoPatHandle }
MonoPatRec		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 4 { MonochromePattern }	{ }
MonoSetup		devpattern/monopattern.c	/^public procedure MonoSetup(h, markInfo, data)/ ;" function 79 { MonochromePattern }	{ AllocInfoVector CantHappen Card8 ConstantColor DURING DevColorVal DevScreen END_HANDLER FGEnterMonitor FGExitMonitor HANDLER LASTSCANVAL MAXCOLOR MonoPatHandle NIL PCachedHalftone PCard8 PPatCacheInfo PScreenPrivate RAISE RERAISE RollPattern SetPatInfo SetupMonoPattern ValidateTA data dgGray ecLimitCheck integer patTimeStamp patterns register start true }
MonochromePattern		devpattern/monopattern.c	/^public PatternHandle MonochromePattern(oneMeansWhi/ ;" function 8 { SetFmDeviceMetrics }	{ DestroyPat MonoPatHandle MonoPatInfo MonoPatRec MonoSetup os_sureMalloc }
MouseInit		product/mouse_driver.c	/^public procedure MouseInit(int reason)/ ;" function 5 { NextCustomProc }	{ PSRgstOps cmdMouse }
MousePSContext		product/event.c	/^public	PSContext MousePSContext; \/* PSContext that/ ;" global 1 { EventInit NSDestroyPS PSInitEvents PSTermEvents }	{ }
MoveTo		graphics/pathbuild.c	/^public procedure MoveTo(c, p) / ;" function 6 { AddCirclePath AddTrapezoidToPath Arc BuildChar BuildMultiRectPath CCRun CallArc ConvertToListPath DoArcTo DoUAppend FMoveTo FillBevel FillCircle FillQuad FixedMoveTo FlPthMvTo MinimumClip MoveToAfterShow PSCharPath RMoveTo SlowShow UPMoveTo UsrPthArc UsrPthArcTo UsrPthDoMoveTo UsrPthMoveTo }	{ AddToPath p pathstart }
MoveToAfterShow		fonts/fontshow.c	/^public procedure MoveToAfterShow(ssr)/ ;" function 6 { CompSlowShow SimpleShowByName SlowShow }	{ MoveTo UNFIXCD fdcp gs rdcp ssr useReal }
MpdDevInit		product/machportdevice.c	/^public procedure MpdDevInit(int reason)/ ;" function 5 { NextCustomProc }	{ PSMachPortDevice PSRegister }
Msg_Receive		product/ipcscheduler.c	/^private msg_return_t Msg_Receive(msg_header_t *hea/ ;" function 5 { SelectPSContext }	{ header }
Mtx		include/fp.h	/^typedef struct _t_Mtx/ ;" typedef 5 { AnamorphicNormStrkWdth ArcInternal BMRun BuildChar CheckCompositeFont CompSlowShow CompositeShow DTfmToFixed DelayedMakeFont DoImage EnterRdcInCache FastShow FillCircle FindRdcInCache GetFontAndCharInfo GetXDistYDist ImageDict ImageInternal ImageTrapsOrRun MakeCacheDev2 MakeCompFont MakeFontSupp MakeMID MtxCnct MtxInvert PSCnct PSCnctMtx PSDTfm PSDefineFont PSDfMtx PSIDTfm PSITfm PSIdentMtx PSInUStroke PSInvertMtx PSMakeFont PSMtx PSRectStroke PSRtat PSScal PSScaleFont PSSelectFont PSSetMtx PSTfm PSTlat PSUPath PSUStroke PSUStrokePath PathForAll PreBuiltChar PrintMidDict Rtat Scal SetCchDevice SetCharWidth SetHalfWidth ShowByName TfmToBB Tlat UCGetDevPrim (etc) }	{ }
MtxCnct		fp/mtxvec.c	/^public procedure MtxCnct(m, n, r)  PMtx m, n, r;/ ;" function 11 { ArcInternal Cnct FillCircle GetFontAndCharInfo ImageInternal MakeCompFont MakeFontSupp MakeMID MarkNextImage PSCnctMtx }	{ Mtx d r }
MtxEqAlmost		fp/mtxvec.c	/^public boolean MtxEqAlmost(m1, m2)  PMtx m1, m2;/ ;" function 11 { MakeMID }	{ boolean d fpp001 }
MtxInvert		fp/mtxvec.c	/^public procedure MtxInvert(m, im)  register PMtx m/ ;" function 49 { CCRun IDTfmPCd ITfmPCd ImageInternal MarkNextImage PSInvertMtx PSUPath PathForAll SetHalfWidth SetupFntMtx }	{ Mtx NIL RAISE RealEq RealEq0 boolean d ecUndefResult false fpOne fpZero lastm lastminv real true }
MtxToPAry		graphics/matrix.c	/^public procedure MtxToPAry(m, pao)  PMtx m; regist/ ;" function 13 { MakeCompFont MakeFontSupp PSPushPMtx PushPMtx }	{ LRealObj Object RangeCheck TypeCheck VMPutElem arrayObj cardinal d }
MtxType		fonts/fontdata.h	/^typedef enum {/ ;" typedef 3 { CompositeShow FastShow QDoEUsrPth QDoEUsrPthFloat QDoUserPath QEnumOk }	{ }
Mul2By2		graphics/reducer.c	/^private procedure Mul2By2(a, b, prod)  Int32 a, b;/ ;" function 7 { Intersect }	{ Card32 MulUn22 }
MulUn22		graphics/reducer.c	/^private procedure MulUn22(a, b, prod) Card32 a, b;/ ;" function 44 { Div3By2 Mul2By2 RatComp psFPMult }	{ Card16 Card32 a0 register }
MultiRectFill		graphics/rect.c	/^private procedure MultiRectFill(Object obj, DevPri/ ;" function 39 { PSRectFill }	{ BBoxCompareResult BBoxRec BoundsCompare Cd DevPrim DevTrap GetDevClipPrim MergeDevBounds NULL NumStrm Path QuadPath ReduceQuadPath SetupNumStrm StdInitMark StdTermMark TypeCheck gs integer ms procedure real true }
MyCeil		product/coordinates.c	/^#define MyCeil(f) ((f)+(float)0.999999)/ ;" macro 1 { CompositePriv PopBounds }	{ }
NAME_H		language/name.h	/^#define	NAME_H/ ;" macro 1 { }	{ }
NBUFCHARS		language/stodevedit.c	/^#define NBUFCHARS (2*sizeof(char *) + sizeof(integ/ ;" macro 1 { LineEdit LineUnGetc }	{ integer }
NCOMPOSITEOPS		include/bintree.h	/^#define NCOMPOSITEOPS	15/ ;" macro 1 { }	{ }
NDIFF		fonts/glbclr.h	/^#define NDIFF ((MAXBANDS*MAXBANDS + MAXBANDS)\/2)  / ;" macro 1 { IniGlbClrBuffs }	{ MAXBANDS }
NEASize		postscript/postscript.c	/^#define NEASize (1 << HASHINDEXFIELD)/ ;" macro 1 { CreateSharedVM }	{ HASHINDEXFIELD }
NEGALPHA		bitmap/bm34comp.c	/^#define NEGALPHA(s)	((~(s)) & AMASK)/ ;" macro 1 { BMComposite34 BMComposite38 }	{ AMASK s }
NEG_INDICES		graphics/cscan.c	/^#define NEG_INDICES  (!(SEGMENT_64K))/ ;" macro 1 { }	{ SEGMENT_64K }
NEGesc		fonts/fontbuild.c	/^#define NEGesc 14/ ;" macro 1 { CCRunStd }	{ }
NEW		include/vm.h	/^#define NEW(n,size)\\/ ;" macro 1 { AddProcToList BuildPathFreeList BuildRelocationTable CCBuild CopyNumStrmForCache CreateContext CreateData CreatePSSpace CreateVM EnterCircle EnterPathInCache EnterRdcInCache FSInit FndFntSibling FontBuildInit FontShowInit GCInternal_AllocStack GCInternal_GrowStack GCInternal_VMChange GetPatternBase IniReducer InitClipPath InitFontCache InitSFCache Init_Cmds Init_StaticData LineEdit MakeRectPath MarkInit MaxNEW MinimumClip NewRecycler NewSegment NewShowState NewStack PSChdir PSMakeVM RdcStrkDumpMasks RegisterData StartLock WriteContextParam }	{ MNew integer }
NEWCROSS		graphics/cscan.c	/^#define NEWCROSS(cross) { if (((cross)=currentCros/ ;" macro 1 { NewCross NewLinkCross NewXtraCross StartSplice }	{ OutOfMemory currentCross limitCross }
NEWSTATE		language/scanner.c	/^#define NEWSTATE state = stateArray[state->newStat/ ;" macro 1 { LineComplete StmToken }	{ stateArray }
NEXTIMAGE_ID		product/ipcstream.h	/^#define NEXTIMAGE_ID 3053/ ;" macro 1 { IPCFillBuf }	{ }
NEXTPREBUILT_H		device/nextprebuilt.h	/^#define NEXTPREBUILT_H/ ;" macro 1 { }	{ }
NEXTSTEP_DISPLAY_PATH		bintree/bintreetypes.h	/^#define NEXTSTEP_DISPLAY_PATH "\/usr\/lib\/NextStep\/D/ ;" macro 1 { }	{ }
NEXTSTEP_PATH		bintree/bintreetypes.h	/^#define NEXTSTEP_PATH         "\/usr\/lib\/NextStep"/ ;" macro 1 { }	{ }
NEXTSTMSTUFF		language/binaryobject.c	/^#define NEXTSTMSTUFF 1/ ;" macro 1 { }	{ }
NEXT_MOD		postscript/contextimpl.c	/^#define NEXT_MOD 1/ ;" macro 1 { }	{ }
NEXT_RAND		graphics/graypriv.c	/^#define NEXT_RAND	((randx = randx * 1103515245 + 1/ ;" macro 1 { GrayGreaterThan }	{ MAXinteger randx }
NHdr		fonts/cacheimpl.c	/^#define NHdr(l) ((PCacheEntHdr) ((char*)((l).next)/ ;" macro 1 { CacheInvalidate }	{ Links PCacheEntHdr }
NIL		include/publictypes.h	/^#define	NIL	NULL/ ;" macro 1 { AcquireLock BM34InitClassVars BM38InitClassVars BreakLooseCV BreakLooseLK BuildInitialState CheckForPSNotify CoReturn ConditionalInvalidateRecycler ContextOpsInit CreateContext CreateCoroutine CreatePSContext CreatePSSpace CreatePrivateVM CreateSharedVM CustomOpsInit DestroyPSContext DestroyPSSpace DoQuit ExclusivePSContext ForAllNames GetNextContext GetNextSpace IDToPSContext IDToPSSpace InitCoroutine InitPostScript InitializePackages InnerNotify MP12InitClassVars NewCondition NewContextID NewLock NewSpaceID NotifyPSContext PSCoProc PSDetach PSExecuteOperator PSFork PSHandleExecError PSInvalidID PSJoin PSRgstOps PSSetDevice PSUndef PSWait RecycleID RecycleMI ReleaseLock SetCch SetCurrentContext SpaceExclusionSemaphore SwitchPSContext TerminatePSSpace TopError TotalExclusionSemaphore UnloadContext WaitOnJoinable YieldByRequest (etc) }	{ NULL }
NIMAGETRAPS		graphics/image.c	/^#define NIMAGETRAPS 7/ ;" macro 1 { ImageInternal }	{ }
NINTERVAL		fonts/glbclr.c	/^#define NINTERVAL 12/ ;" macro 1 { SimpleCounter }	{ }
NOCXTN		graphics/cscan.c	/^#define NOCXTN 0		\/* There are no connected pixels/ ;" macro 1 { BuildCxtn GetRuleDesc ScanLineCxtn }	{ }
NOGRAYPAT		include/bintree.h	/^#define NOGRAYPAT 0/ ;" macro 1 { NXGrayPatSetup WdConvertColor }	{ }
NOLL		vm/saverestore.c	/^public NullObj NOLL;	\/* maintained at current save/ ;" global 1 { AllocPArray AllocPDict CompSlowShow DMFRestore FndFntSibling FreeShowState Init_SaveRestore InsertMID LoadVM MakeFont RstrToLevel Save SaveRestore_Data_Handler SetShared SimpleShowByName SlowShow VMExpandDict ZapDelayedDict }	{ }
NONRETAINED		include/bintree.h	/^#define NONRETAINED	 1/ ;" macro 1 { BAGNew BPAdjust BPCompositeFrom BPCompositeTo BPCopyBitsFrom BPMark BPRenderInBounds BPRevealBecause LFill LHideInstanceIn LMark LPlaceAt LPrintOn LSetAlphaBits MPNewWindow MPPromoteWindow }	{ }
NOREASON		bintree/bintreetypes.h	/^#define NOREASON	0/ ;" macro 1 { BPBecomeDivAt CSAdd CSRemove DPRevealInside UniqueCause }	{ }
NOREGISTER		include/environment.h	/^#define NOREGISTER (STAGE==DEVELOP)/ ;" macro 1 { }	{ DEVELOP }
NOTHEX		language/streampriv.h	/^#define NOTHEX -1/ ;" macro 1 { CStmHFilBuf InitHexToBin PSEExec PSReadHexString }	{ }
NOT_ON_SCREEN		product/windowops.c	/^#define NOT_ON_SCREEN	2/ ;" macro 1 { PSOrderWindow checkOrderingValdity }	{ }
NPcmd		fonts/fontbuild.c	/^#define NPcmd	20/ ;" macro 1 { BuildChar CCRunStd }	{ }
NRECT_MAX		include/windowdevice.h	/^#define NRECT_MAX	2000    \/* Maximum concurrent no/ ;" macro 1 { }	{ }
NROOTFILES		include/disk.h	/^#define NROOTFILES 2		\/* number of copies of root / ;" macro 1 { }	{ }
NRect		include/windowdevice.h	/^typedef struct _nrect {/ ;" typedef 12 { ClearWdNRect IniWindowOps PSMoveWindow PSSetNRect RecalcMouseRect TermNRects }	{ }
NSAddContextType		product/nscontexts.c	/^void NSAddContextType( NSContextType *c )/ ;" function 6 { InitPSContextType NSLoadContextType }	{ contextTypeList }
NSCONTEXTS_H		product/nscontexts.h	/^#define NSCONTEXTS_H/ ;" macro 1 { }	{ }
NSCheckNotifyContext		product/nscontexts.h	/^#define NSCheckNotifyContext( t, psc )	if ((t)->ch/ ;" macro 1 { ContextYield }	{ }
NSCheckNotifyPS		product/pscontext.c	/^public procedure NSCheckNotifyPS(PSContext ctxt)/ ;" function 4 { }	{ CheckForPSNotify }
NSContext		product/nscontexts.h	/^typedef void	*NSContext;/ ;" typedef 1 { WBmain }	{ }
NSContextType		product/nscontexts.h	/^typedef struct _NSContextType/ ;" typedef 20 { CreateNewContext NSGetContextType NSLoadContextType }	{ }
NSCreateContext		product/nscontexts.h	/^#define NSCreateContext( t, msg )	(*((t)->createPr/ ;" macro 1 { CreateNewContext }	{ }
NSCreatePS		product/pscontext.c	/^public PSSchedulerContext NSCreatePS(notification_/ ;" function 39 { }	{ CreateIPCStreams CreateNullDevice CreatePSContext CreatePSSpace DestroyPSSpace NULL PSContext PSLimitCheck PSSpace SetRemotePort Stm SwitchPSContext currentPSContext initString scheduler stmPort }
NSCreateWB		product/wbcontext.c	/^PSSchedulerContext NSCreateWB(NXWBConnectMsg *msg,/ ;" function 35 { WBmain }	{ CreateTypedContext PSLimitCheck PSSchedulerContext SetRemotePort WBCList WBCoProc WBContext WBContextP WBMsg_send free scheduler }
NSCurrentContext		product/nscontexts.h	/^#define NSCurrentContext( t )		(*((t)->current))/ ;" macro 1 { Scheduler }	{ current }
NSDestroyContext		product/nscontexts.c	/^NSDestroyContext( NSContextType *t, PSSchedulerCon/ ;" function 5 { Scheduler }	{ DestroyCoroutine }
NSDestroyPS		product/pscontext.c	/^public procedure NSDestroyPS(PSContext theContext)/ ;" function 32 { }	{ ActiveApp DestroyPSContext DestroyPSSpace LoginContextKilled MousePSContext NULL PSContext PSContextToID PSSpace PostDeathEvent TermWindowsBy os_fprintf os_stderr scheduler }
NSDestroyWB		product/wbcontext.c	/^void NSDestroyWB(WBContext *wbc)/ ;" function 19 { WBmain }	{ NULL WBCList WBCloseBitmap WBContext currentWBContext free }
NSGetContextType		product/nscontexts.c	/^NSContextType *NSGetContextType(int ctxtID)/ ;" function 24 { CreateNewContext CreateSchedulerContext }	{ NSContextType NULL contextTypeList register }
NSHOWSTATES		fonts/fontshow.c	/^#define NSHOWSTATES 4  \/* pool of permanently allo/ ;" macro 1 { FontShowInit }	{ }
NSLoadContext		product/nscontexts.h	/^#define NSLoadContext( t, psc )	((t)->loadProc) ? / ;" macro 1 { Scheduler }	{ NULL }
NSLoadContextType		product/nscontexts.c	/^NSContextType *NSLoadContextType(int id)/ ;" function 50 { CreateNewContext }	{ DynaLoadFile NSAddContextType NSContextType NULL NXWB_CONTEXTID WBmain free header pkgEnt pkgEntryList }
NSLoadPS		product/pscontext.c	/^public PSSchedulerContext NSLoadPS(PSSchedulerCont/ ;" function 5 { }	{ SwitchPSContext currentPSContext scheduler }
NSLoadWB		product/wbcontext.c	/^PSSchedulerContext NSLoadWB(PSSchedulerContext psc/ ;" function 5 { WBmain }	{ currentWBContext }
NSNotifyContext		product/nscontexts.h	/^#define NSNotifyContext( t, psc )	if ((t)->notifyP/ ;" macro 1 { HandleNotifyMsg }	{ }
NSNotifyPS		product/pscontext.c	/^public procedure NSNotifyPS(PSContext ctxt)/ ;" function 4 { }	{ IPCNotifyReceived }
NSTermContext		product/nscontexts.c	/^NSTermContext( NSContextType *t, PSSchedulerContex/ ;" function 5 { HandleNotifyMsg TerminateUserContexts }	{ }
NSTermPS		product/pscontext.c	/^public procedure NSTermPS(PSContext ctxt)/ ;" function 4 { }	{ NotifyPSContext }
NSTermWB		product/wbcontext.c	/^void NSTermWB(WBContext *ctxt)/ ;" function 4 { WBmain }	{ true }
NSTimeoutContext		product/nscontexts.h	/^#define NSTimeoutContext( t, psc, to )	if ((t)->ti/ ;" macro 1 { SelectPSContext }	{ }
NSTimeoutPS		product/pscontext.c	/^public procedure NSTimeoutPS(PSContext ctxt, int t/ ;" function 4 { }	{ PSSetTimeLimit }
NSUnloadContext		product/nscontexts.h	/^#define NSUnloadContext( t, psc )	if ((t)->unloadP/ ;" macro 1 { Scheduler }	{ }
NSUsesIPCStms		product/nscontexts.h	/^#define NSUsesIPCStms( t )		((t)->usesIPCStms)/ ;" macro 1 { HandleNotifyMsg }	{ }
NUL		include/publictypes.h	/^#define	NUL	'\\0'/ ;" macro 1 { CVT NumEncode NumFromStr PSCVS VMGetText }	{ }
NULL		include/publictypes.h	/^#define	NULL	0/ ;" macro 1 { BPAdjust BPAllocBag BPCompositeTo BPCopyBitsFrom CONSTSOURCE CURWINDOW CheckWindow DriverInit EXBuildExtents EXDummyScreens EXInitialize LBMBecomePSDevice LBMInitSinglePrim LBMMark LBackingBounds LCompositeFrom LCopyBitsFrom LCopyContents LFill LFind LFree LInitPage LInitialize LMark LMoveTo LNewAt LObscureInside LPlaceAt LPromoteLayer LRevealInside LSetDepthLimit LSetExposureColor Layer2Wd LoadSingleDriver MP12InitBricks MP12MarkDataAndAlpha MP12NewFromData MP12SetupPat MP12SetupPattern MP12_Mark MPComposite MPInitScreen MPStart NIL NXWID2Bag PInitialize PSGetDevice PSGetGStateExt PSGetMarkInfo PSGetMatrix PSGetTfrFcn PSPopManagedObject PSReduceRect ReadNetInfo SetUpSource ValidatePObj WLAboveButNotAbove WLAt WLBelowButNotBelow WLPutAfter (etc) }	{ }
NULLACTCLASS		graphics/cscan.c	/^#define NULLACTCLASS MAXACTIONCLASS	\/* No class *\// ;" macro 1 { PatternToActions }	{ }
NULLBOUNDS		include/bintree.h	/^#define NULLBOUNDS(one) \\/ ;" macro 1 { LCompositeFrom LFlushBits }	{ }
NULLDEV_H		device/nulldev.h	/^#define NULLDEV_H/ ;" macro 1 { }	{ }
NULLMERIT		graphics/cscan.c	/^#define NULLMERIT 0		\/* Null action *\// ;" macro 1 { FixPixelProblem GetRuleDesc PatternToActions }	{ }
NULLMaskIndex		device/maskcache.c	/^#define NULLMaskIndex MAXCard16/ ;" macro 1 { CompactBM }	{ MAXCard16 }
NULLSLOT		devpattern/patternimpl.c	/^#define NULLSLOT -32678		\/* Null index into screen/ ;" macro 1 { AllocScrnSlot FreeScreen GetMemForTA InitPatternImpl SendOldestToDisk }	{ }
NUM_ENTRIES		fonts/fontrun.c	/^#define NUM_ENTRIES (maxCharIndex + 1)	\/* 0..maxCh/ ;" macro 1 { KAEndCSDict }	{ }
NUM_PACKAGE_NAMES		postscript/postscriptnames.h	/^#define NUM_PACKAGE_NAMES 4/ ;" macro 1 { FontCacheInit IniGraphics LanguageInit StateInit VMInit }	{ }
NXBASEWINLEVEL		product/windowops.c	/^#define NXBASEWINLEVEL	((integer)0x80000000)/ ;" macro 1 { PSSetWindowLevel highestWindowInTier lowestWindowInTier }	{ integer }
NXBag		include/bintree.h	/^typedef struct _NXBag {/ ;" typedef 14 { BAGFind BAGFree BAGInitialize BAGNew BPAdjust BPCompositeFrom BPObscureBecause BPRevealBecause LBackingBounds LFree LGetBacking LGetDeviceStatus LMoveTo LOrder LPlaceAt LPrintOn LPromoteLayer LSetAlphaBits LSetDepthLimit NXSetHookMask NXWID2Bag }	{ }
NXColorSpaceType		product/machportdevice.c	/^enum NXColorSpaceType {/ ;" struct 6 { }	{ }
NXCoord		product/wbprotocol.h	/^typedef float   NXCoord;/ ;" typedef 1 { WBGetBitmap WBGetDeviceInfo }	{ }
NXCursorInfo		include/bintree.h	/^typedef struct _NXCursorInfo {/ ;" typedef 21 { }	{ }
NXDevice		include/bintree.h	/^typedef struct _NXDevice NXDevice;/ ;" typedef 1 { DisplayCursor DriverInit EXBuildExtents EXDummyScreens LNewAt PSFrameBuffer PSInitEvents PingAsyncDrivers RemoveCursor SysSyncCursor }	{ }
NXDriver		include/bintree.h	/^typedef struct _NXDriver NXDriver;/ ;" typedef 1 { DriverInit LoadActiveDrivers LoadSingleDriver PSFrameBuffer }	{ }
NXEvent		include/event.h	/^typedef struct _NXEvent {/ ;" typedef 10 { ClearEvent DispatchEvents PSPostEvent PSPostEventByContext PostChanged PostNotification PostRedraw WriteEvent }	{ }
NXEventData		include/event.h	/^typedef	union {/ ;" typedef 32 { PostDeathEvent }	{ }
NXEventPtr		include/event.h	/^typedef struct _NXEvent {/ ;" typedef 10 { }	{ }
NXGetWindowInfo		bintree/bag.c	/^int NXGetWindowInfo(Layer *layer, NXWindowInfo *wi/ ;" function 23 { }	{ LAYER PWindowDevice }
NXGrayPat		bitmap/bmpattern.c	/^PatternHandle NXGrayPat(int numpats, PatternData */ ;" function 11 { BM34InitClassVars BM38InitClassVars MP12InitClassVars }	{ NXGrayPatDestroy NXGrayPatInfo NXGrayPatRec NXGrayPatSetup PatternHandle }
NXGrayPatDestroy		bitmap/bmpattern.c	/^NXGrayPatDestroy(PatternHandle h)/ ;" function 4 { NXGrayPat }	{ free }
NXGrayPatInfo		bitmap/bmpattern.c	/^NXGrayPatInfo(PatternHandle h, DevColorData *red, / ;" function 6 { NXGrayPat }	{ CantHappen }
NXGrayPatRec		bitmap/bmpattern.c	/^typedef struct {/ ;" typedef 6 { NXGrayPat NXGrayPatSetup }	{ }
NXGrayPatSetup		bitmap/bmpattern.c	/^NXGrayPatSetup(PatternHandle h, DevMarkInfo *markI/ ;" function 24 { NXGrayPat }	{ CantHappen NOGRAYPAT NXGrayPatRec PNextGSExt data start true }
NXHook		include/bintree.h	/^typedef enum _NXHook {/ ;" typedef 8 { }	{ }
NXHookData		include/bintree.h	/^typedef struct _NXHookData {/ ;" typedef 28 { }	{ }
NXMonitor		bintree/drivers.c	/^typedef struct {/ ;" typedef 11 { AssignBounds DriverInit FreeMon GuaranteeActiveScreen LoadActiveDrivers MatchMonitors NXRegisterScreen ReadNetInfo SanityCheck }	{ }
NXPoint		product/wbprotocol.h	/^typedef struct _NXPoint {	\/* point *\// ;" typedef 3 { }	{ }
NXPrintPageMessage		include/printmessage.h	/^typedef struct _NXPrintPageMessage {/ ;" typedef 21 { mpdShowPage }	{ }
NXProcs		include/bintree.h	/^typedef struct _NXProcs {/ ;" typedef 21 { }	{ }
NXRect		product/wbprotocol.h	/^typedef struct _NXRect {	\/* rectangle *\// ;" typedef 4 { }	{ }
NXRegOpsVector		include/bintree.h	/^typedef struct {/ ;" typedef 4 { }	{ }
NXRegisterOps		bintree/drivers.c	/^void NXRegisterOps(NXRegOpsVector r)/ ;" function 5 { }	{ PSRegisterStatusDict r }
NXRegisterScreen		bintree/drivers.c	/^void NXRegisterScreen(NXDriver *driver, short slot/ ;" function 13 { MPStart }	{ NXMonitor mon }
NXSetHookMask		bintree/bag.c	/^void NXSetHookMask(NXBag *bag, int mask)/ ;" function 16 { }	{ DebugAssert Layer NXBag true }
NXSize		product/wbprotocol.h	/^typedef struct _NXSize {	\/* size *\// ;" typedef 3 { }	{ }
NXStartDriver		bintree/drivers.c	/^void NXStartDriver(char *name)/ ;" function 3 { LoadSingleDriver }	{ }
NXWBConnectMsg		product/wbprotocol.h	/^typedef struct/ ;" typedef 7 { }	{ }
NXWBMessage		product/wbprotocol.h	/^typedef struct/ ;" typedef 9 { WBCoProc }	{ }
NXWBOpenMsg		product/wbprotocol.h	/^typedef struct/ ;" typedef 15 { WBCoProc WBNotifyNewShmem }	{ }
NXWB_CLOSE		product/wbprotocol.h	/^#define NXWB_CLOSE	0x2050	\/* free the bitmap *\// ;" macro 1 { NXWB_FUNCTIONS WBCoProc }	{ }
NXWB_CONTEXTID		product/wbprotocol.h	/^#define NXWB_CONTEXTID	0x2000	\/* the id for openin/ ;" macro 1 { NSLoadContextType WBmain }	{ }
NXWB_EBUFFER		product/wberror.h	/^#define NXWB_EBUFFER	9	\/* requested window has no / ;" macro 1 { }	{ }
NXWB_EDUP		product/wberror.h	/^#define NXWB_EDUP	10	\/* can't put >1 WB on a windo/ ;" macro 1 { WBOpenBitmap }	{ }
NXWB_ELOCAL		product/wberror.h	/^#define NXWB_ELOCAL	8	\/* requested window not in l/ ;" macro 1 { }	{ }
NXWB_ENOMEM		product/wberror.h	/^#define NXWB_ENOMEM	4	\/* out of memory (?) *\// ;" macro 1 { }	{ }
NXWB_ENOPORT		product/wberror.h	/^#define NXWB_ENOPORT	5	\/* no more ports to allocat/ ;" macro 1 { }	{ }
NXWB_ENOSERV		product/wberror.h	/^#define NXWB_ENOSERV	6	\/* can't connect to the ser/ ;" macro 1 { }	{ }
NXWB_ENOSHMEM		product/wberror.h	/^#define NXWB_ENOSHMEM	7	\/* can't get shmem area *\// ;" macro 1 { WBOpenBitmap }	{ }
NXWB_ENOSTAT		product/wberror.h	/^#define NXWB_ENOSTAT	3	\/* can't stat the bitmap *\// ;" macro 1 { WBOpenBitmap }	{ }
NXWB_ENOSYNC		product/wberror.h	/^#define NXWB_ENOSYNC	2	\/* can't sync the bitmap to/ ;" macro 1 { }	{ }
NXWB_ENOWIN		product/wberror.h	/^#define NXWB_ENOWIN	1	\/* no such window in the ser/ ;" macro 1 { WBCloseBitmap WBFlushBitmap WBGetBitmap WBMarkBitmap WBOpenBitmap }	{ }
NXWB_FLUSH		product/wbprotocol.h	/^#define NXWB_FLUSH	0x0001	\/* post a flush graphics/ ;" macro 1 { WBCoProc }	{ }
NXWB_FUNCTIONS		product/wbprotocol.h	/^#define NXWB_FUNCTIONS	(NXWB_PUT | NXWB_GET | NXWB/ ;" macro 1 { WBCoProc }	{ NXWB_CLOSE NXWB_GET NXWB_PUT }
NXWB_GET		product/wbprotocol.h	/^#define NXWB_GET	0x2040	\/* get bitmap from server / ;" macro 1 { NXWB_FUNCTIONS WBCoProc }	{ }
NXWB_MODIFIERS		product/wbprotocol.h	/^#define NXWB_MODIFIERS	0x0003	\/* the modifiers wit/ ;" macro 1 { }	{ }
NXWB_NOERR		product/wberror.h	/^#define NXWB_NOERR	0/ ;" macro 1 { WBCloseBitmap WBCoProc WBFlushBitmap WBGetBitmap WBMarkBitmap WBNotifyNewShmem WBOpenBitmap }	{ }
NXWB_OPEN		product/wbprotocol.h	/^#define NXWB_OPEN	0x2010	\/* open a new bitmap *\// ;" macro 1 { WBCoProc }	{ }
NXWB_PUT		product/wbprotocol.h	/^#define NXWB_PUT	0x2030	\/* | this with data to jus/ ;" macro 1 { NXWB_FUNCTIONS WBCoProc }	{ }
NXWB_SYNCFLUSH		product/wbprotocol.h	/^#define NXWB_SYNCFLUSH	0x0002	\/* synchronous flush/ ;" macro 1 { WBCoProc }	{ }
NXWID2Bag		bintree/bag.c	/^NXBag *NXWID2Bag(short id, NXDevice *device)/ ;" function 12 { }	{ ID2Layer Layer NULL NXBag }
NXWindowInfo		include/bintree.h	/^typedef struct {/ ;" typedef 18 { MPNewWindow }	{ }
NX_ALLEVENTS		include/event.h	/^#define NX_ALLEVENTS	-1	\/* Check for all events *\// ;" macro 1 { }	{ }
NX_ALPHASHIFTMASK		include/event.h	/^#define	NX_ALPHASHIFTMASK		0x00010000/ ;" macro 1 { }	{ }
NX_ALTERNATEMASK		include/event.h	/^#define	NX_ALTERNATEMASK		0x00080000/ ;" macro 1 { }	{ }
NX_APPACT		product/event.c	/^#define NX_APPACT 		1/ ;" macro 1 { }	{ }
NX_APPDEACT		product/event.c	/^#define NX_APPDEACT 		2/ ;" macro 1 { }	{ }
NX_APPDEFINED		include/event.h	/^#define NX_APPDEFINED		15	\/* application-defined e/ ;" macro 1 { NX_APPDEFINEDMASK }	{ }
NX_APPDEFINEDMASK		include/event.h	/^#define NX_APPDEFINEDMASK 	(1 << NX_APPDEFINED)	\/*/ ;" macro 1 { }	{ NX_APPDEFINED }
NX_ASCIISET		include/event.h	/^#define	NX_ASCIISET		0/ ;" macro 1 { }	{ }
NX_BLACK		bintree/bintreetypes.h	/^#define NX_BLACK	0x00/ ;" macro 1 { LCompositeFrom LMark }	{ }
NX_BROADCAST		include/event.h	/^#define NX_BROADCAST	1/ ;" macro 1 { PostEvent }	{ }
NX_BYPSCONTEXT		include/event.h	/^#define NX_BYPSCONTEXT	11/ ;" macro 1 { PSSetHowPost PostEvent }	{ }
NX_BYTYPE		include/event.h	/^#define NX_BYTYPE	0/ ;" macro 1 { DispatchEvents PostEvent }	{ }
NX_CMYKCOLORSPACE		include/bintree.h	/^#define NX_CMYKCOLORSPACE	3/ ;" macro 1 { }	{ }
NX_COMMANDMASK		include/event.h	/^#define	NX_COMMANDMASK			0x00100000/ ;" macro 1 { }	{ }
NX_CONTROLMASK		include/event.h	/^#define	NX_CONTROLMASK			0x00040000/ ;" macro 1 { }	{ }
NX_DEFAULTDEPTH		include/bintree.h	/^#define NX_DEFAULTDEPTH			0/ ;" macro 1 { PSSetDefaultDepthLimit PSSetWindowDepthLimit }	{ }
NX_DINGBATSSET		include/event.h	/^#define	NX_DINGBATSSET		2/ ;" macro 1 { }	{ }
NX_DKGRAY		bintree/bintreetypes.h	/^#define NX_DKGRAY	0x55/ ;" macro 1 { LCompositeFrom LMark }	{ }
NX_EIGHTBITGRAY		include/bintree.h	/^#define NX_EIGHTBITGRAY		2/ ;" macro 1 { BM34ConvertFrom BM38ConvertFrom LGetDeviceStatus MP12ConvertFrom PSSetDefaultDepthLimit PSSetWindowDepthLimit PSSizeImage }	{ }
NX_EIGHTBITGRAY_DEPTH		include/bintree.h	/^#define NX_EIGHTBITGRAY_DEPTH		264			/ ;" macro 1 { PSSetDefaultDepthLimit PSSetWindowDepthLimit }	{ }
NX_EXPLICIT		include/event.h	/^#define NX_EXPLICIT	9/ ;" macro 1 { PostChanged PostEvent PostNotification PostRedraw }	{ }
NX_FIRSTEVENT		include/event.h	/^#define NX_FIRSTEVENT		0/ ;" macro 1 { NX_NUMPROCS PSCurrentHowPost PSSetHowPost }	{ }
NX_FIRSTWINDOW		include/event.h	/^#define NX_FIRSTWINDOW	3/ ;" macro 1 { PostEvent }	{ }
NX_FLAGSCHANGED		include/event.h	/^#define NX_FLAGSCHANGED		12	\/* flags-changed event/ ;" macro 1 { NX_FLAGSCHANGEDMASK WriteEvent }	{ }
NX_FLAGSCHANGEDMASK		include/event.h	/^#define NX_FLAGSCHANGEDMASK	(1 << NX_FLAGSCHANGED)/ ;" macro 1 { }	{ NX_FLAGSCHANGED }
NX_KEYDOWN		include/event.h	/^#define NX_KEYDOWN		10	\/* key-down event *\// ;" macro 1 { NX_KEYDOWNMASK SendEvent WriteEvent }	{ }
NX_KEYDOWNMASK		include/event.h	/^#define NX_KEYDOWNMASK		(1 << NX_KEYDOWN)	\/* key-d/ ;" macro 1 { }	{ NX_KEYDOWN }
NX_KEYUP		include/event.h	/^#define NX_KEYUP		11	\/* key-up event *\// ;" macro 1 { NX_KEYUPMASK SendEvent WriteEvent }	{ }
NX_KEYUPMASK		include/event.h	/^#define NX_KEYUPMASK		(1 << NX_KEYUP)		\/* key-up */ ;" macro 1 { }	{ NX_KEYUP }
NX_KITDEFINED		include/event.h	/^#define NX_KITDEFINED		13	\/* application-kit-defin/ ;" macro 1 { PostChanged PostRedraw }	{ }
NX_KITDEFINEDMASK		include/event.h	/^#define NX_KITDEFINEDMASK 	(1 << NX_WINCHANGED)	\/*/ ;" macro 1 { }	{ NX_WINCHANGED }
NX_LASTEVENT		include/event.h	/^#define NX_LASTEVENT		15/ ;" macro 1 { NX_NUMPROCS PSCurrentHowPost PSSetHowPost }	{ }
NX_LASTKEY		include/event.h	/^#define NX_LASTKEY	8/ ;" macro 1 { PostEvent }	{ }
NX_LASTLEFT		include/event.h	/^#define NX_LASTLEFT	6/ ;" macro 1 { PostEvent }	{ }
NX_LASTRIGHT		include/event.h	/^#define NX_LASTRIGHT	7/ ;" macro 1 { PostEvent }	{ }
NX_LMOUSEDOWN		include/event.h	/^#define NX_LMOUSEDOWN		1	\/* left mouse-down event / ;" macro 1 { NX_LMOUSEDOWNMASK SendEvent }	{ }
NX_LMOUSEDOWNMASK		include/event.h	/^#define NX_LMOUSEDOWNMASK	(1 << NX_LMOUSEDOWN)	\/* / ;" macro 1 { MOUSEEVENTMASK }	{ NX_LMOUSEDOWN }
NX_LMOUSEDRAGGED		include/event.h	/^#define NX_LMOUSEDRAGGED	6	\/* left mouse-dragged e/ ;" macro 1 { NX_LMOUSEDRAGGEDMASK }	{ }
NX_LMOUSEDRAGGEDMASK		include/event.h	/^#define NX_LMOUSEDRAGGEDMASK	(1 << NX_LMOUSEDRAGGE/ ;" macro 1 { MOVEDEVENTMASK }	{ NX_LMOUSEDRAGGED }
NX_LMOUSEUP		include/event.h	/^#define NX_LMOUSEUP		2	\/* left mouse-up event *\// ;" macro 1 { NX_LMOUSEUPMASK }	{ }
NX_LMOUSEUPMASK		include/event.h	/^#define NX_LMOUSEUPMASK		(1 << NX_LMOUSEUP)	\/* lef/ ;" macro 1 { MOUSEEVENTMASK }	{ NX_LMOUSEUP }
NX_LTGRAY		bintree/bintreetypes.h	/^#define	NX_LTGRAY	0xAA/ ;" macro 1 { LCompositeFrom LMark }	{ }
NX_MOUSEENTERED		include/event.h	/^#define NX_MOUSEENTERED		8	\/* mouse-entered event / ;" macro 1 { NX_MOUSEENTEREDMASK PostNotification }	{ }
NX_MOUSEENTEREDMASK		include/event.h	/^#define NX_MOUSEENTEREDMASK	(1 << NX_MOUSEENTERED)/ ;" macro 1 { }	{ NX_MOUSEENTERED }
NX_MOUSEEXITED		include/event.h	/^#define NX_MOUSEEXITED		9	\/* mouse-exited event *\// ;" macro 1 { DispatchEvents NX_MOUSEEXITEDMASK PostNotification }	{ }
NX_MOUSEEXITEDMASK		include/event.h	/^#define NX_MOUSEEXITEDMASK	(1 << NX_MOUSEEXITED)	\// ;" macro 1 { MOUSEEVENTMASK }	{ NX_MOUSEEXITED }
NX_MOUSEMOVED		include/event.h	/^#define NX_MOUSEMOVED		5	\/* mouse-moved event *\// ;" macro 1 { NX_MOUSEMOVEDMASK }	{ }
NX_MOUSEMOVEDMASK		include/event.h	/^#define NX_MOUSEMOVEDMASK	(1 << NX_MOUSEMOVED)	\/* / ;" macro 1 { MOVEDEVENTMASK }	{ NX_MOUSEMOVED }
NX_MOUSEWINDOW		include/event.h	/^#define NX_MOUSEWINDOW	4/ ;" macro 1 { PostEvent PostNotification }	{ }
NX_NEXTCTLKEYMASK		include/event.h	/^#define	NX_NEXTCTLKEYMASK		0x00000001/ ;" macro 1 { }	{ }
NX_NEXTLALTKEYMASK		include/event.h	/^#define	NX_NEXTLALTKEYMASK		0x00000020/ ;" macro 1 { }	{ }
NX_NEXTLCMDKEYMASK		include/event.h	/^#define	NX_NEXTLCMDKEYMASK		0x00000008/ ;" macro 1 { }	{ }
NX_NEXTLSHIFTKEYMASK		include/event.h	/^#define	NX_NEXTLSHIFTKEYMASK		0x00000002/ ;" macro 1 { }	{ }
NX_NEXTRALTKEYMASK		include/event.h	/^#define	NX_NEXTRALTKEYMASK		0x00000040/ ;" macro 1 { }	{ }
NX_NEXTRCMDKEYMASK		include/event.h	/^#define	NX_NEXTRCMDKEYMASK		0x00000010/ ;" macro 1 { }	{ }
NX_NEXTRSHIFTKEYMASK		include/event.h	/^#define	NX_NEXTRSHIFTKEYMASK		0x00000004/ ;" macro 1 { }	{ }
NX_NEXTWINDOW		include/event.h	/^#define NX_NEXTWINDOW	5/ ;" macro 1 { PostEvent }	{ }
NX_NOWINDOW		include/event.h	/^#define NX_NOWINDOW	-1/ ;" macro 1 { PSSetHowPost PostByCode PostEvent }	{ }
NX_NULLEVENT		include/event.h	/^#define NX_NULLEVENT		0	\/* internal use *\// ;" macro 1 { ClearEvent }	{ }
NX_NUMERICPADMASK		include/event.h	/^#define	NX_NUMERICPADMASK		0x00200000/ ;" macro 1 { }	{ }
NX_NUMPROCS		include/event.h	/^#define NX_NUMPROCS		(NX_LASTEVENT-NX_FIRSTEVENT+1/ ;" macro 1 { PostByCode }	{ NX_FIRSTEVENT NX_LASTEVENT }
NX_ONEISBLACKCOLORSPACE		include/bintree.h	/^#define NX_ONEISBLACKCOLORSPACE	1/ ;" macro 1 { MP12New MP12NewFromData }	{ }
NX_ONEISWHITECOLORSPACE		include/bintree.h	/^#define NX_ONEISWHITECOLORSPACE	0/ ;" macro 1 { MP12MakePublic }	{ }
NX_OTHERBMTYPE		include/bintree.h	/^#define NX_OTHERBMTYPE		0/ ;" macro 1 { BM34ConvertFrom BM38ConvertFrom BMNew LBMMakePublic MP12ConvertFrom MP12New MP12NewFromData MPNewWindow }	{ }
NX_POSTEVENTBYCONTEXT		product/event.c	/^#define NX_POSTEVENTBYCONTEXT	1000/ ;" macro 1 { PSPostEventByContext PostEvent }	{ }
NX_PPMNUMINTS		include/printmessage.h	/^#define NX_PPMNUMINTS 10		\/* number of integer par/ ;" macro 1 { }	{ }
NX_PRINTPAGEMSGID		include/printmessage.h	/^#define NX_PRINTPAGEMSGID 0xdeed	\/* for message he/ ;" macro 1 { send_rpc }	{ }
NX_PRINTPAGEVERSION		include/printmessage.h	/^#define NX_PRINTPAGEVERSION 3/ ;" macro 1 { }	{ }
NX_RGBCOLORSPACE		include/bintree.h	/^#define NX_RGBCOLORSPACE	2/ ;" macro 1 { BM34New BM34NewFromData BM38New BM38NewFromData }	{ }
NX_RMOUSEDOWN		include/event.h	/^#define NX_RMOUSEDOWN		3	\/* right mouse-down event/ ;" macro 1 { NX_RMOUSEDOWNMASK SendEvent }	{ }
NX_RMOUSEDOWNMASK		include/event.h	/^#define NX_RMOUSEDOWNMASK	(1 << NX_RMOUSEDOWN)	\/* / ;" macro 1 { MOUSEEVENTMASK }	{ NX_RMOUSEDOWN }
NX_RMOUSEDRAGGED		include/event.h	/^#define NX_RMOUSEDRAGGED	7	\/* right mouse-dragged / ;" macro 1 { NX_RMOUSEDRAGGEDMASK }	{ }
NX_RMOUSEDRAGGEDMASK		include/event.h	/^#define NX_RMOUSEDRAGGEDMASK	(1 << NX_RMOUSEDRAGGE/ ;" macro 1 { MOVEDEVENTMASK }	{ NX_RMOUSEDRAGGED }
NX_RMOUSEUP		include/event.h	/^#define NX_RMOUSEUP		4	\/* right mouse-up event *\// ;" macro 1 { NX_RMOUSEUPMASK }	{ }
NX_RMOUSEUPMASK		include/event.h	/^#define NX_RMOUSEUPMASK		(1 << NX_RMOUSEUP)	\/* rig/ ;" macro 1 { MOUSEEVENTMASK }	{ NX_RMOUSEUP }
NX_SHIFTMASK		include/event.h	/^#define	NX_SHIFTMASK			0x00020000/ ;" macro 1 { }	{ }
NX_SYMBOLSET		include/event.h	/^#define NX_SYMBOLSET		1/ ;" macro 1 { }	{ }
NX_SYSDEFINED		include/event.h	/^#define NX_SYSDEFINED		14	\/* system-defined event / ;" macro 1 { NX_SYSDEFINEDMASK PostDeathEvent }	{ }
NX_SYSDEFINEDMASK		include/event.h	/^#define NX_SYSDEFINEDMASK 	(1 << NX_SYSDEFINED)	\/*/ ;" macro 1 { }	{ NX_SYSDEFINED }
NX_TOPWINDOW		include/event.h	/^#define NX_TOPWINDOW	2/ ;" macro 1 { PostEvent }	{ }
NX_TRANSMIT		include/event.h	/^#define NX_TRANSMIT	10/ ;" macro 1 { PostEvent }	{ }
NX_TWELVEBITRGB		include/bintree.h	/^#define NX_TWELVEBITRGB		3/ ;" macro 1 { BM34ConvertFrom BM34New BM34NewFromData BM38ConvertFrom LGetDeviceStatus MP12ConvertFrom MPInitScreen MPSetCursor PSSetDefaultDepthLimit PSSetWindowDepthLimit PSSizeImage }	{ }
NX_TWELVEBITRGB_DEPTH		include/bintree.h	/^#define NX_TWELVEBITRGB_DEPTH		516/ ;" macro 1 { PSSetDefaultDepthLimit PSSetWindowDepthLimit }	{ }
NX_TWENTYFOURBITRGB		include/bintree.h	/^#define NX_TWENTYFOURBITRGB	4/ ;" macro 1 { BM34ConvertFrom BM38ConvertFrom BM38New BM38NewFromData LGetDeviceStatus MP12ConvertFrom MPNewWindow MPSetCursor PSReadImage PSSetDefaultDepthLimit PSSetWindowDepthLimit PSSizeImage }	{ }
NX_TWENTYFOURBITRGB_DEPTH		include/bintree.h	/^#define NX_TWENTYFOURBITRGB_DEPTH	520/ ;" macro 1 { PSSetDefaultDepthLimit PSSetWindowDepthLimit }	{ }
NX_TWOBITGRAY		include/bintree.h	/^#define NX_TWOBITGRAY		1/ ;" macro 1 { BM34ConvertFrom BM38ConvertFrom LGetDeviceStatus MP12ConvertFrom MP12MakePublic MPInitScreen MPNewWindow MPSetCursor PSReadImage PSSetDefaultDepthLimit PSSetWindowDepthLimit PSSizeImage WBCopyLayer window }	{ }
NX_TWOBITGRAY_DEPTH		include/bintree.h	/^#define NX_TWOBITGRAY_DEPTH		258/ ;" macro 1 { PSSetDefaultDepthLimit PSSetWindowDepthLimit }	{ }
NX_WHITE		bintree/bintreetypes.h	/^#define NX_WHITE	0xFF/ ;" macro 1 { LCompositeFrom LMark }	{ }
NX_WINCHANGED		product/event.c	/^#define NX_WINCHANGED		8/ ;" macro 1 { NX_KITDEFINEDMASK PostChanged }	{ }
NX_WINDRAGGED		product/event.c	/^#define NX_WINDRAGGED		5/ ;" macro 1 { }	{ }
NX_WINEXPOSED		product/event.c	/^#define NX_WINEXPOSED 		0/ ;" macro 1 { PostRedraw }	{ }
NX_WINMOVED		product/event.c	/^#define NX_WINMOVED 		4/ ;" macro 1 { }	{ }
NX_WINRESIZED		product/event.c	/^#define NX_WINRESIZED 		3/ ;" macro 1 { }	{ }
NZchunks		vm/vm_space.c	/^private integer NZchunks;/ ;" global 1 { PSPrintChunks }	{ }
NameArrayBody		include/vm.h	/^typedef struct _t_NameArrayBody {/ ;" typedef 6 { AllocPNameArray PutInNameMap }	{ }
NameArrayObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 51 { CmdIndexObj FindOpSet PSRgstOps RgstDynamicCmd RgstOpSet }	{ }
NameChunk		language/name.c	/^typedef struct _NameChunk {/ ;" typedef 5 { AddToGCTable NameInit PushSharedNames }	{ }
NameCodes		language/opcodes.h	/^#define NameCodes	64/ ;" macro 1 { CmdBase ExecNameBase MAXNameIndex }	{ }
NameEntry		include/vm.h	/^typedef struct _t_NameEntry {/ ;" typedef 15 { AllocPName GC_HandleIndex TraceSharedVM }	{ }
NameIndex		language/opcodes.h	/^typedef cardinal NameIndex;		\/* name index *\// ;" typedef 1 { EncodeObj }	{ }
NameIndexObj		language/name.c	/^public procedure NameIndexObj(nameindex, pnobj)/ ;" function 20 { DecodeObj GC_HandleIndex RelocateObj }	{ CantHappen LNameObj NIL PNameEntry register rootShared }
NameInit		language/name.c	/^public procedure NameInit(reason)  InitReason reas/ ;" function 30 { LanguageInit }	{ Begin DEVELOP End FinalizeNames GC_RegisterFinalizeProc GC_RgstSharedRootsProc NIL NameChunk PSDefSysName PSDumpNames PSNProbeStats PSSysNameMap PushSharedNames RefAny RgstExplicit firstChunk os_sureMalloc rootShared vSTAGE vmShared }
NameObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 35 { AddEntry CompSlowShow FontEncode KAEndCSDict KAKnown LoadName PSCVN PSDefSysName PSDefUserName PSDictGetPObj PSDictGetTestPObj PSMakeVM PSOpDef PSRgstNames PSRgstOps PrintObj RgstExplicit RgstMark RgstObject RgstPackageNames StateInit UndefNameIndex pMID pSFC }	{ }
NameToPString		language/name.c	/^public procedure NameToPString(name, pob)/ ;" function 9 { Equal PSCVS PSLength PSUndef PrintNameString }	{ LStrObj PNameEntry level rAccess register }
NativeToIEEEHigh		include/fp.h	/^#define NativeToIEEEHigh(from, to) CopySwap4((from/ ;" macro 1 { WriteObject }	{ CopySwap4 }
NativeToIEEELow		include/fp.h	/^#define NativeToIEEELow(from, to) ((FloatRep *) to/ ;" macro 1 { WriteObject }	{ FloatRep }
Nclash		language/dict.c	/^private integer Nsearch, Nclash, Nmaxprobe;/ ;" global 1 { PSProbeStats SearchDict }	{ }
Ncomp		language/name.c	/^private integer Nsearch, Ncomp, Maxprobe;/ ;" global 1 { FastName PSNProbeStats }	{ }
NeXT		product/listener.c	/^#define NeXT 1/ ;" macro 1 { }	{ }
New		product/machportdevice.c	/^#define New(thing) ((thing *) SafeMalloc(sizeof(th/ ;" macro 1 { PSMachPortDevice }	{ SafeMalloc }
NewCondition		postscript/contextimpl.c	/^private procedure NewCondition (pob) PObject pob; / ;" function 7 { PSCondition }	{ AllocGenericObject Condition NIL PCondition objCond }
NewContextID		postscript/contextimpl.c	/^private procedure NewContextID(ctx) PSContext ctx;/ ;" function 28 { CreateContext }	{ Assert CtxItem LimitCheck NIL ctxTab ctxTabSize gTimestamp integer nextFreeID nextID timestamp }
NewCross		graphics/cscan.c	/^private CrossPtr NewCross(x, y)/ ;" function 15 { SplicePixel }	{ CrossPtr NEWCROSS REG crossCount p }
NewDevPrim		device/devprim.c	/^public DevPrim *NewDevPrim()/ ;" function 15 { AddDevPrimValue ClipDevPrim CopyDevPrim DoRdcPth DoRdcStroke EnterCircle FindCurrentViewInCache InitClipPath MakeRectPath MarkInit MinimumClip RdcStrkDumpMasks ReducePathClipInt XARdc XAReducePath }	{ DURING DevPrim END_HANDLER FGEnterMonitor FGExitMonitor HANDLER NIL RERAISE devPrimStorage os_newelement os_newpool }
NewDevice		graphics/gstates.c	/^public procedure NewDevice(d)  PDevice d;/ ;" function 30 { CreatePSContext NewDevice NullDevice PSSetDevice SetMaskDevice }	{ DURING END_HANDLER HANDLER InitClip InitMtx NIL NULL NewDevice PDevice PGState RERAISE SetDevColor SetScal d gs psNulDev }
NewGlbClr		fonts/fontbuild.c	/^private PGlbClr NewGlbClr() {/ ;" function 27 { EnterGlbClr }	{ GlbClr Int32 NIL NULL PGlbClr PGrowableBuffer bprocs endGlbClrLst freeGlbClr glbClrLst nGlbClrs pGblClrBuf register true }
NewGlbCntr		fonts/fontbuild.c	/^private PGlbCntr NewGlbCntr() {/ ;" function 27 { EnterGlbCntr }	{ GlbCntr Int32 NULL PGlbCntr PGrowableBuffer bprocs endGlbCntrLst freeGlbCntr glbCntrLst nGlbCntrs pGblCntrBuf register true }
NewKeywordTables		fonts/fontrun.c	/^private procedure NewKeywordTables(state, execKWtb/ ;" function 10 { KADict KAFontDirectory KASubrs NewState }	{ Assert NULL }
NewLinkCross		graphics/cscan.c	/^private CrossPtr NewLinkCross()/ ;" function 16 { FinishPath FinishSplice ResetCScan StartSplice }	{ CrossPtr NEWCROSS NULL REG linkCrossCount p true }
NewLock		postscript/contextimpl.c	/^private procedure NewLock (pob) PObject pob; {/ ;" function 8 { PSLock }	{ AllocGenericObject Lock NIL PLock objLock }
NewPath		graphics/pathops.c	/^public procedure NewPath() {/ ;" function 5 { BuildChar BuildMultiRectPath CCRunStd FillCircle InitGraphics PSClipPath PSEOFill PSFill PSOffsetFill PSRectClip PSRectFill PSRectStroke PSRectViewClip PSStroke PSUStrokePath PSViewClipPath }	{ FrPth fpZero gs secret }
NewPoint		graphics/reducer.c	/^public procedure NewPoint(xi, yi)  integer xi, yi;/ ;" function 24 { ClNewPt FClNewPt psNewPoint }	{ DebugPrintNewPoint MakeLine MakePoint PPt PQInsert PtOffset Rational clipxmax clipxmin curIsClipLine debugOn false firstPoint lastPoint yMax }
NewRecycler		vm/recycler.c	/^public PRecycler NewRecycler ()/ ;" function 15 { CreateVM }	{ NEW PRecycler Recycler }
NewRelocationEntry		vm/makevm.c	/^public procedure NewRelocationEntry (address)/ ;" function 36 { NoteRelocationEntry RelocateObj }	{ Assert DebugAssert EncodeAddress NIL PCard8 PRelocationEntry RelocationEntry relocationTable relocationTableLimit relocationTableSize }
NewScreen		graphics/gray.c	/^private Screen NewScreen()/ ;" function 10 { GetType3Screen GetType4Screen MakeType1Screen MakeType2Screen SetDefaultHalftone }	{ LimitCheck NIL Screen ScreenRec os_newelement os_newpool register screenPool }
NewSegment		vm/vm_segment.c	/^private PVMSegment NewSegment (base, size)/ ;" function 36 { ExpandVMSection }	{ ABM_BytesForSize DURING END_HANDLER HANDLER NEW NIL PVMSegment RERAISE os_freeelement os_newelement segmentPool }
NewShowState		fonts/fontshow.c	/^private PShowState NewShowState()/ ;" function 10 { BEGINSHOW PushShowState }	{ NEW PShowState ShowState integer register ssCount ssr true }
NewSpaceID		postscript/contextimpl.c	/^private procedure NewSpaceID(s) PSSpace s; {/ ;" function 28 { CreatePSSpace }	{ Assert CtxItem LimitCheck NIL PSContext ctxTab ctxTabSize gTimestamp integer nextFreeID nextID s timestamp }
NewStack		language/stack.c	/^private PStack NewStack(n)/ ;" function 17 { CreateStacks }	{ LimitCheck MakeNullObjects NEW NULL Object PStack STKINITSIZE Stack os_malloc register }
NewState		fonts/fontrun.c	/^private PFontrunState NewState(curState)/ ;" function 26 { KADict PSFontRun StmToken }	{ F_EEXEC_SEEN FontrunState NULL NewKeywordTables PFontrunState execKeywordsTable fontDict litKeywordsTable os_sureCalloc true }
NewViewClip		graphics/viewclip.c	/^private procedure NewViewClip(path, evenOdd) PPath/ ;" function 20 { PSEOViewClip PSRectViewClip PSViewClip }	{ AddRunIndexes DURING DevPrim END_HANDLER HANDLER InitPath NULL PViewClip RERAISE RemPathRef TermViewClip Undefined curVC false fpZero gs os_freeelement os_newelement vcStorage }
NewXtraCross		graphics/cscan.c	/^private CrossPtr NewXtraCross(x, y)/ ;" function 17 { SplicePixel }	{ CrossPtr NEWCROSS REG p true xtraCrossCount }
NextAge		fonts/cicache.c	/^#define NextAge(X) CIReg [X].ageflink/ ;" macro 1 { CondAssign CondAssignF SortCharAges }	{ }
NextCustomProc		product/nextmain.c	/^private void NextCustomProc()/ ;" function 29 { Mnextmain }	{ DriverInit EventInit GetCArg IniCoordinates IniWindowGraphics IniWindowImage IniWindowOps LayerInit ListenerInit MiscOpsInit MouseInit MpdDevInit PSProf PSRegister RegisterGraphicsPackages }
NextGSExt		include/bintree.h	/^typedef struct _nextgsext {/ ;" typedef 9 { ALPHAVALUE GRAYPATSTATE INSTANCING IniGStates MP12SetupPat REALALPHA REALSCALE }	{ }
NextGStatesProc		graphics/gstates.c	/^public void NextGStatesProc(PGState g, int verb)/ ;" function 29 { Mnextmain }	{ CantHappen DebugAssert NULL OPAQUE PNextGSExt neStorage os_freeelement os_newelement }
NextKeyVal		language/dict.c	/^private NextKeyVal(d,old,dap)/ ;" function 58 { DFAProc }	{ Assert CantHappen KeyVal PDictBody PDictObj PKeyVal PNameEntry PObject SearchDict VMGetKeyVal XlatDictRef arrayObj d false level nameObj nullObj true }
NextPrebuiltFont		device/nextprebuilt.h	/^typedef struct {/ ;" typedef 8 { GetPreBuiltChar getPrebuiltFont }	{ }
Nlokpairs		fonts/fontbuild.c	/^#define Nlokpairs (MAXlokpairIndex+1)/ ;" macro 1 { InsertLock mapedges }	{ MAXlokpairIndex }
Nmaxprobe		language/dict.c	/^private integer Nsearch, Nclash, Nmaxprobe;/ ;" global 1 { PSProbeStats SearchDict }	{ }
NoClipMark		device/mark.c	/^private procedure NoClipMark(device, graphic, args/ ;" function 40 { Mark }	{ CantHappen DevImage DevPrim DevRun ImageArgs ImageTraps MasksMark PMarkProcs integer string }
NoCurrentPoint		vm/vm.c	/^public procedure NoCurrentPoint() {PSError(nocurre/ ;" function 1 { CheckCurPt CheckForCurrentPoint }	{ PSError nocurrentpoint }
NoDir		graphics/cscan.c	/^#define NoDir		0/ ;" macro 1 { CSPathPoints }	{ }
NoMatchBackup		fonts/compshow.c	/^#define NoMatchBackup 1/ ;" macro 1 { }	{ }
NoMatchFIC		fonts/compshow.c	/^#define NoMatchFIC 2/ ;" macro 1 { }	{ }
NoOp		graphics/nulldevice.c	/^private procedure NoOp() {}/ ;" function 1 { DoStroke FeedPathToReducer FillUserPathEnumerate FltnPth IniNullDevice QDoEUsrPthFloat QFillUserPathEnumerate }	{ }
NoOpBool		graphics/nulldevice.c	/^private boolean NoOpBool() {return false;}/ ;" function 1 { IniNullDevice }	{ false }
NoRoom		fonts/cachedev.c	/^private boolean NoRoom(delta, v) RCd *delta, v; {/ ;" function 17 { SetCch SetCchDevice }	{ GetCPDelta RCd SetDeltaAndTlate ShowState UNFIXCD false fdcp fpHalf fpZero gs rdcp register ss ssr true useReal }
NormalizePoint		graphics/stroke.c	/^private boolean NormalizePoint(p, v, del) Cd p, v,/ ;" function 41 { FillCircle StrkLnTo }	{ Cd DistAboveFloor RealGe0 false fixtopflt fpHalf fpOne fpZero fxdeps oddXwidth oddYwidth os_fabs p r real s true }
NormalizeSW		fonts/fontbuild.c	/^#define NormalizeSW(swval) \\/ ;" macro 1 { BuildChar CCRunStd }	{ ErodeSW FixedHalf FixedOne boolean erosion }
NormalizeStrokeWidth		graphics/stroke.c	/^private procedure NormalizeStrokeWidth(w) Preal w;/ ;" function 12 { SetHalfWidth }	{ Cd DTfmP Dist IDTfmP RRoundP RealLt0 SetNormMidPts fpOne fpTwo fpZero gs r real uhalfwidth }
NoteLevel		vm/vm_segment.h	/^#define	NoteLevel(v, n)		((v)->current->level = (n/ ;" macro 1 { Save }	{ current level }
NoteRelocationEntry		vm/makevm.c	/^#define	NoteRelocationEntry(x)	NewRelocationEntry / ;" macro 1 { RelocateFinalizeChain RelocateObject Relocate_Names Relocate_Shared_Root ScanFromDict ScanNameArray }	{ NewRelocationEntry PCard8 }
NotifyAbort		language/exec.c	/^public procedure NotifyAbort ()/ ;" function 7 { CheckForPSNotify EnableCC NotifyPSContext }	{ execAbortPending }
NotifyPSContext		postscript/contextimpl.c	/^public procedure NotifyPSContext(context, reason)/ ;" function 20 { NSTermPS PSFork PSQuit TerminatePSSpace }	{ NIL NotifyAbort currentPSContext true }
NotifyReason		include/postscript.h	/^typedef enum {/ ;" typedef 6 { }	{ }
Nsearch		language/dict.c	/^private integer Nsearch, Nclash, Nmaxprobe;/ ;" global 1 { FastName PSNProbeStats PSProbeStats SearchDict }	{ }
NullDefaultBounds		graphics/nulldevice.c	/^private procedure NullDefaultBounds(device, bbox)/ ;" function 3 { IniNullDevImpl IniNullDevice }	{ }
NullDefaultHalftone		device/nulldev.c	/^private DevHalftone * NullDefaultHalftone (device)/ ;" function 3 { IniNullDevImpl }	{ nullDevHalftone }
NullDefaultMtx		graphics/nulldevice.c	/^private procedure NullDefaultMtx(device, m)  PDevi/ ;" function 2 { IniNullDevImpl IniNullDevice }	{ IdentityMtx }
NullDevice		graphics/nulldevice.c	/^public procedure NullDevice()  {/ ;" function 2 { PSSetCharWidth SetCacheDev }	{ MakeNullDevice NewDevice gs }
NullGoAway		device/nulldev.c	/^private procedure NullGoAway (device) PDevice devi/ ;" function 3 { IniNullDevImpl }	{ }
NullMakeMaskDevice		graphics/nulldevice.c	/^private PDevice NullMakeMaskDevice(device) PDevice/ ;" function 3 { IniNullDevImpl IniNullDevice }	{ NIL }
NullMakeNullDevice		graphics/nulldevice.c	/^private PDevice NullMakeNullDevice(device) PDevice/ ;" function 3 { IniNullDevice }	{ psNulDev }
NullObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 32 { GC_CollectPrivate GC_CollectShared TraceSharedVM ZapDelayedDict }	{ }
NullRdBytes		graphics/nulldevice.c	/^public integer NullRdBytes(device, xbyte, ybit, wb/ ;" function 4 { }	{ }
NullReadRaster		device/nulldev.c	/^private DevLong NullReadRaster (/ ;" function 6 { IniNullDevImpl }	{ }
NullWakeup		device/nulldev.c	/^private procedure NullWakeup (device) PDevice devi/ ;" function 3 { IniNullDevImpl }	{ CurrentDevice }
NullWinToDevTranslation		graphics/nulldevice.c	/^private procedure NullWinToDevTranslation (device,/ ;" function 4 { IniNullDevImpl IniNullDevice }	{ }
NumCArg		vm/arguments.c	/^public integer NumCArg(option, radix, deflt)/ ;" function 10 { CreateSharedVM CreateVM FontBuildInit Init_Cmds StreamInit }	{ GetCArg NumFromStr }
NumEncode		language/string.c	/^private NumEncode(s,n,r)/ ;" function 14 { PSCVRS }	{ Card32 DigitEncode NUL cardinal character d r s }
NumFromStr		vm/arguments.c	/^private integer NumFromStr(str, radix, deflt)/ ;" function 30 { GetCSwitch NumCArg }	{ NIL NUL d integer os_eprintf register s }
NumOverflow		fp/mtxvec.c	/^NumOverflow(sig, code, scp)/ ;" function 6 { FPInit NumOverflow }	{ RaiseHack }
NumStr		include/language.h	/^typedef struct _t_NumStrRec {/ ;" typedef 6 { }	{ }
NumStrRec		include/language.h	/^typedef struct _t_NumStrRec {/ ;" typedef 6 { }	{ }
NumStrm		include/language.h	/^typedef struct _t_NumStrm {/ ;" typedef 10 { BuildMultiRectPath FastRectFill MultiRectFill }	{ }
Numbers		graphics/graypriv.c	/^typedef struct {/ ;" typedef 3 { GenerateThresholds GetValidFreqAngleOctet GetValidFreqAnglePair }	{ }
NxtGClr		fonts/fontbuild.c	/^private PGlbClr NxtGClr(g) register PGlbClr g; {/ ;" function 6 { }	{ }
OCFetchFromDisk		fonts/fontrun.c	/^private boolean OCFetchFromDisk(pOTag, data, size,/ ;" function 50 { }	{ BytesInSeg CaData CacheReuseEntry CharOffsetsPtr EOF FmtAscii FontInfoPtr GetFontStream InvlFont NULL OutlineEntry PCharOffsetsEntry PFileEntry PFontInfo POutlineEntry RAISE SetStmDecryptionKey Stm data ecIOError fread fseek longcardinal os_sureMalloc outlineCache register true }
OCFreeEntry		fonts/fontrun.c	/^private procedure OCFreeEntry(pEntry, dispose)/ ;" function 7 { }	{ }
OCHashId		fonts/fontrun.c	/^private int OCHashId(tag)/ ;" function 5 { }	{ OutlineHashId }
OCMatch		fonts/fontrun.c	/^private boolean OCMatch(tag1, tag2)/ ;" function 7 { }	{ }
OEM_DefaultThreshold		vm/gcinternal.h	/^#define	OEM_DefaultThreshold	40000	\/* ARBITRARY	*\// ;" macro 1 { GCInternal_VMChange PSSetThresh }	{ }
OEM_MaxThreshold		vm/gcinternal.h	/^#define	OEM_MaxThreshold	500000	\/* ARBITRARY	*\// ;" macro 1 { PSSetThresh }	{ }
OEM_MinThreshold		vm/gcinternal.h	/^#define	OEM_MinThreshold	8192	\/* ARBITRARY	*\// ;" macro 1 { PSSetThresh }	{ }
OEM_OversizeThreshold		vm/gcinternal.h	/^#define	OEM_OversizeThreshold	500000	\/* ARBITRARY	/ ;" macro 1 { }	{ }
OEM_SharedThreshold		vm/gcinternal.h	/^#define	OEM_SharedThreshold	80000	\/* ARBITRARY	*\// ;" macro 1 { }	{ }
OFAddRdcTrap		graphics/pathpriv.c	/^private procedure OFAddRdcTrap(yt, yb, xtl, xtr, x/ ;" function 8 { OFMark }	{ AddTrap RdcToDev markDelta }
OFAddRunMark		graphics/pathpriv.c	/^private procedure OFAddRunMark(run) DevRun *run; {/ ;" function 4 { OFMark }	{ AddRunMark FRound TransDevRun markDelta }
OFClose		graphics/pathpriv.c	/^public procedure OFClose()/ ;" function 18 { OffsetFill }	{ FCd OFIntersect OFLineTo Trace_OFCP Trace_OFNP doOffsetting gProcNewPoint gProcRdcClose needVec ofLfSt ofaSt ofpSt ofwSt traceOffsetFill true }
OFFSCREEN		bintree/bintreetypes.h	/^#define OFFSCREEN      -1	\/* Temporarily cached of/ ;" macro 1 { BPIsObscured BPObscureBecause BPPrintOn BPRevealBecause EXAllocDummies EXBuildExtents EXDummyScreens EXFindHoles LNewAt }	{ }
OFFSCREENREASON		bintree/bintreetypes.h	/^#define OFFSCREENREASON 1	\/* For obscureInside, wi/ ;" macro 1 { BPObscureBecause LOrder UniqueCause }	{ }
OFFSETBOUNDS		include/bintree.h	/^#define OFFSETBOUNDS(one, dx, dy) \\/ ;" macro 1 { BAGCompositeFrom BPAdjust BPCompositeFrom BPCompositeTo LBMOffset LCompositeFrom LCopyBitsFrom LFill LHideInstance LMark LMoveTo MatchMonitors PSMoveWindow PSReadImage PSSetNRect PSSizeImage }	{ }
OFIntersect		graphics/pathpriv.c	/^private procedure OFIntersect(a, p, w, r)  FCd a, / ;" function 58 { OFClose OFLineTo }	{ CDistFixed FCd F_VecTurn Fixed FixedOneFive FracHalf FracMilli Trace_OFNP boolean d false fixdiv fracmul fracratio gProcNewPoint integer offsetwidth old_a old_p old_tail old_w os_labs p r register traceOffsetFill true }
OFLIMIT		fonts/fontbuild.c	/^#define OFLIMIT oflimit  \/* pixelsize at which don/ ;" macro 1 { PathEndChar }	{ oflimit }
OFLineTo		graphics/pathpriv.c	/^private procedure OFLineTo(p)  FCd p;/ ;" function 52 { InitOFill OFClose OFLineToP OffsetFill }	{ FCd FCenti FMilli Fixed FracOne FracSqrt2 FracToFixed OFIntersect Trace_OFNP UFrac d doOffsetting erodeConst false fixratio fracmul fracsqrt fxfrmul gProcNewPoint needVec ofLfSt ofaSt offsetwidth ofwSt old_a old_p old_tail old_w os_labs p traceOffsetFill }
OFLineToP		graphics/pathpriv.c	/^public procedure OFLineToP(c) PFCd c; {OFLineTo(*c/ ;" function 1 { }	{ OFLineTo }
OFMark		graphics/pathpriv.c	/^public procedure OFMark(qrdc, delta) boolean qrdc;/ ;" function 10 { OffsetFill }	{ MaxInt16 MinInt16 NIL OFAddRdcTrap OFAddRunMark QReduce Reduce false markDelta ms }
OFMoveToP		graphics/pathpriv.c	/^public procedure OFMoveToP(c) PFCd c; {/ ;" function 6 { OffsetFill }	{ doOffsetting gProcNewPoint needVec ofpSt old_p true }
OKTrap		graphics/maketrap.c	/^OKTrap(t, strict)/ ;" function 14 { AddTrap BresenhamMT TrapTrapInt }	{ CantHappen register }
ONE		include/devicetypes.h	/^#define	ONE		(1<<16)/ ;" macro 1 { AddTrap BresenhamMT EdgeInit Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch QBresenhamMT }	{ }
ONEASM		device/blacktrap.030.s	/^#define ONEASM		65536	\/* A Fixed point 1.			   *\// ;" macro 1 { }	{ }
ONES		mp/mp12.h	/^#define ONES ((uint)0xFFFFFFFF)/ ;" macro 1 { MRMasks MRMoveRect }	{ uint }
ONSCREENREASON		bintree/bintreetypes.h	/^#define ONSCREENREASON	2	\/* For revealInside, win / ;" macro 1 { BPRevealBecause EXDummyScreens LOrder UniqueCause }	{ }
OPAQUE		include/bintree.h	/^#define OPAQUE		255	\/* equivalent to (1.0 setalpha/ ;" macro 1 { InitGraphics LCompositeFrom LMark LSetExposureColor MP12MarkDataAndAlpha MP12SetupPat MP12SetupPattern NextGStatesProc PInitialize PSDissolve WdConvertColor }	{ }
ORINGMEMORY		include/controller.h	/^#define ORINGMEMORY (CONTROLLER_TYPE > 1000)/ ;" macro 1 { }	{ }
ORPHANS		include/package_specs.h	/^#define ORPHANS		"orphans.h"/ ;" macro 1 { }	{ }
ORPHANS_H		include/orphans.h	/^#define	ORPHANS_H/ ;" macro 1 { }	{ }
OS_MATH_H		fp/os_math.h	/^#define	OS_MATH_H/ ;" macro 1 { }	{ }
OUT		include/bintree.h	/^#define OUT		 0	\/* Remove from window list *\// ;" macro 1 { LOrder PSOrderWindow TermWindow WLAboveButNotAbove WLBelowButNotBelow }	{ }
OUTLINE_CACHE_LIMIT		fonts/fontrun.h	/^#define OUTLINE_CACHE_LIMIT 65536/ ;" macro 1 { FontRunInit }	{ }
OUTLINE_HASH_BUCKETS		fonts/fontrun.h	/^#define OUTLINE_HASH_BUCKETS 127/ ;" macro 1 { FontRunInit }	{ }
OUTSIDE		include/windowdevice.h	/^#define OUTSIDE 0/ ;" macro 1 { PostNotification RecalcMouseRect }	{ }
OVRSHTesc		fonts/fontbuild.c	/^#define OVRSHTesc 20/ ;" macro 1 { CCRunStd }	{ }
ObjFromStrStorage		language/scanner.c	/^private procedure ObjFromStrStorage(pss, bufPtr, p/ ;" function 40 { StmToken }	{ AllocPString DURING DebugAssert END_HANDLER FreeStrStorage HANDLER MAXnameLength MAXstringLength PCard8 PStrExtension RERAISE cardinal integer }
Object		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 31 { AFixedCar ARealCarP BMRun BuildChar CCBMRun CCBuild CCRun CCRunStd CheckForPSNotify CheckPrebuiltOptions ChrMapBuildChar CompSlowShow CompositeShow DetermineFormat EncCharNameProc FindMaxFID FindSibling FndFntSibling FontBuildInit GetBuildingOption GetErosion GetFromPrivDict GetInfo GetInfoSupp GetMetrics GetMetrics2 GetStemWidth InitFontCache InternalBuildChar KAClosefile KAEexec KAFontType KAFontrunType KAHires KAPassword KAPutDef KARdSubrsData ModifyCachingParams MonExitProc MonitorExit PSCCRun PSCondition PSCrCParams PSDefineFont PSExCheck PSExecuteOperator PSFork PSIntDict PSLIntObj PSLNullObj PSLock PSMonitor PSNotify PSPopGState PSPushStream PSUnDefineFont PSUndef PSWait PathEndChar RgstInitialFont (etc) }	{ }
ObjectEscape		language/opcodes.h	/^#define ObjectEscape	(InvalidEntry+1)		\/* unencode/ ;" macro 1 { BindPkdary EncodeObj LitNameBase }	{ InvalidEntry }
ObjectInRecyclerRange		include/recycler.h	/^#define	ObjectInRecyclerRange(pObject)	\\/ ;" macro 1 { _Recyclable }	{ AddressInRecyclerRange RecyclerAddress RecyclerForObject }
Odd		fonts/glbclr.c	/^#define Odd(m) ((m) & 1)/ ;" macro 1 { SimpleCounter }	{ }
OddWidth		graphics/stroke.c	/^private boolean OddWidth(w, q) Preal w, q; {/ ;" function 8 { AnamorphicNormStrkWdth }	{ RRoundP integer r real }
OffsetFill		graphics/pathpriv.c	/^public procedure OffsetFill(p, ow, varcoeff)/ ;" function 113 { CCRunStd PSOffsetFill PathEndChar }	{ Assert Cd DURING FCd FClNewPt FFltnCurve FIXTOFRAC FLATTENLIMIT Fill FixCd FltnRec HANDLER MAX MIN NULL OFClose OFLineTo OFMark OFMoveToP PPthElt PathType QFNewPoint QRdcClose QRdcOk QResetReducer RERAISE RdcClip RdcClose RealGt0 ResetReducer SetRdcScal Trace_OFDone Trace_OFInit boolean d doOffsetting erodeConst false fixtopflt flatEps fp16k fpOne fpTwo fr gProcNewPoint gProcRdcClose gs integer ms offsetwidth p pathclose pathcurveto pathlineto pathstart pflttofix pflttofrac real traceOffsetFill true (etc) }
OkFixed		fonts/fontshow.c	/^public boolean OkFixed(pfcd,lower,upper)/ ;" function 9 { CvtToFixed DTfmToFixed MakeCacheDev ShowByName TfmToBB }	{ FIXINT Fixed false register true }
Op		postscript/postscriptnames.h	/^OpSet(ops_postscriptDPS, 1, systemdict)/ ;" function 1 { }	{ }
OpDefEntry		vm/rgstcmds.c	/^typedef struct {integer cmdIndex; Object impl;} Op/ ;" typedef 1 { FindOpDef Init_Cmds PSOpDef }	{ }
OpDefProc		vm/rgstcmds.c	/^private procedure OpDefProc()/ ;" function 4 { PSOpDef }	{ EPushP FindOpDef currentCmd false integer }
OpSet		postscript/postscriptnames.h	/^OpSet(ops_postscriptDPS, 1, systemdict)/ ;" function 1 { }	{ }
OpenPSVMResource		vm/abmimpl.c	/^private short int OpenPSVMResource() {/ ;" function 12 { ABM_Init }	{ }
OutOfMemory		graphics/cscan.c	/^#define OutOfMemory() BCERROR(BE_MEMORY)/ ;" macro 1 { BuildYCross GrowRunBuff NEWCROSS ResizeCrossBuf }	{ BCERROR }
OutlineEntry		fonts/fontrun.h	/^typedef struct _t_OutlineEntry {/ ;" typedef 5 { OCFetchFromDisk }	{ }
OutlineHashId		fonts/fontrun.h	/^#define OutlineHashId(tag) (tag->index)/ ;" macro 1 { OCHashId }	{ }
OutlineTag		fonts/fontrun.h	/^typedef struct _t_OutlineTag {/ ;" typedef 5 { FetchCharOutline }	{ }
OutputEnc		fonts/fontbuild.c	/^#define OutputEnc(ch, stm)\\/ ;" macro 1 { PSInitWrite PSWriteData }	{ charsInLine hexmap putc }
Overflow		language/stack.c	/^public procedure Overflow(stack) register Stack *s/ ;" function 24 { Copy CopyStack IPushSimple PSDup Roll }	{ LimitCheck MakeNullObjects NIL NULL Object PObject PS_STKOVRFLW RAISE STKGROWINC curStackLimit psFULLSTACK }
Overlap		fonts/glbclr.c	/^private Fixed Overlap(s1, s2)/ ;" function 8 { FixBands }	{ Fixed MAX MIN max }
OverlapChunk		graphics/graphmark.c	/^private boolean OverlapChunk(dp0, dp1)/ ;" function 14 { MarkDevPrim }	{ BBCompare BBoxRec XA_MAX xaOffset }
OverlapDevBounds		device/devbounds.c	/^public boolean OverlapDevBounds(self, a)/ ;" function 10 { ClipDevPrim CompositePriv EnclosesRect }	{ false true }
PAABS		mp/mp12.h	/^#define PAABS(a) ((a) > 0 ? (a) : (-(a)))/ ;" macro 1 { MRPatternAdvance SetUpSource }	{ }
PACKAGE_INDEX		postscript/postscriptnames.h	/^#define PACKAGE_INDEX 4  \/* = pni_postscript *\// ;" macro 1 { FontCacheInit IniGraphics LanguageInit StateInit VMInit }	{ }
PACKAGE_SPECS_H		include/package_specs.h	/^#define PACKAGE_SPECS_H/ ;" macro 1 { }	{ }
PACKEDARRAY_H		language/packedarray.h	/^#define	PACKEDARRAY_H/ ;" macro 1 { }	{ }
PAGESIZE		include/filetypes.h	/^#define PAGESIZE 1024		\/* bytes per file page *\// ;" macro 1 { }	{ }
PARAM		fp/DEFSmach.h	/^#define PARAM	PARAMX(0)/ ;" macro 1 { }	{ PARAMX }
PARAM0		fp/DEFSmach.h	/^#define PARAM0	PARAMX(-4)/ ;" macro 1 { }	{ PARAMX }
PARAM2		fp/DEFSmach.h	/^#define PARAM2	PARAMX(4)/ ;" macro 1 { }	{ PARAMX }
PARAM3		fp/DEFSmach.h	/^#define PARAM3	PARAMX(8)/ ;" macro 1 { }	{ PARAMX }
PARAMX		fp/DEFSmach.h	/^#define PARAMX( n )	a6@(8+n)/ ;" macro 1 { PARAM PARAM0 PARAM2 PARAM3 }	{ }
PATH_H		graphics/path.h	/^#define	PATH_H/ ;" macro 1 { }	{ }
PATTERN		graphics/cscan.c	/^#define PATTERN(cxtn, intruder, rule, arg) \\/ ;" macro 1 { BAGCompositeFrom BPCompositeFrom DPCompositeFrom LCompositeFrom MPComposite PNew PSetHalftone }	{ PATTERNKEY arg }
PATTERNKEY		graphics/cscan.c	/^#define PATTERNKEY(cxtn, intruder)  ( (((Card8)(cx/ ;" macro 1 { GetRuleDesc PATTERN }	{ Card8 }
PATTERNPRIV_H		devpattern/patternpriv.h	/^#define    PATTERNPRIV_H/ ;" macro 1 { }	{ }
PAnyAryObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 44 { }	{ }
PAryObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 41 { FastShow RelocateObject }	{ }
PAryToMtx		graphics/matrix.c	/^public procedure PAryToMtx(pao, m)  register PAryO/ ;" function 13 { BuildChar CCRun DelayedMakeFont GetFontAndCharInfo ImageDict MakeCompFont MakeFontSupp MakeMID PSDefineFont PSPopPMtx PSSelectFont PopMtx PrintMidDict }	{ AryObj Object PRealValue RangeCheck TypeCheck VMCarCdr arrayObj d pkdaryObj }
PBMHeader		device/maskcache.h	/^typedef union {/ ;" typedef 4 { BMAlloc BMFree CheckBM CompactBM GrowBM InitMaskCache ShrinkBM }	{ }
PBMItem		device/maskcache.h	/^typedef struct _t_BMItem {/ ;" typedef 4 { BMAlloc BMFree BMNull BMUnlink CheckBM CompactBM GrowBM InitMaskCache MCFreeBytes MCGetCacheBytes MCGetTempBytes ShrinkBM }	{ }
PBOSHeader		language/scanner.h	/^typedef struct {/ ;" typedef 5 { }	{ }
PBObject		language/scanner.h	/^typedef struct {	\/* binary object, as defined by l/ ;" typedef 6 { ReadBinObjSeq WriteObject }	{ }
PBSUFFIXLENGTH		device/prebuiltformat.h	/^#define PBSUFFIXLENGTH 5/ ;" macro 1 { }	{ }
PBoolObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 36 { }	{ }
PCCInfo		fonts/fontbuild.c	/^typedef struct{/ ;" typedef 6 { CCBuild CCRun CCRunStd }	{ }
PCIItem		include/graphics.h	/^typedef struct _t_CIItem {		\/* Cache Item *\// ;" typedef 12 { CIAlloc CIFree CheckCI CompositeShow DeleteCIs FastShow FasterShow FillCircle FindInCache FlushMID GetFlushArgs InitFontCache PSFlushFontCache PSFlushMasks PurgeCI PurgeMID ReleaseCI RelinkCIItem ShowByName SortCharAges TrimCI UnlinkCI }	{ }
PCIOffset		include/graphics.h	/^typedef	PCard16	PCIOffset;  \/* used to point to Ca/ ;" typedef 1 { FastShow UnlinkCI }	{ }
PCOFFSET		pslib/except.c	/^#define PCOFFSET \\/ ;" macro 1 { CantHappen }	{ MC68K isp_vax os_vaxeln os_vms }
PCScanBuffer		graphics/cscan.c	/^typedef struct _CScanBuffer {/ ;" typedef 4 { }	{ }
PCache		fonts/cache.h	/^typedef struct _t_Cache *PCache;/ ;" typedef 1 { CacheCreate PSCacheFlush PSCacheInit PSCacheStatistics }	{ }
PCacheEntHdr		fonts/cache.h	/^typedef struct _t_CacheEntHdr *PCacheEntHdr;/ ;" typedef 1 { AddEntry AllocHdr CacheAddEntry CacheInvalidate CacheLookup CacheRemoveEntry DisplaceEntries Lookup NHdr PHdr }	{ }
PCacheProcs		fonts/cache.h	/^typedef struct _t_CacheProcs {/ ;" typedef 7 { }	{ }
PCachedColor		devpattern/colorpattern.c	/^typedef struct _t_CachedColor {/ ;" typedef 5 { ComposeColors GetCachePlace InitCCCache }	{ }
PCachedHalftone		devpattern/patternpriv.h	/^typedef PCard8 CachedHalftone[dgNColors], *PCached/ ;" typedef 1 { FlushPatCache FreePattern Gry4Of4Setup MonoSetup SetPatInfo SetupGrayPattern }	{ }
PCard16		include/publictypes.h	/^typedef unsigned short int Card16, *PCard16;/ ;" typedef 1 { BlackMasksMark BlackMasksMarkReal ConstantMasksMark ExpandOneLine GrayMasksMark IniMaskDevImpl InitFontCache MMEldest MSEldest QuickSort SortMIDAges WhiteMasksMark }	{ }
PCard32		include/publictypes.h	/^typedef unsigned long int Card32, *PCard32;/ ;" typedef 1 { CopyNumStrmForCache EnterPathInCache EqNumStrmCache FindPathInCache HNRR HashSFC InitFontCache LNRR Mnextmain PSInitEvents PSTrashVM QuickSort SortMIDAges }	{ }
PCard8		include/publictypes.h	/^typedef unsigned char Card8, *PCard8;/ ;" typedef 1 { ABM_ClearAll ABM_SetAllocated AllocInfoVector AllocLarge AllocRAMArray AllocRAMStr AllocScreen AllocSmall Array BindPkdary BlackMasksMarkReal CalcThresholds CheckCompositeFont ClippedMasksMark CompactBM ComposeColors ConstantColor ConstantMasksMark CustomOpsInit Data DecodeObj DoEUserPath EnumerateComposites FREE FillInTfrTbl FmGetReadWriteScanline FmGetWriteScanline FontsInit FreePattern GCInternal_ResetFreePointer GetCachePlace GetInfo GraphicsInit GrayMasksMark Gry4Of4Setup Im110 ImS1XD11 InitCCCache LanguageInit LineComplete MP12SetupPat MakeCompFont MaskGoAway MonoSetup ObjFromStrStorage PSCurrentGState PatAlloc Pkdary RdBytesCopy ReadBinObjSeq RecyclerAddress RelocateObj ResetSegFreePtr SWAP2 SWAP4 SendOldestToDisk SetPatInfo SetupGrayPattern ShowInternal SlowShow (etc) }	{ }
PCd		include/publictypes.h	/^typedef struct _t_Cd {/ ;" typedef 4 { FillQuad PSDTfm PSIDTfm PSITfm PSTfm PSUPath PathForAll cd1 cd2 cd3 cd4 }	{ }
PCharData		fonts/fontrun.h	/^typedef struct _t_CharData {/ ;" typedef 10 { KACharDef KADict KAEndCSDict }	{ }
PCharOffsetsEntry		fonts/fontrun.h	/^typedef struct _t_CharOffsetsEntry {/ ;" typedef 8 { CharOffsetsPtr KAEndCSDict OCFetchFromDisk }	{ }
PCircle		graphics/stroke.h	/^typedef struct {/ ;" typedef 7 { AddCircleMask TransCircle }	{ }
PClrPart		include/graphics.h	/^typedef Card8 ClrPart, *PClrPart;/ ;" typedef 1 { ColorArray }	{ }
PCmdObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 39 { }	{ }
PCondObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 49 { }	{ }
PCondition		include/basictypes.h	/^typedef struct _t_Condition	*PCondition;/ ;" typedef 1 { NewCondition PSMonitor PSWait }	{ }
PDCPixelArgs		include/devcreate.h	/^typedef struct _t_DCPixelArgs/ ;" typedef 21 { }	{ }
PDevCd		include/publictypes.h	/^typedef struct _t_DevCd {/ ;" typedef 4 { }	{ }
PDevColorProc		graphics/nulldevice.c	/^typedef DevColor (*PDevColorProc)();/ ;" typedef 1 { IniNullDevImpl IniNullDevice }	{ }
PDevGamutTransferProc		graphics/nulldevice.c	/^typedef DevGamutTransfer (*PDevGamutTransferProc)(/ ;" typedef 1 { IniGenDevImpl IniNullDevImpl IniNullDevice }	{ }
PDevHalftoneProc		graphics/nulldevice.c	/^typedef DevHalftone * (*PDevHalftoneProc)();/ ;" typedef 1 { IniNullDevice }	{ }
PDevProcs		include/device.h	/^typedef struct _t_DevProcs {/ ;" typedef 47 { }	{ }
PDevProperties		include/device.h	/^typedef struct _t_DevProperties *PDevProperties;/ ;" typedef 1 { }	{ }
PDevRenderingProc		graphics/nulldevice.c	/^typedef DevRendering (*PDevRenderingProc)();/ ;" typedef 1 { IniGenDevImpl IniNullDevImpl IniNullDevice }	{ }
PDevice		include/devicetypes.h	/^typedef struct _t_Device *PDevice;/ ;" typedef 1 { CompositePriv CurWindowID FrameDevice GSAddRefs GSRemRefs GStackRestore GetBoundsPopCd IniMpdDevImpl IniNullDevice MakeNullDevice MarkNextImage NewDevice NullMakeMaskDevice PSAdjustMouse PSScreenToBase PSSetGState PSSetMouse PSSizeImage SetupMaskDev }	{ }
PDictBody		include/basictypes.h	/^typedef struct _t_DictBody	*PDictBody;/ ;" typedef 1 { AllocPDict DictFinalize DictLength DictTestP EnumerateDict FndFntSibling GCInternal_TraceROMDict InitPostScript NextKeyVal PSMakeVM PSMaxLength PSWCheck PutInDict ScanFromDict TracePrivateForShared TracePrivateVM TraceSharedVM TrickyDictP UnDef VMPutDict ZapDelayedDict copydict pFD trytoload }	{ }
PDictEnumProc		include/language.h	/^typedef	boolean (*PDictEnumProc)(\/* char *, PKeyVa/ ;" typedef 1 { }	{ }
PDictObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 40 { Begin DictForAll DictLength DictTestP DoDictXlat EnumerateDict NextKeyVal PSRCheck PSWCheck PSWhere RelocateObject SetDictAccess copydict dknown trytoload }	{ }
PEMASK		fonts/fontspriv.h	/^#define PEMASK 8/ ;" macro 1 { CheckCompositeFont GetInfo }	{ }
PERFMONITOR		device/blacktrap.030.s	/^#define PERFMONITOR 0/ ;" macro 1 { }	{ }
PFCd		include/publictypes.h	/^typedef struct _t_FCd {/ ;" typedef 3 { BuildChar CCRunStd CSPathPoints }	{ }
PFCdToPRCd		fonts/fontbuild.c	/^public procedure PFCdToPRCd(f, r) PFCd f; PRCd r; / ;" function 4 { CCBuild CCRunStd F2RMetrics FCurveTo FLineTo FMoveTo LockCd MakeCacheDev2 PathEndChar TfmLockPt4 }	{ fixtopflt r }
PFClNewPt		graphics/graphics.c	/^public procedure PFClNewPt(c) PFCd c; {FClNewPt(*c/ ;" function 1 { }	{ FClNewPt }
PFLTTOFIX		fonts/fontshow.h	/^#define PFLTTOFIX(x,y) (y) = pflttoxfix((x))/ ;" macro 1 { CompositeShow FastShow }	{ }
PFileEntry		fonts/fontrun.h	/^typedef struct _t_FileEntry {/ ;" typedef 10 { FCOpenStream GetFontStream OCFetchFromDisk }	{ }
PFileTag		fonts/fontrun.h	/^typedef struct _t_FileTag {/ ;" typedef 4 { }	{ }
PFilterDataRec		language/streampriv.h	/^typedef struct _t_FilterDataRec {/ ;" typedef 4 { }	{ }
PFinalizeNode		include/vm.h	/^typedef struct _t_FinalizeNode *PFinalizeNode;	\/* / ;" typedef 1 { HandleGCFinalize PerformFinalization ProcessFinalizeNodes _RecordFinalizableObject }	{ }
PFixMtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 3 { QDoEUsrPth QDoUserPath QEnumOk adz_fixed_tfm bcz_fixed_tfm d_adz_fixed_tfm d_bcz_fixed_tfm d_gen_fixed_tfm gen_fixed_tfm inv_adz_fixed_tfm inv_bcz_fixed_tfm inv_d_adz_fixed_tfm inv_d_bcz_fixed_tfm inv_d_gen_fixed_tfm inv_gen_fixed_tfm }	{ }
PFixed		fonts/fontbuild.c	/^typedef Fixed *PFixed;/ ;" typedef 1 { BuildChar CCRunStd DoBlend }	{ }
PFltnRec		graphics/graphicspriv.h	/^typedef struct \/* argument record for flattening */ ;" typedef 10 { }	{ }
PFmStuff		device/framedev.h	/^typedef struct _t_FmStuff{ \/* concrete "Device" ty/ ;" typedef 14 { FmDeviceInfo FmGoAway FmMakeMaskDevice FmSetupImageArgs FmSetupMark FmShowPage FmSleep FmWakeup FrameDevice }	{ }
PFntMtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 16 { }	{ }
PFontCtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 6 { }	{ }
PFontInfo		fonts/fontrun.h	/^typedef struct _t_FontInfo {/ ;" typedef 7 { FCOpenStream FetchCharOutline FontInfoPtr KAEndCSDict OCFetchFromDisk }	{ }
PFontObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 46 { }	{ }
PFontrunState		fonts/fontrun.h	/^typedef struct _t_FontrunState {/ ;" typedef 28 { NewState PSFontRun RestoreState }	{ }
PFracMtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 3 { adz_frac_tfm bcz_frac_tfm d_adz_frac_tfm d_bcz_frac_tfm d_gen_frac_tfm gen_frac_tfm }	{ }
PFree		bintree/pattern.c	/^void PFree(Pattern *pat)/ ;" function 6 { LFree MP12Composite }	{ os_freeelement patternPool }
PGCList		fonts/fontbuild.c	/^typedef struct _gclist {/ ;" typedef 4 { }	{ }
PGStack		graphics/gstack.h	/^typedef struct _gstack {/ ;" typedef 4 { CreateGStack }	{ }
PGState		include/basictypes.h	/^typedef struct _t_GState	*PGState;/ ;" typedef 1 { ChangeColor ConvertToListPath CreateGStack DoStrkPth DoStroke EnterRdcInCache FindRdcInCache GSFinalize GSave GStackCopy GStackRestore InitGS MarkDevPrim NewDevice PSCurrentGState PSFork PSGState PSGetDevice PSGetGStateExt PSGetMarkInfo PSGetMatrix PSSetGState PreStroke SetDevColor SetMaskDevice SetupForCircles ShowInternal ShowMask }	{ }
PGenStuff		device/genericdev.h	/^typedef struct _t_GenStuff{	\/* concrete "Device" t/ ;" typedef 8 { GenConvertColor GenDefaultBounds GenDefaultMtx }	{ }
PGenericBody		include/basictypes.h	/^typedef struct _t_GenericBody	*PGenericBody;/ ;" typedef 1 { AllocGenericObject PutInNameMap RstrGenericObjects TracePrivateForShared TracePrivateVM TraceSharedVM VMCopyGeneric VMPutGeneric }	{ }
PGenericObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 47 { }	{ }
PGlbClr		fonts/glbclr.h	/^typedef struct _gclr { \/* stem *\// ;" typedef 24 { AdjustToStdWidths AlignIsolatedStems BuildGlbCntrs DoLock EnterGlbClr FindGlbClr FixBands FixOnePath GlbClrLine GlbFixLocs GlobalColoring IniGlbClrBuffs NewGlbClr PrintClrs ProcessGlbClrs SelectionSort SimpleCounter SortStems StartGlcrLock StartLock endGlbClrLst freeGlbClr glbClrLst }	{ }
PGlbCntr		fonts/glbclr.h	/^typedef struct _gcntr { \/* counter *\// ;" typedef 9 { EnterGlbCntr ExtendToAnchr FixBands GlobalColoring IniGlbClrBuffs NewGlbCntr PrintCntrs SortCounters SortGroupsByFrac endGlbCntrLst freeGlbCntr glbCntrLst }	{ }
PGraphicsData		graphics/graphdata.h	/^typedef struct {/ ;" typedef 6 { }	{ }
PGrayQ		graphics/gray.h	/^typedef struct {/ ;" typedef 4 { CalcThresholds GetPatternBase SortGQ }	{ }
PGrowableBuffer		fonts/fontbuild.c	/^typedef struct {/ ;" typedef 4 { NewGlbClr NewGlbCntr pGblClrBuf pGblCntrBuf }	{ }
PGstateObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 48 { }	{ }
PHNAHeader		language/scanner.h	/^typedef struct {/ ;" typedef 5 { }	{ }
PHdr		fonts/cacheimpl.c	/^#define PHdr(l) ((PCacheEntHdr) ((char*)((l).prev)/ ;" macro 1 { DisplaceEntries }	{ Links PCacheEntHdr }
PI		graphics/pathextraops.c	/^#define PI 3.1415926535/ ;" macro 1 { PSArcC }	{ }
PIXDELTA		devpattern/ims1xd12.c	/^#define PIXDELTA pixelDelta/ ;" macro 1 { }	{ }
PImageProcs		include/devimage.h	/^typedef struct _t_ImageProcsRec {/ ;" typedef 27 { IniFmDevImpl }	{ }
PInitialize		bintree/pattern.c	/^void PInitialize()/ ;" function 11 { LayerInit }	{ BLACK_COLOR NULL OPAQUE PNewColorAlpha Pattern WHITE_COLOR blackpattern checkerboard myHalftone myScreen os_newpool patternPool whitepattern }
PInt16		include/publictypes.h	/^typedef short int Int16, *PInt16;/ ;" typedef 1 { BuildRunIndex FindOpSet PointInRun QCompareBounds QIntersect QIntersectTrp ReadNumAry }	{ }
PInt32		include/publictypes.h	/^typedef long int Int32, *PInt32;/ ;" typedef 1 { ColorIsWhite ReadNumAry }	{ }
PInt64		include/fp.h	/^typedef struct _t_Int64 {		\/* Double precision int/ ;" typedef 7 { }	{ }
PInt8		include/publictypes.h	/^typedef char Int8, *PInt8;/ ;" typedef 1 { }	{ }
PIntObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 33 { }	{ }
PIntProc		include/publictypes.h	/^typedef integer (*PIntProc)();	\/* pointer to proce/ ;" typedef 1 { IniFmDevImpl IniGenDevImpl IniMaskDevImpl IniNullDevImpl IniNullDevice IniWdDevImpl LBMWakeUp }	{ }
PIntersection		graphics/cscan.c	/^typedef struct {/ ;" typedef 5 { FillInColumn FillInInflection SetPixelInDropOut }	{ }
PIover2		graphics/pathextraops.c	/^#define PIover2 1.5707963268/ ;" macro 1 { ArcC }	{ }
PKGDBGSECTNAME		product/nscontexts.c	/^#define PKGDBGSECTNAME	"DebugFile"/ ;" macro 1 { RegisterGraphicsPackages }	{ }
PKGSECTNAME		product/nscontexts.c	/^#define PKGSECTNAME	"ID"/ ;" macro 1 { RegisterGraphicsPackages }	{ }
PKGSEGNAME		product/nscontexts.c	/^#define PKGSEGNAME	"GraphicsPackage"/ ;" macro 1 { RegisterGraphicsPackages }	{ }
PKeyVal		include/vm.h	/^typedef struct _t_KeyVal {/ ;" typedef 4 { AllocPDict DictFinalize DictTestP DumpDict EnumerateDict FindSibling FndFntSibling GCInternal_TraceROMDict KAEndCSDict NextKeyVal PutInDict RstrDB ScanFromDict SearchDict TracePrivateForShared TracePrivateVM TraceSharedVM UnDef VMExpandDict copydict dknown pFD trytoload }	{ }
PKeywordAction		fonts/fontrun.h	/^typedef struct _t_KeywordAction {/ ;" typedef 4 { ActOnKeyword KAPutDef }	{ }
PLUS		include/bintree.h	/^#define PLUS		11	\/* For backward compatibility (PL/ ;" macro 1 { }	{ }
PLUSD		include/bintree.h	/^#define PLUSD		11	\/* Plus darken *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
PLUSL		include/bintree.h	/^#define PLUSL		13	\/* Plus lighten *\// ;" macro 1 { BMComposite34 BMComposite38 PSComposite PSCompositeRect }	{ }
PLanguageData		language/langdata.h	/^typedef struct {/ ;" typedef 8 { }	{ }
PLine		graphics/reducer.c	/^  typedef struct/ ;" typedef 13 { CheckIntersection DebugPrintEvent DebugPrintIntersect DebugPrintMakeLine FixedXatY IniReducer Interchange Intersect MakeLine PLn PointOnLine RdcBend RdcEntry RdcExit ShortenLine XatY }	{ }
PLn		graphics/reducer.c	/^#define PLn(i) ((PLine)(((charptr)lines) + (i)))/ ;" macro 1 { CheckIntersection DebugPrintEvent DebugPrintIntersect DebugPrintMakeLine DebugPrintRegions FixedXatY Interchange Intersect MakeLine MakeRegion PointOnLine RdcBend RdcClose RdcEntry RdcExit Reduce ShipTrapezoid ShortenLine XatY }	{ PLine charptr lines }
PLock		include/basictypes.h	/^typedef struct _t_Lock		*PLock;/ ;" typedef 1 { NewLock PSMonitor PSWait }	{ }
PLockObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 50 { }	{ }
PLokData		fonts/fontbuild.c	/^typedef struct _LokData/ ;" typedef 10 { BuildChar FontBuildInit StartLock }	{ }
PLokPair		fonts/fontbuild.c	/^typedef struct/ ;" typedef 9 { InsertLock Map fixupmap initslope mapedges printmap }	{ }
PLokSeq		fonts/fontbuild.c	/^typedef struct/ ;" typedef 7 { }	{ }
PMAX		graphics/ucache.c	/^#define PMAX	 (33)   \/* max size for path info *BM/ ;" macro 1 { IniUCache PSNormalUCache }	{ }
PMTItem		fonts/fontspriv.h	/^typedef struct {/ ;" typedef 38 { CheckMT CompSlowShow FastShow FasterShow GetFlushArgs InitFontCache InsertMID InsertSelectFont MTAlloc MTFree MTUnlink MakeMID PurgeFontRefs PurgeMID PurgeMM PurgeSFForKey ReValidateMID SearchSelectFont ShowByName SortMIDAges pMID }	{ }
PMakeMaskDevArgs		include/devicetypes.h	/^typedef struct _t_MakeMaskDevArgs/ ;" typedef 9 { }	{ }
PMarkObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 42 { }	{ }
PMarkProcs		mp/devmark.h	/^typedef struct {/ ;" typedef 12 { BM34InitClassVars BM38InitClassVars ClipTrapsStringDispatch IniFmDevImpl IniMaskDevImpl IniWdDevImpl MP12InitClassVars Mark MasksMark NoClipMark }	{ }
PMarkState		graphics/graphicspriv.h	/^typedef struct {/ ;" typedef 9 { AddRunMark MarkInit }	{ }
PMarkStateProcs		graphics/graphicspriv.h	/^typedef struct {/ ;" typedef 6 { DoRdcStroke MarkInit }	{ }
PMask		include/devicetypes.h	/^typedef struct _t_MaskRec/ ;" typedef 10 { AddCircleMask BlackMasksMark BlackMasksMarkReal CheckBM ClipTrapsStringDispatch ClippedMasksMark CompositeShow ConstantMasksMark DevMaskDevBounds EnterCirclesInCache FmMakeMaskDevice GrayMasksMark InitMaskCache MCGetMask MaskGoAway ShowByName WhiteMasksMark buildPrebuilt }	{ }
PMaskStuff		device/framemaskdev.h	/^typedef struct {	\/* concrete "Device" type for a c/ ;" typedef 5 { FmMakeMaskDevice MaskInitPage MaskSetupMark }	{ }
PMtx		include/fp.h	/^typedef struct _t_Mtx/ ;" typedef 5 { BuildMultiRectPath CompositePriv DoUAppend FillUserPath FindRdcInCache ImStretch PSSizeImage PSUStroke QDoEUsrPth QDoUserPath QEnumOk ReduceQuadPath UStrkPthProc UsrPthDoCurveTo UsrPthDoLineTo UsrPthDoMoveTo }	{ }
PNameArrayBody		include/basictypes.h	/^typedef struct _t_NameArrayBody	*PNameArrayBody;/ ;" typedef 1 { FinalizeNames PSExecuteOperator PushSharedVMRoots PutInNameMap ReadBinObjSeq StmToken TraceSharedVM }	{ }
PNameArrayObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 51 { RelocateObject }	{ }
PNameEntry		include/basictypes.h	/^typedef struct _t_NameEntry	*PNameEntry;/ ;" typedef 1 { ActOnKeyword AllocPName AllocPNameArray CheckPkdMtLt CmdIndexObj CompositeShow DictFinalize DictTestP DoUserPath FastName FastShow FinalizeNames GC_HandleIndex InitFontCache NameIndexObj NameToPString NextKeyVal PSDumpNames PSExecuteOperator PSLoad PSNProbeStats PrintNameEntry PutInDict PutInNameMap QDoUserPath ReadBinObjSeq Relocate_Names ResetNameCache RstrDB RstrObj ScanNameArray ShowByName StartCache StmToken TopError TraceSharedVM UnDef UsrPthCheckMtLt UsrPthQRdcOk VMExpandDict WriteObject ZapDelayedDict newstn pCIs trytoload }	{ }
PNameObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 35 { CompositeShow FastShow FindInCache }	{ }
PNew		bintree/pattern.c	/^Pattern *PNew()/ ;" function 8 { LSetExposureColor PNewColorAlpha }	{ PATTERN Pattern os_newelement patternPool }
PNewColorAlpha		bintree/pattern.c	/^Pattern *PNewColorAlpha(unsigned int color, unsign/ ;" function 13 { MP12Composite PInitialize }	{ PNew Pattern }
PNextGSExt		include/bintree.h	/^typedef struct _nextgsext {/ ;" typedef 9 { InitGraphics LBMSetupMark MP12SetupPattern NXGrayPatSetup NextGStatesProc PSCurrentAlpha PSSetAlpha PSSetGrayPattern PSetHalftone WdConvertColor }	{ }
PNullObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 32 { RecyclerAddress }	{ }
PNumStrm		include/language.h	/^typedef struct _t_NumStrm {/ ;" typedef 10 { DoEUserPath GetEUsrPthBBox HashPath QDoEUsrPth QDoEUsrPthFloat }	{ }
PNumbers		graphics/graypriv.c	/^typedef struct {/ ;" typedef 3 { }	{ }
POINT_ARRAY_LEN		graphics/cscan.c	/^#define POINT_ARRAY_LEN 70	\/* Number of points to / ;" macro 1 { }	{ }
POPCPesc		fonts/fontbuild.c	/^#define POPCPesc 33/ ;" macro 1 { BuildChar CCRunStd }	{ }
POPesc		fonts/fontbuild.c	/^#define POPesc 17/ ;" macro 1 { BuildChar CCRunStd }	{ }
POSTSCRIPT		product/wbcontext.h	/^#define POSTSCRIPT/ ;" macro 1 { }	{ }
POSTSCRIPTNAMES_H		postscript/postscriptnames.h	/^#define	POSTSCRIPTNAMES_H/ ;" macro 1 { }	{ }
POSTSCRIPT_H		include/postscript.h	/^#define    POSTSCRIPT_H/ ;" macro 1 { }	{ }
PObject		include/basictypes.h	/^typedef struct _t_Object	*PObject;/ ;" typedef 1 { AObjF AObjR Array BuildMultiRectPath CheckForMtx CheckIfEncodedUserPath ClearDictStack ClearStack CopyNumStrmForCache CountToMark CrFile CreateStack DoEUserPath DoUserPath EUsrPthCheckMtLt EnterPathInCache EnumStack EnumerateComposites EqNumStrmCache FindPathInCache GCInternal_AllocStack GCInternal_GrowStack GCInternal_Pop GC_MoveRecycleRange GC_Push HashArray InvalidateRecycler MakeNullObjects NextKeyVal Overflow PSCeiling PSFloor PSPopPCd PSRectFill PSRound PSSetGState PSSetShared PSTruncate PSUPath Pkdary PushStackRoots QDoUserPath ReadBinObjSeq ReadNumAry RelocateObj RgstPackageNames Roll RstrStack ScanFromAry ScanFromDict TracePrivateForShared TracePrivateVM TraceSharedVM UsrPthBBox UsrPthCheckMtLt UsrPthQRdcOk VMCarCdr VMCopyArray VMObjPtr VMPutElem (etc) }	{ }
POutlineEntry		fonts/fontrun.h	/^typedef struct _t_OutlineEntry {/ ;" typedef 5 { FetchCharOutline OCFetchFromDisk }	{ }
POutlineTag		fonts/fontrun.h	/^typedef struct _t_OutlineTag {/ ;" typedef 5 { }	{ }
PPMprototype		product/machportdevice.c	/^private readonly NXPrintPageMessage PPMprototype =/ ;" global 9 { mpdShowPage }	{ }
PPS		fonts/atm.h	/^#define PPS (0)/ ;" macro 1 { MERCURY }	{ }
PPSGState		include/customops.h	/^typedef struct _t_PSGState	*PPSGState;/ ;" typedef 1 { CompositePriv PSComposite PSDissolve PSPopGState PSSetNRect }	{ }
PPSObject		include/customops.h	/^typedef struct _t_PSObject	*PPSObject;/ ;" typedef 1 { PSPopManagedObject PSSetEventProcedures PSSetWindowDict window }	{ }
PPSkanji		fonts/atm.h	/^#define PPSkanji 1/ ;" macro 1 { }	{ }
PPXMASK		mp/cursor.c	/^#define PPXMASK		((unsigned int)0x0000000f)/ ;" macro 1 { MPDisplayCursor2 }	{ }
PParam		vm/saverestore.c	/^typedef struct paramrec {/ ;" typedef 7 { RestoreContextParams WriteContextParam }	{ }
PPatCacheInfo		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 11 { AllocPatternIndex DestroyPat FlushPatCache FreeOldestPattern FreePattern Gry4Of4Setup MonoSetup SetPatInfo SetupGrayPattern }	{ }
PPath		include/graphics.h	/^typedef struct _t_Path {/ ;" typedef 20 { BuildMultiRectPath DoRdcPth FindCurrentViewInCache MinimumClip PSSetBBox PSUPath ReducePathClipInt TransDevPrim }	{ }
PPixelBuffer		include/devcreate.h	/^typedef char *PPixelBuffer;/ ;" typedef 1 { FmShowPage }	{ }
PPkdaryObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 43 { RelocateObject }	{ }
PPoint		graphics/reducer.c	/^  typedef struct/ ;" typedef 10 { DebugPrintEvent DebugPrintMakePoint FixedXatY IniReducer Intersect MakeLine MakePoint PPt PtLT RdcBend RdcClose RdcEntry RdcExit Reduce ShortenLine XatY }	{ }
PPointQ		graphics/reducer.c	/^  typedef struct/ ;" typedef 9 { IniReducer PPq PQInsert Reduce }	{ }
PPostScriptParameters		include/postscript.h	/^typedef struct _t_PostScriptParameters {/ ;" typedef 52 { }	{ }
PPq		graphics/reducer.c	/^#define PPq(i) ((PPointQ)(((charptr)pointQs) + (i)/ ;" macro 1 { PQInsert PopPQ Reduce }	{ PPointQ charptr pointQs }
PPt		graphics/reducer.c	/^#define PPt(i) ((PPoint)(((charptr)points) + (i)))/ ;" macro 1 { CheckIntersection DebugPrintEvent DebugPrintIntersect DebugPrintMakeLine DebugPrintMakePoint DebugPrintRegions FixedXatY Intersect MakeLine MakePoint NewPoint PointOnLine PtLT RdcBend RdcClose RdcEntry RdcExit Reduce ShipTrapezoid ShortenLine XatY }	{ PPoint charptr points }
PPthElt		include/graphics.h	/^typedef struct _t_PthElt {/ ;" typedef 5 { AddToPath AppendPath BuildPathFreeList ClosePath DoPath OffsetFill PSUPath PathForAll PathIsRect QRdcOk ReversePath StrkInternal TlatPath }	{ }
PPubLangCtxt		include/language.h	/^typedef struct _t_PubLangCtxt {/ ;" typedef 3 { }	{ }
PQInsert		graphics/reducer.c	/^private procedure PQInsert(pt, intersect)  PtOffse/ ;" function 32 { CheckIntersection NewPoint RdcClose }	{ LimitCheck PPointQ PPq PointQ PqOffset PtLT curPq endPntQ pqHead pqRecent register }
PQdCorner		graphics/stroke.h	/^typedef struct quadcorner/ ;" typedef 3 { Bubble FastFillQuad }	{ }
PRCd		include/publictypes.h	/^typedef struct _t_Cd {/ ;" typedef 4 { }	{ }
PRCdToPFCd		fonts/fontbuild.c	/^public procedure PRCdToPFCd(r, f) PRCd r; PFCd f; / ;" function 4 { LockCd MakeCacheDev2 }	{ pflttofix r }
PREBUILTFILEVERSION		device/prebuiltformat.h	/^#define PREBUILTFILEVERSION 3/ ;" macro 1 { readPrebuiltFile }	{ }
PREBUILTFORMAT_H		device/prebuiltformat.h	/^#define	PREBUILTFORMAT_H/ ;" macro 1 { }	{ }
PREBUILT_CLOSEST		include/devicetypes.h	/^#define PREBUILT_CLOSEST 1/ ;" macro 1 { CheckPrebuiltOptions }	{ }
PREBUILT_OUTLINE		include/devicetypes.h	/^#define PREBUILT_OUTLINE 0/ ;" macro 1 { CheckPrebuiltOptions PreBuiltChar }	{ }
PREBUILT_SUFFIX		device/prebuiltformat.h	/^#define PREBUILT_SUFFIX ".lepf"/ ;" macro 1 { PrebuiltPathSearch getPrebuiltFont }	{ }
PREBUILT_TRANSFORMED		include/devicetypes.h	/^#define PREBUILT_TRANSFORMED 2/ ;" macro 1 { }	{ }
PREFERREDALIGN		include/environment.h	/^#define PREFERREDALIGN 4/ ;" macro 1 { BuildInitialState UFSeek }	{ }
PRINTEDITS		graphics/cscan.c	/^#define PRINTEDITS 0		\/* Print out the pixel edits/ ;" macro 1 { }	{ }
PRMtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 3 { }	{ }
PROCNAME		devpattern/ims11d11.c	/^#define PROCNAME ImS11D11/ ;" macro 1 { }	{ }
PROC_SOURCE		graphics/image.c	/^#define PROC_SOURCE 0/ ;" macro 1 { ImageInternal ReadSlices }	{ }
PROF		product/nextmain.c	/^#define PROF 0/ ;" macro 1 { }	{ }
PROFINIT		product/nextmain.c	/^#define PROFINIT 0/ ;" macro 1 { }	{ }
PROTOTYPES		graphics/cscan.c	/^#define PROTOTYPES 0/ ;" macro 1 { }	{ }
PRdc		graphics/ucache.c	/^typedef struct _rdcrec {/ ;" typedef 12 { CheckUCache EnterRdcInCache FindRdcInCache FreeRdc UCGetDevPrim }	{ }
PRealObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 34 { }	{ }
PRealValue		graphics/matrix.c	/^public procedure PRealValue(ob, r)  Object ob;  Pr/ ;" function 9 { ARealCarP DoStroke EnterRdcInCache FindRdcInCache GetErosion ImageDict PAryToMtx PSSetDash }	{ TypeCheck intObj r real realObj }
PRecycler		include/vm.h	/^typedef struct _t_Recycler *PRecycler;/ ;" typedef 1 { Array CreateVM InvalidateRecycler NewRecycler PSRecyclerStatus ReclaimRecyclableVM Recyclable RecyclerPop RecyclerPush TraceSharedVM VMCopyArray VMPutElem _ReclaimRecyclableVM _RecordFinalizableObject _RecyclerPop _RecyclerPush }	{ }
PRegion		graphics/reducer.c	/^  typedef struct/ ;" typedef 11 { DebugPrintRegions IniReducer Interchange LinkRegionFreeList MakeRegion PRg RdcBend RdcEntry RdcExit Reduce ShipTrapezoid }	{ }
PRelocationEntry		vm/vm_relocate.h	/^typedef struct _t_RelocationEntry {/ ;" typedef 4 { ApplyRelocation BuildRelocationTable NewRelocationEntry ReadRelocationTable }	{ }
PRg		graphics/reducer.c	/^#define PRg(i) ((PRegion)(((charptr)regions) + (i)/ ;" macro 1 { CheckIntersection DebugPrintRegions FreeRegion Interchange LinkRegionFreeList MakeRegion RdcBend RdcEntry RdcExit Reduce ShipTrapezoid }	{ PRegion charptr regions }
PRgCmdEntry		include/orphans.h	/^typedef struct _t_RgCmdEntry {/ ;" typedef 5 { }	{ }
PRgNameEntry		include/orphans.h	/^typedef struct _t_RgNameEntry {/ ;" typedef 5 { }	{ }
PRgOpEntry		include/customops.h	/^typedef struct _t_RgOpEntry {/ ;" typedef 4 { }	{ }
PRunAr		graphics/graphicspriv.h	/^typedef Card16 RunAr, *PRunAr;/ ;" typedef 1 { }	{ }
PSALoad		language/array.c	/^public procedure PSALoad()/ ;" function 9 { }	{ AryObj InvlAccess Object PopPArray PushP VMCarCdr rAccess }
PSAShow		fonts/fontshow.c	/^public procedure PSAShow()/ ;" function 11 { }	{ BEGINSHOW Cd DTfmP ENDSHOW PopPCd PopPString ShowInternal ssr true }
PSAStore		language/array.c	/^public procedure PSAStore()/ ;" function 7 { }	{ AStore AryObj PopPArray PushP }
PSATan		language/math.c	/^public procedure PSATan() {/ ;" function 9 { }	{ DEG PopPReal PushPReal RealEq0 RealLt0 UndefResult fp360 real }
PSAWidthShow		fonts/fontshow.c	/^public procedure PSAWidthShow()/ ;" function 18 { }	{ BEGINSHOW Cd DTfmP ENDSHOW FMapNone PopInteger PopPCd PopPString RangeCheck ShowInternal gs integer ssr true }
PSAbort		postscript/postscript.c	/^private procedure PSAbort()/ ;" function 4 { StateInit }	{ exitError }
PSAbs		language/math.c	/^public procedure PSAbs()/ ;" function 17 { }	{ MINinteger Object PopP PushInteger PushPReal TypeCheck intObj os_fabs os_labs r real realObj }
PSAcquireLock		postscript/contextimpl.c	/^public procedure PSAcquireLock(pobj) PObject pobj;/ ;" function 5 { }	{ AcquireLock TypeCheck escObj objLock }
PSAdd		language/math.c	/^public procedure PSAdd() {/ ;" function 40 { }	{ Object PopP PushInteger PushPReal TypeCheck extended intObj integer r real realObj }
PSAdjustCursor		product/mouse_driver.c	/^private procedure PSAdjustCursor()/ ;" function 12 { }	{ Cd CheckWindow CurrentMouse DUserToDevice DevCd NULL PSGetMatrix PSPopPCd SetMouse }
PSAdjustMouse		product/mouse_driver.c	/^private procedure PSAdjustMouse()/ ;" function 23 { }	{ Bounds Cd CheckWindow CurrentMouse DevCd GetTLWinBounds GlobalToLocal Layer NULL PDevice PSGetDevice PSGetMatrix PSPopPCd PWindowDevice SetMouse UserToDevice Wd2Layer }
PSAllocBM		vm/abmimpl.c	/^private procedure PSAllocBM()/ ;" function 42 { ABM_Init }	{ ABM_BytesForBitmap Card8 NIL PCard8 PVMSegment charptr os_eprintf putchar register vmCurrent }
PSAllocVM		vm/abmimpl.c	/^private procedure PSAllocVM()/ ;" function 26 { ABM_Init }	{ ABM_Allocate GCInternal_GetSegHnd NIL PSPopInteger PVMSegment RefAny integer os_eprintf vmCurrent }
PSAlphaImage		product/windowgraphics.c	/^private procedure PSAlphaImage()/ ;" function 15 { }	{ CheckWindow DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DoImage PSPopBoolean PSPopInteger PSRangeCheck boolean false true }
PSAlwaysErode		fonts/fontbuild.c	/^private procedure PSAlwaysErode() { alwaysErode = / ;" function 1 { }	{ PopBoolean alwaysErode }
PSAnchorSearch		language/string.c	/^public procedure PSAnchorSearch()/ ;" function 21 { }	{ PStrObj PopPRString PushBoolean PushP SHead STail StrObj false integer register s sStringMatch true }
PSAnd		language/math.c	/^public procedure PSAnd()/ ;" function 10 { }	{ Object PopBoolean PopInteger PopP PushBoolean PushInteger TypeCheck boolObj boolean intObj }
PSArc		graphics/pathbuild.c	/^public procedure PSArc() {CallArc(true);}/ ;" function 1 { }	{ CallArc true }
PSArcC		graphics/pathextraops.c	/^private procedure PSArcC()/ ;" function 28 { PathExtraOpsInit }	{ ArcC Cd CheckForCurrentPoint ITfmP PI PopInteger PopPCd RealLt0 TwoPI boolean gs integer real }
PSArcN		graphics/pathbuild.c	/^public procedure PSArcN() {CallArc(false);}/ ;" function 1 { }	{ CallArc false }
PSArcT		graphics/pathbuild.c	/^public procedure PSArcT()  { DoArcTo(false); }/ ;" function 1 { }	{ DoArcTo false }
PSArcTo		graphics/pathbuild.c	/^public procedure PSArcTo() { DoArcTo(true); }/ ;" function 1 { }	{ DoArcTo true }
PSArray		language/array.c	/^public procedure PSArray()/ ;" function 10 { }	{ AllocPArray AryObj PopLimitCard PushP ReclaimRecyclableVM cardinal }
PSBMRun		fonts/fontbuild.c	/^private procedure PSBMRun() {/ ;" function 3 { }	{ BMRun CCBMRun }
PSBaseToCurrent		product/coordinates.c	/^private procedure PSBaseToCurrent()/ ;" function 10 { }	{ Bounds Cd GetBoundsPopCd ITfmCd NULL PSGetMatrix PSPushPCd }
PSBaseToScreen		product/coordinates.c	/^private procedure PSBaseToScreen()/ ;" function 10 { }	{ Bounds Cd GetBoundsPopCd PSPushPCd }
PSBegin		language/dict.c	/^public procedure PSBegin()/ ;" function 6 { }	{ Begin DictObj PopPDict }
PSBind		language/exec.c	/^public procedure PSBind()/ ;" function 14 { }	{ BindArray BindPkdary Object PopP PushP TypeCheck arrayObj pkdaryObj }
PSBitShift		language/math.c	/^public procedure PSBitShift()/ ;" function 8 { }	{ PopInteger PushInteger integer longcardinal }
PSBuildMasks		postscript/customops.c	/^public boolean PSBuildMasks() {return gs->noColorA/ ;" function 1 { PSSetAlpha }	{ gs }
PSButton		product/mouse_driver.c	/^private procedure PSButton()/ ;" function 5 { }	{ CURWINDOW DidInteract PSPushBoolean eventGlobals false }
PSBytesAvailable		language/stream.c	/^public procedure PSBytesAvailable()/ ;" function 13 { }	{ GetStream InvlAccess PopPStream PushInteger Stm StmObj false favail getc integer rAccess ungetc }
PSCANTYPE		include/devpattern.h	/^typedef SCANTYPE *PSCANTYPE;/ ;" typedef 1 { AllocPatternIndex AllocPatternStorage BlackMasksMark BlackMasksMarkReal BlackRunMark ClippedMasksMark ComposeColors ConstantMasksMark ConstantRectMark ConstantRunMark ConstantTrapsMark ExpandOneLine FmGetReadWriteScanline FmGetWriteScanline FmMakeMaskDevice FmShowPage FrameDevice GETMEM GetBuffers GetCachePlace GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 IniDeepOnes InitPatternImpl MaskGoAway RollPattern WhiteMasksMark WhiteRunMark }	{ }
PSCCRun		fonts/fontbuild.c	/^public procedure PSCCRun() {/ ;" function 3 { }	{ CCBMRun CCRun }
PSCONTEXTID		product/pscontext.c	/^#define PSCONTEXTID	1000/ ;" macro 1 { CreateSchedulerContext }	{ }
PSCShow		fonts/fontshow.c	/^public procedure PSCShow()/ ;" function 10 { }	{ BEGINSHOW ENDSHOW PopPArray PopPString ShowInternal ss true }
PSCVN		language/string.c	/^public procedure PSCVN()/ ;" function 8 { }	{ MAXnameLength NameObj PopPString PushP RangeCheck StrObj StrToName }
PSCVRS		language/string.c	/^public procedure PSCVRS()/ ;" function 23 { }	{ Card32 MAXInt32 MINInt32 NumEncode Object PSCVS PopCardinal PopP PopPString PushP RangeCheck StrObj TextIntoString cardinal character intObj integer novalue r real realObj s }
PSCVS		language/string.c	/^public procedure PSCVS()/ ;" function 44 { PSCVRS }	{ NIL NUL NameToPString Object PopP PopPString PushP RangeCheck StrIntoStr StrLen StrObj TextIntoString VMCopyString boolObj boolean character cmdObj dot false intObj integer nameObj novalue os_sprintf realObj rootShared s strObj string true unregistered }
PSCacheFlush		fonts/cacheimpl.c	/^public procedure PSCacheFlush()/ ;" function 18 { FontRunInit }	{ CaTag CacheInvalidate CacheStats MakeStr NULL PCache PopPRString StrObj StringCompare boolean cacheChain p }
PSCacheInit		fonts/cacheimpl.c	/^public procedure PSCacheInit()/ ;" function 21 { FontRunInit }	{ CaTag CacheInvalidate CacheStats MakeStr NULL PCache PSPopInteger PopPRString StrObj StringCompare boolean cacheChain integer p }
PSCacheStatistics		fonts/cacheimpl.c	/^public procedure PSCacheStatistics()/ ;" function 31 { FontRunInit }	{ IPush IntObj LIntObj MakeStr NULL PCache PopPRString StrObj StringCompare boolean cacheChain lookups opStk p }
PSCacheStatus		fonts/fontdisk.c	/^public procedure PSCacheStatus() {/ ;" function 11 { }	{ CISize DevMaskCacheInfo MTSize PushInteger ctxCacheThreshold fcData integer }
PSCeiling		language/math.c	/^public procedure PSCeiling()/ ;" function 13 { }	{ Object PObject PopP PushP PushPReal TypeCheck intObj r real realObj register }
PSCharPath		graphics/pathops.c	/^public procedure PSCharPath()/ ;" function 17 { }	{ AppendPath DURING END_HANDLER FrPth HANDLER InitPath MoveTo PopBoolean PopPString RERAISE SimpleShow StrObj chrPth chrPthStrk false gs secret true }
PSChdir		unix_product/unix.c	/^private procedure PSChdir()/ ;" function 10 { }	{ FREE NEW PopPString StrObj UndefFileName VMGetText integer s string }
PSClear		language/stack.c	/^public procedure PSClear() {ClearStack(opStk);}/ ;" function 1 { }	{ ClearStack opStk }
PSClearDictStack		language/dict.c	/^public procedure PSClearDictStack()/ ;" function 4 { }	{ ClearDictStack }
PSClearNRect		product/windowops.c	/^private procedure PSClearNRect()/ ;" function 11 { }	{ ClearWdNRect PSGetDevice PSInvalidID PSPopGState PSPopInteger PWindowDevice true wdProcs }
PSClip		graphics/graphics.c	/^public procedure PSClip() {Clip(false);}/ ;" function 1 { }	{ Clip false }
PSClipInfo		postscript/customops.c	/^public boolean PSClipInfo(ll, ur) Cd *ll, *ur; {/ ;" function 5 { }	{ gs }
PSClipPath		graphics/pathops.c	/^public procedure PSClipPath()/ ;" function 5 { }	{ CopyPath NewPath gs }
PSCloseFile		language/stream.c	/^public procedure PSCloseFile()/ ;" function 6 { }	{ CloseFile PopPStream StmObj false }
PSClosePath		graphics/pathbuild.c	/^public procedure PSClosePath()  {ClosePath(&gs->pa/ ;" function 1 { }	{ ClosePath gs }
PSClrInt		postscript/contextimpl.c	/^public procedure PSClrInt()/ ;" function 17 { }	{ currentPSContext false true }
PSClrToMrk		language/stack.c	/^public procedure PSClrToMrk()/ ;" function 10 { PSFork PSRgstNames PSRgstOps PSSetUCacheParams SendEvent StmToken }	{ Object PSError StackPopP escObj objMark opStk unmatchedmark until }
PSClrTransfer		graphics/transferimpl.c	/^public procedure PSClrTransfer()/ ;" function 17 { }	{ NIL Object PushP TfrFcn XAryObj gs integer }
PSCnct		graphics/graphics.c	/^public procedure PSCnct()/ ;" function 6 { }	{ Cnct Mtx PopMtx }
PSCnctMtx		graphics/matrix.c	/^public procedure PSCnctMtx()/ ;" function 10 { }	{ AryObj Mtx MtxCnct PopMtx PopPArray PushPMtx }
PSCntDictStack		language/stack.c	/^public procedure PSCntDictStack()/ ;" function 2 { }	{ CountStack MAXcardinal PushCardinal dictStk }
PSCntExecStack		language/stack.c	/^public procedure PSCntExecStack()/ ;" function 2 { }	{ CountStack MAXcardinal PushCardinal execStk }
PSCntToMark		language/stack.c	/^public procedure PSCntToMark() {PushCardinal(Count/ ;" function 1 { PSRgstNames PSRgstOps }	{ CountToMark PushCardinal opStk }
PSCoProc		postscript/contextimpl.c	/^private procedure PSCoProc() { \/* passed as an arg/ ;" function 43 { CreateContext }	{ Assert CountStack DoQuit InnerNotify MAXCard16 NIL PSContext PS_TERMINATE StmCtxDestroy cardinal currentPSContext false level opStk os_stdin os_stdout true }
PSCollect		vm/gcmisc.c	/^public procedure PSCollect()/ ;" function 26 { }	{ GC_CollectPrivate GC_CollectShared PSPopInteger RangeCheck autoPrivate autoShared false integer true vmPrivate }
PSColorImage		graphics/image.c	/^public procedure PSColorImage() {/ ;" function 12 { }	{ DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DoImage PopBoolean PopInteger RangeCheck false integer }
PSComposite		product/windowgraphics.c	/^private procedure PSComposite()/ ;" function 15 { }	{ Cd CompositePriv HIGHLIGHT PLUSL PPSGState PSPopGState PSPopPCd PSRangeCheck PopNaturalMax }
PSCompositeRect		product/windowgraphics.c	/^private procedure PSCompositeRect()/ ;" function 11 { }	{ Cd CheckWindow CompositePriv NULL PLUSL PSPopPCd PopNaturalMax }
PSCondition		postscript/contextimpl.c	/^public procedure PSCondition () {/ ;" function 5 { }	{ NewCondition Object PushP }
PSContext		include/postscript.h	/^typedef struct _t_PSContextRec {/ ;" typedef 9 { AcquireLock BreakLooseCV BreakLooseLK CreateContext CreatePSContext DestroyPSContext DoQuit GetNextContext GetNotifyAbortCode IDToPSContext InitPostScript InnerNotify Mnextmain NSCreatePS NSDestroyPS NewSpaceID PSCoProc PSCurrentWaitCursorEnabled PSDetach PSFork PSJoin PSMonitor PSSetActiveApp PSSetWaitCursorEnabled PSWait ReleaseLock SendEvent SetCurrentContext SwitchPSContext TerminatePSSpace WaitOnJoinable }	{ }
PSContextRec		include/postscript.h	/^typedef struct _t_PSContextRec {/ ;" typedef 9 { CreateContext }	{ }
PSContextToID		postscript/contextimpl.c	/^public ContextID PSContextToID(context) PSContext / ;" function 3 { NSDestroyPS PSCurrentActiveApp SelfDestructPSContext TimedEvent window }	{ }
PSCopy		language/type.c	/^public procedure PSCopy()/ ;" function 49 { }	{ CardFromOb Copy CopyDict DecodeObj InvlAccess Object PopP PushP RangeCheck TypeCheck VMCopyArray VMCopyGeneric VMCopyString VMPutElem arrayObj cardinal dictObj escObj intObj objGState opStk pkdaryObj strObj }
PSCopyPage		graphics/graphics.c	/^public procedure PSCopyPage()/ ;" function 5 { }	{ NIL false gs }
PSCos		language/math.c	/^public procedure PSCos() {/ ;" function 6 { }	{ PopPReal PushPReal RAD r real }
PSCount		language/stack.c	/^public procedure PSCount() {PushCardinal(CountStac/ ;" function 1 { }	{ CountStack MAXcardinal PushCardinal opStk }
PSCountFrameBuffers		product/windowops.c	/^private procedure PSCountFrameBuffers()/ ;" function 4 { }	{ PSPushInteger deviceCount }
PSCountScreenList		product/windowops.c	/^private procedure PSCountScreenList()/ ;" function 17 { }	{ ABOVE BELOW Layer2Wd PSPopInteger PSPushInteger PWindowDevice SubList WLBelowButNotBelow }
PSCountWindowList		product/windowops.c	/^private procedure PSCountWindowList()/ ;" function 12 { }	{ PSPopInteger PSPushInteger WindowDevice integer windowBase }
PSCrBlkGeneration		graphics/transferimpl.c	/^public procedure PSCrBlkGeneration()  \/* currentbl/ ;" function 10 { }	{ NIL Object PushP XAryObj gs }
PSCrCMYKColor		graphics/colorops1.c	/^public procedure PSCrCMYKColor()  \/* currentcmykco/ ;" function 61 { }	{ Color DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DebugAssert LimitColor PopPColorVal PushPReal TfrFcn fpOne fpZero gs real }
PSCrCParams		fonts/fontdisk.c	/^public procedure PSCrCParams() {/ ;" function 10 { }	{ DevMaskCacheInfo LMarkObj MarkObj Object PushInteger PushP ctxCacheThreshold ctxCompThreshold integer mark }
PSCrColorScreen		graphics/gray.c	/^public procedure PSCrColorScreen() {/ ;" function 18 { }	{ NIL PSCrHalftone Push3NullScreens PushFakeFreqAngle PushSpotFunction Screen dictObj gs integer register s }
PSCrDash		graphics/strokeops.c	/^public procedure PSCrDash()/ ;" function 2 { }	{ PushP PushPReal gs }
PSCrDict		language/dict.c	/^public procedure PSCrDict()/ ;" function 2 { }	{ DTopP Object PushP }
PSCrFile		language/stream.c	/^public procedure PSCrFile()/ ;" function 7 { }	{ CrFile Lobj PushP StmObj }
PSCrFlatThreshold		graphics/graphics.c	/^public procedure PSCrFlatThreshold() {PushPReal(&g/ ;" function 1 { }	{ PushPReal flatEps gs }
PSCrFont		fonts/fontshow.c	/^public procedure PSCrFont()/ ;" function 4 { }	{ PushP fontDict gs }
PSCrGray		graphics/colorops1.c	/^public procedure PSCrGray() {/ ;" function 33 { }	{ Color DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE DebugAssert LimitColor PushPReal colorWb colorWg colorWr fpOne fpZero gs r real }
PSCrHSBColor		graphics/colorops1.c	/^public procedure PSCrHSBColor()/ ;" function 29 { }	{ CrRGBColor PushPReal RealLt0 RealNe0 fp3 fp5 fp6 fpOne fpZero r real }
PSCrHalftone		graphics/gray.c	/^public procedure PSCrHalftone() {/ ;" function 10 { PSCrColorScreen PSCrScreen }	{ MakeScreenDict NIL PushP Screen SetDefaultHalftone gs nullObj register s }
PSCrLineCap		graphics/strokeops.c	/^public procedure PSCrLineCap() {PushCardinal(gs->l/ ;" function 1 { }	{ PushCardinal gs }
PSCrLineJoin		graphics/strokeops.c	/^public procedure PSCrLineJoin() {PushCardinal(gs->/ ;" function 1 { }	{ PushCardinal gs }
PSCrLineWidth		graphics/strokeops.c	/^public procedure PSCrLineWidth()  {PushPReal(&gs->/ ;" function 1 { }	{ PushPReal gs }
PSCrMiterLimit		graphics/strokeops.c	/^public procedure PSCrMiterLimit() {PushPReal(&gs->/ ;" function 1 { }	{ PushPReal gs }
PSCrMtx		graphics/graphics.c	/^public procedure PSCrMtx()/ ;" function 6 { }	{ AryObj PopPArray PushPMtx gs }
PSCrObjFormat		language/binaryobject.c	/^public procedure PSCrObjFormat()/ ;" function 4 { }	{ PushInteger integer objectFormat }
PSCrPacking		language/scanner.c	/^public procedure PSCrPacking()/ ;" function 4 { }	{ PushBoolean packedArrayMode }
PSCrPoint		graphics/graphics.c	/^public procedure PSCrPoint()/ ;" function 7 { }	{ Cd CheckForCurrentPoint ITfmP PushPCd gs }
PSCrRGBColor		graphics/colorops1.c	/^public procedure PSCrRGBColor()/ ;" function 6 { }	{ CrRGBColor PushPReal real }
PSCrScreen		graphics/gray.c	/^public procedure PSCrScreen() {/ ;" function 8 { }	{ NIL PSCrHalftone PushFakeFreqAngle PushSpotFunction Screen dictObj gs register s }
PSCrTransfer		graphics/transferimpl.c	/^public procedure PSCrTransfer()  {/ ;" function 9 { }	{ NIL Object PushP XAryObj gs }
PSCrUCRemoval		graphics/transferimpl.c	/^public procedure PSCrUCRemoval()  \/* currentunderc/ ;" function 10 { }	{ NIL Object PushP XAryObj gs }
PSCurrentActiveApp		product/event.c	/^private procedure PSCurrentActiveApp()/ ;" function 7 { }	{ ActiveApp PSContextToID PSPushInteger integer }
PSCurrentAlpha		product/windowgraphics.c	/^private procedure PSCurrentAlpha()/ ;" function 7 { }	{ NULL PNextGSExt PSGetGStateExt PSPushPReal }
PSCurrentByteCount		product/miscops.c	/^private procedure PSCurrentByteCount()/ ;" function 7 { }	{ IPCbytesIn IPCbytesOut PSPushInteger }
PSCurrentContext		postscript/contextimpl.c	/^public procedure PSCurrentContext () {/ ;" function 3 { }	{ PushInteger currentPSContext integer }
PSCurrentDefaultDepthLimit		product/windowops.c	/^private procedure PSCurrentDefaultDepthLimit()/ ;" function 5 { }	{ PSPushInteger mapIntToExtDepths }
PSCurrentDeviceInfo		product/windowops.c	/^private procedure PSCurrentDeviceInfo()/ ;" function 9 { }	{ DeviceStatus ID2Layer LGetDeviceStatus PSPopInteger PSPushBoolean PSPushInteger }
PSCurrentEventProcedures		product/windowops.c	/^private procedure PSCurrentEventProcedures()/ ;" function 12 { }	{ ID2Wd PSLNullObj PSObject PSPopInteger PSPushObject PWindowDevice }
PSCurrentEventTime		product/event.c	/^private procedure PSCurrentEventTime()/ ;" function 4 { }	{ PSPushInteger eventGlobals }
PSCurrentGState		graphics/gstates.c	/^public procedure PSCurrentGState()/ ;" function 15 { }	{ FInvlAccess GSAddRefs GSHasPrivateStuff GenericBody Object PCard8 PGState PopGState PushP TypeCheck Undefined VMPutGeneric gs register wAccess }
PSCurrentHalftonePhase		graphics/transferimpl.c	/^public procedure PSCurrentHalftonePhase() {/ ;" function 4 { }	{ PushInteger gs }
PSCurrentHowPost		product/event.c	/^private procedure PSCurrentHowPost()/ ;" function 9 { }	{ NX_FIRSTEVENT NX_LASTEVENT PSPopInteger PSPushInteger PSRangeCheck PostByCode }
PSCurrentMouse		product/mouse_driver.c	/^private procedure PSCurrentMouse()/ ;" function 16 { }	{ CurrentMouse DidInteract GlobalToLocal ID2Wd PSPopInteger PSPushInteger PWindowDevice remapY }
PSCurrentNextStepContext		product/listener.c	/^private void PSCurrentNextStepContext()/ ;" function 4 { }	{ PSPushBoolean currentPSContext scheduler }
PSCurrentOwner		product/windowops.c	/^private procedure PSCurrentOwner()/ ;" function 4 { }	{ ID2Wd PSPopInteger PSPushInteger }
PSCurrentRUsage		product/miscops.c	/^private procedure PSCurrentRUsage()/ ;" function 16 { }	{ NULL PSPushInteger PushReal TimevalToReal }
PSCurrentShared		postscript/psspace.c	/^public procedure PSCurrentShared ()/ ;" function 4 { }	{ CurrentShared PushBoolean }
PSCurrentStrokeAdjust		graphics/stroke.c	/^public procedure PSCurrentStrokeAdjust() {/ ;" function 2 { }	{ PushBoolean gs }
PSCurrentToBase		product/coordinates.c	/^private procedure PSCurrentToBase()/ ;" function 10 { }	{ Bounds Cd GetBoundsPopCd NULL PSGetMatrix PSPushPCd TfmCd }
PSCurrentToScreen		product/coordinates.c	/^private procedure PSCurrentToScreen()/ ;" function 11 { }	{ Bounds Cd GetBoundsPopCd NULL PSGetMatrix PSPushPCd TfmCd }
PSCurrentUser		product/listener.c	/^private procedure PSCurrentUser()/ ;" function 5 { }	{ PSPushInteger }
PSCurrentWaitCursorEnabled		product/event.c	/^private procedure PSCurrentWaitCursorEnabled()/ ;" function 20 { }	{ IDToPSContext IPCGetWCParams NIL PSContext PSInvalidID PSPopInteger PSPushBoolean WCParams }
PSCurrentWindow		product/windowops.c	/^private procedure PSCurrentWindow()/ ;" function 4 { }	{ CurWindowID PSPushInteger }
PSCurrentWindowAlpha		product/windowgraphics.c	/^private procedure PSCurrentWindowAlpha()/ ;" function 11 { }	{ ID2Layer LCurrentAlphaState PSPopInteger PSPushInteger }
PSCurrentWindowBounds		product/coordinates.c	/^private procedure PSCurrentWindowBounds()/ ;" function 15 { }	{ Bounds GetWinBounds ID2Layer NULL PSPopInteger PSPushInteger integer }
PSCurrentWindowDepth		product/windowops.c	/^private procedure PSCurrentWindowDepth()/ ;" function 8 { }	{ ID2Wd PSInvalidID PSPopInteger PSPushInteger PWindowDevice mapIntToExtDepths }
PSCurrentWindowDepthLimit		product/windowops.c	/^private procedure PSCurrentWindowDepthLimit()/ ;" function 8 { }	{ ID2Wd PSInvalidID PSPopInteger PSPushInteger PWindowDevice mapIntToExtDepths }
PSCurrentWindowDict		product/windowops.c	/^private procedure PSCurrentWindowDict()/ ;" function 12 { }	{ ID2Wd NULL PSLNullObj PSObject PSPopInteger PSPushObject PWindowDevice }
PSCurrentWindowLevel		product/windowops.c	/^private procedure PSCurrentWindowLevel()/ ;" function 8 { }	{ ID2Wd PSInvalidID PSPopInteger PSPushInteger WindowDevice level }
PSCurrentWriteBlock		product/listener.c	/^private void PSCurrentWriteBlock()/ ;" function 4 { }	{ PSPushBoolean currentPSContext scheduler }
PSCurveTo		graphics/pathbuild.c	/^public procedure PSCurveTo() {/ ;" function 8 { }	{ Cd CurveTo PopPCd TfmPCd gs }
PSCvI		language/type.c	/^public procedure PSCvI()/ ;" function 21 { }	{ IPopOp InvlAccess MAXinteger MINinteger Object PSError PushInteger RangeCheck StrToken TypeCheck extended false intObj integer rAccess realObj strObj syntaxerror true }
PSCvLit		language/type.c	/^public procedure PSCvLit()/ ;" function 5 { }	{ Lobj Underflow opStk }
PSCvR		language/type.c	/^public procedure PSCvR()/ ;" function 23 { }	{ IPopOp InvlAccess Object PSError PushPReal StrToken TypeCheck false intObj r rAccess real realObj strObj syntaxerror true }
PSCvX		language/type.c	/^public procedure PSCvX()/ ;" function 5 { }	{ Underflow Xobj opStk }
PSDPathForAll		graphics/pathpriv.c	/^private procedure PSDPathForAll() { PathForAll(tru/ ;" function 1 { IniPathPriv }	{ PathForAll true }
PSDTfm		graphics/matrix.c	/^public procedure PSDTfm()/ ;" function 20 { }	{ Cd DTfmP DTfmPCd Mtx Object PCd PopMtx PopPCd PushPCd TopP arrayObj pkdaryObj register }
PSDayTime		unix_product/unix.c	/^private procedure PSDayTime()/ ;" function 11 { UnixInit }	{ PushInteger }
PSDef		language/dict.c	/^public procedure PSDef()/ ;" function 9 { }	{ DTopP KeyName KeyVal Object PopP PutInDict true }
PSDefSysName		language/name.c	/^private procedure PSDefSysName() \/* index name def/ ;" function 10 { NameInit }	{ Card16 NameObj PopCardinal PopP PutInNameMap TypeCheck false nameObj rootShared }
PSDefUserName		language/name.c	/^public procedure PSDefUserName() \/* index name def/ ;" function 10 { }	{ Card16 NameObj PopCardinal PopP PutInNameMap TypeCheck nameObj rootPrivate true }
PSDefUserObj		language/exec.c	/^private procedure PSDefUserObj() {/ ;" function 46 { }	{ APut AllocPArray ConditionalInvalidateRecycler CurrentShared DURING DictPut DictTestP END_HANDLER HANDLER MAXarrayLength Object PopInteger PopP RERAISE RangeCheck SetShared UOBJINITSIZE VMGetElem boolean cardinal false integer languageNames rootPrivate true }
PSDefineFont		fonts/fontcache.c	/^private procedure PSDefineFont()/ ;" function 72 { }	{ AllocRAMArray AryObj COMPOSEDtype CheckCompositeFont CheckPrebuiltOptions ConditionalInvalidateRecycler DictGetP DictGetPType DictObj DictTestP DictTestPType FD FndFntSibling FontObj ForcePut GenFID GetFontDirectory IntObj InvlFont Known MakeFont Mtx Object PAryToMtx PopP PopPDict PurgeFontRefs PurgeSFForKey PushP RangeCheck RgstPrebuiltInfo SetDictAccess StrToName TrickyDict TypeOfFID VMGetElem VMPutElem adobeFID arrayObj clientFID d fontsNames intObj integer maxwrtmodes ndcFID rAccess strObj true }
PSDeleteFile		language/stodevsupport.c	/^public procedure PSDeleteFile() \/* string deletefi/ ;" function 8 { }	{ FndStoFile NIL PStoDev PopFlName UndefFileName }
PSDetach		postscript/contextimpl.c	/^public procedure PSDetach () {/ ;" function 13 { }	{ ContextID IDToPSContext InnerNotify InvalidContext NIL PSContext PSMakeRunnable PopInteger true }
PSDevDisMount		language/stodevsupport.c	/^public procedure PSDevDisMount()/ ;" function 10 { }	{ FndStoDev NIL PStoDev PopFlName UndefFileName }
PSDevForAll		language/stodevsupport.c	/^public procedure PSDevForAll() \/* proc scratch dev/ ;" function 23 { }	{ AryObj InvlAccess NIL PStoDev PopPArray PopPString PushP RangeCheck StoDevGetNext StrLen StrObj register wAccess }
PSDevFormat		language/stodevsupport.c	/^public procedure PSDevFormat()/ ;" function 13 { }	{ FndStoDev NIL PStoDev PopCardinal PopFlName PopInteger UndefFileName integer }
PSDevMount		language/stodevsupport.c	/^public procedure PSDevMount()/ ;" function 18 { }	{ DURING END_HANDLER FndStoDev HANDLER NIL PStoDev PopFlName PushBoolean UndefFileName boolean false true }
PSDevStatus		language/stodevsupport.c	/^public procedure PSDevStatus()/ ;" function 23 { }	{ FndStoDev NIL PStoDev PopFlName PushBoolean PushInteger StoDevAttributes false true }
PSDeviceInfo		graphics/graphics.c	/^public procedure PSDeviceInfo() {/ ;" function 14 { }	{ AddIntEntry AddRealEntry AddStringEntry DictP LNullObj PushP RealDIArgs SetDictAccess Undefined gs nullObj rAccess }
PSDeviceInit		device/devinit.c	/^public procedure PSDeviceInit()/ ;" function 17 { Mnextmain }	{ IniDevCommon IniFmDevImpl IniGenDevImpl IniMaskDevImpl IniMpdDevImpl IniNullDevImpl IniPreBuiltChars IniWdDevImpl InitMaskCache InitPatternImpl SIZE_FONT_CACHE SIZE_MASKS integer ps_getsize }
PSDfMtx		graphics/graphics.c	/^public procedure PSDfMtx()/ ;" function 8 { }	{ AryObj DfMtx Mtx PopPArray PushPMtx }
PSDict		language/dict.c	/^public procedure PSDict()/ ;" function 6 { }	{ DictObj DictP PopLimitCard PushP }
PSDictGetPObj		postscript/customops.c	/^public procedure PSDictGetPObj(dict, str, type, va/ ;" function 16 { DecodePixelDict ExtractBoolean ExtractInt }	{ DictGetP MakePName NameObj PSOperandType PSTypeCheck TypeCheck TypeOfObj dictObj }
PSDictGetTestPObj		postscript/customops.c	/^public boolean PSDictGetTestPObj(dict, str, type, / ;" function 19 { ExtractBooleanDefault }	{ DictGetP DictTestP MakePName NameObj PSOperandType PSTypeCheck TypeCheck TypeOfObj dictObj false true }
PSDictStack		language/stack.c	/^public procedure PSDictStack()/ ;" function 7 { }	{ ArrayFromStack AryObj PopPArray PushP dictStk }
PSDisplayVM		vm/vm_memory.c	/^private procedure PSDisplayVM()/ ;" function 7 { Init_VM_Memory }	{ DisplayVMSection os_fprintf os_stderr vmPrivate vmShared }
PSDissolve		product/windowgraphics.c	/^private procedure PSDissolve()/ ;" function 19 { }	{ Cd CompositePriv DISSOLVE OPAQUE PPSGState PSPopGState PSPopPCd PSPopPReal RRoundP real }
PSDiv		language/math.c	/^public procedure PSDiv() {/ ;" function 30 { }	{ Object PopP PushPReal RealEq0 TypeCheck UndefResult extended intObj integer r real realObj }
PSDumpNames		language/name.c	/^public procedure PSDumpNames()/ ;" function 37 { NameInit }	{ LStrObj MAXEntries NIL PNameEntry PrintSOP StrObj integer os_printf rootShared }
PSDumpWindow		product/windowops.c	/^private procedure PSDumpWindow()/ ;" function 12 { }	{ ID2Layer LPrintOn Layer PSPopInteger }
PSDumpWindows		product/windowops.c	/^private procedure PSDumpWindows()/ ;" function 14 { }	{ LPrintOn PSPopInteger PWindowDevice Wd2Layer window windowBase }
PSDup		language/stack.c	/^public procedure PSDup()/ ;" function 8 { }	{ Overflow RecyclerPush Underflow opStk }
PSEExec		language/stream.c	/^public procedure PSEExec()/ ;" function 52 { KAEexec }	{ Begin CStmRndNum ConditionalInvalidateRecycler CurrentShared DURING Decrypt END_HANDLER EOF EPushP GetStream HANDLER HandlePendingEOL IntObj InvlAccess KEYHASH LimitCheck Lobj MakeDecryptionStm MakePStm NIL NOTHEX Object PSError PopP RERAISE SetShared Stm StrStmCreate TypeCheck VMGetElem Xobj boolean cStmHexProcs false fclose getc hexToBinary integer invlflaccess lenIV longcardinal r rAccess register rootShared rpStreamKey stmObj strObj true ungetc xAccess }
PSEOClip		graphics/graphics.c	/^public procedure PSEOClip() {Clip(true);}/ ;" function 1 { }	{ Clip true }
PSEOFill		graphics/pathops.c	/^public procedure PSEOFill()  {Fill(&gs->path, true/ ;" function 1 { }	{ Fill NewPath gs true }
PSEOViewClip		graphics/viewclip.c	/^public procedure PSEOViewClip() { NewViewClip(&gs-/ ;" function 1 { }	{ NewViewClip gs true }
PSEcho		language/stodevedit.c	/^private procedure PSEcho(b)/ ;" function 6 { StoDevEditInit }	{ NIL PVoidProc PopBoolean WriteContextParam boolean echo integer }
PSEnd		language/dict.c	/^public procedure PSEnd()/ ;" function 6 { }	{ End PSError dictStk dstkunderflow nPermDictEntries }
PSEntry		product/pscontext.c	/^static NSContextType PSEntry =/ ;" global 15 { InitPSContextType }	{ }
PSEq		language/math.c	/^public procedure PSEq() {/ ;" function 6 { }	{ Equal Object PopP PushBoolean }
PSErasePage		graphics/graphics.c	/^public procedure PSErasePage()/ ;" function 8 { PSSetDevice }	{ GRstr GSave SetGray fpOne gs real }
PSErodeSW		fonts/fontbuild.c	/^public procedure PSErodeSW() {/ ;" function 5 { }	{ ErodeSW PopPReal gs pflttofix real true }
PSError		language/exec.c	/^public procedure PSError(e) NameObj e;/ ;" function 5 { CountToMark CreateFileStm FInvlAccess FilterRegion InvalidContext InvlAccess InvlFont NoCurrentPoint PSClrToMrk PSCvI PSCvR PSEExec PSEnd PSExit PSFile PSLimitCheck PSRangeCheck PSRenameFile PSTypeCheck PSUPath PSUndefFileName PSUndefResult PSUndefined PSUnregistered PathForAll PutInDict RdcStrkTermMark RstrToLevel StmToken StreamError Underflow VMERROR }	{ NULL PS_ERROR RAISE psERROR }
PSExCheck		fonts/fontbuild.c	/^private procedure PSExCheck() {/ ;" function 11 { }	{ Object PopP PushBoolean arrayObj boolean false pkdaryObj stmObj strObj xAccess }
PSExch		language/stack.c	/^public procedure PSExch()/ ;" function 11 { }	{ Object Underflow opStk register }
PSExec		language/exec.c	/^public procedure PSExec()/ ;" function 5 { }	{ ExecPushP Object PopP }
PSExecOpNm		graphics/userpath.c	/^private boolean PSExecOpNm(name) NameObj name; {/ ;" function 9 { PSUPath }	{ CmdObj DictGetP PS_EXIT SetAbort false integer rootShared true }
PSExecStack		language/stack.c	/^public procedure PSExecStack()/ ;" function 7 { }	{ ArrayFromStack AryObj PopPArray PushP execStk }
PSExecUserObj		language/exec.c	/^public procedure PSExecUserObj() {/ ;" function 16 { }	{ DictTestP ExecPushP LNullObj Object PopInteger PushP RangeCheck VMGetElem Xobj integer languageNames rootPrivate true }
PSExecuteObject		postscript/customops.c	/^public boolean PSExecuteObject(pobj) PObject pobj;/ ;" function 3 { PSReadImage SendEvent }	{ }
PSExecuteOperator		postscript/customops.c	/^public procedure PSExecuteOperator(index) integer / ;" function 15 { }	{ DictGetP LNameObj Lobj NIL Object PNameArrayBody PNameEntry PSUndefined RAISE cmdObj cmds rootShared }
PSExecuteString		postscript/customops.c	/^public boolean PSExecuteString(sP) char *sP; {/ ;" function 3 { }	{ MakeXStr string }
PSExit		language/exec.c	/^public procedure PSExit()/ ;" function 37 { ExecInit }	{ Assert CRun CantHappen EPopP EPushP MonitorExit NIL NULL Object PSError PS_EXIT RAISE UnwindExecStk discard integer invlexit mrk1Arg mrk2Args mrk4Args mrkExec mrkMonitor mrkRun mrkStopped true }
PSExp		language/math.c	/^public procedure PSExp()/ ;" function 8 { }	{ PopPReal PushPReal real }
PSFCCheck		fonts/fontcache.c	/^private procedure PSFCCheck()/ ;" function 4 { FontCacheInit }	{ PopBoolean fcCheck }
PSFCDebug		fonts/fontcache.c	/^private procedure PSFCDebug()/ ;" function 4 { FontCacheInit }	{ PopBoolean fcdebug }
PSFCEntry		fonts/fontspriv.h	/^typedef struct _SFCEntry {/ ;" typedef 10 { FreeSelectFont InitSFCache InsertSelectFont PurgeSFForKey PurgeSFForMID SearchSelectFont pSFC }	{ }
PSFCache		fonts/fontspriv.h	/^typedef struct {/ ;" typedef 7 { InitSFCache }	{ }
PSFILEtype		fonts/fontspriv.h	/^#define PSFILEtype 4/ ;" macro 1 { BuildChar }	{ }
PSFilPos		language/stodevsupport.c	/^public procedure PSFilPos()	\/* fileposition *\// ;" function 10 { }	{ GetStream HandlePendingEOL PopPStream PushInteger Stm StmObj StreamError ftell integer }
PSFile		language/stream.c	/^public procedure PSFile()/ ;" function 10 { }	{ CreateFileStream PSError PopPRString PushP StmObj StrObj StringText character invlflaccess maxAcc }
PSFileNameForAll		language/stodevsupport.c	/^public procedure PSFileNameForAll()/ ;" function 26 { }	{ FFAAction FFAArgs FndStoDev InvlAccess NIL PStoDev PopFlName PopPArray PopPString StoDevGetNext boolean wAccess }
PSFilePath		product/miscops.c	/^private procedure PSFilePath()/ ;" function 14 { }	{ FilePathSearch PSObject PSPopTempObject PSPushObject }
PSFill		graphics/pathops.c	/^public procedure PSFill()  {Fill(&gs->path, false)/ ;" function 1 { }	{ Fill NewPath false gs }
PSFillWindow		product/windowgraphics.c	/^private procedure PSFillWindow()/ ;" function 15 { }	{ ID2Layer ID2Wd LFill Layer NULL PSInvalidID PSPopInteger PSRangeCheck WindowDevice integer }
PSFindWindow		product/windowops.c	/^private procedure PSFindWindow()/ ;" function 31 { }	{ Cd ID2Layer LFind Layer Layer2Wd NULL PSPopInteger PSPushBoolean PSPushInteger PSPushPCd PSRangeCheck PopIntCoord ScreenToBase false remapY true }
PSFloor		language/math.c	/^public procedure PSFloor()/ ;" function 13 { }	{ Object PObject PopP PushP PushPReal TypeCheck intObj r real realObj register }
PSFls		language/stream.c	/^public procedure PSFls()/ ;" function 4 { }	{ StreamError fflush os_stdout }
PSFlsFile		language/stream.c	/^public procedure PSFlsFile()/ ;" function 8 { }	{ GetStream PopPStream Stm StmObj StreamError false fflush }
PSFltnPth		graphics/pathops.c	/^public procedure PSFltnPth()/ ;" function 7 { }	{ FltnPth Path RemPathRef flatEps gs }
PSFlushCache		fonts/fontcache.c	/^private procedure PSFlushCache() {/ ;" function 14 { FontCacheInit }	{ FlushMID MID MIDNULL MT PushBoolean false forallMS true }
PSFlushFontCache		fonts/cicache.c	/^public procedure PSFlushFontCache() {/ ;" function 11 { }	{ CIOffset MIDNULL PCIItem PurgeFSCache ReleaseCI Vmem forallCI register }
PSFlushGraphics		product/windowgraphics.c	/^private procedure PSFlushGraphics()/ ;" function 5 { }	{ CheckWindow LFlushBits NULL PSGetDevice Wd2Layer }
PSFlushMasks		fonts/cicache.c	/^public integer PSFlushMasks(needed, maskID) intege/ ;" function 44 { BMAlloc MCGetMask ShrinkBM }	{ Assert CI CINULL CIOffset CISortedList CheckCI MID MIDCount MaxMCount PCIItem ReleaseCI RelinkCIItem SortCharAges Vmem false freemem integer register }
PSFlushUCache		graphics/ucache.c	/^private procedure PSFlushUCache() {/ ;" function 5 { PSNormalUCache }	{ CheckUCache FreeRdc NULL lruOldest }
PSFontRun		fonts/fontrun.c	/^public procedure PSFontRun()/ ;" function 104 { }	{ ActOnKeyword Cleanup CountStack CurrentShared DURING DetermineFormat END_HANDLER ETopP GetStream HANDLER IPopDiscard IPush Lobj MAXcardinal NULL NewState Object PFontrunState PSRun RAISE RERAISE SetShared StmToken StrObj TopP TypeCheck Xobj boolean cardinal charptr cmdObj dictStk false fseek nameObj opStk os_sureCalloc strObj true }
PSFor		language/exec.c	/^public procedure PSFor()/ ;" function 34 { }	{ AryObj EPushInteger EPushP EPushPReal ExecPushP Object PopPArray PopPNumber integer intforcmd real realObj realforcmd }
PSForAll		language/type.c	/^public procedure PSForAll()/ ;" function 17 { }	{ AryForAll AryObj DictForAll Object PopP PopPArray StrForAll TypeCheck arrayObj dictObj pkdaryObj strObj }
PSFork		postscript/contextimpl.c	/^public procedure PSFork () {/ ;" function 56 { }	{ Assert CopyStack CountStack CountToMark CreateContext DURING DebugAssert END_HANDLER GStackCopy GetObjFormat HANDLER InvalidContext InvlAccess LimitCheck MAXCard16 NIL NotifyPSContext Object PGState PSClrToMrk PSContext PSMakeRunnable PSNewContextStms PStack PushInteger RERAISE SetObjFormat Stm SwitchPSContext TopP TypeCheck Underflow arrayObj boolean cardinal currentPSContext dictStk forkStartup gs integer level opStk pkdaryObj xAccess }
PSFrameBuffer		product/windowops.c	/^private procedure PSFrameBuffer()/ ;" function 24 { }	{ NXDevice NXDriver PSLimitCheck PSObject PSPopTempObject PSPushInteger PSPushObject PopNaturalMax deviceCount deviceList mapIntToExtDepths remapY strcpy strlen }
PSGCStats		vm/gcmisc.c	/^private procedure PSGCStats()/ ;" function 13 { GCInternal_Init }	{ GC_PData cacheHits lookups os_printf register vmCurrent }
PSGState		graphics/gstates.c	/^public procedure PSGState()/ ;" function 17 { }	{ AllocGenericObject CurrentShared FInvlAccess GSAddRefs GSHasPrivateStuff GState GenericBody Object PGState PushP Undefined gs header objGState }
PSGe		language/math.c	/^public procedure PSGe()/ ;" function 2 { }	{ LGt Object PopP PushBoolean boolean }
PSGet		language/type.c	/^public procedure PSGet()/ ;" function 26 { }	{ AGetP CardFromOb DictGetP IPopOp IPush InvlAccess Object PushInteger RangeCheck TypeCheck VMGetChar arrayObj cardinal dictObj integer opStk pkdaryObj rAccess strObj }
PSGetClip		postscript/customops.c	/^public boolean PSGetClip(clip) DevPrim **clip; {/ ;" function 4 { CompositePriv MarkNextImage }	{ DevClipIsRect GetDevClipPrim }
PSGetDevice		postscript/customops.c	/^public PDevice PSGetDevice(p) PPSGState p; {/ ;" function 4 { CheckWindow CompositePriv CurWindowID GetBoundsPopCd GlobalToLocal LocalToGlobal MarkNextImage PSAdjustMouse PSClearNRect PSFlushGraphics PSHideInstance PSNewInstance PSReadImage PSScreenToBase PSSetExposureColor PSSetMouse PSSetNRect PSSizeImage SetGSCursor }	{ NULL PGState gs p }
PSGetEvents		product/event.c	/^private procedure PSGetEvents()/ ;" function 41 { }	{ BeginFlush DURING DispatchEvents END_HANDLER EndFlush FlushRedrawRects HANDLER RERAISE TimedEvent YieldReason currentPSContext eventErrorPending eventGlobals eventPort flushExposures scheduler }
PSGetFrontWindow		product/windowops.c	/^private procedure PSGetFrontWindow()/ ;" function 4 { }	{ GetFrontWindowDevice PSPushInteger }
PSGetGStateExt		postscript/customops.c	/^public char *PSGetGStateExt(p) PPSGState p; {/ ;" function 4 { InitGraphics LCompositeFrom LInitPage LMark MP12MarkDataAndAlpha PSCurrentAlpha PSSetAlpha PSSetGrayPattern PSSetInstance SetWindow WdConvertColor WdDefaultMtx }	{ NULL PGState gs p }
PSGetInterval		language/type.c	/^public procedure PSGetInterval()/ ;" function 29 { }	{ IPopOp IPush InvlAccess Object PopCardinal RangeCheck SubPArray SubPString TypeCheck arrayObj cardinal opStk pkdaryObj rAccess strObj }
PSGetMarkInfo		postscript/customops.c	/^public void PSGetMarkInfo(p, info) PPSGState p; De/ ;" function 9 { CompositePriv DecodePixelDict LCopyBitsFrom LCopyContents LPromoteLayer LSetDepthLimit LSetExposureColor MarkNextImage }	{ NULL PGState gs p }
PSGetMatrix		postscript/customops.c	/^public PMtx PSGetMatrix(p) PPSGState p; {/ ;" function 4 { CompositePriv MarkNextImage PSAdjustCursor PSAdjustMouse PSBaseToCurrent PSCurrentToBase PSCurrentToScreen PSHideInstance PSReadImage PSScreenToCurrent PSSetMouse PSSetNRect PSSizeImage SetGSCursor }	{ NULL PGState gs p }
PSGetObjectType		postscript/customops.c	/^public PSOperandType PSGetObjectType(pobj) PObject/ ;" function 4 { PSSetWindowDict SendEvent }	{ TypeOfObj integer }
PSGetOperandType		postscript/customops.c	/^public PSOperandType PSGetOperandType() {/ ;" function 4 { PSPopManagedObject PSPopTempObject PSReadImage PopIntCoord PopIntValue }	{ TypeOfObj Underflow opStk }
PSGetTfrFcn		postscript/customops.c	/^public DevTfrFcn *PSGetTfrFcn()/ ;" function 9 { MarkNextImage }	{ ActivateTfr NULL gs }
PSGetWindowEventMask		product/windowops.c	/^private procedure PSGetWindowEventMask()/ ;" function 4 { }	{ ID2Wd PSPopInteger PSPushInteger }
PSGt		language/math.c	/^public procedure PSGt()/ ;" function 2 { }	{ LGt Object PopP PushBoolean }
PSHandleExecError		postscript/customops.c	/^public procedure PSHandleExecError() {/ ;" function 4 { DecodePixelDict }	{ NIL RAISE }
PSHideInstance		product/windowgraphics.c	/^private procedure PSHideInstance()/ ;" function 8 { }	{ Bounds CheckWindow LHideInstance NULL PSGetDevice PSGetMatrix PopBounds Wd2Layer }
PSIDTfm		graphics/matrix.c	/^public procedure PSIDTfm()/ ;" function 20 { }	{ Cd IDTfmP IDTfmPCd Mtx Object PCd PopMtx PopPCd PushPCd TopP arrayObj pkdaryObj register }
PSIDiv		language/math.c	/^public procedure PSIDiv()/ ;" function 8 { }	{ MINinteger PopInteger PushInteger UndefResult integer }
PSITfm		graphics/matrix.c	/^public procedure PSITfm()/ ;" function 20 { }	{ Cd ITfmP ITfmPCd Mtx Object PCd PopMtx PopPCd PushPCd TopP arrayObj pkdaryObj register }
PSIdentMtx		graphics/matrix.c	/^public procedure PSIdentMtx()/ ;" function 8 { }	{ AryObj IdentityMtx Mtx PopPArray PushPMtx }
PSIf		language/exec.c	/^public procedure PSIf()/ ;" function 6 { }	{ AryObj ExecPushP PopBoolean PopPArray }
PSIfElse		language/exec.c	/^public procedure PSIfElse()/ ;" function 7 { }	{ AryObj ExecPushP PopBoolean PopPArray }
PSImage		graphics/image.c	/^public procedure PSImage() {/ ;" function 10 { }	{ DEVGRAY_COLOR_SPACE DoImage ImageDict Object TopP dictObj false integer }
PSImageMask		graphics/image.c	/^public procedure PSImageMask() {/ ;" function 3 { }	{ DEVGRAY_COLOR_SPACE DoImage false integer true }
PSInEOFill		graphics/hitdetect.c	/^public procedure PSInEOFill() { PushBoolean(InFill/ ;" function 1 { }	{ InFill PushBoolean true }
PSInFill		graphics/hitdetect.c	/^public procedure PSInFill() { PushBoolean(InFill(f/ ;" function 1 { PSInUStroke }	{ InFill PushBoolean false }
PSInStroke		graphics/hitdetect.c	/^public procedure PSInStroke() { PushBoolean(InStro/ ;" function 1 { }	{ InStroke PushBoolean }
PSInUEOFill		graphics/hitdetect.c	/^public procedure PSInUEOFill() { PushBoolean(InUFi/ ;" function 1 { }	{ InUFill PushBoolean true }
PSInUFill		graphics/hitdetect.c	/^public procedure PSInUFill() { PushBoolean(InUFill/ ;" function 1 { }	{ InUFill PushBoolean false }
PSInUStroke		graphics/hitdetect.c	/^public procedure PSInUStroke() { \/* temporary impl/ ;" function 30 { }	{ AryObj Cd CheckForMtx DevPrim DisposeDevPrim GRstr GSave GetUsrPthAry Mtx NULL Object PSInFill PSUStrokePath PointInDevPrim PopMtx PopPCd PushBoolean PushP PushPCd TopP UCGetDevPrim UserPathContext arrayObj boolean false pkdaryObj true }
PSIndex		language/stack.c	/^public procedure PSIndex()/ ;" function 10 { }	{ Object PopCardinal PushP Underflow opStk register }
PSInitEvents		product/event.c	/^private procedure PSInitEvents()/ ;" function 28 { }	{ MousePSContext NXDevice PCard32 PSLimitCheck PSSetRealClockAddress currentPSContext d deviceList eventGlobals eventPort wsBounds }
PSInitFontCache		fonts/fontdisk.c	/^private procedure PSInitFontCache()/ ;" function 9 { FontDiskInit }	{ InitFontCache LimitCheck MAXCISize MAXMID PopInteger integer }
PSInitMakeVM		postscript/initmakevm.c	/^public PVoidProc PSInitMakeVM()/ ;" function 5 { }	{ InitMakeVM RgstPARelocator }
PSInitViewClip		graphics/viewclip.c	/^public procedure PSInitViewClip() {/ ;" function 3 { }	{ TermViewClip curVC true }
PSInitWrite		fonts/fontbuild.c	/^private procedure PSInitWrite() {/ ;" function 27 { }	{ Encrypt GetStream InitRnum OutputEnc PopInteger PopPStream Rnum8 Stm StmObj StrObj charsInLine cipher clear lenIV r rndnum rndnumIV }
PSIntDict		fonts/fontbuild.c	/^public procedure PSIntDict()        \/* internaldic/ ;" function 16 { FontBuildInit }	{ INTERNALKEY InvlAccess KEYHASH NIL Object PopP PushP intObj opStk rootInternalDict }
PSInvalidID		postscript/customops.c	/^public procedure PSInvalidID() {RAISE(ecInvalidID,/ ;" function 1 { CheckWindow CheckWindowDev ClearWdNRect CompositePriv CurWindowID GetFrontWindowDevice ID2Layer ID2PrevWd ID2Wd LMark LOrder MarkNextImage PSClearNRect PSCurrentWaitCursorEnabled PSCurrentWindowDepth PSCurrentWindowDepthLimit PSCurrentWindowLevel PSFillWindow PSOrderWindow PSSetActiveApp PSSetNRect PSSetOwner PSSetWaitCursorEnabled PSSetWindowDepthLimit PSSetWindowLevel SendEvent SetWindowDevice TermWindow }	{ NIL RAISE ecInvalidID }
PSInvertMtx		graphics/matrix.c	/^public procedure PSInvertMtx()/ ;" function 9 { }	{ AryObj Mtx MtxInvert PopMtx PopPArray PushPMtx }
PSJoin		postscript/contextimpl.c	/^public procedure PSJoin () {/ ;" function 31 { }	{ ContextID CopyStack IDToPSContext InnerNotify InvalidContext NIL PSContext PSMakeRunnable PopInteger PushP WaitOnJoinable currentPSContext false iLMarkObj level opStk true }
PSKShow		fonts/fontshow.c	/^public procedure PSKShow()/ ;" function 10 { }	{ BEGINSHOW ENDSHOW FMapNone InvlFont PopPArray PopPString ShowInternal gs ssr true }
PSKernelContext		include/postscript.h	/^typedef struct _t_PSKernelContextRec *PSKernelCont/ ;" typedef 1 { CreateContext }	{ }
PSKernelContextRec		postscript/contextimpl.c	/^ typedef struct _t_PSKernelContextRec {/ ;" typedef 30 { CreateContext }	{ }
PSKnown		language/dict.c	/^public procedure PSKnown()/ ;" function 7 { }	{ DictObj Known Object PopP PopPDict PushBoolean d }
PSLBrak		language/scanner.c	/^private procedure PSLBrak()/ ;" function 6 { ScannerInit }	{ LMarkObj MarkObj PushP }
PSLIB		include/package_specs.h	/^#define PSLIB		"pslib.h"/ ;" macro 1 { }	{ }
PSLIB_H		include/pslib.h	/^#define	PSLIB_H/ ;" macro 1 { }	{ }
PSLIntObj		postscript/customops.c	/^public Object PSLIntObj(value) long int value; {/ ;" function 5 { PSScreenList PSWindowList }	{ LIntObj Object }
PSLNullObj		postscript/customops.c	/^public Object PSLNullObj() {/ ;" function 5 { PSCurrentEventProcedures PSCurrentWindowDict }	{ LNullObj Object }
PSLck		fonts/fontbuild.c	/^public procedure PSLck()/ ;" function 7 { }	{ Cd LockCd PopPCd PushPCd }
PSLe		language/math.c	/^public procedure PSLe()/ ;" function 2 { }	{ LGt Object PopP PushBoolean boolean }
PSLength		language/type.c	/^public procedure PSLength()/ ;" function 21 { }	{ DictLength IPopOp InvlAccess NameToPString Object PushInteger TypeCheck arrayObj cardinal dictObj integer nameObj pkdaryObj rAccess strObj }
PSLimitCheck		vm/vm.c	/^public procedure PSLimitCheck() {PSError(limitchec/ ;" function 1 { CheckInListenPort CreateIPCStreams CreateNewContext GrowPool IPCInitializeStm LimitCheck NSCreatePS NSCreateWB PSFrameBuffer PSInitEvents PSListener PSReadImage PSSetBootstrapPort PSSetWindowType ReceiveNextImage SafeMalloc Scheduler WLExpand mpdInitPage os_newpool }	{ PSError limitcheck }
PSLineTo		graphics/pathbuild.c	/^public procedure PSLineTo() / ;" function 7 { }	{ Cd LineTo PopPCd TfmPCd gs }
PSListener		product/listener.c	/^private procedure PSListener()/ ;" function 36 { }	{ Code ContextYield CreateNewContext DURING END_HANDLER HANDLER PSLimitCheck PublicListenPort YieldReason _SchedulerMsg currentPSContext globalUserSet listenContext listenPort listenRestart loginContextSet os_fprintf os_stderr signaturePort }
PSLn		language/math.c	/^public procedure PSLn()/ ;" function 8 { }	{ PopPReal PushPReal RangeCheck RealLe0 real }
PSLoad		language/dict.c	/^public procedure PSLoad()/ ;" function 16 { }	{ ILoadPNE KeyName Load Object PNameEntry PopP PushP Undefined false nameObj register stackRstr }
PSLock		postscript/contextimpl.c	/^public procedure PSLock () {/ ;" function 5 { }	{ NewLock Object PushP }
PSLog		language/math.c	/^public procedure PSLog()/ ;" function 8 { }	{ PopPReal PushPReal RangeCheck RealLe0 real }
PSLoginExit		product/listener.c	/^private procedure PSLoginExit()/ ;" function 5 { }	{ currentPSContext scheduler }
PSLoop		language/exec.c	/^public procedure PSLoop()/ ;" function 7 { }	{ AryObj EPushP ExecPushP PopPArray loopcmd }
PSLt		language/math.c	/^public procedure PSLt()/ ;" function 2 { }	{ LGt Object PopP PushBoolean }
PSMStats		product/miscops.c	/^private procedure PSMStats()/ ;" function 7 { }	{ DumpMappedFiles }
PSMachPortDevice		product/machportdevice.c	/^private PDevice PSMachPortDevice() / ;" function 106 { MpdDevInit }	{ CarefulFree DCPixelArgs DURING DecodeBbox DecodePixelDict DevFreeHalftone DevLBounds DevShort END_HANDLER HANDLER MachPortDevice NULL New PSPopInteger PSPopPMtx PSRangeCheck PSSetDevice PopMallocString RERAISE SetFmDeviceMetrics SetPrinterContext currentPSContext d mpdProcs printf scheduler true }
PSMakeFont		fonts/fontshow.c	/^public procedure PSMakeFont()/ ;" function 9 { }	{ DictObj MakeFont Mtx PopMtx PopPDict PushP }
PSMakeRunnable		product/pscontext.c	/^public procedure PSMakeRunnable(PSContext context)/ ;" function 4 { CreatePSContext InnerNotify PSDetach PSFork PSJoin PSResetUser ReleaseLock TerminatePSSpace }	{ scheduler true }
PSMakeVM		vm/makevm.c	/^private procedure PSMakeVM()/ ;" function 77 { InitMakeVM }	{ ForceUnDef MakePName NEW NameObj Object PCard8 PDictBody PSPopInteger PopPString SetShared SetVMSegmentType Stm StrObj TopP TypeCheck VMGetText VMSetROMAlloc VM_Usage WriteRelocatedVMToFile WriteVMToFile boolean false fflush intObj integer os_cleanup os_printf os_stdout rootShared s stVolatileRAM strObj string true vVMSPLIT vmPrivate vmShared }
PSMark		language/stack.c	/^public procedure PSMark()/ ;" function 6 { PSUCacheStatus SendEvent }	{ LMarkObj Object PushP }
PSMaxLength		language/dict.c	/^public procedure PSMaxLength()/ ;" function 9 { }	{ DictObj InvlAccess PDictBody PopPDict PushCardinal XlatDictRef d rAccess }
PSMkTemp		unix_product/unix.c	/^private procedure PSMkTemp()/ ;" function 16 { }	{ PopPString PushP RangeCheck StrObj VMGetText VMPutText character }
PSMod		language/math.c	/^public procedure PSMod()/ ;" function 9 { }	{ Object PopP PushInteger TypeCheck UndefResult intObj }
PSMonitor		postscript/contextimpl.c	/^public procedure PSMonitor () {/ ;" function 19 { }	{ AcquireLock EPushP InvlAccess Object PCondition PLock PSContext PopP TypeCheck arrayObj currentPSContext escObj monitorcmd objLock pkdaryObj xAccess }
PSMoveTo		graphics/pathbuild.c	/^public procedure PSMoveTo() / ;" function 7 { }	{ AddToPath Cd PopPCd TfmPCd gs pathstart }
PSMoveWindow		product/windowops.c	/^private procedure PSMoveWindow()/ ;" function 46 { }	{ BASEPSWINDOWID Bounds GetTLWinBounds ID2Wd LMoveTo NRect NULL OFFSETBOUNDS PSPopInteger PSRangeCheck PWindowDevice Point PopIntCoord RecalcMouseRect WINDOWLIMIT eventGlobals false os_fprintf os_stderr p remapY }
PSMtx		graphics/matrix.c	/^public procedure PSMtx()/ ;" function 9 { }	{ AllocPArray AryObj IdentityMtx Mtx PushPMtx ReclaimRecyclableVM }
PSMul		language/math.c	/^public procedure PSMul() {/ ;" function 39 { }	{ MAXinteger MINinteger Object PopP PushInteger PushPReal TypeCheck extended intObj integer r real realObj }
PSNProbeStats		language/name.c	/^private procedure PSNProbeStats()/ ;" function 11 { NameInit }	{ Maxprobe NIL Ncomp Nsearch PNameEntry PushInteger integer rootShared }
PSNe		language/math.c	/^public procedure PSNe()/ ;" function 2 { }	{ Equal Object PopP PushBoolean boolean }
PSNeg		language/math.c	/^public procedure PSNeg()/ ;" function 15 { }	{ MINinteger Object PopP PushInteger PushPReal TypeCheck intObj r real realObj }
PSNewContextStms		product/pscontext.c	/^public boolean PSNewContextStms(Stm *in, Stm *out)/ ;" function 11 { PSFork }	{ Stm StmCreate StmProcs closedStmProcs currentPSContext ipcStmProcs stmRef }
PSNewInstance		product/windowgraphics.c	/^private procedure PSNewInstance()/ ;" function 5 { }	{ CheckWindow LNewInstance NULL PSGetDevice Wd2Layer }
PSNextImage		product/windowimage.c	/^private procedure PSNextImage()/ ;" function 4 { }	{ MarkNextImage PSPopInteger }
PSNoAccess		language/type.c	/^public procedure PSNoAccess()/ ;" function 24 { }	{ IPop Object PushP SetDictAccess TypeCheck arrayObj dictObj escObj nAccess objGState opStk pkdaryObj stmObj strObj }
PSNormalUCache		graphics/ucache.c	/^private procedure PSNormalUCache() {/ ;" function 11 { PSTinyUCache }	{ BMAX NIL PMAX PSFlushUCache RMAX SIZE_UPATH_CACHE WriteContextParam blimit bmax integer pmax ps_getsize rmax }
PSNot		language/math.c	/^public procedure PSNot()/ ;" function 11 { }	{ Object PopP PushP TypeCheck boolObj intObj }
PSNotify		postscript/contextimpl.c	/^public procedure PSNotify () {/ ;" function 8 { }	{ InnerNotify Object PopP TypeCheck escObj objCond }
PSObject		include/customops.h	/^typedef struct _t_PSObject {/ ;" typedef 16 { DecodeBbox DecodePixelDict PSCurrentEventProcedures PSCurrentWindowDict PSFilePath PSFrameBuffer PSReadImage PSResetUser PSScreenList PSSetBootstrapPort PSSizeImage PSWindowList SendEvent }	{ }
PSOffsetFill		graphics/pathpriv.c	/^private procedure PSOffsetFill()/ ;" function 8 { IniPathPriv }	{ NewPath OffsetFill PopPReal gs pflttofix real }
PSOpDef		vm/rgstcmds.c	/^private procedure PSOpDef()  \/* opdef *\// ;" function 23 { Init_Cmds }	{ AnyAryObj Def FindOpDef InvlAccess Load NameObj Object OpDefEntry OpDefProc PopP PopPArray PutCmd RgstDynamicCmd TypeCheck Xobj cmdObj integer nameObj rAccess true xAccess }
PSOperandType		include/customops.h	/^typedef enum {/ ;" typedef 20 { PSDictGetPObj PSDictGetTestPObj PSPopManagedObject PSPopTempObject TypeOfObj }	{ }
PSOr		language/math.c	/^public procedure PSOr()/ ;" function 10 { }	{ Object PopBoolean PopInteger PopP PushBoolean PushInteger TypeCheck boolObj boolean intObj }
PSOrderWindow		product/windowops.c	/^private procedure PSOrderWindow()/ ;" function 64 { }	{ ABOVE BASEPSWINDOWID BELOW ID2Layer ID2Wd JUST_RIGHT LOrder Layer NOT_ON_SCREEN NULL OUT PSInvalidID PSPopInteger PSRangeCheck RecalcMouseRect SubList TOO_HIGH TOO_LOW WLBelowButNotBelow WindowDevice checkOrderingValdity eventGlobals false highestWindowInTier level lowestWindowInTier }
PSPathBBox		graphics/pathops.c	/^public procedure PSPathBBox() {/ ;" function 5 { }	{ Cd GetPathBBoxUserCds PushPCd }
PSPathForAll		graphics/pathops.c	/^public procedure PSPathForAll() { PathForAll(true)/ ;" function 1 { }	{ PathForAll true }
PSPkdary		language/packedarray.c	/^public procedure PSPkdary()/ ;" function 17 { }	{ Pkdary PkdaryObj PopCardinal PushP cardinal }
PSPlaceWindow		product/windowops.c	/^private procedure PSPlaceWindow()/ ;" function 43 { }	{ BASEPSWINDOWID Bounds HEIGHTSANITY ID2Wd LPlaceAt PSPopInteger PSRangeCheck PWindowDevice PopIntCoord RecalcMouseRect WBCList WBChangeBitmap WBContext WIDTHSANITY WINDOWLIMIT eventGlobals false remapY }
PSPlaySound		product/miscops.c	/^private procedure PSPlaySound()/ ;" function 28 { }	{ FilePathSearch PSPopInteger PSPopString PSStringLength SND_SUFFIX SND_SUFFIX_LENGTH strcmp }
PSPop		language/stack.c	/^public procedure PSPop() {StackPopDiscard(opStk);}/ ;" function 1 { }	{ StackPopDiscard opStk }
PSPopBoolean		language/type.c	/^public boolean PSPopBoolean()/ ;" function 7 { PSAlphaImage PSReadImage PSSetAutofill PSSetFlushExposures PSSetGCLog PSSetInstance PSSetNRect PSSetNextStepContext PSSetPublicListener PSSetSendExposed PSSetWaitCursorEnabled PSSetWaitEnabled PSSetWriteBlock PopBoolean }	{ IPopSimple Object RecyclerPop TypeCheck boolObj opStk }
PSPopGState		postscript/customops.c	/^public PPSGState PSPopGState() {/ ;" function 9 { PSClearNRect PSComposite PSDissolve PSSetNRect }	{ InvlAccess Object PPSGState PopP TypeCheck escObj gs nullObj objGState rAccess }
PSPopInteger		fonts/fontbuild.c	/^#define PSPopInteger PopInteger/ ;" macro 1 { PSAllocVM PSAlphaImage PSCacheInit PSClearNRect PSCollect PSCountScreenList PSCountWindowList PSCurrentDeviceInfo PSCurrentEventProcedures PSCurrentHowPost PSCurrentMouse PSCurrentOwner PSCurrentWaitCursorEnabled PSCurrentWindowAlpha PSCurrentWindowBounds PSCurrentWindowDepth PSCurrentWindowDepthLimit PSCurrentWindowDict PSCurrentWindowLevel PSDumpWindow PSDumpWindows PSFillWindow PSFindWindow PSGetWindowEventMask PSMachPortDevice PSMakeVM PSMoveWindow PSNextImage PSOrderWindow PSPlaceWindow PSPlaySound PSPostEvent PSPostEventByContext PSRightStillDown PSScreenList PSSetActiveApp PSSetAutofill PSSetCSLimit PSSetCoreLimit PSSetDefaultDepthLimit PSSetEventProcedures PSSetGrayPattern PSSetHowPost PSSetJobUser PSSetLastEventSentTime PSSetMallocDebug PSSetNRect PSSetNextObjectFormat PSSetOFLimit PSSetOwner PSSetSendExposed PSSetThresh PSSetUser PSSetWaitCursorEnabled PSSetWindowDepthLimit PSStillDown PSUnixSignal PopIntCoord PopIntValue PopInteger (etc) }	{ PopInteger }
PSPopManagedObject		postscript/customops.c	/^public PPSObject PSPopManagedObject(type) PSOperan/ ;" function 24 { PSSetEventProcedures PSSetWindowDict }	{ ConditionalInvalidateRecycler DebugAssert ITEMSPERCHUNK ItemChunk ManagedItem NULL PPSObject PSGetOperandType PSOperandType PopP RecycleMI TypeCheck chunkPool chunks integer miFree nullObj os_newelement vmPrivate vmShared }
PSPopPCd		language/type.c	/^public procedure PSPopPCd(pcd)  register PCd pcd;/ ;" function 27 { GetBoundsPopCd PSAdjustCursor PSAdjustMouse PSComposite PSCompositeRect PSDissolve PSScreenToBase PSSetCursor PSSetMouse PSSetWaitCursor PopBounds PopPCd }	{ PObject PopPReal intObj opStk realObj register }
PSPopPMtx		postscript/customops.c	/^public void PSPopPMtx(m) PMtx m; {/ ;" function 3 { PSMachPortDevice }	{ AryObj PAryToMtx PopPArray }
PSPopPReal		fonts/fontbuild.c	/^#define PSPopPReal  PopPReal/ ;" macro 1 { PSDissolve PSPopReal PSSetAlpha PSSetWaitTime PopFixed PopIntCoord PopIntValue PopPReal }	{ PopPReal }
PSPopReal		postscript/customops.c	/^public real PSPopReal() {real r; PSPopPReal(&r); r/ ;" function 1 { }	{ PSPopPReal r real }
PSPopStream		postscript/customops.c	/^public Stm PSPopStream() {/ ;" function 5 { }	{ GetStream PopPStream StmObj s }
PSPopString		postscript/customops.c	/^public void PSPopString(sP, nChars) char *sP; long/ ;" function 6 { PSPlaySound PopMallocString }	{ PopPRString RangeCheck StrObj VMGetText opStk string }
PSPopTempObject		postscript/customops.c	/^public void PSPopTempObject(type, pobj) PSOperandT/ ;" function 6 { DecodeBbox DecodePixelDict PSFilePath PSFrameBuffer PSReadImage PSResetUser PSScreenList PSSetBootstrapPort PSSizeImage PSWindowList }	{ PSGetOperandType PSOperandType PopP TypeCheck }
PSPostEvent		product/event.c	/^private procedure PSPostEvent()/ ;" function 9 { }	{ NXEvent PSPopInteger PSPushBoolean PostEvent popEvent }
PSPostEventByContext		product/event.c	/^private procedure PSPostEventByContext()/ ;" function 9 { }	{ NXEvent NX_POSTEVENTBYCONTEXT PSPopInteger PSPushBoolean PostEvent popEvent }
PSPrObject		fonts/debug.c	/^private procedure PSPrObject()/ ;" function 9 { DebugInit }	{ Object PopP PrintObj calledFromPS false fflush integer os_stdout true }
PSPrValue		fonts/debug.c	/^private procedure PSPrValue()/ ;" function 9 { DebugInit }	{ Object PopP PrintVal calledFromPS false fflush integer os_stdout true }
PSPrint		language/stream.c	/^public procedure PSPrint()/ ;" function 14 { }	{ DURING END_HANDLER HANDLER PopPRString RERAISE RecyclerPop RecyclerPush StrObj fwrite os_stdout }
PSPrintChunks		vm/vm_space.c	/^private procedure PSPrintChunks()/ ;" function 22 { Init_VM_Space }	{ NZchunks Zchunks integer os_printf }
PSProbeStats		language/dict.c	/^private procedure PSProbeStats()/ ;" function 6 { DictInit }	{ Nclash Nmaxprobe Nsearch PushInteger }
PSProf		product/nextmain.c	/^private procedure PSProf()/ ;" function 18 { NextCustomProc }	{ false fflush mntring os_fprintf os_stdout true }
PSPushBoolean		language/type.c	/^public procedure PSPushBoolean(b)  boolean b;/ ;" function 6 { PSButton PSCurrentDeviceInfo PSCurrentNextStepContext PSCurrentWaitCursorEnabled PSCurrentWriteBlock PSFindWindow PSPostEvent PSPostEventByContext PSRightButton PSRightStillDown PSSizeImage PSStillDown PushBoolean }	{ IPushSimple LBoolObj Object opStk }
PSPushInteger		language/type.c	/^public procedure PSPushInteger(i)  integer i;/ ;" function 6 { PSCountFrameBuffers PSCountScreenList PSCountWindowList PSCurrentActiveApp PSCurrentByteCount PSCurrentDefaultDepthLimit PSCurrentDeviceInfo PSCurrentEventTime PSCurrentHowPost PSCurrentMouse PSCurrentOwner PSCurrentRUsage PSCurrentUser PSCurrentWindow PSCurrentWindowAlpha PSCurrentWindowBounds PSCurrentWindowDepth PSCurrentWindowDepthLimit PSCurrentWindowLevel PSFindWindow PSFrameBuffer PSGetFrontWindow PSGetWindowEventMask PSSizeImage PSVMStatus PSWindow PushInteger SendEvent }	{ IPushSimple LIntObj Object opStk }
PSPushObject		postscript/customops.c	/^public void PSPushObject(pobj) PObject pobj; {/ ;" function 3 { DecodePixelDict PSCurrentEventProcedures PSCurrentWindowDict PSFilePath PSFrameBuffer PSReadImage PSResetUser PSScreenList PSWindowList }	{ PushP }
PSPushPCd		language/type.c	/^public procedure PSPushPCd(pcd) PCd pcd;/ ;" function 2 { PSBaseToCurrent PSBaseToScreen PSCurrentToBase PSCurrentToScreen PSFindWindow PSScreenToBase PSScreenToCurrent PushPCd }	{ PushPReal }
PSPushPMtx		postscript/customops.c	/^public void PSPushPMtx(pobj, m) PObject pobj; PMtx/ ;" function 4 { PSSizeImage }	{ MtxToPAry PushP }
PSPushPReal		fonts/fontbuild.c	/^#define PSPushPReal PushPReal/ ;" macro 1 { PSCurrentAlpha PSPushReal PushFixed PushPReal PushReal }	{ PushPReal }
PSPushReal		postscript/customops.c	/^public procedure PSPushReal(r) real r; {PSPushPRea/ ;" function 1 { }	{ PSPushPReal r }
PSPushStream		postscript/customops.c	/^public void PSPushStream(stm, executable) Stm stm;/ ;" function 5 { }	{ MakePStm Object PushP cardinal }
PSPushString		postscript/customops.c	/^public void PSPushString(sP) char *sP; {/ ;" function 5 { }	{ MakeXStr PushP StrObj string }
PSPut		language/type.c	/^public procedure PSPut()/ ;" function 27 { }	{ APut CardFromOb DictPut IPopOp InvlAccess Object RangeCheck TypeCheck VMPutChar arrayObj cardinal character dictObj integer pkdaryObj strObj }
PSPutArray		postscript/customops.c	/^public procedure PSPutArray(a, index, elem)/ ;" function 10 { PSScreenList PSWindowList }	{ ConditionalInvalidateRecycler PSRangeCheck PSTypeCheck VMPutElem arrayObj }
PSPutInterval		language/type.c	/^public procedure PSPutInterval()/ ;" function 48 { }	{ CantHappen DecodeObj Int16 InvlAccess Object PopCardinal PopP PutArray PutString RangeCheck TypeCheck VMPutElem arrayObj cardinal pkdaryObj strObj }
PSQuit		postscript/contextimpl.c	/^public procedure PSQuit()/ ;" function 4 { }	{ NotifyPSContext currentPSContext }
PSR		include/vm.h	/^typedef struct _t_SR *PSR;	\/* Opaque pointer to sa/ ;" typedef 1 { AddressValidAtLevel ProcessSaveData RstrToLevel Save }	{ }
PSRBrak		language/scanner.c	/^private procedure PSRBrak()/ ;" function 7 { ScannerInit }	{ AryObj AryToMrk PushP ReclaimRecyclableVM integer true }
PSRCheck		language/type.c	/^public procedure PSRCheck()/ ;" function 29 { }	{ IPop Object PDictObj PushBoolean TypeCheck XlatDictRef arrayObj boolean dictObj escObj false objGState opStk pkdaryObj rAccess stmObj strObj true }
PSRCurveTo		graphics/pathbuild.c	/^public procedure PSRCurveTo() {/ ;" function 9 { }	{ Cd CurveTo PopPCd RTfmPCd gs }
PSRD		vm/saverestore.h	/^typedef struct _t_SRD {/ ;" typedef 5 { ProcessSaveData RstrDB VMPutDict }	{ }
PSRG		vm/saverestore.h	/^typedef struct _t_SRG {/ ;" typedef 5 { ProcessSaveData RstrGenericObjects VMPutGeneric }	{ }
PSRLineTo		graphics/pathbuild.c	/^public procedure PSRLineTo() / ;" function 7 { }	{ Cd LineTo PopPCd RTfmPCd gs }
PSRMoveTo		graphics/pathbuild.c	/^public procedure PSRMoveTo() / ;" function 8 { }	{ AddToPath Cd CheckCurPt PopPCd RTfmPCd gs pathstart }
PSRO		vm/saverestore.h	/^typedef struct _t_SRO {/ ;" typedef 5 { ProcessSaveData RstrObj saveobj }	{ }
PSRRand		language/math.c	/^public procedure PSRRand() {PushInteger((integer)r/ ;" function 1 { }	{ PushInteger integer randx }
PSRand		language/math.c	/^public procedure PSRand()/ ;" function 8 { }	{ PushInteger RAND_a RAND_m RAND_q RAND_r integer randx register }
PSRangeCheck		vm/vm.c	/^public procedure PSRangeCheck() {PSError(rangechec/ ;" function 1 { DecodeBbox DecodePixelDict ImageTrapsOrRun MP12_Mark MarkNextImage PSAlphaImage PSComposite PSCurrentHowPost PSFillWindow PSFindWindow PSMachPortDevice PSMoveWindow PSOrderWindow PSPlaceWindow PSPutArray PSSetBootstrapPort PSSetDefaultDepthLimit PSSetGrayPattern PSSetHowPost PSSetWindowDepthLimit PSSetWindowLevel PSWindow PopIntCoord PopNaturalMax RangeCheck ReceiveNextImage ScanCompString SetGSCursor ShowInternal os_newpool }	{ PSError rangecheck }
PSRdBytes		graphics/graphics.c	/^private procedure PSRdBytes()/ ;" function 12 { }	{ PopInteger PopPString RangeCheck RdBytes StrObj integer }
PSRead		language/stream.c	/^public procedure PSRead()/ ;" function 18 { }	{ CloseFile EOF GetStream InvlAccess IsCrFile PopPStream PushBoolean PushInteger Stm StmObj StreamError boolean false ferror getc integer rAccess s true }
PSReadHexString		language/stream.c	/^public procedure PSReadHexString()/ ;" function 60 { }	{ CloseFile DURING END_HANDLER GETC GetStream HANDLER InvlAccess IsCrFile NOTHEX PopPStream PopPString PushBoolean PushP RERAISE RangeCheck RecyclerPop RecyclerPush SETUPSTM Stm StmObj StrObj StreamError UPDATESTM boolean charptr false ferror hexToBinary integer rAccess register s wAccess }
PSReadImage		product/windowgraphics.c	/^private procedure PSReadImage()/ ;" function 148 { }	{ Bounds CantHappen CheckWindow Error GetWinBounds LCopyBitsFrom Layer LocalBitmap NULL NX_TWENTYFOURBITRGB NX_TWOBITGRAY OFFSETBOUNDS PSExecuteObject PSGetDevice PSGetMatrix PSGetOperandType PSLimitCheck PSObject PSPopBoolean PSPopTempObject PSPushObject PSTypeCheck PopBounds Wd2Layer bm_delete boolean reverse_pixels_in_byte s sectBounds string }
PSReadLine		language/stream.c	/^public procedure PSReadLine()/ ;" function 73 { }	{ CloseFile DURING END_HANDLER GETC GetStream HANDLER HandlePendingEOL InvlAccess IsCrFile PopPStream PopPString PushBoolean PushP RERAISE RangeCheck RecyclerPop RecyclerPush SETUPSTM Stm StmObj StrObj StreamError UPDATESTM boolean charptr false ferror integer r rAccess register s true ungetc wAccess }
PSReadOnly		language/type.c	/^public procedure PSReadOnly()/ ;" function 26 { }	{ IPop IPush InvlAccess Object SetDictAccess TypeCheck arrayObj dictObj escObj objGState opStk pkdaryObj rAccess stmObj strObj }
PSReadString		language/stream.c	/^public procedure PSReadString()/ ;" function 35 { }	{ CloseFile DURING END_HANDLER GetStream HANDLER HandlePendingEOL InvlAccess IsCrFile PopPStream PopPString PushBoolean PushP RERAISE RangeCheck RecyclerPop RecyclerPush Stm StmObj StrObj StreamError boolean cardinal false ferror fread rAccess wAccess }
PSRealTime		postscript/control.c	/^public procedure PSRealTime()/ ;" function 4 { }	{ PushInteger integer os_clock }
PSRectClip		graphics/rect.c	/^public procedure PSRectClip() {/ ;" function 18 { }	{ BuildMultiRectPath Clip DURING END_HANDLER FrPth HANDLER MakeRectPath NewPath Object Path RERAISE ReducePathClipInt TopP false intObj realObj }
PSRectFill		graphics/rect.c	/^public procedure PSRectFill()/ ;" function 84 { }	{ BBoxCompareResult BBoxRec BoundsCompare Cd DevClipIsRect DevMarkInfo DevPrim DevPrivate DevTrap FastRectFill FloatRectFill GetDevClipPrim Mark MultiRectFill NULL Object PObject Path PopP QuadPath RealEq0 ReduceQuadPath TypeCheck arrayObj boolean d gs intObj pkdaryObj real realObj register strObj }
PSRectStroke		graphics/rect.c	/^public procedure PSRectStroke() {/ ;" function 15 { }	{ BuildMultiRectPath CheckForMtx Cnct DURING END_HANDLER GRstr GSave HANDLER Mtx NewPath PopMtx RERAISE Stroke boolean gs }
PSRectViewClip		graphics/viewclip.c	/^public procedure PSRectViewClip()/ ;" function 18 { }	{ BuildMultiRectPath DURING END_HANDLER HANDLER MakeRectPath NewPath NewViewClip Object PSViewClip Path RERAISE RemPathRef TopP false intObj realObj }
PSRecyclerStatus		vm/recycler.c	/^private procedure PSRecyclerStatus()/ ;" function 12 { Init_Recycler }	{ PRecycler fflush free os_printf os_stdout vmCurrent }
PSReduceRect		postscript/customops.c	/^public boolean PSReduceRect(x, y, w, h, mtx, dp)/ ;" function 14 { CompositePriv MarkNextImage }	{ BBoxRec Cd NULL Path QuadPath ReduceQuadPath boolean gs }
PSRegister		postscript/customops.c	/^public void PSRegister(opName, proc) char *opName;/ ;" function 3 { MpdDevInit NextCustomProc }	{ RgstExplicit }
PSRegisterStatusDict		postscript/customops.c	/^public void PSRegisterStatusDict(opName, proc) cha/ ;" function 5 { NXRegisterOps }	{ Begin End RgstExplicit trickyStatusDict }
PSReleaseLock		postscript/contextimpl.c	/^public procedure PSReleaseLock(pobj) PObject pobj;/ ;" function 5 { }	{ ReleaseLock TypeCheck escObj objLock }
PSReleaseManagedObject		postscript/customops.c	/^public void PSReleaseManagedObject(pobj) PObject p/ ;" function 5 { PSSetEventProcedures PSSetWindowDict }	{ ManagedItem RecycleMI ValidatePObj }
PSRenameFile		language/stodevsupport.c	/^public procedure PSRenameFile() \/* strold strnew r/ ;" function 13 { }	{ FndStoDev FndStoFile NIL PSError PStoDev PopFlName UndefFileName invlflaccess }
PSRepeat		language/exec.c	/^public procedure PSRepeat()/ ;" function 9 { }	{ AryObj EPushInteger EPushP ExecPushP PopInteger PopPArray RangeCheck integer reptcmd }
PSResFile		language/stream.c	/^public procedure PSResFile()/ ;" function 8 { }	{ GetStream PopPStream Stm StmObj false freset }
PSResetByteCount		product/miscops.c	/^private procedure PSResetByteCount()/ ;" function 6 { }	{ IPCbytesIn IPCbytesOut }
PSResetUser		product/listener.c	/^private procedure PSResetUser()/ ;" function 40 { }	{ CheckInListenPort CheckOutListenPort NULL PSMakeRunnable PSObject PSPopTempObject PSPushObject ROOT_GID ROOT_UID SetEffectiveUser TerminateUserContexts currentPSContext false globalGid globalUid globalUserSet listenContext listenPort listenRestart listenerState scheduler sprintf strlen }
PSResetWait		product/mouse_driver.c	/^private procedure PSResetWait() {}/ ;" function 1 { }	{ }
PSReversePath		graphics/pathops.c	/^public procedure PSReversePath()  {ReversePath(&gs/ ;" function 1 { }	{ ReversePath gs }
PSRgstNames		vm/rgstcmds.c	/^private procedure PSRgstNames()/ ;" function 27 { Init_Cmds }	{ AryObj Assert NameObj PSClrToMrk PSCntToMark PopInteger PopP RangeCheck TypeCheck VMGetElem VMPutElem Xobj arrayObj cardinal integer nameObj pni_end register rootShared }
PSRgstOps		postscript/customops.c	/^public void PSRgstOps(p) PRgOpEntry p; {/ ;" function 6 { EventInit IniCoordinates IniWindowGraphics IniWindowImage IniWindowOps Init_Cmds ListenerInit MiscOpsInit MouseInit }	{ NIL RgstExplicit p }
PSRightButton		product/mouse_driver.c	/^private procedure PSRightButton()/ ;" function 5 { }	{ CURWINDOW DidInteract PSPushBoolean eventGlobals false }
PSRightStillDown		product/mouse_driver.c	/^private procedure PSRightStillDown()/ ;" function 5 { }	{ CURWINDOW DidInteract PSPopInteger PSPushBoolean RightStillDown }
PSRoll		language/stack.c	/^public procedure PSRoll()/ ;" function 10 { }	{ MAXcardinal MIN PopInteger RangeCheck Roll cardinal integer opStk }
PSRootFont		fonts/fontshow.c	/^public procedure PSRootFont() {PushP(&gs->pfontDic/ ;" function 1 { }	{ PushP gs }
PSRound		language/math.c	/^public procedure PSRound()/ ;" function 17 { }	{ Object PObject PopP PushP PushPReal TypeCheck extended fpHalf intObj r r1 real realObj register }
PSRstr		vm/saverestore.c	/^public procedure PSRstr()/ ;" function 10 { }	{ Assert Level Object PopP RstrToLevel TypeCheck escObj false level objSave }
PSRtat		graphics/matrix.c	/^public procedure PSRtat()/ ;" function 19 { }	{ Mtx Object PopP PopPReal PushPMtx Rtat RtatMtx TopP arrayObj real }
PSRun		language/exec.c	/^public procedure PSRun()/ ;" function 29 { LanguageInit PSFontRun }	{ CreateFileStream CurrentShared DURING END_HANDLER EPushP HANDLER PopPRString RERAISE SetShared StmObj StrObj Xobj boolean false runcmd string }
PSSCheck		language/type.c	/^public procedure PSSCheck ()/ ;" function 6 { }	{ IPop Object PushBoolean TrickyDict dictObj false opStk }
PSSRand		language/math.c	/^public procedure PSSRand()/ ;" function 7 { }	{ PopInteger RAND_m integer randx register }
PSSTACKSIZE		fonts/fontbuild.c	/^#define PSSTACKSIZE (3)/ ;" macro 1 { }	{ }
PSSave		vm/saverestore.c	/^public procedure PSSave()/ ;" function 11 { }	{ LSaveObj Level PushP Save SaveObj level }
PSScal		graphics/matrix.c	/^public procedure PSScal()/ ;" function 19 { }	{ Cd Mtx Object PopP PopPCd PushPMtx Scal ScalMtx TopP arrayObj s }
PSScaleFont		fonts/fontshow.c	/^public procedure PSScaleFont()/ ;" function 11 { }	{ DictObj MakeFont Mtx PopPDict PopPReal PushP d fpZero }
PSSchedulerContext		product/nscontexts.h	/^typedef struct _t_PSSchedulerContextRec *PSSchedul/ ;" typedef 1 { ContextYield CreateNewContext CreateSchedulerContext CreateTypedContext HandleDataMsg HandleNotifyMsg MarkSystemContexts NSCreateWB PSSetJobUser PickContext Scheduler SelectPSContext TerminateUserContexts }	{ }
PSScreenList		product/windowops.c	/^private procedure PSScreenList()/ ;" function 21 { }	{ ABOVE BELOW Layer2Wd PSLIntObj PSObject PSPopInteger PSPopTempObject PSPushObject PSPutArray PWindowDevice SubList WLBelowButNotBelow }
PSScreenToBase		product/coordinates.c	/^private procedure PSScreenToBase()/ ;" function 10 { }	{ Cd CheckWindowDev NULL PDevice PSGetDevice PSPopPCd PSPushPCd PWindowDevice ScreenToBase }
PSScreenToCurrent		product/coordinates.c	/^private procedure PSScreenToCurrent()/ ;" function 11 { }	{ Bounds Cd GetBoundsPopCd ITfmCd NULL PSGetMatrix PSPushPCd }
PSSearch		language/string.c	/^public procedure PSSearch()/ ;" function 26 { }	{ PStrObj PopPRString PushBoolean PushP SHead STail StrObj cardinal false integer r register s sStringMatch true }
PSSelectFont		fonts/fontshow.c	/^public procedure PSSelectFont()/ ;" function 71 { }	{ DictGetP DictObj GetPrivFontDirectory InsertSelectFont Known MID MIDNULL MakeFont Mtx Object PAryToMtx PopP PopPDict PushP SearchSelectFont SetFont StrToName TypeCheck arrayObj boolean d false fontsNames intObj level_2 pkdaryObj realObj rootShared strObj true vLANGUAGE_LEVEL vmCurrent }
PSSetActiveApp		product/event.c	/^private procedure PSSetActiveApp()/ ;" function 22 { }	{ ActiveApp IDToPSContext IPCGetWCParams NULL PSContext PSInvalidID PSPopInteger }
PSSetAlpha		product/windowgraphics.c	/^private procedure PSSetAlpha()/ ;" function 17 { }	{ ChangeColor NULL PNextGSExt PSBuildMasks PSGetGStateExt PSPopPReal PSUndefined SetDevColor real }
PSSetAutofill		product/windowops.c	/^private procedure PSSetAutofill()/ ;" function 9 { }	{ ID2Layer LSetAutofill PSPopBoolean PSPopInteger boolean }
PSSetBBox		graphics/userpath.c	/^public procedure PSSetBBox() {/ ;" function 21 { }	{ BBoxRec Cd MakeBBox PPath PopPCd RangeCheck gs real register true }
PSSetBlkGeneration		graphics/transferimpl.c	/^public procedure PSSetBlkGeneration()  \/* setblack/ ;" function 13 { }	{ ConditionalInvalidateRecycler NIL NULL Object PopPArray SetTransfer TfrFcn XAryObj gs }
PSSetBootstrapPort		product/listener.c	/^private procedure PSSetBootstrapPort()/ ;" function 30 { }	{ PSLimitCheck PSObject PSPopTempObject PSRangeCheck currentPSContext portName scheduler }
PSSetCMYKColor		graphics/colorops1.c	/^public procedure PSSetCMYKColor()  \/* setcmykcolor/ ;" function 18 { }	{ ChangeColor Color DEVCMYK_COLOR_SPACE PopPColorVal SetDevColor Undefined gs real }
PSSetCSLimit		fonts/fontbuild.c	/^private procedure PSSetCSLimit() {cslimit = PSPopI/ ;" function 1 { }	{ PSPopInteger cslimit }
PSSetCacheLimit		fonts/fontdisk.c	/^public procedure PSSetCacheLimit() { SetCacheLimit/ ;" function 1 { }	{ PopInteger SetCacheLimit }
PSSetCchDevice		fonts/cachedev.c	/^public procedure PSSetCchDevice() {/ ;" function 4 { }	{ RMetrics SetCacheDev false }
PSSetCchDevice2		fonts/cachedev.c	/^public procedure PSSetCchDevice2() {/ ;" function 6 { }	{ PopPCd RMetrics SetCacheDev true }
PSSetCharWidth		fonts/cachedev.c	/^public procedure PSSetCharWidth() {/ ;" function 14 { }	{ Cd IDTfmP NIL NullDevice PopPCd SetCharWidth ShowState Tlat UNFIXCD Undefined fdcp rdcp register ss ssr useReal }
PSSetClrTransfer		graphics/transferimpl.c	/^public procedure PSSetClrTransfer()/ ;" function 14 { }	{ ConditionalInvalidateRecycler NIL Object PopPArray SetTransfer TfrFcn XAryObj gs }
PSSetColorScreen		graphics/gray.c	/^public procedure PSSetColorScreen() {/ ;" function 34 { }	{ ConditionalInvalidateRecycler InstallNewScreen LNullObj MakeType2Screen Object PSSetHalftone PopP PopPReal PushP Screen SpotFunction arrayObj boolean dictObj integer pkdaryObj register }
PSSetCoreLimit		product/miscops.c	/^private procedure PSSetCoreLimit()/ ;" function 8 { }	{ PSPopInteger }
PSSetCursor		product/mouse_driver.c	/^private procedure PSSetCursor()/ ;" function 9 { }	{ Cd CheckWindow PSPopPCd SetGSCursor }
PSSetDash		graphics/strokeops.c	/^public procedure PSSetDash()/ ;" function 25 { }	{ AryObj ConditionalInvalidateRecycler DASHLIMIT LimitCheck Object PRealValue PopPArray PopPReal RangeCheck RealGt0 RealLt0 VMCarCdr boolean false gs real true }
PSSetDefaultDepthLimit		product/windowops.c	/^private procedure PSSetDefaultDepthLimit()/ ;" function 25 { }	{ NX_DEFAULTDEPTH NX_EIGHTBITGRAY NX_EIGHTBITGRAY_DEPTH NX_TWELVEBITRGB NX_TWELVEBITRGB_DEPTH NX_TWENTYFOURBITRGB NX_TWENTYFOURBITRGB_DEPTH NX_TWOBITGRAY NX_TWOBITGRAY_DEPTH PSPopInteger PSRangeCheck currentSchedulerContext initialDepthLimit }
PSSetDevice		postscript/contextimpl.c	/^public procedure PSSetDevice (device, erase)/ ;" function 13 { PSMachPortDevice SetWindowDevice }	{ Assert NIL NewDevice PSErasePage currentPSContext }
PSSetEventProcedures		product/windowops.c	/^private procedure PSSetEventProcedures()/ ;" function 24 { }	{ ID2Wd PPSObject PSPopInteger PSPopManagedObject PSReleaseManagedObject PSSharedObject PWindowDevice true }
PSSetExposureColor		product/windowgraphics.c	/^private procedure PSSetExposureColor()/ ;" function 5 { }	{ CheckWindow LSetExposureColor NULL PSGetDevice Wd2Layer }
PSSetFlatThreshold		graphics/graphics.c	/^public procedure PSSetFlatThreshold()/ ;" function 6 { }	{ PopPReal flatEps fp100 fpp2 gs real }
PSSetFlushExposures		product/event.c	/^private procedure PSSetFlushExposures()/ ;" function 4 { }	{ PSPopBoolean flushExposures }
PSSetFont		fonts/fontshow.c	/^public procedure PSSetFont()/ ;" function 6 { }	{ DictObj PopPDict SetFont }
PSSetGCLog		vm/gcmisc.c	/^private procedure PSSetGCLog()/ ;" function 12 { GCInternal_Init }	{ PSPopBoolean gcFd }
PSSetGState		graphics/gstates.c	/^public procedure PSSetGState()/ ;" function 23 { }	{ GSAddRefs GSRemRefs NULL PDevice PGState PObject PopGState TypeCheck Undefined boolean gs rAccess register }
PSSetGray		graphics/colorops1.c	/^public procedure PSSetGray() {/ ;" function 6 { }	{ PopPColorVal SetGray Undefined gs real }
PSSetGrayPattern		product/windowgraphics.c	/^private procedure PSSetGrayPattern()/ ;" function 18 { }	{ ChangeColor CheckWindow NULL PNextGSExt PSGetGStateExt PSPopInteger PSRangeCheck SetDevColor real }
PSSetHSBColor		graphics/colorops1.c	/^public procedure PSSetHSBColor()/ ;" function 24 { }	{ PopPColorVal SetRGBColor fp6 fpOne fpZero integer real }
PSSetHalftone		graphics/gray.c	/^public procedure PSSetHalftone() {/ ;" function 22 { DecodePixelDict PSSetColorScreen PSSetScreen }	{ DictObj DictTestP GetType1Screen GetType2Screen GetType3Screen GetType4Screen InstallNewScreen Object PopP RangeCheck Screen SetDefaultHalftone TypeCheck dictObj graphicsNames intObj nullObj register true }
PSSetHalftonePhase		graphics/transferimpl.c	/^public procedure PSSetHalftonePhase() {/ ;" function 7 { }	{ DevPoint PopInteger gs p }
PSSetHowPost		product/event.c	/^private procedure PSSetHowPost()/ ;" function 12 { }	{ NX_BYPSCONTEXT NX_FIRSTEVENT NX_LASTEVENT NX_NOWINDOW PSPopInteger PSRangeCheck SetHowPost }
PSSetInstance		product/windowgraphics.c	/^private procedure PSSetInstance()/ ;" function 4 { }	{ INSTANCING NULL PSGetGStateExt PSPopBoolean }
PSSetJobUser		product/listener.c	/^private procedure PSSetJobUser()/ ;" function 19 { }	{ DAEMON_GID DAEMON_UID PSPopInteger PSSchedulerContext SetEffectiveUser currentPSContext scheduler true }
PSSetLastEventSentTime		product/event.c	/^private procedure PSSetLastEventSentTime()/ ;" function 6 { }	{ ActiveApp IPCGetWCParams PSPopInteger currentPSContext }
PSSetLineCap		graphics/strokeops.c	/^public procedure PSSetLineCap()/ ;" function 7 { }	{ PopCardinal RangeCheck cardinal gs tenonCap }
PSSetLineJoin		graphics/strokeops.c	/^public procedure PSSetLineJoin()/ ;" function 7 { }	{ PopCardinal RangeCheck bevelJoin cardinal gs }
PSSetLineWidth		graphics/strokeops.c	/^public procedure PSSetLineWidth()/ ;" function 6 { }	{ PopPReal SetLineWidth r real }
PSSetLoginContext		product/listener.c	/^private procedure PSSetLoginContext()/ ;" function 7 { }	{ MarkSystemContexts currentPSContext loginContextSet scheduler true }
PSSetMallocDebug		product/miscops.c	/^private procedure PSSetMallocDebug()/ ;" function 4 { }	{ PSPopInteger }
PSSetMiterLimit		graphics/strokeops.c	/^public procedure PSSetMiterLimit()/ ;" function 7 { }	{ PopPReal RangeCheck fpOne gs real }
PSSetMouse		product/mouse_driver.c	/^private procedure PSSetMouse()/ ;" function 13 { }	{ Bounds Cd CheckWindow DevCd GetTLWinBounds NULL PDevice PSGetDevice PSGetMatrix PSPopPCd SetMouse UserToDevice Wd2Layer }
PSSetMtx		graphics/graphics.c	/^public procedure PSSetMtx()/ ;" function 2 { }	{ Mtx PopMtx SetMtx }
PSSetNRect		product/windowops.c	/^private procedure PSSetNRect()/ ;" function 43 { }	{ Bounds Cd ClearWdNRect GetTLWinBounds NRect OFFSETBOUNDS PPSGState PSGetDevice PSGetMatrix PSInvalidID PSPopBoolean PSPopGState PSPopInteger PWindowDevice PopBounds PostNotification RecalcMouseRect Wd2Layer boolean eventGlobals false mouseWindow nrStorage os_newelement wdProcs }
PSSetNextObjectFormat		product/listener.c	/^private void PSSetNextObjectFormat()/ ;" function 16 { }	{ PSPopInteger currentPSContext objectFormat scheduler }
PSSetNextStepContext		product/listener.c	/^private void PSSetNextStepContext()/ ;" function 6 { }	{ PSPopBoolean currentPSContext scheduler }
PSSetOFLimit		fonts/fontbuild.c	/^private procedure PSSetOFLimit() {oflimit = PSPopI/ ;" function 1 { }	{ PSPopInteger oflimit }
PSSetOwner		product/windowops.c	/^private procedure PSSetOwner()/ ;" function 10 { }	{ ID2Wd IDToPSContext PSInvalidID PSPopInteger }
PSSetPublicListener		product/listener.c	/^private procedure PSSetPublicListener()/ ;" function 7 { }	{ PSPopBoolean PrivateListenPort PublicListenPort }
PSSetRGBColor		graphics/colorops1.c	/^public procedure PSSetRGBColor()/ ;" function 8 { }	{ PopPColorVal SetRGBColor real }
PSSetRealClockAddress		postscript/customops.c	/^public procedure PSSetRealClockAddress(clockaddr)/ ;" function 4 { PSInitEvents }	{ SetRealClockAddress }
PSSetScreen		graphics/gray.c	/^public procedure PSSetScreen() {/ ;" function 20 { }	{ ConditionalInvalidateRecycler InstallNewScreen LNullObj MakeType1Screen Object PSSetHalftone PopP PopPReal PushP Screen SpotFunction arrayObj dictObj pkdaryObj register }
PSSetSendExposed		product/windowops.c	/^private procedure PSSetSendExposed()/ ;" function 7 { }	{ ID2Layer LSetSendRepaint PSPopBoolean PSPopInteger }
PSSetShared		postscript/psspace.c	/^public procedure PSSetShared ()/ ;" function 20 { }	{ CurrentShared PObject PopBoolean RstrSetShared SetShared WriteContextParam boolean integer lastSetSharedforContext vmCurrent }
PSSetStackLimit		language/stack.c	/^private procedure PSSetStackLimit()/ ;" function 11 { StackInit }	{ PopCardinal PushBoolean PushCardinal UPPERSTKLIMIT cardinal curStackLimit false true }
PSSetStrokeAdjust		graphics/stroke.c	/^public procedure PSSetStrokeAdjust() {/ ;" function 4 { }	{ PopBoolean fpZero gs }
PSSetThresh		vm/gcmisc.c	/^public procedure PSSetThresh()/ ;" function 20 { }	{ CurrentShared OEM_DefaultThreshold OEM_MaxThreshold OEM_MinThreshold PSPopInteger RangeCheck SIZE_GC_DEF_THRESHOLD SIZE_GC_MAX_THRESHOLD SIZE_GC_MIN_THRESHOLD integer ps_getsize vmCurrent }
PSSetTimeLimit		postscript/contextimpl.c	/^public procedure PSSetTimeLimit (limit)/ ;" function 10 { Mnextmain NSTimeoutPS }	{ SetTimeLimit }
PSSetTransfer		graphics/transferimpl.c	/^public procedure PSSetTransfer()/ ;" function 9 { DecodePixelDict }	{ ConditionalInvalidateRecycler NIL Object PopPArray SetTransfer TfrFcn XAryObj gs }
PSSetUCRemoval		graphics/transferimpl.c	/^public procedure PSSetUCRemoval()  \/* setundercolo/ ;" function 13 { }	{ ConditionalInvalidateRecycler NIL NULL Object PopPArray SetTransfer TfrFcn XAryObj gs }
PSSetUCacheParams		graphics/ucache.c	/^public procedure PSSetUCacheParams() {/ ;" function 15 { }	{ BLIMIT CountToMark IntObj NIL PSClrToMrk PopInteger WriteContextParam blimit bmax integer opStk }
PSSetUser		product/listener.c	/^private procedure PSSetUser()/ ;" function 17 { }	{ DAEMON_GID DAEMON_UID PSPopInteger SetEffectiveUser currentPSContext globalGid globalUid globalUserSet scheduler true }
PSSetWaitCursor		product/mouse_driver.c	/^private procedure PSSetWaitCursor()/ ;" function 7 { }	{ Cd PSPopPCd }
PSSetWaitCursorEnabled		product/event.c	/^private procedure PSSetWaitCursorEnabled()/ ;" function 18 { }	{ ActiveApp IDToPSContext IPCGetWCParams NIL PSContext PSInvalidID PSPopBoolean PSPopInteger }
PSSetWaitEnabled		product/mouse_driver.c	/^private procedure PSSetWaitEnabled()/ ;" function 4 { }	{ PSPopBoolean }
PSSetWaitTime		product/mouse_driver.c	/^private procedure PSSetWaitTime()/ ;" function 6 { }	{ PSPopPReal }
PSSetWindowDepthLimit		product/windowops.c	/^private procedure PSSetWindowDepthLimit()/ ;" function 30 { }	{ ID2Wd LSetDepthLimit NX_DEFAULTDEPTH NX_EIGHTBITGRAY NX_EIGHTBITGRAY_DEPTH NX_TWELVEBITRGB NX_TWELVEBITRGB_DEPTH NX_TWENTYFOURBITRGB NX_TWENTYFOURBITRGB_DEPTH NX_TWOBITGRAY NX_TWOBITGRAY_DEPTH PSInvalidID PSPopInteger PSRangeCheck PWindowDevice currentSchedulerContext }
PSSetWindowDict		product/windowops.c	/^private procedure PSSetWindowDict()/ ;" function 19 { }	{ ID2Wd NULL PPSObject PSGetObjectType PSPopInteger PSPopManagedObject PSReleaseManagedObject PSSharedObject PSTypeCheck PWindowDevice }
PSSetWindowEventMask		product/windowops.c	/^private procedure PSSetWindowEventMask()/ ;" function 11 { }	{ Card32 GetMouseMovedMask ID2Wd PSPopInteger }
PSSetWindowLevel		product/windowops.c	/^private procedure PSSetWindowLevel()/ ;" function 53 { }	{ ABOVE BASEPSWINDOWID BELOW ID2Layer ID2Wd LOrder Layer NXBASEWINLEVEL PSInvalidID PSPopInteger PSRangeCheck RecalcMouseRect SubList WLBelowButNotBelow WindowDevice eventGlobals false highestWindowInTier level }
PSSetWindowType		product/windowops.c	/^private procedure PSSetWindowType()/ ;" function 10 { }	{ BASEPSWINDOWID BUFFERED ID2Wd LSetType PSLimitCheck PSPopInteger PWindowDevice PopNaturalMax }
PSSetWriteBlock		product/listener.c	/^private void PSSetWriteBlock()/ ;" function 4 { }	{ PSPopBoolean currentPSContext scheduler }
PSSetXLock		fonts/fontbuild.c	/^public procedure PSSetXLock()/ ;" function 8 { }	{ Fixed PopPReal SetXLock false pflttofix real }
PSSetYLock		fonts/fontbuild.c	/^public procedure PSSetYLock()/ ;" function 8 { }	{ Fixed PopPReal SetYLock false pflttofix real }
PSSetYieldChecking		language/exec.c	/^public int PSSetYieldChecking(on)/ ;" function 12 { }	{ NIL checkingYield yieldLoc1 yieldLoc2 }
PSSetYieldLocations		language/exec.c	/^public procedure PSSetYieldLocations(loc1, loc2)/ ;" function 6 { }	{ yieldLoc1 yieldLoc2 }
PSSharedObject		postscript/customops.c	/^public boolean PSSharedObject(pobj) PObject pobj; / ;" function 1 { PSSetEventProcedures PSSetWindowDict }	{ }
PSShow		fonts/fontshow.c	/^public procedure PSShow()/ ;" function 9 { }	{ BEGINSHOW ENDSHOW PopPString ShowInternal ssr }
PSShowPage		graphics/graphics.c	/^public procedure PSShowPage()/ ;" function 9 { }	{ InitGraphics NIL SetGray fpOne gs real true }
PSSin		language/math.c	/^public procedure PSSin() {/ ;" function 6 { }	{ PopPReal PushPReal RAD r real }
PSSizeImage		product/coordinates.c	/^private procedure PSSizeImage()/ ;" function 56 { }	{ Bounds CantHappen Cd CheckWindowDev GetWinBounds LPreCopyBitsFrom Layer Mtx NULL NX_EIGHTBITGRAY NX_TWELVEBITRGB NX_TWENTYFOURBITRGB NX_TWOBITGRAY OFFSETBOUNDS PDevice PMtx PSGetDevice PSGetMatrix PSObject PSPopTempObject PSPushBoolean PSPushInteger PSPushPMtx PopBounds Wd2Layer real sectBounds }
PSSpace		include/postscript.h	/^typedef struct _t_PSSpaceRec *PSSpace;/ ;" typedef 1 { CreatePSSpace DestroyPSContext DestroyPSSpace GetNextContext GetNextSpace IDToPSSpace InitPostScript Mnextmain NSCreatePS NSDestroyPS }	{ }
PSSpaceInit		postscript/psspace.c	/^public procedure PSSpaceInit (reason)/ ;" function 8 { PostScriptInit }	{ }
PSSpaceRec		postscript/contextimpl.c	/^typedef struct _t_PSSpaceRec {/ ;" typedef 11 { CreatePSSpace }	{ }
PSSpaceToID		postscript/contextimpl.c	/^public SpaceID PSSpaceToID(space) PSSpace space; {/ ;" function 3 { }	{ }
PSSqRt		language/math.c	/^public procedure PSSqRt()/ ;" function 8 { }	{ PopPReal PushPReal RangeCheck RealLt0 os_sqrt real }
PSStCParams		fonts/fontdisk.c	/^public procedure PSStCParams() {/ ;" function 26 { }	{ CountToMark DevSetMaskCacheSize IntObj NIL PVoidProc PopInteger PopP SetCacheLimit WriteContextParam ctxCompThreshold defaultCacheThreshold integer opStk }
PSStFKey		fonts/fontbuild.c	/^private procedure PSStFKey()	\/* setfontkey *\// ;" function 6 { }	{ IntObj KEYHASH LIntObj PopInteger VMPutElem rpFontKey }
PSStFilPos		language/stodevsupport.c	/^public procedure PSStFilPos()	\/* setfileposition */ ;" function 10 { }	{ GetStream PopInteger PopPStream Stm StmObj StreamError false fseek integer }
PSStObjFormat		language/binaryobject.c	/^public procedure PSStObjFormat()/ ;" function 6 { }	{ Card16 PopCardinal RangeCheck SetObjFormat of_max }
PSStPacking		language/scanner.c	/^public procedure PSStPacking()/ ;" function 7 { }	{ NIL PVoidProc PopBoolean WriteContextParam boolean integer packedArrayMode }
PSStSKey		language/stream.c	/^private procedure PSStSKey()	\/* setstreamkey *\// ;" function 6 { StreamInit }	{ IntObj KEYHASH LIntObj PopInteger VMPutElem cardinal rootShared rpStreamKey }
PSStackStats		language/stack.c	/^private procedure PSStackStats()/ ;" function 16 { StackInit }	{ curStackLimit dictStk execStk opStk os_printf refStk }
PSStartWaitCursorTimer		product/event.c	/^private procedure PSStartWaitCursorTimer()/ ;" function 5 { }	{ ActiveApp IPCGetWCParams currentPSContext }
PSStatus		language/stream.c	/^public procedure PSStatus()/ ;" function 16 { }	{ Object PopP PushBoolean StoDevStrStatus TypeCheck boolean stmObj strObj }
PSStillDown		product/mouse_driver.c	/^private procedure PSStillDown()/ ;" function 5 { }	{ CURWINDOW DidInteract PSPopInteger PSPushBoolean StillDown }
PSStop		language/exec.c	/^public procedure PSStop()/ ;" function 5 { }	{ PS_STOP execAbort execAbortPending }
PSStopped		language/exec.c	/^private procedure PSStopped()/ ;" function 6 { ExecInit }	{ EPushP ExecPushP Object PopP stoppedcmd }
PSStore		language/dict.c	/^public procedure PSStore()/ ;" function 12 { }	{ DTopP DictObj KeyName KeyVal LDictObj Object PopP PutInDict TTLRec d true trytoload }
PSStrWidth		fonts/fontshow.c	/^public procedure PSStrWidth()/ ;" function 12 { }	{ BEGINSHOW Cd ENDSHOW IDTfmP PopPString PushPCd ShowInternal VecSub gs rdcp ssr true }
PSString		language/string.c	/^public procedure PSString()/ ;" function 9 { }	{ AllocPString PopLimitCard PushP ReclaimRecyclableVM StrObj cardinal s }
PSStringLength		postscript/customops.c	/^public long int PSStringLength() {/ ;" function 5 { PSPlaySound PopMallocString }	{ TypeCheck Underflow opStk strObj }
PSStrkPth		graphics/strokeops.c	/^public procedure PSStrkPth()/ ;" function 2 { PSUStrokePath }	{ DoStrkPth StrkPthProc gs }
PSStroke		graphics/strokeops.c	/^public procedure PSStroke()/ ;" function 2 { }	{ NewPath Stroke gs }
PSSub		language/math.c	/^public procedure PSSub() {/ ;" function 40 { }	{ Object PopP PushInteger PushPReal TypeCheck extended intObj integer r real realObj }
PSSuperExec		language/exec.c	/^private procedure PSSuperExec()/ ;" function 8 { ExecInit }	{ Object PopP superExec }
PSSysNameMap		language/name.c	/^private procedure PSSysNameMap() \/* int systemname/ ;" function 6 { NameInit }	{ AllocPNameArray CurrentShared InvlAccess PopCardinal Undefined nullObj rootShared }
PSTermEvents		product/event.c	/^private procedure PSTermEvents()/ ;" function 5 { }	{ MousePSContext NULL }
PSTermWindow		product/windowops.c	/^private procedure PSTermWindow()/ ;" function 12 { }	{ BASEPSWINDOWID ID2Wd PSPopInteger PWindowDevice TermWindow }
PSTfm		graphics/matrix.c	/^public procedure PSTfm()/ ;" function 20 { }	{ Cd Mtx Object PCd PopMtx PopPCd PushPCd TfmP TfmPCd TopP arrayObj pkdaryObj register }
PSTinyUCache		graphics/ucache.c	/^private procedure PSTinyUCache() {/ ;" function 5 { }	{ PSNormalUCache bmax rmax }
PSTlat		graphics/matrix.c	/^public procedure PSTlat()/ ;" function 19 { }	{ Cd Mtx Object PopP PopPCd PushPMtx Tlat TlatMtx TopP arrayObj }
PSToken		language/scanner.c	/^public procedure PSToken()/ ;" function 29 { }	{ CloseFile GetStream InvlAccess IsCrFile Object PopP PushBoolean PushP RecyclerPop RecyclerPush Stm StmToken StrObj StrToken StreamError TypeCheck boolean false ferror rAccess stmObj strObj }
PSTraceRecycler		vm/recycler.c	/^private procedure PSTraceRecycler()/ ;" function 26 { Init_Recycler }	{ NIL PSUndefFileName fclose fflush os_fopen os_fprintf os_printf recyclerStm traceRecycler }
PSTrashVM		vm/abmimpl.c	/^private procedure PSTrashVM()/ ;" function 34 { ABM_Init }	{ ABM_BytesForBitmap CAST Card8 NIL PCard32 PCard8 PVMSegment charptr os_eprintf register vmCurrent }
PSTrickyDict		language/dict.c	/^private procedure PSTrickyDict()/ ;" function 6 { DictInit }	{ DictObj PopLimitCard PushP TrickyDictP }
PSTruncate		language/math.c	/^public procedure PSTruncate()/ ;" function 18 { }	{ Object PObject PopP PushP PushPReal RealLt0 TypeCheck extended intObj r real realObj register }
PSType		language/type.c	/^public procedure PSType()/ ;" function 8 { }	{ IPop Object PushP escObj integer languageNames opStk }
PSTypeCheck		vm/vm.c	/^public procedure PSTypeCheck() {PSError(typecheck)/ ;" function 1 { DecodeBbox PSDictGetPObj PSDictGetTestPObj PSPutArray PSReadImage PSSetWindowDict TypeCheck }	{ PSError typecheck }
PSUAppend		graphics/userpath.c	/^public procedure PSUAppend() {/ ;" function 3 { }	{ DoUAppend UserPathContext true }
PSUCacheHist		graphics/ucache.c	/^private procedure PSUCacheHist() {/ ;" function 9 { }	{ PUCache PushInteger UCSZ UCache integer }
PSUCacheStatus		graphics/ucache.c	/^public procedure PSUCacheStatus() {/ ;" function 8 { }	{ PSMark PushInteger blimit bmax bsize rmax rsize }
PSUCall		unix_product/unix.c	/^private procedure PSUCall()/ ;" function 6 { }	{ Bang character }
PSUClRead		unix_product/unix.c	/^private procedure PSUClRead()/ ;" function 10 { }	{ AllocPString Bang CreateFileStream PushP StmObj StrLen StrObj VMPutText cardinal character string }
PSUEOFill		graphics/userpath.c	/^public procedure PSUEOFill() { FillUserPath(true);/ ;" function 1 { }	{ FillUserPath true }
PSUFill		graphics/userpath.c	/^public procedure PSUFill() { FillUserPath(false); / ;" function 1 { }	{ FillUserPath false }
PSUPath		graphics/userpath.c	/^public procedure PSUPath() {/ ;" function 80 { }	{ AryObj Assert Cd CheckForCurrentPoint ConvertToListPath GetPathBBoxUserCds LRealObj Mtx MtxInvert NULL PCd PObject PPath PPthElt PSError PSExecOpNm PathType PopBoolean PushInteger TfmPCd TopP boolean cd1 cd2 graphicsNames gs integer invlaccess p pathclose pathcurveto pathlineto pathstart register secret }
PSUStroke		graphics/userpath.c	/^public procedure PSUStroke() {/ ;" function 44 { }	{ BreakUpPath Cd CheckForMtx Cnct DURING DevBBox DevClipIsRect DoStroke END_HANDLER EUsrPthCheckMtLt FinStroke GetDevClipBBox GetUsrPthAry HANDLER Mtx NULL PMtx PopMtx QEnumOk QStrokeUserPathEnumerate RERAISE SetMtx StrokeUserPathEnumerate UCacheMark UXAStroke UserPathContext UsrPthBBox UsrPthCheckMtLt boolean false gs ms strokeOp true uXARectangle uXAc1 uXAc2 }
PSUStrokePath		graphics/userpath.c	/^public procedure PSUStrokePath() {/ ;" function 23 { PSInUStroke }	{ CheckForMtx Cnct DURING DoStrkPth DoUAppend END_HANDLER HANDLER Mtx NewPath PSStrkPth PopMtx RERAISE SetMtx StrkPthCtx UStrkPthProc UserPathContext boolean false gs }
PSUnDef		language/dict.c	/^public procedure PSUnDef()/ ;" function 8 { }	{ DictObj Object PopP PopPDict UnDef true }
PSUnDefineFont		fonts/fontcache.c	/^public procedure PSUnDefineFont()/ ;" function 13 { FontCacheInit }	{ DictObj DictTestP FD ForceUnDef GetFontDirectory Object PopP PurgeFontRefs PurgeSFForKey StrToName strObj true }
PSUndef		postscript/control.c	/^private procedure PSUndef()/ ;" function 15 { ControlInit }	{ CantHappen MAXnameLength MIN NIL NameToPString Object PS_STOP PopP RAISE StrObj VMGetText character os_printf s }
PSUndefFileName		vm/vm.c	/^public procedure PSUndefFileName() {PSError(undeff/ ;" function 1 { PSTraceRecycler UndefFileName }	{ PSError undeffilename }
PSUndefResult		vm/vm.c	/^public procedure PSUndefResult() {PSError(undefres/ ;" function 1 { UndefResult }	{ PSError undefresult }
PSUndefUserObj		language/exec.c	/^public procedure PSUndefUserObj() {/ ;" function 11 { }	{ APut DictTestP LNullObj Object PopInteger RangeCheck cardinal integer languageNames rootPrivate true }
PSUndefined		vm/vm.c	/^public procedure PSUndefined() {PSError(undefined)/ ;" function 1 { PSExecuteOperator PSSetAlpha Undefined }	{ PSError undefined }
PSUnixSignal		product/miscops.c	/^private procedure PSUnixSignal()/ ;" function 11 { }	{ PSPopInteger os_fprintf os_stderr }
PSUnregistered		vm/rgstcmds.c	/^private procedure PSUnregistered()/ ;" function 4 { AllocCmds Init_Cmds RgstExplicit }	{ PSError unregistered }
PSUsePrebuilts		fonts/fontshow.c	/^private procedure PSUsePrebuilts() {usePrebuilts =/ ;" function 1 { FontShowInit }	{ PopBoolean usePrebuilts }
PSUserTime		postscript/control.c	/^public procedure PSUserTime()/ ;" function 4 { }	{ PushInteger integer os_userclock }
PSVMStatus		vm/vm_memory.c	/^public procedure PSVMStatus()/ ;" function 13 { }	{ Int32 PSPushInteger VM_Usage integer level vmCurrent }
PSVMtype		fonts/fontspriv.h	/^#define PSVMtype 3/ ;" macro 1 { BuildChar }	{ }
PSViewClip		graphics/viewclip.c	/^public procedure PSViewClip() { NewViewClip(&gs->p/ ;" function 1 { PSRectViewClip }	{ NewViewClip false gs }
PSViewClipPath		graphics/viewclip.c	/^public procedure PSViewClipPath() {/ ;" function 8 { }	{ CopyPath InitClipPath NULL NewPath Undefined curVC gs }
PSWCheck		language/type.c	/^public procedure PSWCheck()/ ;" function 30 { }	{ IPop Object PDictBody PDictObj PushBoolean TypeCheck XlatDictRef arrayObj boolean dictObj escObj false objGState opStk pkdaryObj stmObj strObj true wAccess }
PSWTranslation		graphics/graphics.c	/^public procedure PSWTranslation() {/ ;" function 7 { }	{ DevPoint PushInteger gs p }
PSWait		postscript/contextimpl.c	/^public procedure PSWait () {/ ;" function 41 { }	{ AcquireLock Assert BreakLooseCV DURING END_HANDLER HANDLER InvalidContext NIL Object PCondition PLock PSContext PopP RERAISE ReleaseLock TypeCheck boolean currentPSContext escObj level objCond objLock }
PSWhere		language/dict.c	/^public procedure PSWhere()/ ;" function 23 { }	{ Assert DictObj DoDictXlat LDictObj Object PDictObj PopP PushBoolean PushP TTLRec TrickyDict d dictStk false true trytoload }
PSWidthShow		fonts/fontshow.c	/^public procedure PSWidthShow()/ ;" function 15 { }	{ BEGINSHOW Cd DTfmP ENDSHOW FMapNone PopInteger PopPCd PopPString RangeCheck ShowInternal gs integer ssr true }
PSWindow		product/windowops.c	/^private procedure PSWindow()/ ;" function 28 { }	{ BUFFERED Bounds HEIGHTSANITY PSPushInteger PSRangeCheck PopIntCoord PopNaturalMax WIDTHSANITY WINDOWLIMIT remapY window }
PSWindowDevice		product/windowops.c	/^private procedure PSWindowDevice()/ ;" function 4 { }	{ PSPopInteger SetWindow true }
PSWindowDeviceRound		product/windowops.c	/^private procedure PSWindowDeviceRound()/ ;" function 4 { }	{ PSPopInteger SetWindow false }
PSWindowList		product/windowops.c	/^private procedure PSWindowList()/ ;" function 18 { }	{ PSLIntObj PSObject PSPopInteger PSPopTempObject PSPushObject PSPutArray PWindowDevice windowBase }
PSWrObject		language/binaryobject.c	/^public procedure PSWrObject()/ ;" function 4 { }	{ NIL Stm WriteObject }
PSWrite		language/stream.c	/^public procedure PSWrite()/ ;" function 9 { }	{ GetStream InvlAccess PopInteger PopPStream Stm StmObj StreamError integer putc wAccess }
PSWriteData		fonts/fontbuild.c	/^private procedure PSWriteData() {/ ;" function 15 { }	{ Encrypt GetStream OutputEnc PopPStream PopPString Stm StmObj StrObj cipher clear register rndnum string }
PSWrtHexString		language/stream.c	/^public procedure PSWrtHexString()/ ;" function 30 { }	{ DURING END_HANDLER GetStream HANDLER InvlAccess PopPRString PopPStream RERAISE RecyclerPop RecyclerPush Stm StmObj StrObj StreamError VMGetChar binaryToHex cardinal feof ferror integer putc rAccess register wAccess }
PSWrtString		language/stream.c	/^public procedure PSWrtString()/ ;" function 25 { }	{ DURING END_HANDLER GetStream HANDLER InvlAccess PopPRString PopPStream RERAISE RecyclerPop RecyclerPush Stm StmObj StrObj StreamError fwrite integer rAccess wAccess }
PSXCheck		language/type.c	/^public procedure PSXCheck()/ ;" function 2 { }	{ IPop Object PushBoolean Xobj boolean opStk }
PSXShow		fonts/fontshow.c	/^public procedure PSXShow()  { XYShow(true, false);/ ;" function 1 { }	{ XYShow false true }
PSXYShow		fonts/fontshow.c	/^public procedure PSXYShow() { XYShow(true, true); / ;" function 1 { }	{ XYShow true }
PSXctOnly		language/type.c	/^public procedure PSXctOnly()/ ;" function 14 { }	{ IPop InvlAccess Object PushP TypeCheck arrayObj opStk pkdaryObj rAccess stmObj strObj xAccess }
PSXor		language/math.c	/^public procedure PSXor()/ ;" function 10 { }	{ Object PopBoolean PopInteger PopP PushBoolean PushInteger TypeCheck boolObj boolean intObj }
PSYShow		fonts/fontshow.c	/^public procedure PSYShow()  { XYShow(false, true);/ ;" function 1 { }	{ XYShow false true }
PS_DONE		include/error.h	/^#define PS_DONE -7/ ;" macro 1 { CExec }	{ }
PS_ERROR		include/error.h	/^#define PS_ERROR -2/ ;" macro 1 { CCRunStd PSError StmToken SyntaxError TopError }	{ }
PS_EXIT		include/error.h	/^#define PS_EXIT -6/ ;" macro 1 { PSExecOpNm PSExit PathForAll TopError }	{ }
PS_INTERRUPT		include/error.h	/^#define PS_INTERRUPT -5/ ;" macro 1 { GetNotifyAbortCode }	{ }
PS_NAME		product/listener.c	/^#define PS_NAME "NextStep(tm) Window Server"/ ;" macro 1 { PublicListenPort }	{ }
PS_REINITCACHE		include/error.h	/^#define PS_REINITCACHE -9/ ;" macro 1 { }	{ }
PS_STKOVRFLW		include/error.h	/^#define PS_STKOVRFLW -3/ ;" macro 1 { Overflow }	{ }
PS_STOP		include/error.h	/^#define PS_STOP -4/ ;" macro 1 { PSStop PSUndef TopError }	{ }
PS_SYSIN		include/error.h	/^#define PS_SYSIN -8/ ;" macro 1 { }	{ }
PS_TERMINATE		include/error.h	/^#define PS_TERMINATE -10/ ;" macro 1 { GetNotifyAbortCode PSCoProc TopError }	{ }
PS_TIMEOUT		include/error.h	/^#define	PS_TIMEOUT -12/ ;" macro 1 { GetNotifyAbortCode }	{ }
PS_YIELD		include/error.h	/^#define PS_YIELD -11/ ;" macro 1 { GetNotifyAbortCode }	{ }
PSaveObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 45 { }	{ }
PSaveRestore_Data		vm/saverestore.c	/^typedef struct {/ ;" typedef 4 { }	{ }
PScreenPrivate		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 5 { AllocScreen AllocScreenPrivate FlushPatCache FreePattern FreeScreen GetMemForTA Gry4Of4Setup MonoSetup SendOldestToDisk SendTAToDisk SetPatInfo SetupGrayPattern ValidateTA }	{ }
PSdummymakevm		vm/makevm.c	/^private procedure PSdummymakevm ()/ ;" function 11 { InitMakeVM }	{ AllocPArray SetShared VMCopyArray false rootPrivate rootShared vmShared }
PSeCCRun		fonts/fontbuild.c	/^public procedure PSeCCRun() { / ;" function 23 { }	{ C1o C2o CCBMRun CCRun PopPString PushP StrObj cipher clear false gs keyo secret string true }
PSegmentTable		vm/vm_relocate.c	/^typedef struct _t_SegmentTable {/ ;" typedef 13 { BuildSegmentTable }	{ }
PSetHalftone		bintree/pattern.c	/^void PSetHalftone(Pattern *pat, DevMarkInfo *info)/ ;" function 8 { LCompositeFrom LSetExposureColor }	{ PATTERN PNextGSExt }
PShowState		fonts/fontshow.h	/^typedef struct _ShowState {/ ;" typedef 46 { BEGINSHOW CompositeShow FastShow FontShowInit NewShowState PopShowState PushShowState ShowByName ShowInternal SlowShow TrimShowStates if }	{ }
PSimpleMarkProcs		mp/devmark.h	/^typedef struct {/ ;" typedef 5 { ClipTrapsStringDispatch Mark }	{ }
PSpEldest		fonts/debug.c	/^private procedure PSpEldest() {CallFromPS(pEldest)/ ;" function 1 { DebugInit }	{ CallFromPS pEldest }
PSpFD		fonts/debug.c	/^private procedure PSpFD() {CallFromPS(pFD);}/ ;" function 1 { DebugInit }	{ CallFromPS pFD }
PSpMM		fonts/debug.c	/^private procedure PSpMM() {CallFromPS(pMM);}/ ;" function 1 { DebugInit }	{ CallFromPS pMM }
PSpMS		fonts/debug.c	/^private procedure PSpMS() {CallFromPS(pMS);}/ ;" function 1 { DebugInit }	{ CallFromPS pMS }
PSpSFC		fonts/debug.c	/^private procedure PSpSFC() {CallFromPS(pSFC);}/ ;" function 1 { DebugInit }	{ CallFromPS pSFC }
PSpotFunction		include/graphics.h	/^typedef struct _t_SpotFunction {/ ;" typedef 4 { }	{ }
PStack		include/language.h	/^typedef struct _t_Stack {/ ;" typedef 6 { NewStack PSFork }	{ }
PStateRec		language/grammar.h	/^typedef struct {/ ;" typedef 4 { LineComplete StmToken }	{ }
PStmBody		include/basictypes.h	/^typedef struct _t_StmBody	*PStmBody;/ ;" typedef 1 { AllocPStream BMRun CloseFile EnumerateStmBody MakePStm PrStmBody StmFinalize TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
PStmObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 38 { }	{ }
PStoDev		include/stodev.h	/^typedef struct _t_StoDev {	\/* Storage Device insta/ ;" typedef 18 { FndStoDev FndStoFile PSDeleteFile PSDevDisMount PSDevForAll PSDevFormat PSDevMount PSDevStatus PSFileNameForAll PSRenameFile RgstEditorDev RgstFontDevice RgstStoDevice StoDevCreateStm StoDevEditInit StoDevStrStatus UnRgstStoDevice UnixStoDevInit }	{ }
PStoDevProcs		include/stodev.h	/^typedef struct _t_StoDevProcs { \/* Storage Device / ;" typedef 124 { }	{ }
PStrExtension		language/scanner.c	/^typedef struct _StrExtension {/ ;" typedef 4 { ExtendStrStorage FreeStrStorage ObjFromStrStorage }	{ }
PStrObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 37 { PSAnchorSearch PSSearch }	{ }
PStrStorage		language/scanner.c	/^typedef struct {/ ;" typedef 15 { }	{ }
PStrk		graphics/ucache.c	/^typedef struct { \/* all the stuff from GState that/ ;" typedef 18 { EnterRdcInCache FindRdcInCache }	{ }
PTTLRec		language/dict.c	/^typedef struct _t_TTLRec {PKeyVal kvl; PDictBody d/ ;" typedef 1 { }	{ }
PThresholdArray		include/graphics.h	/^typedef struct _t_ThresholdArray {/ ;" typedef 4 { }	{ }
PTrp		graphics/qreducer.c	/^typedef struct {/ ;" typedef 5 { }	{ }
PUBLICTYPES		include/package_specs.h	/^#define PUBLICTYPES	"publictypes.h"/ ;" macro 1 { }	{ }
PUBLICTYPES_H		include/publictypes.h	/^#define	PUBLICTYPES_H/ ;" macro 1 { }	{ }
PUCache		graphics/ucache.c	/^typedef struct _ucacherec {/ ;" typedef 14 { CheckUCache EnterPathInCache FindPathInCache FreePath FreeRdc IniUCache PSUCacheHist UCGetDevPrim }	{ }
PUObject		language/scanner.h	/^typedef union {/ ;" typedef 4 { ReadBinObjSeq }	{ }
PUSHCPesc		fonts/fontbuild.c	/^#define PUSHCPesc 32/ ;" macro 1 { BuildChar CCRunStd }	{ }
PUserPathContext		graphics/userpath.h	/^typedef struct {/ ;" typedef 40 { BreakUpPath UStrkPthProc }	{ }
PVM		include/vm.h	/^typedef struct _t_VMStructure {/ ;" typedef 19 { CreatePrivateVM CreateVM DestroyVM ReadVM TraceSharedVM VMExpandDict }	{ }
PVMPrivateData		include/vm.h	/^typedef struct _t_VMPrivateData *PVMPrivateData;/ ;" typedef 1 { CreateVM }	{ }
PVMRoot		include/vm.h	/^typedef struct _t_VMRoot {/ ;" typedef 35 { CreateSharedVM DMFRestore DelayedMakeFont FreeShowState HandleGCFinalize InsertMID MakeCompFont MakeFontSupp MakePStm ProcessFinalizeNodes PurgeOnGC PurgeSFForKey RootPointer _RecordFinalizableObject }	{ }
PVMSegment		include/vm.h	/^typedef struct _t_VMSegment *PVMSegment;/ ;" typedef 1 { ABM_ClearAll AddProcToList AddressValidAtLevel AllocLarge AllocSmall AppendSegmentData AppendSegmentHeader BuildSegmentTable ClaimPreallocChars ContractVMSection DisplayVMSection ExpandVMSection FindFreeBytes FindVMSegment GCInternal_LookupSegment GCInternal_MarkAllocated GCInternal_ResetFreePointer GCInternal_TraceROMDict GC_HandleIndex GC_WasCollected GC_WasNECollected NewSegment PSAllocBM PSAllocVM PSTrashVM ReadVM ResetAllocCounter ResetVMSection RootPointer SetVMSegmentType TracePrivateForShared TracePrivateVM TraceSharedVM VM_Usage WriteVMSection }	{ }
PVM_Data		vm/vm_memory.c	/^typedef struct {/ ;" typedef 4 { }	{ }
PViewClip		graphics/viewclip.h	/^typedef struct _viewclip {/ ;" typedef 6 { NewViewClip VCRestoreProc VCSaveProc }	{ }
PViewClipCacheEntry		graphics/viewclip.c	/^typedef struct _viewclipce {/ ;" typedef 10 { DevClipIsRect FindCurrentViewInCache GetDevClipBBox GetDevClipDevBBox GetDevClipPrim TermClipDevPrim TermViewClip }	{ }
PVoidProc		include/publictypes.h	/^typedef	void (*PVoidProc)();	\/* Pointer to procedu/ ;" typedef 1 { DoRdcPth ImageInternal IniPreBuiltChars LanguageInit MarkNextImage PSEcho PSStCParams PSStPacking SetCacheLimit SetFlushClipProc SetObjFormat }	{ }
PWindowDevice		include/windowdevice.h	/^typedef struct _wd {/ ;" typedef 20 { CheckWindowDev CurWindowID FlushRedrawRects GetMouseMovedMask GlobalToLocal ID2Layer ID2PrevWd ID2Wd LocalToGlobal NXGetWindowInfo PSAdjustMouse PSClearNRect PSCountScreenList PSCurrentEventProcedures PSCurrentMouse PSCurrentWindowDepth PSCurrentWindowDepthLimit PSCurrentWindowDict PSDumpWindows PSMoveWindow PSPlaceWindow PSScreenList PSScreenToBase PSSetEventProcedures PSSetNRect PSSetWindowDepthLimit PSSetWindowDict PSSetWindowType PSTermWindow PSWindowList PostEvent RecalcMouseRect SendEvent SetWindow TermWindowDevice TermWindowsBy UniqueWindowId WBID2Layer Wd2Layer window }	{ }
PackedArrayRelocator		vm/makevm.c	/^private procedure (*PackedArrayRelocator)();/ ;" global 1 { BuildRelocationTable RgstPackedArrayRelocator ScanPkdAry }	{ }
Param		vm/saverestore.c	/^typedef struct paramrec {/ ;" typedef 7 { WriteContextParam }	{ }
PatAlloc		devpattern/patternimpl.c	/^private PCard8 PatAlloc(nBytes) integer nBytes; {/ ;" function 15 { AllocInfoVector AllocPatternIndex AllocPatternStorage }	{ FreeOldestPattern NIL PCard8 maxTotalPatternSize p totalAlloc true }
PatCacheInfo		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 11 { AllocPatternIndex FreePattern InitPatternImpl }	{ }
PatInfo		devpattern/grypat4of4.c	/^private integer PatInfo (h, red, green, blue, gray/ ;" function 11 { GryPat4Of4 }	{ GrayPatHandle data }
PatLine		mp/funcline.c	/^#define PatLine(wf)						\\/ ;" macro 1 { }	{ LineOperation data uint }
Path		include/graphics.h	/^typedef struct _t_Path {/ ;" typedef 20 { ConvertToListPath DoStrkPth EnterCircle FillBevel FillCircle FillQuad ImageInternal MultiRectFill PSFltnPth PSRectClip PSRectFill PSRectViewClip PSReduceRect PathForAll Stroke }	{ }
PathBBox		graphics/pathops.c	/^public procedure PathBBox(bbox)  BBox bbox;  {*bbo/ ;" function 1 { CScan }	{ gs }
PathBuildInit		graphics/pathbuild.c	/^public procedure PathBuildInit(reason)  InitReason/ ;" function 19 { GraphicsInit }	{ BuildPathFreeList IntersectPath ListPath QuadPath ReducedPath StrkPath ipStorage lpStorage os_newpool pathLengthLimit qpStorage rpStorage spStorage }
PathCross		graphics/cscan.c	/^#define PathCross(p, dir) ( (dir) == PathForw? For/ ;" macro 1 { BuildCxtn ConnectedRunOpposite DoXInflections EditBlackHoriz EditBlackSpace EditWhiteHoriz EditWhiteSpace ExtendRunDropOut FillInColumn FinishPath FixCrossFlags SplicePixel }	{ p }
PathDir		graphics/cscan.c	/^typedef enum {		\/* Type that contains a path direc/ ;" typedef 6 { FillInColumn }	{ }
PathEndChar		fonts/fontbuild.c	/^private procedure PathEndChar(fd, pcn, fm)/ ;" function 57 { CCRunStd }	{ DTfmP DictGetP Fill FixInt Fixed FixedHalf FixedOne FrPth ITfmP InvlFont ModifyCachingParams OFLIMIT Object OffsetFill PFCdToPRCd PccCount RCd RMetrics SetCchDevice Stroke TlatPath VecAdd VecSub erosion false fixtopflt gs gsmatrix hasCDevProc info_devsw info_fooFactor info_offsetval pnttypnm real strkFoo toosmall }
PathExtraOpsInit		graphics/pathextraops.c	/^public procedure PathExtraOpsInit(reason)  InitRea/ ;" function 9 { }	{ MAKEVM PSArcC RgstExplicit }
PathForAll		graphics/pathops.c	/^public procedure PathForAll(flg) boolean flg;/ ;" function 50 { PSDPathForAll PSPathForAll }	{ Cd ConvertToListPath CopyPath DURING END_HANDLER HANDLER Mtx MtxInvert NULL Object PCd PPthElt PSError PS_EXIT Path PathType PopP PushPCd RERAISE RemPathRef SetAbort TfmPCd curveto gs integer invlaccess lineto moveto pathclose pathcurveto pathlineto pathstart register secret }
PathIsRect		graphics/pathreduce.c	/^public boolean PathIsRect(path)  register PPath pa/ ;" function 65 { DevClipIsRect FindCurrentViewInCache ReducePathClipInt ShowMask }	{ CantHappen Cd DevPrim DevPrimIsRect ListPath NULL PPthElt PathTag PathType QuadPath boolean false p pathclose pathlineto register true }
PathState		graphics/userpath.h	/^typedef enum {/ ;" typedef 3 { QDoEUsrPth QDoEUsrPthFloat QDoUserPath }	{ }
PathTag		include/graphics.h	/^typedef Card16 PathTag;/ ;" typedef 1 { PathIsRect }	{ }
PathType		include/graphics.h	/^typedef enum {/ ;" typedef 6 { AddPathRef AddToPath AllocListPathRec AppendPath BreakUpPath CheckCurPt ClosePath ConvertToListPath DoPath DoRdcPth Fill HasCurrentPoint IsPathEmpty MakeOwnListPath OffsetFill PSUPath PathForAll PathIsRect QRdcOk RemPathRef ReversePath StrkInternal TlatPath TracePath }	{ }
Pattern		include/bintree.h	/^typedef struct _pattern {/ ;" typedef 9 { BM34Composite BM38Composite LCompositeFrom MP12Composite PInitialize PNew PNewColorAlpha }	{ }
PatternArray		graphics/cscan.c	/^private FixupPattern PatternArray[] = {/ ;" global 67 { GetRuleDesc PatternArrayLen }	{ }
PatternArrayLen		graphics/cscan.c	/^#define PatternArrayLen (sizeof(PatternArray)\/size/ ;" macro 1 { GetRuleDesc }	{ FixupPattern PatternArray }
PatternData		include/devpattern.h	/^typedef struct _t_PatternData {/ ;" typedef 7 { CMYKConstColorSetup ClippedMasksMark ColorSetup ConstColorSetup GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark MP12InitBricks MP12SetupPat }	{ }
PatternHandle		include/devpattern.h	/^typedef struct _t_PatternProcsRec {/ ;" typedef 19 { NXGrayPat SetFmDeviceMetrics }	{ }
PatternInfo		include/devpattern.h	/^#define PatternInfo(h, red, green, blue, gray, fir/ ;" macro 1 { FmDeviceInfo FmSetupImageArgs MaskSetupImageArgs }	{ }
PatternProcsRec		include/devpattern.h	/^typedef struct _t_PatternProcsRec {/ ;" typedef 19 { }	{ }
PatternToActions		graphics/cscan.c	/^private procedure PatternToActions(actDesc, patter/ ;" function 32 { GetRuleDesc }	{ ACTLIST ActionClassArray ActionClassPtr ActionIndexPtr ActionListArray FixupActionPtr NULLACTCLASS NULLMERIT ROTATEPIXNUM }
PccCount		fonts/fontbuild.c	/^#define PccCount (fontCtx->fontBuild._PccCount)/ ;" macro 1 { BMRun CCBuild CCRun CCRunStd GetMetrics GetMetrics2 PathEndChar SetupCacheDevice ShowByName }	{ fontCtx }
PerformFinalization		vm/saverestore.c	/^private procedure PerformFinalization(root, reason/ ;" function 41 { RstrToLevel SaveRestore_Data_Handler }	{ Assert CallFinalizeProc Card8 NIL PFinalizeNode boolean escObj false level register true }
PeterPan		fonts/fontcache.h	/^#define PeterPan 0x0/ ;" macro 1 { InitFontCache InitSortMID IsFreeMT MMEldest MSEldest MTFree SortMIDAges }	{ }
PickContext		product/ipcscheduler.c	/^private PSSchedulerContext PickContext(PSScheduler/ ;" function 27 { SelectPSContext }	{ NULL PSSchedulerContext contextList false }
Piece		bintree/bintreetypes.h	/^typedef union _piece {/ ;" typedef 5 { BPDivideAt BPObscureInside DPRevealInside EXBuildExtents EXDummyScreens }	{ }
PingAsyncDrivers		bintree/drivers.c	/^void PingAsyncDrivers()/ ;" function 9 { sendAck }	{ NXDevice deviceList }
PixInfo		graphics/image.c	/^typedef struct {/ ;" typedef 6 { ImageInternal }	{ }
Pixel		graphics/cscan.c	/^#define Pixel(coord) (FTrunc(coord))/ ;" macro 1 { AddYCross BuildCxtn BuildInitialRuns BuildYCross CheckHorizWhite DoFixupAction EditWhiteHoriz ExtendRunDropOut FillInColumn FillInPairs FixPixelProblem GetRuleDesc SetLeftFlag SetPixelInDropOut SplicePixel StartSplice }	{ FTrunc }
PixelInCxtn		graphics/cscan.c	/^#define PixelInCxtn(cxtn, pixNum) ( (cxtn) & (1<<(/ ;" macro 1 { DoFixupAction }	{ }
PixelIsBlack		graphics/cscan.c	/^private boolean PixelIsBlack(x, y)/ ;" function 19 { CheckCol CheckRow DoFixupAction FillInColumn }	{ CrossPtr NULL REG YCROSS false true yBoxMax yBoxMin }
PixelOrigin		graphics/cscan.c	/^#define PixelOrigin(pix) (FixInt(pix))/ ;" macro 1 { }	{ FixInt }
PixelToCxtnArray		graphics/cscan.c	/^private Card8 PixelToCxtnArray[9] = { 0x40, 0x20, / ;" global 1 { RelPixelToCxtn }	{ }
PixelToPixNumAry		graphics/cscan.c	/^private IntX  PixelToPixNumAry[9] = {   6,    5,  / ;" global 1 { RelPixelToPixNum }	{ }
PkAObjF		language/numstrm.c	/^private Fixed PkAObjF(ns) PNumStrm ns; {/ ;" function 9 { SetupNumStrm }	{ FixInt Object TypeCheck VMCarCdr intObj pflttofix realObj }
PkAObjR		language/numstrm.c	/^private procedure PkAObjR(ns, p) PNumStrm ns; real/ ;" function 9 { SetupNumStrm }	{ Component Object TypeCheck VMCarCdr intObj p realObj }
Pkdary		language/packedarray.c	/^public procedure Pkdary(n, ppary)/ ;" function 46 { AryToMrk PSPkdary }	{ ClaimPreallocChars Code ConditionalInvalidateRecycler ConditionalResetRecycler EncodeObj IPop LPkdaryObj NIL Object PCard8 PObject PreallocChars cardinal discard integer mark opStk vmCurrent }
PkdaryInit		language/packedarray.c	/^public procedure PkdaryInit(reason)  InitReason re/ ;" function 11 { LanguageInit }	{ EnumerateComposites GC_RgstPkdAryEnumerator endswitch }
PkdaryObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 43 { PSPkdary ScanPkdAry }	{ }
Point		graphics/reducer.c	/^  typedef struct/ ;" typedef 10 { CurrentMouse FindPieceBounds IniReducer InitReducer MakePoint MatchMonitors PSMoveWindow PostDeathEvent SetMouse }	{ }
PointInDevPrim		graphics/hitdetect.c	/^public boolean PointInDevPrim(dp, cd) DevPrim *dp;/ ;" function 39 { InFill InStroke InUFill PSInUStroke }	{ BoundsCompare CantHappen DevBounds DevCd DevRun PointInRun PointInTraps TfmPCd false gs integer true xaOffset }
PointInRun		graphics/hitdetect.c	/^private boolean PointInRun(r1, dc)/ ;" function 20 { PointInDevPrim }	{ PInt16 RunArrayRow false r1 register true }
PointInTraps		graphics/maketrap.c	/^public boolean PointInTraps(t, items, dc)/ ;" function 36 { PointInDevPrim }	{ FTrunc false integer register true }
PointOnLine		graphics/reducer.c	/^private short int PointOnLine(x, y, line)  Rationa/ ;" function 25 { Intersect }	{ PLine PLn PPt RatComp Rational r register }
PointQ		graphics/reducer.c	/^  typedef struct/ ;" typedef 9 { IniReducer InitReducer PQInsert }	{ }
Pool		include/pslib.h	/^typedef struct _t_Pool *Pool;/ ;" typedef 1 { IniClrSpace IniTransfer os_newpool }	{ }
PoolChunk		pslib/pool.c	/^typedef struct _t_PoolChunk {/ ;" typedef 3 { GrowPool os_freepool }	{ }
PoolElement		pslib/pool.c	/^typedef struct _t_PoolElement {/ ;" typedef 3 { GrowPool os_freeelement os_newelement os_newpool }	{ }
PoolRec		pslib/pool.c	/^typedef struct _t_Pool {/ ;" typedef 8 { os_newpool }	{ }
PopBoolean		include/language.h	/^#define PopBoolean	PSPopBoolean/ ;" macro 1 { DoImage PSAlwaysErode PSAnd PSCharPath PSColorImage PSEcho PSFCCheck PSFCDebug PSIf PSIfElse PSOr PSSetShared PSSetStrokeAdjust PSStPacking PSUPath PSUsePrebuilts PSXor psTraceOffsetFill }	{ PSPopBoolean }
PopBounds		product/coordinates.c	/^public procedure PopBounds(PMtx m, Bounds *devBoun/ ;" function 47 { PSHideInstance PSReadImage PSSetNRect PSSizeImage }	{ Cd MyCeil PSPopPCd RealEq0 d real }
PopCardinal		language/type.c	/^public cardinal PopCardinal()/ ;" function 15 { PSCVRS PSDefSysName PSDefUserName PSDevFormat PSGetInterval PSIndex PSPkdary PSPutInterval PSSetLineCap PSSetLineJoin PSSetStackLimit PSStObjFormat PSSysNameMap WriteObject }	{ IPopSimple MAXcardinal Object RangeCheck RecyclerPop TypeCheck cardinal intObj integer opStk }
PopColorValues		graphics/colorops1.c	/^public procedure PopColorValues(colorSpace, values/ ;" function 44 { ProcSampleProc }	{ CIELAB_COLOR_SPACE CIELIGHTNESS_COLOR_SPACE DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE PopLightness PopPColorVal PopPReal lab real }
PopFixed		fonts/fontbuild.c	/^private Fixed PopFixed() {/ ;" function 5 { CCRunStd GetErosion PopPFCd }	{ PSPopPReal pflttofix r real }
PopFlName		language/stodevsupport.c	/^private procedure PopFlName(name)/ ;" function 11 { PSDeleteFile PSDevDisMount PSDevFormat PSDevMount PSDevStatus PSFileNameForAll PSRenameFile }	{ LimitCheck MAXNAMELENGTH PopPRString StrObj StringText string }
PopFourPlace		graphics/reducer.c	/^private FourPlace PopFourPlace()/ ;" function 6 { psDiv32 }	{ FourPlace PopInteger }
PopGState		graphics/gstates.c	/^public PGState PopGState(obp,accessRequired)/ ;" function 13 { PSCurrentGState PSSetGState }	{ InvlAccess NULL Object PopP TypeCheck escObj gs nullObj objGState }
PopIntCoord		product/windowops.c	/^private int PopIntCoord()/ ;" function 17 { PSFindWindow PSMoveWindow PSPlaceWindow PSWindow }	{ PSGetOperandType PSPopInteger PSPopPReal PSRangeCheck r }
PopIntValue		product/event.c	/^private int PopIntValue()/ ;" function 11 { popEvent }	{ PSGetOperandType PSPopInteger PSPopPReal r }
PopInteger		vm/rgstcmds.c	/^#define PopInteger PSPopInteger/ ;" macro 1 { CCBMRun CVT DoImage PSAWidthShow PSAnd PSArcC PSBitShift PSCCRun PSColorImage PSDefUserObj PSDetach PSDevFormat PSExecUserObj PSIDiv PSInitFontCache PSInitWrite PSJoin PSOr PSPopInteger PSRdBytes PSRepeat PSRgstNames PSRgstOps PSRoll PSSRand PSSetCacheLimit PSSetHalftonePhase PSSetUCacheParams PSStCParams PSStFKey PSStFilPos PSStSKey PSUndefUserObj PSWidthShow PSWrite PSXor PopFourPlace PopLimitCard PopRational psDiv32 psFPMult }	{ PSPopInteger }
PopLightness		graphics/colorops1.c	/^private procedure PopLightness(v) Preal v; {/ ;" function 5 { PopColorValues }	{ PopPReal RealLt0 fp100 fpZero }
PopLimitCard		language/type.c	/^public Card16 PopLimitCard()/ ;" function 7 { PSArray PSDict PSString PSTrickyDict }	{ Card16 LimitCheck MAXCard16 PopInteger RangeCheck integer }
PopMallocString		product/machportdevice.c	/^static char *PopMallocString()/ ;" function 7 { PSMachPortDevice }	{ PSPopString PSStringLength SafeMalloc p }
PopMtx		graphics/matrix.c	/^public procedure PopMtx(m)  PMtx m;/ ;" function 2 { DoImage PSCnct PSCnctMtx PSDTfm PSIDTfm PSITfm PSInUStroke PSInvertMtx PSMakeFont PSRectStroke PSSetMtx PSTfm PSUStroke PSUStrokePath }	{ AryObj PAryToMtx PopPArray }
PopNaturalMax		product/windowgraphics.c	/^public int PopNaturalMax(int max)/ ;" function 7 { PSComposite PSCompositeRect PSFrameBuffer PSSetWindowType PSWindow }	{ PSPopInteger PSRangeCheck max }
PopP		language/stack.c	/^public procedure PopP(pob)/ ;" function 6 { BuildMultiRectPath CCBMRun CarefulPushP DoImage ImageDict PSAbs PSAdd PSBind PSCCRun PSCVRS PSCVS PSCeiling PSCopy PSDef PSDefUserObj PSDefineFont PSDiv PSEExec PSEq PSExCheck PSExec PSFloor PSForAll PSIntDict PSKnown PSLoad PSLt PSMod PSMonitor PSMul PSNe PSNeg PSNotify PSOpDef PSPopGState PSPopManagedObject PSPopTempObject PSPrObject PSPrValue PSPutInterval PSRectFill PSRgstNames PSRgstOps PSRound PSRstr PSRtat PSScal PSSelectFont PSSetColorScreen PSSetHalftone PSSetScreen PSStCParams PSStatus PSStopped PSStore PSSub PSSuperExec PSTlat PSTruncate PSUnDef (etc) }	{ IPushSimple StackPopP opStk refStk }
PopPArray		language/type.c	/^public procedure PopPArray(pob)  PObject pob;/ ;" function 10 { Bang GetUsrPthAry PSALoad PSAStore PSCShow PSCnctMtx PSCrMtx PSDevForAll PSDfMtx PSDictStack PSExecStack PSFileNameForAll PSFor PSForAll PSIdentMtx PSIf PSIfElse PSInvertMtx PSKShow PSLoop PSOpDef PSPopPMtx PSRepeat PSSetBlkGeneration PSSetClrTransfer PSSetDash PSSetTransfer PSSetUCRemoval PopMtx }	{ IPopOp TypeCheck arrayObj pkdaryObj }
PopPCd		include/language.h	/^#define PopPCd		PSPopPCd/ ;" macro 1 { CallArc DoArcTo InFill InStroke InUFill ModifyCachingParams PSAShow PSAWidthShow PSArcC PSCurveTo PSDTfm PSIDTfm PSITfm PSInUStroke PSLck PSLineTo PSMoveTo PSRCurveTo PSRLineTo PSRMoveTo PSScal PSSetBBox PSSetCchDevice2 PSSetCharWidth PSTfm PSTlat PSWidthShow SetCacheDev psNewPoint }	{ PSPopPCd }
PopPColorVal		graphics/colorops1.c	/^public procedure PopPColorVal(v) Preal v; {/ ;" function 4 { PSCrCMYKColor PSSetCMYKColor PSSetGray PSSetHSBColor PSSetRGBColor PopColorValues }	{ LimitColor PopPReal }
PopPDict		language/type.c	/^public procedure PopPDict(pob)  PDictObj pob;/ ;" function 6 { CCBMRun PSBegin PSCCRun PSDefineFont PSKnown PSMakeFont PSMaxLength PSScaleFont PSSelectFont PSSetFont PSUnDef }	{ IPopOp TypeCheck dictObj }
PopPFCd		fonts/fontbuild.c	/^private procedure PopPFCd(f) PFCd f; {/ ;" function 4 { }	{ PopFixed }
PopPNumber		language/exec.c	/^private procedure PopPNumber(pob)  PObject pob;/ ;" function 10 { PSFor }	{ PopP TypeCheck intObj realObj }
PopPQ		graphics/reducer.c	/^private PqOffset PopPQ()/ ;" function 12 { Reduce }	{ PPq PqOffset pqHead pqRecent register }
PopPRString		language/type.c	/^public procedure PopPRString(pob)  PStrObj pob;/ ;" function 5 { PSAnchorSearch PSCacheFlush PSCacheInit PSCacheStatistics PSFile PSPopString PSPrint PSRun PSSearch PSWrtHexString PSWrtString PopFlName }	{ InvlAccess PopPString rAccess }
PopPReal		include/language.h	/^#define PopPReal	PSPopPReal/ ;" macro 1 { CalcThresholds CallArc DoArcTo FillInBG FillInTfrTbl FillInUCR MakeRectPath PSATan PSCos PSErodeSW PSExp PSLn PSLog PSOffsetFill PSPopPCd PSPopPReal PSRtat PSScaleFont PSSetColorScreen PSSetDash PSSetFlatThreshold PSSetLineWidth PSSetMiterLimit PSSetScreen PSSetXLock PSSetYLock PSSin PSSqRt PopColorValues PopLightness PopPColorVal }	{ PSPopPReal }
PopPStream		language/type.c	/^public procedure PopPStream(pob)  PStmObj pob;/ ;" function 5 { Bang PSBytesAvailable PSCloseFile PSFilPos PSFlsFile PSInitWrite PSPopStream PSRead PSReadHexString PSReadLine PSReadString PSResFile PSStFilPos PSWrite PSWriteData PSWrtHexString PSWrtString WriteObject }	{ IPopOp TypeCheck stmObj }
PopPString		language/type.c	/^public procedure PopPString(pob) PStrObj pob;/ ;" function 5 { CVT GetProcSource PSAShow PSAWidthShow PSCShow PSCVN PSCVRS PSCVS PSCharPath PSChdir PSDevForAll PSFileNameForAll PSKShow PSMakeVM PSMkTemp PSRdBytes PSReadHexString PSReadLine PSReadString PSShow PSStrWidth PSWidthShow PSWriteData PSeCCRun PopPRString XYShow }	{ IPopOp TypeCheck strObj }
PopRational		graphics/reducer.c	/^private Rational PopRational()/ ;" function 7 { psCompRat }	{ PopInteger Rational r }
PopShowState		fonts/fontshow.c	/^private procedure PopShowState()/ ;" function 7 { ENDSHOW }	{ DebugAssert FreeShowState NIL PShowState level register showLevel ss ssr }
PostByCode		product/event.c	/^public int PostByCode(int what)/ ;" function 7 { PSCurrentHowPost PostEvent }	{ NX_NOWINDOW NX_NUMPROCS postHow }
PostChanged		product/event.c	/^public procedure PostChanged(PWindowDevice win, in/ ;" function 14 { FlushRedrawRects }	{ ClearEvent NXEvent NX_EXPLICIT NX_KITDEFINED NX_WINCHANGED PostEvent data window }
PostDeathEvent		product/event.c	/^public procedure PostDeathEvent(int id)/ ;" function 10 { NSDestroyPS }	{ LLEventPost NXEventData NX_SYSDEFINED Point data }
PostEvent		product/event.c	/^boolean PostEvent(NXEvent *ep, int how, int contex/ ;" function 70 { DispatchEvents PSPostEvent PSPostEventByContext PostChanged PostNotification PostRedraw }	{ EventCodeMask GetFrontWindowDevice GetNextWindowDevice ID2Wd LocalToGlobal NULL NX_BROADCAST NX_BYPSCONTEXT NX_BYTYPE NX_EXPLICIT NX_FIRSTWINDOW NX_LASTKEY NX_LASTLEFT NX_LASTRIGHT NX_MOUSEWINDOW NX_NEXTWINDOW NX_NOWINDOW NX_POSTEVENTBYCONTEXT NX_TOPWINDOW NX_TRANSMIT PWindowDevice PostByCode SendEvent boolean data false lastKey lastLeft lastRight mouseWindow prevKey true window windowBase }
PostNotification		product/mouse_driver.c	/^public procedure PostNotification(int x, int y, NR/ ;" function 26 { PSSetNRect RecalcMouseRect }	{ ClearEvent NXEvent NX_EXPLICIT NX_MOUSEENTERED NX_MOUSEEXITED NX_MOUSEWINDOW OUTSIDE PostEvent WHILELEFT WHILERIGHT data eventGlobals remapY window }
PostRedraw		product/event.c	/^public procedure PostRedraw(PWindowDevice win, int/ ;" function 14 { FlushRedrawRects }	{ ClearEvent NXEvent NX_EXPLICIT NX_KITDEFINED NX_WINEXPOSED PostEvent data window }
PostScriptInit		postscript/postscript.c	/^public procedure PostScriptInit(reason)/ ;" function 9 { }	{ ContextOpsInit ControlInit CustomOpsInit PSSpaceInit StateInit }
PostScriptParameters		include/postscript.h	/^typedef struct _t_PostScriptParameters {/ ;" typedef 52 { Mnextmain }	{ }
PqOffset		graphics/reducer.c	/^typedef Card32 PqOffset;/ ;" typedef 1 { PQInsert PopPQ Reduce }	{ }
PrAryBody		fonts/debug.c	/^private integer PrAryBody(indent,aop,start,end,ski/ ;" function 13 { DumpArray PrintVal }	{ Aborted GetDebugStm Object PrintBlanks PrintObj Stm VMGetElem cardinal fflush nullObj os_fprintf start }
PrNameAryBody		fonts/debug.c	/^private integer PrNameAryBody(indent,aop,start,end/ ;" function 14 { DumpNameArray DumpRoot }	{ Aborted GetDebugStm LNameObj NIL Object PrintBlanks PrintNameString Stm cardinal fflush os_fprintf rootShared start }
PrPkdaryBody		fonts/debug.c	/^private procedure PrPkdaryBody(indent, x)/ ;" function 17 { PrintVal }	{ Aborted DecodeObj GetDebugStm Object PrintBlanks PrintObj Stm charptr fflush integer os_fprintf p }
PrStmBody		fonts/debug.c	/^private procedure PrStmBody(indent, x)/ ;" function 10 { PrintVal }	{ GetDebugStm PStmBody PrintBlanks Stm fflush level os_fprintf }
PreBuiltArgs		include/devicetypes.h	/^typedef struct _t_PreBuiltArgs/ ;" typedef 13 { PreBuiltChar }	{ }
PreBuiltChar		fonts/fontshow.c	/^private boolean PreBuiltChar(pcn) Object *pcn;/ ;" function 36 { IniFmDevImpl IniGenDevImpl IniMaskDevImpl IniNullDevImpl IniNullDevice PreBuiltChar ShowByName }	{ AlreadyValidMID BitmapWidthsFID CIAlloc GetFontAndCharInfo MaxCharSortInterval Mtx Object PREBUILT_OUTLINE PreBuiltArgs PreBuiltChar SortCharAges TransformFID TypeOfFID boolean charSortInterval ctxCacheThreshold ctxCompThreshold false gs inBetweenSizeFIDFactor integer nameObj ndcFID prebuiltFIDMask ss transformedCharFIDFactor true usePrebuilts }
PreCacheTrapCircles		graphics/stroke.c	/^public procedure PreCacheTrapCircles() {/ ;" function 10 { DoRdcStroke }	{ Cd MkCirc PreStroke SetupForCircles doingVectors fpHalf fpZero }
PreEnumerateSetup		graphics/userpath.c	/^private procedure PreEnumerateSetup(context, start/ ;" function 36 { FillUserPathEnumerate QFillUserPathEnumerate QStrokeUserPathEnumerate StrokeUserPathEnumerate }	{ boolean dbltofix fp16k gs start }
PreStroke		graphics/stroke.c	/^private procedure PreStroke() {/ ;" function 10 { DoStroke PreCacheTrapCircles }	{ PGState RealEq0 SetHalfWidth boolean dashed doingVectors gs normalize register true uhalfwidth }
PreXLock		fonts/fontbuild.c	/^private Fixed PreXLock(xf, xn, xl, xa)/ ;" function 22 { RMLock RYLock }	{ Adjust CalcHW2 FCd Fixed FntDTfmP FntITfmP FntTfmP UseStdWidth false lenstdvw locktype register stdvw }
PreYLock		fonts/fontbuild.c	/^private Fixed PreYLock(yf, yn, yd, ya)/ ;" function 22 { RVLock }	{ Adjust CalcHW2 FCd Fixed FntDTfmP FntITfmP FntTfmP UseStdWidth lenstdhw locktype register stdhw true }
Preal		include/publictypes.h	/^typedef float real, *Preal;/ ;" typedef 1 { UsrPthBBox }	{ }
PreallocChars		vm/vm_segment.c	/^public PCard8 PreallocChars (nBytes)/ ;" function 11 { Pkdary }	{ FindFreeBytes current false free integer vmCurrent }
PrebuiltEncoding		device/nextprebuilt.h	/^typedef struct {/ ;" typedef 6 { GetPreBuiltChar readPrebuiltFile }	{ }
PrebuiltFile		device/prebuiltformat.h	/^typedef struct _t_PrebuiltFile {/ ;" typedef 40 { buildPrebuilt readPrebuiltFile }	{ }
PrebuiltMask		device/prebuiltformat.h	/^typedef struct _t_PrebuiltMask {/ ;" typedef 11 { buildPrebuilt }	{ }
PrebuiltMatrix		device/prebuiltformat.h	/^typedef struct _t_PrebuiltMatrix {/ ;" typedef 9 { buildPrebuilt readPrebuiltFile }	{ }
PrebuiltPathSearch		device/nextprebuilt.c	/^static inline int PrebuiltPathSearch(char *fontNam/ ;" function 11 { DevRgstPrebuiltFontInfo }	{ FontPathSearch PREBUILT_SUFFIX strcpy }
PrebuiltVertMetrics		device/prebuiltformat.h	/^typedef struct _t_PrebuiltVertMetrics {/ ;" typedef 6 { buildPrebuilt }	{ }
PrebuiltVertWidths		device/prebuiltformat.h	/^typedef struct _t_PrebuiltVertWidths {/ ;" typedef 4 { readPrebuiltFile }	{ }
PrebuiltWidth		device/prebuiltformat.h	/^typedef struct _t_PrebuiltWidth {/ ;" typedef 4 { readPrebuiltFile }	{ }
PrevAge		fonts/cicache.c	/^#define PrevAge(X) CIReg [X].ageblink/ ;" macro 1 { CondAssign SortCharAges }	{ }
PrintAccess		fonts/debug.c	/^private PrintAccess(a)/ ;" function 11 { PrintDOB PrintObj }	{ GetDebugStm Stm integer os_fprintf rAccess s wAccess xAccess }
PrintBitmap		graphics/cscan.c	/^private procedure PrintBitmap()/ ;" function 23 { CScan }	{ BitmapByte DevCd Int16 bmbase bmbytewidth charBBox p printf putc }
PrintBlanks		fonts/debug.c	/^public PrintBlanks(i)/ ;" function 6 { PrAryBody PrNameAryBody PrPkdaryBody PrStmBody PrintDOB PrintKeyVal PrintNameEntry PrintVal pcom }	{ GetDebugStm Stm putc }
PrintBlueLocs		fonts/fontbuild.c	/^private procedure PrintBlueLocs(botLocs, lenBotBan/ ;" function 10 { AdjustBlues BuildChar CCRunStd }	{ Bpick FD IntX printf }
PrintBlueValues		fonts/fontbuild.c	/^private procedure PrintBlueValues(botBands,lenBotB/ ;" function 10 { GetBlueValues }	{ FD IntX printf }
PrintBoolean		fonts/debug.c	/^private PrintBoolean(b)  boolean b;/ ;" function 6 { pMID }	{ GetDebugStm Stm fflush os_fprintf }
PrintClrs		fonts/fontbuild.c	/^private procedure PrintClrs(yflg) boolean yflg; {/ ;" function 6 { }	{ PGlbClr PrntClr glbClrLst register }
PrintCntrs		fonts/fontbuild.c	/^private procedure PrintCntrs() {/ ;" function 10 { }	{ FD PGlbCntr PrntClr glbCntrLst printf register }
PrintDOB		fonts/debug.c	/^public PrintDOB(indent,x)/ ;" function 19 { DumpDict }	{ DictBody GetDebugStm PrintAccess PrintBlanks Stm VMGetDict XlatDictRef fflush level os_fprintf putc }
PrintDevCoord		fonts/debug.c	/^private PrintDevCoord(pc)  DevCd *pc;/ ;" function 9 { pMID }	{ GetDebugStm Stm fflush fixtodbl os_fprintf }
PrintEventTimes		product/timelog.h	/^#define PrintEventTimes()/ ;" macro 1 { }	{ }
PrintKeyVal		fonts/debug.c	/^public PrintKeyVal(indent, x)  integer indent; PKe/ ;" function 10 { DumpDict PrintNameEntry }	{ GetDebugStm KeyVal PrintBlanks PrintObj Stm VMGetKeyVal fflush integer os_fprintf }
PrintMTX		fonts/debug.c	/^private PrintMTX(pm)/ ;" function 7 { PrintMidDict pMID pSFC }	{ GetDebugStm Stm d fflush os_fprintf }
PrintMidDict		fonts/debug.c	/^private PrintMidDict(d)  DictObj d;/ ;" function 32 { pMID }	{ DictGetP GetDebugStm Known Mtx Object PAryToMtx PrintMTX PrintNameString Stm boolean d false fflush fontsNames integer nullObj os_fprintf pcom true }
PrintNameEntry		fonts/debug.c	/^public PrintNameEntry(indent, x)/ ;" function 19 { PrintVal }	{ GetDebugStm PNameEntry PrintBlanks PrintKeyVal Stm fflush os_fprintf }
PrintNameString		fonts/debug.c	/^private PrintNameString(pn)/ ;" function 7 { PrNameAryBody PrintMidDict PrintObj pFD pSFC }	{ DPrintSOP NameToPString StrObj }
PrintNode		fonts/debug.c	/^public boolean PrintNode(x, data)/ ;" function 7 { DumpStack }	{ PrintObj integer true }
PrintObj		fonts/debug.c	/^public PrintObj(indent,x)/ ;" function 90 { DumpArray DumpNameArray DumpRoot PSPrObject PrAryBody PrPkdaryBody PrintKeyVal PrintNode PrintVal pFD }	{ GetDebugStm LNameObj NameObj PrintAccess PrintNameString Stm arrayObj boolObj cmdObj dictObj escObj false fontObj intObj nameObj nullObj objMark objSave os_fprintf pcom pkdaryObj putc realObj stmObj strObj true }
PrintSOP		fonts/debug.c	/^public PrintSOP(sop)/ ;" function 10 { PSDumpNames }	{ Aborted GetDebugStm Stm VMGetChar cardinal fflush putchar }
PrintTimedEvents		product/timelog.c	/^void PrintTimedEvents()/ ;" function 17 { }	{ TIMEBUFLENGTH printf timeLog }
PrintVal		fonts/debug.c	/^public PrintVal(indent,x)/ ;" function 28 { PSPrValue }	{ DPrintSOP DumpDict GetDebugStm PrAryBody PrPkdaryBody PrStmBody PrintBlanks PrintNameEntry PrintObj Stm arrayObj dictObj nameObj os_fprintf pkdaryObj putc stmObj strObj true }
PrinterDataBytes		product/machportdevice.c	/^#define PrinterDataBytes 	oolImageParam.msg_type_l/ ;" macro 1 { mpdShowPage }	{ }
PrinterDestPort		product/machportdevice.c	/^#define PrinterDestPort 	msgHeader.msg_remote_port/ ;" macro 1 { mpdShowPage }	{ }
PrivTraceInfo		vm/gcmisc.c	/^public boolean *HasRefs, *PrivTraceInfo;/ ;" global 1 { GC_PrivGCMustTrace InitRefArrays }	{ }
PrivateListenPort		product/listener.c	/^private procedure PrivateListenPort()/ ;" function 6 { PSSetPublicListener }	{ CheckInListenPort CheckOutListenPort NULL listenerState privateName }
PrivateStreamRoots		language/stream.c	/^public procedure PrivateStreamRoots(info) GC_Info / ;" function 5 { PushLangRoots }	{ GC_Push stdinStm stdoutStm }
PrntClr		fonts/fontbuild.c	/^private procedure PrntClr(g) register PGlbClr g; {/ ;" function 5 { PrintClrs PrintCntrs }	{ FD printf }
ProcSampleProc		graphics/image.c	/^private procedure ProcSampleProc(sample, result, s/ ;" function 19 { ImageInternal }	{ Color NIL PopColorValues PushInteger PushPReal RAISE integer max real }
ProcessFinalizeNodes		vm/vm.c	/^private procedure ProcessFinalizeNodes(info, space/ ;" function 16 { PushSharedVMRoots PushVMRoots }	{ FinalizeNode GC_MarkAllocated NIL PFinalizeNode PVMRoot register rootPrivate rootShared }
ProcessGlbClrs		fonts/fontbuild.c	/^internal procedure ProcessGlbClrs(botBands, lenBot/ ;" function 25 { BuildChar CCRunStd }	{ BlueLock BuildGlbCntrs CalcGlbClrLocs GlbFixLocs GlobalColoring PGlbClr glbClrLst glbCntrLst glcrFailure nGlbClrs nGlbCntrs register true }
ProcessSaveData		vm/vm.c	/^private procedure ProcessSaveData(info)/ ;" function 68 { PushVMRoots }	{ GC_MarkAllocated GC_Push GenericBody KeyVal NIL PSR PSRD PSRG PSRO SR SRD SRG SRO header register rootPrivate }
PtLT		graphics/reducer.c	/^private boolean PtLT(pt1, pt2)  PtOffset pt1, pt2;/ ;" function 22 { MakeLine PQInsert }	{ Int32 PPoint PPt RatComp boolean false register true }
PtOffset		graphics/reducer.c	/^typedef Card32 PtOffset;/ ;" typedef 1 { CheckIntersection MakePoint NewPoint Reduce ShortenLine }	{ }
PthElt		include/graphics.h	/^typedef struct _t_PthElt {/ ;" typedef 5 { BuildPathFreeList }	{ }
PubLangCtxt		include/language.h	/^typedef struct _t_PubLangCtxt {/ ;" typedef 3 { LanguageInit }	{ }
PublicListenPort		product/listener.c	/^private procedure PublicListenPort(int init)/ ;" function 6 { PSListener PSSetPublicListener }	{ CheckInListenPort CheckOutListenPort NULL PS_NAME listenerState }
PurgeCI		fonts/cicache.c	/^public PurgeCI(pne) PNameEntry pne; {/ ;" function 19 { FinalizeNames }	{ CI CIFree CINULL CIOffset CheckCI MIDCount MIDNULL PCIItem PurgeFSCache ReleaseCI register }
PurgeFSCache		fonts/fastshow.c	/^public procedure PurgeFSCache(mid) register MID mi/ ;" function 10 { PSFlushFontCache PurgeCI PurgeMID ReleaseCI }	{ FSCacheMID FSCacheSz MID MIDNULL integer register }
PurgeFontRefs		fonts/fontcache.c	/^private procedure PurgeFontRefs(dict)/ ;" function 23 { PSDefineFont PSUnDefineFont }	{ DebugAssert MID MIDNULL MT PMTItem PurgeMID forallMM register }
PurgeMID		fonts/midcache.c	/^public procedure PurgeMID(mid)/ ;" function 24 { DMFRestore PurgeFontRefs TrimEldestMID }	{ Assert CIOffset CheckMT DeleteCIs MT MTFree PCIItem PMTItem PurgeFSCache PurgeSFForMID Vmem register true }
PurgeMM		fonts/midcache.c	/^private procedure PurgeMM(root, wantToPurge, arg)/ ;" function 32 { PurgeOnGC PurgeOnRstr }	{ Card32 DebugAssert MID MIDNULL MT MTFree PMTItem PurgeSFForMID arg false forallMM register }
PurgeOnGC		fonts/midcache.c	/^public procedure PurgeOnGC(clientData, info)/ ;" function 10 { FontCacheInit }	{ GC_GetRoot MIDPurgedByGC PVMRoot PurgeMM }
PurgeOnRstr		fonts/midcache.c	/^public procedure PurgeOnRstr(lev)/ ;" function 8 { FontCacheInit FontDataHandler }	{ MIDPurgedByRestore PurgeMM integer level rootPrivate }
PurgeSFForKey		fonts/selectfont.c	/^public procedure PurgeSFForKey(key)/ ;" function 27 { PSDefineFont PSUnDefineFont }	{ CurrentShared DebugAssert FreeSelectFont MT NIL PMTItem PSFCEntry PVMRoot freemem nameObj register rootPrivate rootShared sfCache }
PurgeSFForMID		fonts/selectfont.c	/^public procedure PurgeSFForMID(mid)/ ;" function 19 { PurgeMID PurgeMM }	{ FreeSelectFont NIL PSFCEntry register sfCache }
Push3NullScreens		graphics/gray.c	/^private procedure Push3NullScreens() {/ ;" function 9 { PSCrColorScreen }	{ Object PushFakeFreqAngle PushP XAryObj integer }
PushBoolean		include/language.h	/^#define PushBoolean	PSPushBoolean/ ;" macro 1 { CStopped PSAnchorSearch PSAnd PSCrPacking PSCurrentShared PSCurrentStrokeAdjust PSDevMount PSDevStatus PSEq PSExCheck PSFlushCache PSGe PSGt PSInEOFill PSInFill PSInStroke PSInUEOFill PSInUFill PSInUStroke PSKnown PSLe PSLt PSNe PSOr PSRCheck PSRead PSReadHexString PSReadLine PSReadString PSSCheck PSSearch PSSetStackLimit PSStatus PSToken PSWCheck PSWhere PSXCheck PSXor StoDevStrStatus }	{ PSPushBoolean }
PushCardinal		language/type.c	/^public procedure PushCardinal(c)  cardinal c;/ ;" function 6 { PSCntDictStack PSCntExecStack PSCntToMark PSCount PSCrLineCap PSCrLineJoin PSMaxLength PSSetStackLimit }	{ IPushSimple LIntObj Object integer opStk }
PushFakeFreqAngle		graphics/gray.c	/^private procedure PushFakeFreqAngle() {/ ;" function 4 { PSCrColorScreen PSCrScreen Push3NullScreens }	{ PushInteger integer }
PushFixed		fonts/fontbuild.c	/^private procedure PushFixed(f) Fixed f; {/ ;" function 5 { CCRunStd GetErosion PushPFCd }	{ PSPushPReal fixtopflt r real }
PushFourPlace		graphics/reducer.c	/^private procedure PushFourPlace(f)/ ;" function 6 { psFPMult }	{ PushInteger }
PushGStateItems		graphics/gstates.c	/^private procedure PushGStateItems(gState, info)/ ;" function 35 { GStateEnumerator PushGrfxRoots }	{ GC_Push NIL Screen TracePath nullObj s }
PushGrfxRoots		graphics/gstates.c	/^private procedure PushGrfxRoots(clientData, info)/ ;" function 11 { IniGStates }	{ GState NIL PushGStateItems gstack register }
PushInteger		include/language.h	/^#define PushInteger	PSPushInteger/ ;" macro 1 { BuildChar CIFor ChrMapBuildChar CompSlowShow InternalBuildChar PSAbs PSAdd PSAnd PSBitShift PSBytesAvailable PSCacheStatus PSCrCParams PSCrObjFormat PSCurrentContext PSCurrentHalftonePhase PSCvI PSDayTime PSDevStatus PSFilPos PSFork PSGet PSIDiv PSLength PSMod PSMul PSNProbeStats PSNeg PSOr PSProbeStats PSRRand PSRand PSRead PSRealTime PSSub PSUCacheHist PSUCacheStatus PSUPath PSUserTime PSWTranslation PSXor ProcSampleProc PushFakeFreqAngle PushFourPlace PushRational ReducePSCallBack SFAProc SlowShow StoDevStrStatus psCompRat }	{ PSPushInteger }
PushLangRoots		language/exec.c	/^private procedure PushLangRoots(clientData, info)/ ;" function 12 { LanguageInit }	{ GC_GetCollectionType PrivateStreamRoots PushStackRoots }
PushP		language/stack.c	/^public procedure PushP(pob)  PObject pob; {StackPu/ ;" function 1 { AFAProc BuildChar CVT CarefulPushP DFAProc DictGetP FFAAction ForceGetP ModifyCachingParams PSALoad PSAStore PSAnchorSearch PSArray PSBind PSCVN PSCVRS PSCVS PSCeiling PSClrTransfer PSCondition PSCopy PSCrBlkGeneration PSCrCParams PSCrDash PSCrDict PSCrFile PSCrFont PSCrHalftone PSCrTransfer PSCrUCRemoval PSCurrentGState PSDefineFont PSDevForAll PSDeviceInfo PSDict PSDictStack PSExecStack PSExecUserObj PSFile PSFloor PSGState PSInUStroke PSIndex PSIntDict PSJoin PSLoad PSLock PSMakeFont PSMark PSMkTemp PSNoAccess PSNot PSPkdary PSPushObject PSPushPMtx PSPushStream PSPushString PSReadHexString PSReadLine PSReadString (etc) }	{ StackPushP opStk }
PushPCd		include/language.h	/^#define PushPCd		PSPushPCd/ ;" macro 1 { CalcThresholds CompSlowShow DoArcTo ModifyCachingParams PSCrPoint PSDTfm PSIDTfm PSITfm PSInUStroke PSLck PSPathBBox PSStrWidth PSTfm PathForAll SlowShow Trace_OFNP }	{ PSPushPCd }
PushPFCd		fonts/fontbuild.c	/^private procedure PushPFCd(f) PFCd f; {/ ;" function 4 { }	{ PushFixed }
PushPMtx		graphics/matrix.c	/^public procedure PushPMtx(pao, m)  PAryObj pao; PM/ ;" function 2 { PSCnctMtx PSCrMtx PSDfMtx PSIdentMtx PSInvertMtx PSMtx PSRtat PSScal PSTlat }	{ MtxToPAry PushP }
PushPReal		include/language.h	/^#define PushPReal	PSPushPReal/ ;" macro 1 { CRFor FillInBG FillInTfrTbl FillInUCR GetErosion PSATan PSAbs PSAdd PSCeiling PSCos PSCrCMYKColor PSCrDash PSCrFlatThreshold PSCrGray PSCrHSBColor PSCrLineWidth PSCrMiterLimit PSCrRGBColor PSCvR PSDiv PSExp PSFloor PSLn PSLog PSMul PSNeg PSPushPCd PSPushPReal PSRound PSSin PSSqRt PSSub PSTruncate ProcSampleProc PushReal PushSpotFunction }	{ PSPushPReal }
PushRational		graphics/reducer.c	/^private procedure PushRational(r)  Rational r;/ ;" function 6 { psDiv32 }	{ PushInteger r }
PushReal		language/type.c	/^public procedure PushReal(r)  real r;/ ;" function 2 { PSCurrentRUsage }	{ PushPReal r real }
PushSharedNames		language/name.c	/^private procedure PushSharedNames(clientData, info/ ;" function 13 { NameInit }	{ GC_Push NIL NameChunk firstChunk register }
PushSharedVMRoots		vm/vm.c	/^private procedure PushSharedVMRoots(clientData, in/ ;" function 23 { VMInit }	{ GCInternal_TraceROMDict GC_MarkAllocated GC_Push PNameArrayBody ProcessFinalizeNodes VMRoot header rootShared vmShared }
PushShowState		fonts/fontshow.c	/^private PShowState PushShowState()/ ;" function 11 { BEGINSHOW }	{ NIL NewShowState PShowState TrimShowStates level register showLevel ss ssFree ssr }
PushSpotFunction		graphics/gray.c	/^private procedure PushSpotFunction(pSpot) PSpotFun/ ;" function 5 { PSCrColorScreen PSCrScreen }	{ PushP PushPReal }
PushStackRoots		language/stack.c	/^procedure PushStackRoots(info)/ ;" function 30 { PushLangRoots }	{ GC_Push PObject dictStk execStk opStk refStk register }
PushVMRoots		vm/vm.c	/^private procedure PushVMRoots(clientData, info)/ ;" function 17 { VMInit }	{ GC_GetCollectionType GC_MarkAllocated GC_Push ProcessFinalizeNodes ProcessSaveData VMRoot rootPrivate vmPrivate }
PutArray		language/array.c	/^public procedure PutArray(from, beg, into)/ ;" function 8 { PSPutInterval }	{ ATail Object VMCopyArray }
PutCmd		vm/rgstcmds.c	/^private PutCmd(index, proc)/ ;" function 7 { PSOpDef RgstDynamicCmd RgstExplicit RgstMark }	{ Assert cmds rootShared }
PutInDict		language/dict.c	/^private PutInDict(kvp,d,top, checkacc)/ ;" function 119 { Def DictPut ForcePut PSDef PSStore }	{ Assert CantHappen CopyTrickyDict DictBody GC_PrivGCMustTrace InvalidateRecycler InvlAccess IsFontDirectory NIL PDictBody PKeyVal PNameEntry PSError Recyclable SearchDict VMExpandDict VMGetDict VMPutDKeyVal VMPutDValue VMPutDict XlatDictRef d dictfull enableTrickyDictCopy integer nameObj rAccess register timestamp top wAccess }
PutInNameMap		language/name.c	/^private procedure PutInNameMap(pNAObj, index, name/ ;" function 44 { PSDefSysName PSDefUserName }	{ InvlAccess LGenericObj LimitCheck NIL NameArrayBody PGenericBody PNameArrayBody PNameEntry RangeCheck header integer maxNameTableLength minNameTableLength nullObj objNameArray os_malloc }
PutStdW		fonts/fontbuild.c	/^private procedure PutStdW(pstdw,len,yflg,stdw)/ ;" function 66 { SetupStdWs }	{ ApproxDLen FCd FTruncF Fixed FixedHalf FixedOne FntDTfmP IntX InvlFont fixmul locktype os_labs r register wbnd }
PutString		language/string.c	/^public procedure PutString(from,beg,into)/ ;" function 8 { PSPutInterval StrIntoStr }	{ RangeCheck STail StrObj VMCopyString }
PutThresholdEntries		graphics/gray.c	/^private procedure PutThresholdEntries(dict, names,/ ;" function 16 { MakeScreenDict }	{ AllocPString ConditionalInvalidateRecycler DictPut IntObj LIntObj StrObj cardinal }
QBresenhamMT		graphics/maketrap.c	/^public procedure QBresenhamMT(bounds, x, y, dx, dy/ ;" function 103 { QDoEUsrPthFloat }	{ DevPrim DevTrap FTrunc FixInt Fixed HALF ONE false fixmul integer lines lowpart ms muldiv tfixdiv xaOffset }
QCompareBounds		device/qintersect.c	/^public BBoxCompareResult QCompareBounds(r1, b)/ ;" function 40 { ClipRunMasksDispatch ClipRunTrapsDispatch EnclosesRect }	{ Int16 MIN PInt16 RunArrayRow boolean data false r1 register true }
QDoEUsrPth		graphics/euserpath.c	/^public procedure QDoEUsrPth(context)/ ;" function 208 { QFillUserPathEnumerate QStrokeUserPathEnumerate }	{ Assert Card32 Cd DevBBoxRec DevCd FFltnCurve FLATTENLIMIT Fixed FltnRec MtxType PFixMtx PMtx PNumStrm PathState QDoEUsrPthFloat QUsrPthArc QUsrPthArcTo RangeCheck TypeCheck boolean character cmds d dc1 dc2 dc3 false fixmul fixtopflt fr integer pflttofix procedure r real register true }
QDoEUsrPthFloat		graphics/euserpath.c	/^public int QDoEUsrPthFloat(context)/ ;" function 68 { QDoEUsrPth }	{ DevBBoxRec DevBounds FTrunc Fixed HNRF MtxType NoOp PNumStrm PathState QBresenhamMT RangeCheck TypeCheck character cmds integer minTrapPrecision ms pflttofix }
QDoUserPath		graphics/userpath.c	/^private procedure QDoUserPath(context)/ ;" function 215 { QFillUserPathEnumerate QStrokeUserPathEnumerate }	{ Assert AssertCheck Cd DevBBoxRec DevCd FFltnCurve FLATTENLIMIT FixInt Fixed FltnRec MtxType PFixMtx PMtx PNameEntry PObject PathState QUsrPthArc QUsrPthArcTo RangeCheck TypeCheck arcNm arcnNm arctNm boolean closepathNm cmdObj curvetoNm d dc1 dc2 dc3 false fixmul fixtopflt fr intObj integer linetoNm movetoNm nameObj pflttofix procedure r rcurvetoNm real realObj register rlinetoNm rmovetoNm true }
QEnumOk		graphics/userpath.c	/^public boolean QEnumOk(context) register PUserPath/ ;" function 59 { FillUserPath GetAperatureDP InUFill PSUStroke UCGetDevPrim UXAFillPath UXAStroke XADoRdcPth XADoRdcStroke }	{ BBoxUpdate DevBBoxRec DevCd FTfm FixInt MtxType PFixMtx PMtx d false integer os_labs pflttofix register }
QFNewPoint		graphics/qreducer.c	/^public procedure QFNewPoint(c) FCd c;/ ;" function 6 { DoRdcPth InitOFill OffsetFill QPFNewPoint QResetReducer }	{ BuildEdge InsertEdge false noCurPt px0 pxNP py0 pyNP }
QFillUserPathEnumerate		graphics/userpath.c	/^public procedure QFillUserPathEnumerate(/ ;" function 14 { FillUserPath GetAperatureDP InUFill UCGetDevPrim UXAFillPath XADoRdcPth }	{ NoOp PreEnumerateSetup QDoEUsrPth QDoUserPath flatEps gs true }
QIntersect		device/qintersect.c	/^public procedure QIntersect(r1, r2, callBack, args/ ;" function 87 { IntersectDP Mark RunRunClip }	{ DURING DumpBuff END_HANDLER FGEnterMonitor FGExitMonitor HANDLER Int16 MAX MIN MaxInt16 MinInt16 NIL PInt16 RERAISE RunArrayRow clipBuffData clipBuffSz d data p r1 register true }
QIntersectBounds		device/qintersect.c	/^public procedure QIntersectBounds(r1, b, callBack,/ ;" function 11 { }	{ DevTrap QIntersectTrp r1 }
QIntersectTrp		device/qintersect.c	/^public procedure QIntersectTrp(r1, trp, callBack, / ;" function 107 { ClipRunTrapsDispatch ClipTrapsRunDispatch IntersectDP LBMMark QIntersectBounds RunTrapClip }	{ DURING DumpBuff END_HANDLER FGEnterMonitor FGExitMonitor FTrunc Fixed HANDLER Int16 MAX MIN MaxInt16 MinInt16 NIL PInt16 RERAISE RunArrayRow boolean clipBuffData clipBuffSz d data integer p r1 register true }
QNewPoint		graphics/qreducer.c	/^public procedure QNewPoint(c) Cd c;/ ;" function 9 { DoRdcPth }	{ BuildEdge Fixed InsertEdge false noCurPt pflttofix px0 pxNP py0 pyNP }
QPFNewPoint		graphics/qreducer.c	/^public procedure QPFNewPoint(c) PFCd c; {QFNewPoin/ ;" function 1 { }	{ QFNewPoint }
QRdcClose		graphics/qreducer.c	/^public procedure QRdcClose()/ ;" function 5 { DoRdcPth InitOFill OffsetFill }	{ BuildEdge InsertEdge noCurPt px0 pxNP py0 pyNP true }
QRdcOk		graphics/pathreduce.c	/^public boolean QRdcOk(path,fill) PPath path; boole/ ;" function 31 { DoRdcPth Fill OffsetFill XAFillPath }	{ BBox ConvertToListPath NULL PPthElt PathType false gs integer pathcurveto register true }
QReduce		graphics/qreducer.c	/^public procedure QReduce(eofill, callBack, ymin, y/ ;" function 182 { DoRdcPth OFMark }	{ AdvanceEdges Assert DumpBuff Edge Fixed Int16 MaxInt16 MergeEdges MinInt16 NIL ScanList SortEdges boolean buffData d endBuffData false integer register right scanList true }
QResetReducer		graphics/qreducer.c	/^public procedure QResetReducer()/ ;" function 8 { DoRdcPth InitOFill OffsetFill }	{ InitFontFlat NIL QFNewPoint edgeArray freeEdge freeScan noCurPt scanArray scanList scn true }
QStrokeUserPathEnumerate		graphics/userpath.c	/^public procedure QStrokeUserPathEnumerate(context,/ ;" function 20 { PSUStroke UCGetDevPrim UXAStroke XADoRdcStroke }	{ PreEnumerateSetup QDoEUsrPth QDoUserPath start true }
QUsrPthArc		graphics/userpath.c	/^public procedure QUsrPthArc(cd, radius, startAng, / ;" function 14 { QDoEUsrPth QDoUserPath }	{ ArcInternal QUsrPthCurveTo QUsrPthLineTo UsrPthInit UsrPthMoveTo true }
QUsrPthArcTo		graphics/userpath.c	/^public procedure QUsrPthArcTo(c1, c2, radius, cont/ ;" function 18 { QDoEUsrPth QDoUserPath }	{ ArcToInternal Cd ITfmP QUsrPthCurveTo QUsrPthLineTo TypeCheck UOffset UsrPthInit UsrPthMoveTo true }
QUsrPthCurveTo		graphics/userpath.c	/^private procedure QUsrPthCurveTo(c1, c2, c3, conte/ ;" function 37 { QUsrPthArc QUsrPthArcTo }	{ AssertCheck CheckFixCd CurveTo DevBBox DevCd FFltnCurve FLATTENLIMIT FltnRec TypeCheck boolean false fr register true }
QUsrPthLineTo		graphics/userpath.c	/^private procedure QUsrPthLineTo(cd, context)/ ;" function 20 { QUsrPthArc QUsrPthArcTo }	{ CheckFixCd DevBBox DevCd TypeCheck register }
QdCorner		graphics/stroke.h	/^typedef struct quadcorner/ ;" typedef 3 { IniStroke }	{ }
QuadPath		include/graphics.h	/^typedef struct _t_QuadPath {/ ;" typedef 4 { AddPathRef ConvertToListPath DoRdcPth ImageInternal InitChunk InitClipPath MakeRectPath MultiRectFill PSRectFill PSReduceRect PathBuildInit PathIsRect RemPathRef }	{ }
QuadTrap		graphics/fastfillquad.c	/^#define QuadTrap(qcp1,qcp2) { \\/ ;" macro 1 { FastFillQuad }	{ CanSkipTrap FTrunc StrkTrp false fixratio fxfrmul true }
QuickSort		fonts/midcache.c	/^private procedure QuickSort (L, U)/ ;" function 36 { QuickSort SortMIDAges }	{ Card32 MA MID PCard16 PCard32 QuickSort Swap integer register }
RAD		include/fp.h	/^#define RAD(a) ((a)*1.745329251994329577e-2)/ ;" macro 1 { FreqAngleToNumbers PSCos PSSin RtatMtx SmallArc }	{ }
RAISE		fonts/fontbuild.c	/^#define RAISE raise/ ;" macro 1 { BuildRelocationTable CCRunStd CacheAddEntry CalcThresholds CheckForPSNotify ConstCMYKPattern ConstGrayPattern ConstRGBPattern EIUndef EStmCreate EUndef FetchCharOutline FontReadAttr FontStmCreate FontUndef GetBuffers GetErosion GetFontStream GrayPattern Gry4Of4Setup Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 InitSLFiles MapErrno MonoSetup MtxInvert NumOverflow OCFetchFromDisk Overflow PSError PSExecuteOperator PSExit PSFontRun PSHandleExecError PSInvalidID PSUndef ProcSampleProc RERAISE RGBPattern RaiseHack ReadRelocationTable ReportErrno SETUPPARAMS SetupGrayPattern SimpleShowByName SlowShow StmToken SyntaxError TopError Trace_OFCP Trace_OFDone Trace_OFInit Trace_OFNP UDReadAttr UDRename UDUndef ps_getsize }	{ }
RAND_a		language/math.c	/^#define RAND_a 16807            \/* 7**5; primitive/ ;" macro 1 { PSRand }	{ }
RAND_m		language/math.c	/^#define RAND_m 2147483647       \/* 2**31 - 1 *\// ;" macro 1 { PSRand PSSRand }	{ }
RAND_q		language/math.c	/^#define RAND_q 127773           \/* m \/ a *\// ;" macro 1 { PSRand }	{ }
RAND_r		language/math.c	/^#define RAND_r 2836             \/* m % a *\// ;" macro 1 { PSRand }	{ }
RBLock		fonts/fontbuild.c	/^private procedure RBLock(p, sby,/ ;" function 25 { BuildChar CCRunStd }	{ BlueLock DoLock EnterGlbClr Fixed NULL glcrOn glcrPrepass gsmatrix locktype p true }
RBMASK		mp/cursor.c	/^#define RBMASK	0xF0F0		\/* Short, or 16 bit format / ;" macro 1 { ADDC MPDisplayCursor16 MUL }	{ }
RBcmd		fonts/fontbuild.c	/^#define RBcmd	1/ ;" macro 1 { BuildChar CCRunStd }	{ }
RCA		include/package_specs.h	/^#define RCA		"rca.h"/ ;" macro 1 { CONTROLLER_DEFS }	{ }
RCBotClose		graphics/pathreduce.c	/^private procedure RCBotClose()/ ;" function 11 { RCLastPt }	{ Cd rcbtf rcbtfin rcbtl rcbtlin rcclipbt rcclnewpt }
RCBotNew		graphics/pathreduce.c	/^private procedure RCBotNew(coord)  Cd coord;/ ;" function 15 { RCRtClose RCRtNew }	{ Cd boolean false rcbtf rcbtfin rcbtfirst rcbtl rcbtlin rcclipbt rcclnewpt }
RCLastPt		graphics/pathreduce.c	/^public procedure RCLastPt()/ ;" function 9 { ConvertToListPath DoRdcPth ReduceQuadPath }	{ RCBotClose RCLfClose RCRtClose RCTopClose rcbtfirst rclffirst rcrdcclose rcrtfirst rctpfirst true }
RCLfClose		graphics/pathreduce.c	/^private procedure RCLfClose()/ ;" function 11 { RCLastPt }	{ Cd RCTopNew rccliplf rclff rclffin rclfl rclflin }
RCNextPt		graphics/pathreduce.c	/^public procedure RCNextPt(coord)  Cd coord;/ ;" function 15 { ConvertToListPath DoRdcPth FRCNextPt ReduceQuadPath }	{ Cd RCTopNew boolean false rccliplf rclff rclffin rclffirst rclfl rclflin }
RCRtClose		graphics/pathreduce.c	/^private procedure RCRtClose()/ ;" function 11 { RCLastPt }	{ Cd RCBotNew rccliprt rcrtf rcrtfin rcrtl rcrtlin }
RCRtNew		graphics/pathreduce.c	/^private procedure RCRtNew(coord)  Cd coord;/ ;" function 15 { RCTopClose RCTopNew }	{ Cd RCBotNew boolean false rccliprt rcrtf rcrtfin rcrtfirst rcrtl rcrtlin }
RCTcmd		fonts/fontbuild.c	/^#define RCTcmd	8/ ;" macro 1 { BuildChar CCRunStd }	{ }
RCTopClose		graphics/pathreduce.c	/^private procedure RCTopClose()/ ;" function 11 { RCLastPt }	{ Cd RCRtNew rccliptp rctpf rctpfin rctpl rctplin }
RCTopNew		graphics/pathreduce.c	/^private procedure RCTopNew(coord)  Cd coord;/ ;" function 15 { RCLfClose RCNextPt }	{ Cd RCRtNew boolean false rccliptp rctpf rctpfin rctpfirst rctpl rctplin }
RCd		include/publictypes.h	/^typedef struct _t_Cd {/ ;" typedef 4 { CCBuild CCRun CCRunStd FCurveTo FLineTo FMoveTo GetDSW MakeCacheDev2 NoRoom PathEndChar SetCacheDev SetCchDevice TfmLockPt4 }	{ }
RClosePath		fonts/fontbuild.c	/^private procedure RClosePath() {/ ;" function 3 { SetFixedPathProcs SetRealPathProcs }	{ ClosePath gs }
RCurveTo		fonts/fontbuild.c	/^private procedure RCurveTo(c0, c1, c2, c3) PRCd c0/ ;" function 3 { SetRealPathProcs }	{ CurveTo gs }
RDCBIAS		graphics/graphics.c	/^#define RDCBIAS 10/ ;" macro 1 { SetRdcScal SetScal }	{ }
RDCXTRA		graphics/path.h	/^#define RDCXTRA 4	\/* should be larger (about 50 or/ ;" macro 1 { DoRdcPth ReduceQuadPath }	{ }
RDELIM		include/stodev.h	/^#define RDELIM '%'/ ;" macro 1 { FndStoDev }	{ }
RDTcmd		fonts/fontbuild.c	/^#define RDTcmd	5/ ;" macro 1 { BuildChar CCRunStd }	{ }
REALALPHA		include/bintree.h	/^#define REALALPHA(ext) ((*((NextGSExt **)ext))->re/ ;" macro 1 { }	{ NextGSExt }
REALSCALE		include/bintree.h	/^#define REALSCALE(ext) ((*((NextGSExt **)ext))->re/ ;" macro 1 { SetWindow WdDefaultMtx }	{ NextGSExt }
REALTYPE		language/opcodes.h	/^#define REALTYPE		5/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
RECYCLER		include/package_specs.h	/^#define RECYCLER	"recycler.h"/ ;" macro 1 { }	{ }
RECYCLER_H		include/recycler.h	/^#define	RECYCLER_H/ ;" macro 1 { }	{ }
REDRAW_CHANGED		bintree/bintreetypes.h	/^#define REDRAW_CHANGED	1/ ;" macro 1 { BPAdjust LPlaceAt }	{ }
REDRAW_EXPOSED		bintree/bintreetypes.h	/^#define REDRAW_EXPOSED	0/ ;" macro 1 { LRedraw LRepaintIn }	{ }
REDUCER_H		graphics/reducer.h	/^#define REDUCER_H/ ;" macro 1 { }	{ }
REG		graphics/cscan.c	/^#define REG register/ ;" macro 1 { BuildCxtn BuildInitialRuns BuildYCross CheckDeletePixel CheckHorizWhite DeletePixel DoFixupAction DoXInflections EditBlackHoriz EditBlackSpace EditWhiteHoriz EditWhiteSpace ExpandWhiteDropOuts ExtendRunDropOut FillInColumn FixCrossFlags FixPixelProblem FixupExtendLeft FixupExtendRight GetRuleDesc NewCross NewLinkCross NewXtraCross PixelIsBlack ReturnBits ScanLineCxtn }	{ register }
RELPKDARYTYPE		language/opcodes.h	/^#define RELPKDARYTYPE		8/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
RELSTRINGTYPE		language/opcodes.h	/^#define RELSTRINGTYPE		9/ ;" macro 1 { DecodeObj EnumerateComposites RelocateObj }	{ }
RERAISE		include/except.h	/^#define	RERAISE	RAISE(Exception.Code, Exception.Me/ ;" macro 1 { AcquireLock AddRunIndexes AllocRAMArray AllocRAMStr CCRun CCRunStd CalcThresholds CallFromPS ClipDevPrim CopyDelayedFont CopyDevPrim CreateContext CreatePrivateVM DetermineFormat DevFlushClip DisposeDevPrim DoRdcPth DoRdcStroke DoStrkPth EnterPathInCache EnterRdcInCache FillBevel FillCircle FillQuad FltnPth GetDMFDict GetDMFItem ImageInternal InitChunk InitClipPath MakeCompFont MakeFontSupp MakeRectPath MakeScreenDict MakeType1Screen MakeType2Screen MinimumClip NewDevPrim NewDevice NewViewClip OffsetFill PSCharPath PSFontRun PSFork PSRectClip PSRectFill PSRectStroke PSRectViewClip PSUStroke PSUStrokePath PSWait PathForAll ReducePathClipInt SafeShowMask StrkPth Stroke UCGetDevPrim UStrkPthProc WaitOnJoinable XARdc (etc) }	{ Code RAISE }
RET		fp/DEFSmach.h	/^#define RET	unlk a6; rts/ ;" macro 1 { }	{ }
RETAINED		include/bintree.h	/^#define RETAINED	 0/ ;" macro 1 { BPCompositeFrom BPCompositeTo BPCopyBitsFrom BPMark BPRenderInBounds CopybackRetained LAddToInstance LCompositeFrom LMark LPrintOn LSetType }	{ }
RETN		fp/DEFSmach.h	/^#define RETN(n)	unlk a6; movl sp@,sp@(n); addql \\#/ ;" macro 1 { }	{ }
RETcmd		fonts/fontbuild.c	/^#define RETcmd	11/ ;" macro 1 { BuildChar CCRunStd }	{ }
RFlexCurveTo		fonts/flex.c	/^private procedure RFlexCurveTo(p0, p1, p2, p)/ ;" function 6 { RFlexProc }	{ TfmP curveto p }
RFlexProc		fonts/flex.c	/^public procedure RFlexProc(flexCds, dmin, p)/ ;" function 8 { CCRunStd }	{ RFlexCurveTo p }
RGBPattern		devpattern/colorpattern.c	/^public PatternHandle RGBPattern(/ ;" function 33 { BM34InitClassVars ColorPattern SetFmDeviceMetrics }	{ ColorPatHandle ColorPatInfo ColorPatRec ColorSetup DestroyPat NIL RAISE SCANUNIT SetupDeepOnes ecLimitCheck integer os_sureMalloc }
RIGHT2BITS		device/framemaskdev.c	/^#define	RIGHT2BITS	0x0C/ ;" macro 1 { IniMaskDevImpl }	{ }
RIGHT4BITS		device/framemaskdev.c	/^#define	RIGHT4BITS	0xF0/ ;" macro 1 { IniMaskDevImpl }	{ }
RLineTo		fonts/fontbuild.c	/^private procedure RLineTo(c) PRCd c; {/ ;" function 3 { SetRealPathProcs }	{ LineTo gs }
RMAX		graphics/ucache.c	/^#define RMAX     (3)    \/* max number of reduced p/ ;" macro 1 { IniUCache PSNormalUCache }	{ }
RMLock		fonts/fontbuild.c	/^private procedure RMLock(p, sbx) PFCd p; Fixed sbx/ ;" function 10 { BuildChar CCRunStd }	{ DoTriXLock EnterTriXLock NULL PreXLock SetXLock TriLock glcrOn glcrPrepass locktype p }
RMTcmd		fonts/fontbuild.c	/^#define RMTcmd	21/ ;" macro 1 { BuildChar CCRunStd }	{ }
RMesc		fonts/fontbuild.c	/^#define RMesc 1/ ;" macro 1 { BuildChar CCRunStd }	{ }
RMetrics		fonts/fontdata.h	/^typedef struct _t_RMetrics {/ ;" typedef 3 { BMRun CCBuild CCRunStd MakeCacheDev2 PSSetCchDevice PSSetCchDevice2 PathEndChar }	{ }
RMoveTo		fonts/fontbuild.c	/^private procedure RMoveTo(c) PRCd c; {/ ;" function 3 { SetRealPathProcs }	{ MoveTo gs }
RMtx		fonts/fontdata.h	/^typedef struct {/ ;" typedef 3 { SetupFntMtx }	{ }
RNDSWesc		fonts/fontbuild.c	/^#define RNDSWesc 26/ ;" macro 1 { CCRunStd }	{ }
ROOTSEAL		include/disk.h	/^#define ROOTSEAL 0x5fa87d27/ ;" macro 1 { }	{ }
ROOT_GID		product/listener.c	/^#define ROOT_GID 1/ ;" macro 1 { PSResetUser SetEffectiveUser }	{ }
ROOT_UID		product/listener.c	/^#define ROOT_UID 0/ ;" macro 1 { PSResetUser SetEffectiveUser }	{ }
ROTATECXTN		graphics/cscan.c	/^#define ROTATECXTN(cxtn, bits) (ROTATELEFT8(cxtn, / ;" macro 1 { GetRuleDesc }	{ ROTATELEFT8 }
ROTATELEFT8		graphics/cscan.c	/^#define ROTATELEFT8(p, bits) ( (p<<bits) | (((Card/ ;" macro 1 { ROTATECXTN }	{ Card8 p }
ROTATEPIXNUM		graphics/cscan.c	/^#define ROTATEPIXNUM(num, bits) ((num + bits) & 0x/ ;" macro 1 { GetRuleDesc PatternToActions }	{ }
ROkToBuild		fonts/fontbuild.c	/^public boolean ROkToBuild(m) RMetrics *m; {/ ;" function 31 { }	{ BBox Cd DevBBox GetCPDelta GetDevClipBBox GetDevClipDevBBox SetCharWidth ShowState false fpTwo gs register ss ssr true }
RR01		device/blacktrap.030.s	/^#define RR01		0x3cfc/ ;" macro 1 { }	{ }
RRoundP		language/type.c	/^public procedure RRoundP(x, y) Preal x, y;/ ;" function 2 { AnamorphicNormStrkWdth CalcThresholds FreqAngleToNumbers HashMID NormalizeStrokeWidth OddWidth PSDissolve SetDeltaAndTlate ShowByName TransDevPrim TransRdc UsrPthBBox psNewPoint }	{ RealLt0 fpHalf integer real }
RSHIFT		include/devpattern.h	/^#define RSHIFT <</ ;" macro 1 { BlackMasksMark BlackMasksMarkReal ClippedMasksMark ConstantMasksMark GrayMasksMark IniMaskDevImpl MP12Convert2to2 RollPattern RollRight WhiteMasksMark rotate }	{ }
RSHIFTEQ		include/devpattern.h	/^#define RSHIFTEQ <<=/ ;" macro 1 { ConstantMasksMark GrayMasksMark IniMaskDevImpl }	{ }
RTENTRY		fp/DEFSmach.h	/^#define	RTENTRY(x)	.globl x; x: LINK; RTMCOUNT/ ;" macro 1 { }	{ LINK RTMCOUNT }
RTMCOUNT		fp/DEFSmach.h	/^#define RTMCOUNT	moveml	\\#0xC0C0,sp@-; MCOUNT; mov/ ;" macro 1 { RTENTRY }	{ MCOUNT }
RTfmPCd		graphics/graphics.c	/^public procedure RTfmPCd(c, m, cur, rc)  Cd c; PMt/ ;" function 2 { ArcC CheckPkdMtLt PSRCurveTo PSRLineTo PSRMoveTo UsrPthCheckMtLt UsrPthDoCurveTo UsrPthDoLineTo UsrPthDoMoveTo }	{ DTfmPCd VecAdd }
RVLock		fonts/fontbuild.c	/^private procedure RVLock(p, sby) PFCd p; Fixed sby/ ;" function 10 { BuildChar CCRunStd }	{ DoTriYLock EnterTriYLock NULL PreYLock SetYLock TriLock glcrOn glcrPrepass gsmatrix locktype p }
RVesc		fonts/fontbuild.c	/^#define RVesc 2/ ;" macro 1 { BuildChar CCRunStd }	{ }
RWCOPYBmALine		mp/copyline.c	/^void RWCOPYBmALine(LineOperation *lop)/ ;" function 16 { }	{ data uint }
RWCOPYBmULine		mp/copyline.c	/^void RWCOPYBmULine(LineOperation *lop)/ ;" function 27 { }	{ MP12LOG2BD MP12SCANUNIT data uint }
RYLock		fonts/fontbuild.c	/^private procedure RYLock(p, sbx)/ ;" function 17 { BuildChar CCRunStd }	{ DoLock EnterGlbClr Fixed PreXLock SetXLock false glcrOn glcrPrepass locktype p }
RYcmd		fonts/fontbuild.c	/^#define RYcmd	3/ ;" macro 1 { BuildChar CCRunStd }	{ }
RaiseHack		fp/mtxvec.c	/^private void RaiseHack()/ ;" function 5 { NumOverflow }	{ NIL RAISE ecUndefResult }
RangeCheck		include/error.h	/^#define RangeCheck	PSRangeCheck/ ;" macro 1 { AGetP APut AddToBBox ArrayFromStack BBoxTest BMRun CSTestChar CVT CalcThresholds CheckCompositeFont CheckFixCd DoStroke FFAAction GetInfo GetProcSource GetStringSource GetThresholdDictEntries ImageDict ImageInternal MtxToPAry PAryToMtx PSAWidthShow PSCVN PSCVS PSColorImage PSDefUserObj PSDefineFont PSDevForAll PSExecUserObj PSLn PSLog PSMkTemp PSPopString PSRdBytes PSReadHexString PSReadLine PSReadString PSRepeat PSRoll PSSetBBox PSSetDash PSSetHalftone PSSetLineCap PSSetLineJoin PSSetMiterLimit PSSqRt PSStObjFormat PSUndefUserObj PSWidthShow PutInNameMap PutString QDoEUsrPth QDoEUsrPthFloat QDoUserPath RdBytes SSGetChar SetCacheLimit SubPString TextIntoString WriteObject (etc) }	{ PSRangeCheck }
RatComp		graphics/reducer.c	/^public short int RatComp(a, b)/ ;" function 10 { PointOnLine PtLT RdcEntry ShortenLine psCompRat }	{ FourPlace MulUn22 Un4Comp }
RatToFixed		graphics/reducer.c	/^private Fixed RatToFixed(x)  register Rational *x;/ ;" function 2 { FixedXatY Interchange RdcBend RdcEntry RdcExit }	{ Fixed ufixratio }
Rational		graphics/reducer.c	/^typedef struct/ ;" typedef 7 { CheckIntersection NewPoint PointOnLine PopRational RdcEntry XatY YatX psCompRat psDiv32 }	{ }
RdBytes		graphics/graphics.c	/^public procedure RdBytes(xbyte, ybit, wbytes, hbit/ ;" function 11 { PSRdBytes }	{ LimitCheck RangeCheck RdBytesCopy character gs integer s }
RdBytesCopy		graphics/graphics.c	/^private procedure RdBytesCopy(p, nbytes, arg)/ ;" function 6 { RdBytes }	{ PCard8 arg p }
RdHdrProc		fonts/fontrun.c	/^typedef int (*RdHdrProc)();/ ;" typedef 1 { ReadSegHdr }	{ }
RdSt		fonts/fontshow.h	/^#define RdSt "No way this will work"/ ;" macro 1 { }	{ }
RdcBend		graphics/reducer.c	/^private procedure RdcBend(pt, callBack)/ ;" function 35 { Reduce }	{ CheckIntersection DebugPrintEvent Fixed LnOffset PLine PLn PPoint PPt PRegion PRg RatToFixed RgOffset ShipLeftAnchoredTrap ShipRightAnchoredTrap debugOn false register true }
RdcClip		graphics/reducer.c	/^public procedure RdcClip(b)  boolean b;  {curIsCli/ ;" function 1 { ConvertToListPath DoRdcPth InitOFill OffsetFill ReduceQuadPath psSetClip psSetFig }	{ curIsClipLine }
RdcClose		graphics/reducer.c	/^public procedure RdcClose()/ ;" function 26 { ConvertToListPath DoRdcPth InitOFill OffsetFill Reduce ReduceQuadPath psRdcClose }	{ DebugPrintRdcClose MakeLine MakePoint PLn PPoint PPt PQInsert debugOn false firstPoint lastPoint }
RdcEntry		graphics/reducer.c	/^private procedure RdcEntry(pt, callBack, intersect/ ;" function 81 { Reduce }	{ CheckIntersection DebugPrintEvent Fixed FixedXatY LnOffset MakeRegion PLine PLn PPoint PPt PRegion PRg RatComp RatToFixed Rational RgOffset ShipTrapezoid XatY debugOn exitRegion false register rgHead true }
RdcExit		graphics/reducer.c	/^private procedure RdcExit(pt, callBack)/ ;" function 92 { Reduce }	{ CheckIntersection DebugPrintEvent Fixed FixedXatY FreeRegion LnOffset PLine PLn PPoint PPt PRegion PRg RatToFixed RgOffset ShipTrapezoid ShortenLine boolean debugOn exitRegion false true }
RdcRec		graphics/ucache.c	/^typedef struct _rdcrec {/ ;" typedef 12 { EnterPathInCache IniUCache RdcSize }	{ }
RdcSize		graphics/ucache.c	/^private Card32 RdcSize(dpsize, fill) Card32 dpsize/ ;" function 8 { EnterRdcInCache UCGetDevPrim }	{ Card32 RdcRec StrkRec gs real }
RdcStrkDumpMasks		graphics/pathreduce.c	/^private procedure RdcStrkDumpMasks(devmask, len, l/ ;" function 14 { DoRdcStroke }	{ DevMask DevPrim FixInt InitDevPrim MakeBounds NEW NULL NewDevPrim llx lly rdcStrkMasks register string urx ury }
RdcStrkTermMark		graphics/pathreduce.c	/^private procedure RdcStrkTermMark() {/ ;" function 6 { DoRdcStroke }	{ PSError limitcheck }
RdcToDev		graphics/graphics.c	/^public Fixed RdcToDev(r)  Fixed r;/ ;" function 2 { AddRdcTrap CallAddTrapToPath OFAddRdcTrap }	{ frdcbias gs r }
ReInitFontCache		fonts/fontdisk.c	/^public procedure ReInitFontCache() {}/ ;" function 1 { }	{ }
ReValidateMID		fonts/fontshow.c	/^public boolean ReValidateMID()/ ;" function 23 { ValidMID }	{ DebugAssert MID MIDNULL MT MakeMID NIL PMTItem curMT false fontDict gs register true }
ReadBinObjSeq		language/binaryobject.c	/^public procedure ReadBinObjSeq(stm, hdr, ret)/ ;" function 239 { StmToken }	{ AllocAligned BOSHeader CantHappen Card32 Card8 FastName IEEEHighToNative IEEELowToNative Int16 Int32 IsValidReal LimitCheck LoadName MAXBINOBJSEQLENGTH MAXnameLength NIL Object PBObject PCard8 PNameArrayBody PNameEntry PObject PUObject PushP SWAP2 SWAP4 SWAPBITS SyntaxError UObject UndefNameIndex UndefResult Undefined XAryObj arrayObj bo_immEvalName bo_mark boolObj boolean bsize bt_objSeqHiIEEE bt_objSeqHiNative bt_objSeqLoIEEE bt_objSeqLoNative false fread intObj integer mapLType mapXType nameObj nullObj objMark procedure realObj register rootPrivate rootShared stackRstr strObj true (etc) }
ReadCtrlByte		graphics/euserpath.c	/^private character ReadCtrlByte(context) register P/ ;" function 8 { DoEUserPath GetEUsrPthBBox }	{ Assert character register ss }
ReadIBMSegHdr		fonts/fontrun.c	/^int ReadIBMSegHdr(stm)/ ;" function 15 { CreateFilterStm }	{ BAD_HDR EOF GetIntLE getc register }
ReadMacSegHdr		fonts/fontrun.c	/^int ReadMacSegHdr(stm)/ ;" function 28 { CreateFilterStm }	{ BAD_HDR EOF GetIntBE getc }
ReadNetInfo		bintree/drivers.c	/^static ni_status ReadNetInfo()/ ;" function 55 { DriverInit }	{ NULL NXMonitor net os_fprintf os_stderr p s sscanf }
ReadNumAry		language/binaryobject.c	/^public procedure ReadNumAry(stm, hdr, ret)/ ;" function 117 { StmToken }	{ AllocAligned Card16 DebugAssert IEEEHighToNative IEEELowToNative Int32 IsValidReal LAryObj LIntObj LRealObj NIL Object PInt16 PInt32 PObject SWAP2 SWAP4 SWAPBITS SyntaxError UndefResult bsize bt_numArray fread procedure register vmCurrent }
ReadRelocationTable		vm/vm_relocate.c	/^public boolean ReadRelocationTable (vmStm)/ ;" function 23 { StartVM }	{ Assert NIL PRelocationEntry RAISE RelocationEntry boolean ecLimitCheck fread os_malloc relocationTable relocationTableSize }
ReadSegHdr		fonts/fontrun.c	/^#define ReadSegHdr(stm) *(RdHdrProc *)&(stm)->data/ ;" macro 1 { CreateFilterStm ReadSegHeader }	{ RdHdrProc data }
ReadSegHeader		fonts/fontrun.c	/^private ReadSegHeader(stm, ustm)/ ;" function 28 { ComStmFRead ComStmFilBuf }	{ BAD_HDR BytesInSeg EOF MAXInt32 ReadSegHdr fseek ftell true }
ReadSlices		graphics/image.c	/^private integer ReadSlices(source, row0, nRows, pi/ ;" function 71 { ImageInternal }	{ EPopP GetProcSource GetStreamSource GetStringSource Object PROC_SOURCE STREAM_SOURCE integer true }
ReadVM		vm/vm_startfile.c	/^private boolean ReadVM(PnewVM, file)/ ;" function 58 { StartVM }	{ CreateVM DestroyVM ExpandVMSection Level NIL PCard8 PVM PVMSegment VMSegment VMSegmentSize VMStructure VMpassword boolean current false fread free integer level os_eprintf true }
RealBase		language/opcodes.h	/^#define RealBase	(CmdBase+CmdCodes)		\/* real const/ ;" macro 1 { EncodeObj IntegerBase }	{ CmdBase CmdCodes }
RealCodes		language/opcodes.h	/^#define RealCodes	3/ ;" macro 1 { EncodeObj IntegerBase }	{ }
RealDIArgs		graphics/graphics.c	/^typedef struct {/ ;" typedef 4 { AddEntry PSDeviceInfo }	{ }
RealEq		fp/mtxvec.c	/^#define RealEq(a, b) (RtoILOOPHOLE(a) == RtoILOOPH/ ;" macro 1 { MtxInvert }	{ RtoILOOPHOLE }
RealEq0		include/fp.h	/^#define RealEq0(r) ((RtoILOOPHOLE(r)<<1)==0)/ ;" macro 1 { AdjstHW ArcInternal ArcToInternal DoStroke FillCircle FillCurveJoin FillJoin FltnCurve MiterPoint MtxInvert PSATan PSDiv PSRectFill PopBounds PreStroke RealGe0 ReduceQuadPath ReduceRect SetHalfWidth StrkCap StrkLnTo TfmPCd TlatPath TransDevPrim VecTurn }	{ RtoILOOPHOLE r }
RealGe0		include/fp.h	/^#define RealGe0(r) ((RtoILOOPHOLE(r)>=0)||RealEq0(/ ;" macro 1 { DoStroke NormalizePoint }	{ RealEq0 RtoILOOPHOLE r }
RealGt0		include/fp.h	/^#define RealGt0(r) (RtoILOOPHOLE(r)>0)/ ;" macro 1 { CRFor DoStroke InitOFill OffsetFill PSSetDash StrkLnTo }	{ RtoILOOPHOLE r }
RealLe0		include/fp.h	/^#define RealLe0(r) (RtoILOOPHOLE(r)<=0)/ ;" macro 1 { DoStroke GetValidFreqAngleOctet GetValidFreqAnglePair PSLn PSLog }	{ RtoILOOPHOLE r }
RealLt0		include/fp.h	/^#define RealLt0(r) ((RtoILOOPHOLE(r)<0)&&RealNe0(r/ ;" macro 1 { AnamorphicNormStrkWdth ArcC ArcCenterShift BuildMultiRectPath CCRunStd DoStroke LimitColor NormalizeStrokeWidth PSATan PSArcC PSCrHSBColor PSSetDash PSSqRt PSTruncate PopLightness RRoundP SetLineWidth VecTurn os_fabs }	{ RealNe0 RtoILOOPHOLE r }
RealNe0		include/fp.h	/^#define RealNe0(r) ((RtoILOOPHOLE(r)<<1)!=0)/ ;" macro 1 { ArcInternal DoStroke FillLineSegment PSCrHSBColor RealLt0 SetHalfWidth SetupForCircles }	{ RtoILOOPHOLE r }
RealObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 34 { AddRealEntry }	{ }
RealRound		product/coordinates.c	/^#define RealRound(a) ((integer)((a) > 0 ? (a) + 0./ ;" macro 1 { DUserToDevice UserToDevice }	{ integer }
ReallocDict		language/dict.c	/^public procedure ReallocDict(d, pdict)/ ;" function 6 { MakeFontSupp }	{ copydict d false true }
RecalcMouseRect		product/mouse_driver.c	/^RecalcMouseRect(int x, int y, int winUnchanged, in/ ;" function 75 { ClearWdNRect DispatchEvents PSMoveWindow PSOrderWindow PSPlaceWindow PSSetNRect PSSetWindowLevel TermWindow }	{ ABOVE Bounds CantHappen FindPieceBounds INSIDE LFind Layer2Wd NRect NULL OUTSIDE PWindowDevice PostNotification mouseWindow os_fprintf os_stderr register sectBounds }
ReceiveNextImage		product/windowimage.c	/^void ReceiveNextImage(ImageMessage *m)/ ;" function 36 { IPCFillBuf }	{ FindImageMessage IM_MAXFORMAT IM_MINFORMAT IM_NUMFLOATPARAMS IM_NUMINTPARAMS ImageMessage ImageMessageCell PSLimitCheck PSRangeCheck ReleaseMsg currentPSContext imageMessageList }
ReclaimDevTfrFcn		device/tfrfcn.c	/^private procedure ReclaimDevTfrFcn (t) DevTfrFcn */ ;" function 9 { DevFreeTfrFcn DevRemTfrFcnRef }	{ NULL os_freeelement tfrfcnPool }
ReclaimMovedVM		vm/recycler.c	/^#define ReclaimMovedVM(movedOK, R)				\\/ ;" macro 1 { InvalidateRecycler }	{ InitRecycler ResetRecycler free sharedRecycler vmPrivate vmShared }
ReclaimRecyclableVM		vm/recycler.c	/^public procedure ReclaimRecyclableVM()/ ;" function 18 { PSArray PSMtx PSRBrak PSString StmToken }	{ PRecycler RecyclerName _ReclaimRecyclableVM fflush os_fprintf recyclerStm traceRecycler vmCurrent }
Reclaim_Reserve		vm/vm_segment.c	/^private procedure Reclaim_Reserve (vmStructure)/ ;" function 19 { ContractVMSection ResetVMSection }	{ NIL current free }
RecordFinalizableObject		vm/saverestore.h	/^#define RecordFinalizableObject(type, obj) \\/ ;" macro 1 { AllocGenericObject AllocPDict AllocPStream }	{ _RecordFinalizableObject finalizeReasons }
Recyclable		vm/recycler.c	/^public boolean Recyclable(pObject)/ ;" function 20 { ConditionalInvalidateRecycler InvalidateRecycler PutInDict }	{ PRecycler RecyclerAddress RecyclerForObject RecyclerName _Recyclable boolean fflush os_fprintf recyclerStm traceRecycler }
RecycleID		postscript/contextimpl.c	/^private procedure RecycleID(id) GenericID id; {/ ;" function 7 { CreateContext CreatePSSpace DestroyPSContext DestroyPSSpace }	{ NIL ctxTab gTimestamp integer nextFreeID timestamp }
RecycleMI		postscript/customops.c	/^private procedure RecycleMI(mi) ManagedItem *mi; {/ ;" function 7 { PSPopManagedObject PSReleaseManagedObject myTerminateSpace }	{ NIL iLNullObj integer miFree }
Recycler		include/recycler.h	/^typedef struct _t_Recycler {/ ;" typedef 8 { NewRecycler }	{ }
RecyclerAddress		include/recycler.h	/^#define RecyclerAddress(pObject)	\\/ ;" macro 1 { InRange IsRecyclable ObjectInRecyclerRange Recyclable RecyclerPop RecyclerPush VMCopyArray VMPutElem }	{ PCard8 PNullObj }
RecyclerDataHandler		vm/recycler.c	/^private procedure RecyclerDataHandler (code)/ ;" function 15 { Init_Recycler }	{ privateRecycler vmPrivate }
RecyclerForObject		include/recycler.h	/^#define RecyclerForObject(pObject)	\\/ ;" macro 1 { CreatePrivateVM InvalidateRecycler ObjectInRecyclerRange Recyclable RecyclerPop RecyclerPush VMCopyArray VMPutElem _RecordFinalizableObject _RecyclerPop _RecyclerPush }	{ privateRecycler sharedRecycler }
RecyclerName		vm/recycler.c	/^static char *RecyclerName (R)/ ;" function 5 { ExtendRecycler ReclaimRecyclableVM Recyclable RecyclerPop RecyclerPush ResetRecycler TraceInvalidation }	{ sharedRecycler }
RecyclerPop		vm/recycler.c	/^public procedure RecyclerPop(pObject)/ ;" function 17 { ClearStack EPopInteger EPopPReal IPop IPopDiscard IPopNotEmpty IPopOp PSPopBoolean PSPopInteger PSPopPReal PSPrint PSReadHexString PSReadLine PSReadString PSToken PSWrtHexString PSWrtString PopCardinal StackPopDiscard WriteObject }	{ PRecycler RecyclerAddress RecyclerForObject RecyclerName _RecyclerPop fflush os_fprintf recyclerStm traceRecycler }
RecyclerPush		vm/recycler.c	/^public procedure RecyclerPush(pObject)/ ;" function 17 { Copy CopyStack IPush PSDup PSPrint PSReadHexString PSReadLine PSReadString PSToken PSWrtHexString PSWrtString RstrStack WriteObject }	{ PRecycler RecyclerAddress RecyclerForObject RecyclerName _RecyclerPush fflush os_fprintf recyclerStm traceRecycler }
RedrawWindowDevice		product/windowops.c	/^public procedure RedrawWindowDevice(PWindowDevice / ;" function 9 { LRedraw }	{ anyRedraws boundBounds true }
Reduce		graphics/reducer.c	/^public procedure Reduce(callBack, clipInterior, eo/ ;" function 41 { ConvertToListPath DoRdcPth OFMark ReduceQuadPath psReduce psReduceAndClip }	{ DebugPrintRegions FixInt FreeRegion MakeRegion PLn PPoint PPointQ PPq PPt PRegion PRg PopPQ PqOffset PtOffset RdcBend RdcClose RdcEntry RdcExit RgOffset clipxmax clipxmin debugOn endswitch eoRule fclpxmax fclpxmin interiorClipMode lastPoint register rgHead yMax }
ReducePSCallBack		graphics/reducer.c	/^private boolean ReducePSCallBack(yt, yb, xtl, xtr,/ ;" function 11 { psReduce psReduceAndClip }	{ PushInteger psReduceCallBackObj }
ReducePathClipInt		graphics/graphics.c	/^public procedure ReducePathClipInt(path, evenOdd)/ ;" function 66 { Clip PSRectClip }	{ BBCompare BBInt BitField ClipDevPrim CopyPath DURING DevPrim DisposeDevPrim END_HANDLER HANDLER InitDevPrim InitPath IntersectPath LinkDP NULL NewDevPrim PPath PathIsRect RERAISE ReducedPath RemPathRef UnlinkDP XAReducePath gs ipStorage os_newelement register rpStorage xaOffset }
ReducePathRun		graphics/pathreduce.c	/^private procedure ReducePathRun(run) char *run; {/ ;" function 4 { DoRdcPth }	{ AddRunDevPrim DevPrim DevRun ms }
ReducePathTrapsFilled		graphics/pathreduce.c	/^private procedure ReducePathTrapsFilled(m) registe/ ;" function 8 { DoRdcPth DoRdcStroke }	{ CopyDevPrim DevPrim EmptyDevBounds ms }
ReduceQuadPath		graphics/pathreduce.c	/^ReduceQuadPath(userPt, userw, userh, matrix, dp, q/ ;" function 197 { ImageInternal MakeRectPath MultiRectFill PSRectFill PSReduceRect }	{ AddRdcTrap AddTrap Assert BBoxRec BitField ClNewPt DevCd DevTrap EmptyDevBounds FastFillQuad FixCd Fixed Get16KBBox MAX MIN MakeBounds MarkState PMtx RCLastPt RCNextPt RDCXTRA RdcClip RdcClose RealEq0 Reduce ReducedPath ResetReducer SetRdcScal SetScalFromBBoxes SetUpForRectClip StrkTrp boolean chunkBBox chunkqp d dc1 dc2 dc3 false fp16k integer ms os_newelement pflttofix procedure real register rpStorage secret true }
ReduceRect		graphics/rect.c	/^public ReduceRect(real *rect, PMtx m, DevPrim *dp)/ ;" function 36 { FastRectFill }	{ DebugAssert DevTrap RealEq0 d fp16k }
ReducedPath		include/graphics.h	/^typedef struct _t_ReducedPath {/ ;" typedef 4 { AddPathRef DoRdcPth DoStrkPth GSAddRefs InitClipPath MinimumClip PathBuildInit ReducePathClipInt ReduceQuadPath RemReducedRef }	{ }
RefAny		include/gc.h	/^typedef	charptr RefAny;	\/* This is a generic point/ ;" typedef 1 { ABM_AllocateVM AllocLarge AllocSmall CustomOpsInit DictInit FontCacheInit GCInternal_GetSegHnd GC_HandleIndex GC_MarkAllocated GC_MoveRecycleRange InSegment IniGStates Init_SaveRestore LanguageInit NameInit PSAllocVM TracePrivateForShared TracePrivateVM TraceSharedVM VMInit }	{ }
RegOpEntry		include/customops.h	/^typedef struct _t_RgOpEntry {/ ;" typedef 4 { }	{ }
Region		graphics/reducer.c	/^  typedef struct/ ;" typedef 11 { IniReducer LinkRegionFreeList }	{ }
RegisterData		vm/staticdata.c	/^public procedure RegisterData (PointerVariable, Si/ ;" function 36 { CustomOpsInit FontsInit GraphicsInit Init_Recycler Init_SaveRestore Init_VM_Memory LanguageInit }	{ Assert DataRecord NEW NIL staticData }
RegisterGraphicsPackages		product/nscontexts.c	/^RegisterGraphicsPackages( char *pkgDir )/ ;" function 100 { NextCustomProc }	{ NULL PKGDBGSECTNAME PKGSECTNAME PKGSEGNAME const pkgEnt pkgEntryList r strcmp strcpy strlen }
Reinitms		graphics/stroke.c	/^private procedure Reinitms (bbOriginal)/ ;" function 10 { FillBevel FillCircle FillQuad }	{ SetTrapBounds gPathBBox haveBounds ms needClip }
RelAry		language/opcodes.h	/^typedef unsigned short int RelAry;	\/* relative arr/ ;" typedef 1 { DecodeObj EncodeObj RelocateObj }	{ }
RelPixelToCxtn		graphics/cscan.c	/^#define RelPixelToCxtn(dx, dy) PixelToCxtnArray[((/ ;" macro 1 { ScanLineCxtn }	{ PixelToCxtnArray }
RelPixelToPixNum		graphics/cscan.c	/^#define RelPixelToPixNum(dx, dy) PixelToPixNumAry[/ ;" macro 1 { GetRuleDesc }	{ PixelToPixNumAry }
RelPkdary		language/opcodes.h	/^#define RelPkdary	(BooleanBase+BooleanCodes)	\/* pa/ ;" macro 1 { EncodeObj RelString }	{ BooleanBase BooleanCodes }
RelString		language/opcodes.h	/^#define RelString	(RelPkdary+1)			\/* strings *\// ;" macro 1 { EncodeObj ExpansionRoom }	{ RelPkdary }
ReleaseCI		fonts/cicache.c	/^private integer ReleaseCI(cio) CIOffset cio; {/ ;" function 13 { DeleteCIs PSFlushFontCache PSFlushMasks PurgeCI TrimCI }	{ CI CIFree DevFlushMask DevFlushMaskArgs FlushCircle GetFlushArgs PCIItem PurgeFSCache UnlinkCI integer }
ReleaseLock		postscript/contextimpl.c	/^private procedure ReleaseLock(pl) PLock pl; {/ ;" function 19 { MonExitProc MonitorExit PSReleaseLock PSWait }	{ InvalidContext NIL PSContext PSMakeRunnable currentPSContext }
ReleaseMsg		product/ipcscheduler.c	/^void ReleaseMsg(msg_header_t *m)/ ;" function 13 { ContextYield IPCClose IPCFillBuf MarkNextImage ReceiveNextImage SelectPSContext send_rpc }	{ SchedulerMsg free freeMsg }
ReleaseTables		graphics/transferimpl.c	/^private procedure ReleaseTables (tfrFcn) TfrFcn tf/ ;" function 6 { GetInactiveTables RemTfrRef }	{ DevFreeTfrFcn NULL }
RelinkCIItem		fonts/cicache.c	/^private procedure RelinkCIItem(cio) CIOffset cio; / ;" function 16 { PSFlushMasks TrimCI }	{ CI CINULL CISortedEnd CISortedList PCIItem register }
RelocateFinalizeChain		vm/makevm.c	/^private procedure RelocateFinalizeChain(pNode)/ ;" function 8 { BuildRelocationTable }	{ NIL NoteRelocationEntry RelocateObject true }
RelocateObj		language/pa_relocator.c	/^public procedure RelocateObj(pObj, robj)/ ;" function 124 { RgstPARelocator }	{ BOOLEANTYPE BitsForOffset BooleanBase CMDTYPE CantHappen CmdBase CmdIndex Code CopyObject ESCAPETYPE EXECNAMETYPE ExecNameBase INTEGERTYPE IntegerBase LBoolObj LITNAMETYPE LIntObj LRealObj LStrObj LitNameBase Lobj MINArrayLength MINOffset MinInteger NameIndexObj NewRelocationEntry Object PCard8 PObject REALTYPE RELPKDARYTYPE RELSTRINGTYPE RelAry TrickyDict XPkdaryObj Xobj arrayObj boolObj cardinal charptr cmdObj dictObj encRealValues escObj fontObj intObj nameObj nullObj objCond objGState objLock objMark objNameArray objSave opType p pkdaryObj realObj register stmObj (etc) }
RelocateObject		vm/makevm.c	/^private procedure RelocateObject(obj, doRelocation/ ;" function 59 { RelocateFinalizeChain ScanFromAry ScanFromDict ScanPkdAry }	{ AddToMarkTable CantHappen NoteRelocationEntry PAryObj PDictObj PNameArrayObj PPkdaryObj ScanFromAry ScanFromDict ScanNameArray ScanPkdAry TrickyDict arrayObj boolObj cmdObj dictObj escObj fontObj intObj nameObj nullObj objCond objGState objLock objMark objNameArray objSave pkdaryObj realObj stmObj strObj }
Relocate_Names		vm/makevm.c	/^private procedure Relocate_Names ()/ ;" function 34 { BuildRelocationTable }	{ AddToMarkTable CantHappen NIL NoteRelocationEntry PNameEntry integer os_printf rootShared }
Relocate_Shared_Root		vm/makevm.c	/^private procedure Relocate_Shared_Root()/ ;" function 19 { BuildRelocationTable }	{ NoteRelocationEntry RootPointer rootShared vmShared }
RelocationEntry		vm/vm_relocate.h	/^typedef struct _t_RelocationEntry {/ ;" typedef 4 { BuildRelocationTable NewRelocationEntry ReadRelocationTable WriteRelocationTable }	{ }
RemColorRef		graphics/colorops1.c	/^public procedure RemColorRef(c, free) Color c; boo/ ;" function 9 { ChangeColor GSRemRefs }	{ NIL clrStorage free gs os_freeelement }
RemGTRef		graphics/colorops1.c	/^public procedure RemGTRef(gt, free) GamutTfr gt; b/ ;" function 9 { GSRemRefs }	{ NIL free gs gtrStorage os_freeelement }
RemPathRef		graphics/pathbuild.c	/^public procedure RemPathRef(path) register PPath p/ ;" function 51 { FrPth GSRemRefs NewViewClip PSFltnPth PSRectViewClip PathForAll ReducePathClipInt RemPathRef TermViewClip }	{ CantHappen FrLstPth IntersectPath ListPath NULL PathType QuadPath RemPathRef RemReducedRef StrkPath ipStorage os_freeelement qpStorage register spStorage }
RemReducedRef		graphics/pathbuild.c	/^public procedure RemReducedRef(path) PPath path; {/ ;" function 12 { AppendPath DoRdcPth MakeOwnListPath RemPathRef }	{ DevPrim DisposeDevPrim NULL ReducedPath TermClipDevPrim os_freeelement register rpStorage }
RemRndrRef		graphics/colorops1.c	/^public procedure RemRndrRef(r, free) Rendering r; / ;" function 9 { GSRemRefs }	{ NIL free gs gtrStorage os_freeelement r }
RemScrRef		graphics/gray.c	/^public procedure RemScrRef(screen) Screen screen; / ;" function 16 { GSRemRefs InstallNewScreen SetDefaultHalftone }	{ DeleteScreen NIL Screen screenList }
RemTfrRef		graphics/transferimpl.c	/^public procedure RemTfrRef(tfrFcn) TfrFcn tfrFcn; / ;" function 10 { GSRemRefs SetMaskDevice SetTransfer }	{ NIL ReleaseTables UnlinkTfr false gs os_freeelement tfrFcnStorage }
RemoveCursor		mousekeyboard/common.c	/^void RemoveCursor()/ ;" function 10 { MPStart RemoveCursor SysHideCursor }	{ NXDevice RemoveCursor evp nxCursorInfo }
RemoveLink		pslib/doublink.c	/^procedure RemoveLink(link)/ ;" function 9 { CacheLookup StmDestroy UnlinkEntry }	{ Assert }
RemoveMappedFile		product/miscops.c	/^public procedure RemoveMappedFile(int size)/ ;" function 11 { MFClose }	{ mappedFileSizes totalMappedFiles }
Rendering		include/graphics.h	/^typedef struct _t_RenderingRec \/* color rendering / ;" typedef 6 { GSAddRefs GSRemRefs }	{ }
RenderingRec		include/graphics.h	/^typedef struct _t_RenderingRec \/* color rendering / ;" typedef 6 { }	{ }
ReportErrno		fp/mtxvec.c	/^public procedure ReportErrno(n)/ ;" function 16 { CheckErrno }	{ CantHappen NIL RAISE ecRangeCheck ecUndefResult }
ResetAllocCounter		vm/saverestore.c	/^private procedure ResetAllocCounter(space, newFree/ ;" function 23 { RstrToLevel }	{ FindVMSegment PCard8 PVMSegment current free register }
ResetCScan		graphics/cscan.c	/^public procedure ResetCScan(fixupOK, locking, len1/ ;" function 59 { BuildChar CCRunStd }	{ CSNewFCd Cross CrossFlagField CrossFlags CrossPtr DEBUGERROR FixInt Fixed FixedOne InitFontFlat InitNewPath IntX MAXFixed MEMMOVE MINFixed NULL NewLinkCross SlopesArray SlopesArrayInit WHITE_HIGH WHITE_LOW checkRuns crossCount currentCross false firstCross fixmul idealwidth keepPointsFlag limitCross linkCrossCount maxXInflections memoryBuffer1 minXInflections offsetCenterFlag oldStartLink printf rndwidth startLink whiteFixupFlag xPathMax xPathMin xtraCrossCount yPathMax yPathMin }
ResetErrno		fp/os_math.h	/^#define ResetErrno() {errno = 0;}/ ;" macro 1 { }	{ }
ResetNameCache		language/dict.c	/^public procedure ResetNameCache(action)/ ;" function 30 { AboutToCollectShared BumpCETimeStamp DictCtxDestroy InitPostScript WriteRelocatedVMToFile }	{ ForAllNames NIL PNameEntry integer register timestamp }
ResetRecycler		vm/recycler.c	/^public procedure ResetRecycler(R)/ ;" function 12 { ConditionalResetRecycler CreatePrivateVM CreateSharedVM InitRecycler ReclaimMovedVM }	{ RecyclerName _ResetRecycler fflush os_fprintf recyclerStm traceRecycler }
ResetReducer		graphics/reducer.c	/^public procedure ResetReducer()		\/* clear point bu/ ;" function 8 { ConvertToListPath DoRdcPth InitOFill OffsetFill ReduceQuadPath psResetReducer }	{ InitReducer MAXInt32 clipxmax clipxmin curPoint points yMax }
ResetSegFreePtr		vm/abmimpl.c	/^private PCard8 ResetSegFreePtr(seg, oldFree)/ ;" function 81 { GCInternal_ResetFreePointer }	{ BitSpan BitsPerByte ByteSpan DebugAssert NIL PCard8 hiHole level lowHole register stPermanentRAM stROM }
ResetVMSection		vm/vm_segment.c	/^public procedure ResetVMSection (vmStructure, newF/ ;" function 41 { ApplyRelocation ExpandVMSection GCInternal_ResetFreePointer RstrToLevel SetVMSegmentType Use_Reserve }	{ Assert ContractVMSection FindVMSegment InitRecycler NIL PVMSegment Reclaim_Reserve current free level }
ResizeCrossBuf		graphics/cscan.c	/^public procedure ResizeCrossBuf()/ ;" function 10 { CCRunStd }	{ Card32 Int16 MB1ALLOCINCREMENT OutOfMemory memoryBuffer1 }
RestoreContextParams		vm/saverestore.c	/^private procedure RestoreContextParams (level)/ ;" function 24 { RstrToLevel }	{ NIL PParam level paramList }
RestoreKeywordTables		fonts/fontrun.c	/^private procedure RestoreKeywordTables(state)/ ;" function 8 { KAArraySubrs KADefSubrs KAEndCSDict KAKnown KASaveSubrs }	{ NULL }
RestoreState		fonts/fontrun.c	/^private procedure RestoreState(state)/ ;" function 13 { KADefinefont }	{ Cleanup FontrunState NULL PFontrunState }
RestrictInputPort		product/ipcscheduler.h	/^#define RestrictInputPort(psc) \\/ ;" macro 1 { ContextYield Scheduler }	{ }
ReturnBits		graphics/cscan.c	/^private procedure ReturnBits(\/* procedure(*callBac/ ;" function 1 { CScan }	{ }
RevPathDir		graphics/cscan.c	/^#define RevPathDir(dir) ((~(dir)) & PathBoth)	\/* R/ ;" macro 1 { ExtendRunDropOut FillInColumn }	{ }
ReverseDevPrimList		graphics/pathreduce.c	/^private DevPrim * ReverseDevPrimList(dp) register / ;" function 8 { DoRdcPth DoRdcStroke }	{ DevPrim NULL register }
ReversePath		graphics/pathops.c	/^public procedure ReversePath(path) PPath path;/ ;" function 59 { PSReversePath }	{ ConvertToListPath ListPath MakeOwnListPath NULL PPthElt PathType gs pathclose pathcurveto pathlineto pathstart start true }
Rewind		language/stodevedit.c	/^private procedure Rewind(stm)/ ;" function 8 { LineEdit }	{ LSData data }
RgCmdEntry		include/orphans.h	/^typedef struct _t_RgCmdEntry {/ ;" typedef 4 { }	{ }
RgCmdTable		include/orphans.h	/^typedef struct _t_RgCmdEntry {/ ;" typedef 6 { }	{ }
RgNameEntry		include/orphans.h	/^typedef struct _t_RgNameEntry {/ ;" typedef 4 { }	{ }
RgNameTable		include/orphans.h	/^typedef struct _t_RgNameEntry {/ ;" typedef 6 { }	{ }
RgOffset		graphics/reducer.c	/^typedef Card32 RgOffset;/ ;" typedef 1 { Interchange LinkRegionFreeList MakeRegion RdcBend RdcEntry RdcExit Reduce }	{ }
RgOpTable		include/customops.h	/^typedef struct _t_RgOpEntry {/ ;" typedef 4 { }	{ }
RgstContextProcs		language/exec.c	/^public procedure RgstContextProcs (monitorProc, yi/ ;" function 9 { ContextOpsInit }	{ GetNotifyAbortCode MonitorExit YieldByRequest YieldTimeLimit }
RgstDynamicCmd		vm/rgstcmds.c	/^private procedure RgstDynamicCmd(name, proc, pCmd)/ ;" function 39 { PSOpDef RgstExplicit RgstMark }	{ Card16 DebugAssert FindOpSet NIL NameArrayObj PutCmd RgstOpSet VMGetElem XCmdObj dynCmdIndex dynOpIndex dynOpLimit dynOpSetID dynOpSetIndex dynamicCmdsDelta escObj false integer objNameArray pni_end rootShared true }
RgstEditorDev		language/stodevedit.c	/^private procedure RgstEditorDev(name, which)/ ;" function 14 { StoDevEditInit }	{ Eprocs PStoDev RgstStoDevice StoDev false integer os_sureCalloc true }
RgstExplicit		vm/rgstcmds.c	/^public procedure RgstExplicit(s,proc)/ ;" function 25 { ABM_Init ControlInit DebugInit DictInit ExecInit FontBuildInit FontCacheInit FontDiskInit FontRunInit FontShowInit GCInternal_Init IniPathPriv IniReducer InitMakeVM Init_Cmds Init_Recycler Init_VM_Memory Init_VM_Space LanguageInit NameInit PSRegister PSRegisterStatusDict PSRgstOps PathExtraOpsInit RgstMCmds ScannerInit StackInit StateInit StoDevEditInit StreamInit UnixInit }	{ Def InvlAccess Load MakePName NameObj Object PSUnregistered PutCmd RgstDynamicCmd cardinal cmdObj cmds s }
RgstFontDevice		stodev/stodevfont.c	/^private procedure RgstFontDevice()/ ;" function 14 { FontStoDevInit }	{ FontProcs PStoDev RgstStoDevice StoDev false os_sureCalloc true }
RgstFontsSemaphoreProc		fonts/fontbuild.c	/^public procedure RgstFontsSemaphoreProc (proc)/ ;" function 4 { ContextOpsInit }	{ fontSemaphore }
RgstGCContextProcs		vm/vm_garbage.c	/^public procedure RgstGCContextProcs (spaceSemaphor/ ;" function 14 { ContextOpsInit }	{ gcGetCurrentCtxt gcGetNextCtxt gcGetNextSpace gcSetCurrentCtxt gcSpaceSemaphore gcTotalSemaphore }
RgstInitialFont		fonts/fontcache.c	/^private boolean RgstInitialFont(data, kvp) char *d/ ;" function 10 { FontCacheInit }	{ DictGetP Object RgstPrebuiltInfo TypeOfFID dictObj false fontsNames ndcFID }
RgstInternal		vm/rgstcmds.c	/^public procedure RgstInternal(s, proc, rcobj)/ ;" function 3 { ExecInit }	{ RgstMark integer mrkNone s }
RgstMCmds		vm/rgstcmds.c	/^public procedure RgstMCmds(p)  PRgCmdEntry p;/ ;" function 7 { FontBuildInit IniUCache UnixInit }	{ NIL RgstExplicit p }
RgstMNames		vm/rgstcmds.c	/^public procedure RgstMNames(p)  PRgNameEntry p;/ ;" function 7 { FontBuildInit }	{ MakePName NIL p }
RgstMark		vm/rgstcmds.c	/^public procedure RgstMark(s, proc, mark, pcobj)/ ;" function 18 { ArrayInit ContextOpsInit DictInit ExecInit RgstInternal StringInit }	{ DictGetP DictPut Known MakePName NameObj PutCmd RgstDynamicCmd mark rootShared s }
RgstObject		vm/rgstcmds.c	/^public RgstObject(s, val)  char *s;  Object val;/ ;" function 10 { BinObjInit StateInit TypeInit }	{ Def Load MakeStaticPName NameObj Object s }
RgstOpSet		vm/rgstcmds.c	/^public procedure RgstOpSet(cmdProcs, numProcs, opS/ ;" function 54 { PSRgstOps RgstDynamicCmd }	{ AllocCmds AllocPNameArray Card16 CurrentShared CurrentVMSegmentType DURING DebugAssert END_HANDLER FindOpSet HANDLER Level NIL NameArrayObj RERAISE SetShared SetVMSegmentType VMGetElem VMPutElem boolean cmds escObj integer nullObj objNameArray procedure rootShared stPermanentRAM stROM true vmCurrent }
RgstPARelocator		language/pa_relocator.c	/^public procedure RgstPARelocator()/ ;" function 4 { Mnextmain PSInitMakeVM }	{ RelocateObj RgstPackedArrayRelocator }
RgstPackageNames		vm/rgstcmds.c	/^public PNameObj RgstPackageNames(pkgIndex, count)/ ;" function 35 { FontCacheInit IniGraphics LanguageInit StateInit VMInit }	{ AllocPArray AryObj Assert CurrentShared CurrentVMSegmentType DURING DebugAssert END_HANDLER HANDLER Level MakePName NameObj PObject RERAISE SetVMSegmentType VMGetElem VMPutElem VMSetROMAlloc arrayObj cardinal integer pni_end register rootShared vmCurrent }
RgstPackedArrayRelocator		vm/makevm.c	/^public procedure RgstPackedArrayRelocator (proc)/ ;" function 5 { RgstPARelocator }	{ PackedArrayRelocator }
RgstPrebuiltInfo		fonts/fontcache.c	/^private integer RgstPrebuiltInfo(fdict, fid) DictO/ ;" function 41 { PSDefineFont RgstInitialFont }	{ DevRgstPrebuiltFontInfo DictGetP DictTestP EncCharNameProc Equal NIL Object boolean fontsNames integer nameObj prebuiltFIDMask rootShared strObj true }
RgstRstrProc		vm/saverestore.c	/^public procedure RgstRstrProc(proc)/ ;" function 7 { FontCacheInit IniGStates IniViewClip }	{ CantHappen MAXnSRQProcs RstrProcs nRProcs }
RgstSaveProc		vm/saverestore.c	/^public procedure RgstSaveProc(proc)/ ;" function 7 { IniGStates IniViewClip }	{ CantHappen MAXnSRQProcs SaveProcs nSProcs }
RgstSaveSemaphoreProc		vm/saverestore.c	/^public procedure RgstSaveSemaphoreProc (proc)/ ;" function 9 { ContextOpsInit }	{ SaveSemaphore }
RgstStackChecker		vm/saverestore.c	/^public procedure RgstStackChecker (proc)/ ;" function 5 { StackInit }	{ StackChecker }
RgstStoDevice		stodev/stodevimpl.c	/^public procedure RgstStoDevice(dev)/ ;" function 16 { RgstEditorDev RgstFontDevice UnixStoDevInit }	{ NIL PStoDev stoDevList }
RgstStrokeSemaphoreProc		graphics/stroke.c	/^public procedure RgstStrokeSemaphoreProc (proc)/ ;" function 5 { ContextOpsInit }	{ StrokeSemaphore }
RightDir		graphics/cscan.c	/^#define RightDir	2/ ;" macro 1 { CSPathPoints FinishPath }	{ }
RightStillDown		mousekeyboard/kbdroutines.c	/^int RightStillDown(int eNum)/ ;" function 5 { PSRightStillDown }	{ }
Rnum8		fonts/fontbuild.c	/^#define Rnum8(r)\\/ ;" macro 1 { PSInitWrite }	{ C1 C2 r }
Roll		language/stack.c	/^private Roll(stack, n, k)/ ;" function 21 { PSRoll }	{ CountStack Overflow PObject Underflow register }
RollPattern		devpattern/patternimpl.c	/^public procedure RollPattern (leftRoll, data)/ ;" function 36 { Gry4Of4Setup MonoSetup SetupGrayPattern }	{ Assert LSHIFT PSCANTYPE RSHIFT SCANTYPE SCANUNIT data integer patID register start }
RollRight		mp/mpconv12.c	/^#define RollRight(data,n) asm("rorl %2,%0": "=d" (/ ;" macro 1 { MP12Convert16to2 MP12Convert32to2 }	{ data }
RootPointer		vm/vm_segment.c	/^public PVMRoot RootPointer(vm)/ ;" function 10 { ApplyRelocation GC_GetRoot HandleGCFinalize LoadVM Relocate_Shared_Root SaveRestore_Data_Handler }	{ CantHappen NIL PVMRoot PVMSegment level stPermanentRAM vVMSPLIT }
Round		include/devicetypes.h	/^#define	Round(a)	(((a)+(1<<15))>>16)/ ;" macro 1 { }	{ }
RoundSW		fonts/fontbuild.c	/^private Fixed RoundSW(swval) Fixed swval; {/ ;" function 9 { CCRunStd FudgeBlueBands }	{ FRoundF Fixed FixedOne GetDSW false muldiv }
RstrDB		vm/saverestore.c	/^private RstrDB(srp, n)/ ;" function 31 { RstrToLevel }	{ NIL NULL PKeyVal PNameEntry PSRD level nameObj register until vmPrivate }
RstrFC		fonts/fontdisk.c	/^public RstrFC(fcStream) Stm fcStream; {/ ;" function 3 { }	{ StartCache cchInited }
RstrGenericObjects		vm/saverestore.c	/^private procedure RstrGenericObjects (srp, n)/ ;" function 27 { RstrToLevel }	{ GenericObj LGenericObj NIL PGenericBody PSRG WantToFinalize finalizeProcs header level until vmPrivate }
RstrObj		vm/saverestore.c	/^private procedure RstrObj(srp, n)/ ;" function 28 { RstrToLevel }	{ NIL NULL PNameEntry PObject PSRO level nameObj register until vmPrivate }
RstrProcs		vm/saverestore.c	/^private SRQitem SaveProcs[MAXnSRQProcs], RstrProcs/ ;" global 1 { ForAllRProcs RgstRstrProc }	{ }
RstrSetShared		postscript/psspace.c	/^private procedure RstrSetShared (data, size)/ ;" function 7 { PSSetShared }	{ Assert SetShared data lastSetSharedforContext }
RstrStack		language/stack.c	/^public procedure RstrStack(stack, mark)/ ;" function 12 { }	{ PObject RecyclerPush mark register }
RstrToLevel		vm/saverestore.c	/^public RstrToLevel(n, startup)  Level n;  boolean / ;" function 50 { PSRstr SaveRestore_Data_Handler }	{ Assert DURING END_HANDLER ForAllRProcs HANDLER NIL NOLL PSError PSR PerformFinalization RERAISE ResetAllocCounter ResetVMSection RestoreContextParams RstrDB RstrGenericObjects RstrObj SaveSemaphore StackChecker false free inRestore invlrestore level rootPrivate true until vmPrivate }
Rtat		graphics/graphics.c	/^public procedure Rtat(ang)  Preal ang;/ ;" function 8 { PSRtat }	{ Cnct Mtx RtatMtx gs r real }
RtatMtx		fp/mtxvec.c	/^public procedure RtatMtx(a, m)  Preal a; PMtx m;/ ;" function 15 { ArcInternal PSRtat Rtat }	{ RAD d fp90 fpOne fpZero integer real register }
RtoI		product/windowgraphics.c	/^#define RtoI(r) (*(integer *)(&(r)))/ ;" macro 1 { CompositePriv }	{ integer r }
RtoILOOPHOLE		fp/mtxvec.c	/^#define RtoILOOPHOLE(r) (*(integer *)(&(r)))/ ;" macro 1 { RealEq RealEq0 RealGe0 RealGt0 RealLe0 RealLt0 RealNe0 }	{ integer r }
RuleDesc		graphics/cscan.c	/^typedef struct {/ ;" typedef 4 { FixPixelProblem }	{ }
RuleDescPtr		graphics/cscan.c	/^typedef struct {/ ;" typedef 4 { }	{ }
RunAr		graphics/graphicspriv.h	/^typedef Card16 RunAr, *PRunAr;/ ;" typedef 1 { }	{ }
RunArrayRow		device/qintersect.c	/^public PInt16 RunArrayRow(r, yr)/ ;" function 20 { ClippedMasksMark PointInRun QCompareBounds QIntersect QIntersectTrp }	{ INDXMASK Int16 NIL data p r register }
RunEntry		include/disk.h	/^typedef struct _t_RunEntry {	\/* run table entry *\// ;" typedef 4 { }	{ }
RunRunClip		device/devprim.c	/^private DevPrim *RunRunClip(run1, run2, clip)/ ;" function 9 { ClipDevPrim }	{ NIL QIntersect RunRunClipCallBack clipCallBack }
RunRunClipCallBack		device/devprim.c	/^private procedure RunRunClipCallBack(run)/ ;" function 6 { RunRunClip RunTrapClip }	{ AddRunDevPrim BuildRunIndex clipCallBack }
RunTable		include/disk.h	/^typedef struct _t_RunTable {	\/* run table *\// ;" typedef 16 { }	{ }
RunTrapClip		device/devprim.c	/^private DevPrim *RunTrapClip(run, trap, clip)/ ;" function 9 { ClipDevPrim }	{ NIL QIntersectTrp RunRunClipCallBack clipCallBack }
SAMETAGS		language/packedarray.c	/^#define SAMETAGS(ob1,ob2) \\/ ;" macro 1 { EncodeObj }	{ }
SAMPLEDEVICE		device/genericdev.h	/^#define SAMPLEDEVICE 0/ ;" macro 1 { }	{ }
SATOP		include/bintree.h	/^#define SATOP		5	\/* Source atop destination *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
SAVERESTOREEVENTS		vm/saverestore.c	/^#define	SAVERESTOREEVENTS \\/ ;" macro 1 { Init_SaveRestore }	{ STATICEVENTFLAG }
SAVERESTORE_H		vm/saverestore.h	/^#define	SAVERESTORE_H/ ;" macro 1 { }	{ }
SB		bintree/extent.c	/^#define SB(d)		d->bounds/ ;" macro 1 { EXBuildExtents }	{ d }
SBMA		mp/mp12.h	/^#define SBMA 3	\/* bitmap, aligned with destination/ ;" macro 1 { BUFFERSOURCE BUFFERSOURCEHW SetUpSource }	{ }
SBMU		mp/mp12.h	/^#define SBMU 1	\/* bitmap, unaligned, 0 < leftShift/ ;" macro 1 { SetUpSource }	{ }
SBXcmd		fonts/fontbuild.c	/^#define SBXcmd	13/ ;" macro 1 { BuildChar CCRunStd }	{ }
SBesc		fonts/fontbuild.c	/^#define SBesc 7/ ;" macro 1 { BuildChar CCRunStd }	{ }
SCANMASK		device/blacktrap.030.s	/^#define SCANMASK	31/ ;" macro 1 { BlackMasksMark BlackMasksMarkReal ClippedMasksMark ConstantMasksMark GrayMasksMark ImIdent ImS12D12NoTfr ImSXXD11 ImStretch SETUPPARAMS SMASK WhiteMasksMark }	{ }
SCANNER_H		language/scanner.h	/^#define	SCANNER_H/ ;" macro 1 { }	{ }
SCANSHIFT		device/blacktrap.030.s	/^#define	SCANSHIFT	5/ ;" macro 1 { BlackMasksMark BlackMasksMarkReal BlackRunMark ClippedMasksMark ConstantMasksMark ConstantRectMark ConstantRunMark ConstantTrapsMark ExpandOneLine GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark ImIdent ImS12D12NoTfr ImSXXD11 ImStretch MaskUnitWidth SETUPPARAMS SSHIFT WhiteMasksMark WhiteRunMark }	{ }
SCANTYPE		include/devpattern.h	/^#define SCANTYPE Card8/ ;" macro 1 { AllocPatternStorage BlackMasksMark BlackMasksMarkReal BlackRunMark BuildGrayPattern BuildPattern BytesForMask CMYKConstColorSetup CheckScreenDims ClippedMasksMark CmptMaskBBMin ConstColorSetup ConstSetup ConstantMasksMark ConstantRectMark ConstantRunMark ConstantTrapsMark ExpandOneLine FmMakeMaskDevice FreePattern GetBuffers GetCachePlace GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark ImS12D12NoTfr ImS1XD11 ImSXXD11 IniMaskDevImpl MRMoveRect MakeConstValue MaskGoAway RollPattern SetupDeepOnes SetupGrayPattern SetupMonoPattern WhiteMasksMark WhiteRunMark }	{ Card8 }
SCANUNIT		include/devpattern.h	/^#define SCANUNIT 32/ ;" macro 1 { BlackMasksMark BlackMasksMarkReal BuildGrayPattern BytesForMask ClippedMasksMark CmptMaskBBMin ConstRGBPattern ConstSetup ConstantMasksMark ExpandOneLine FmMakeMaskDevice GrayMasksMark Im110 ImIdent ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch MakeConstValue MaskGoAway MaskUnitWidth RGBPattern RollPattern SETUPPARAMS SHIFTPIXEL SUNIT SetupDeepOnes SetupMonoPattern WhiteMasksMark }	{ }
SCON		mp/mp12.h	/^#define SCON 0	\/* constant *\// ;" macro 1 { CONSTSOURCE SetUpSource }	{ }
SE		bintree/extent.c	/^#define SE(d)		d->extent/ ;" macro 1 { EXBuildExtents }	{ d }
SEGMENT_64K		graphics/cscan.c	/^#define SEGMENT_64K  (ISP == isp_i80286)/ ;" macro 1 { NEG_INDICES }	{ isp_i80286 }
SERIAL		include/package_specs.h	/^#define SERIAL		"serial.h"/ ;" macro 1 { }	{ }
SERVER		include/package_specs.h	/^#define SERVER		"server.h"/ ;" macro 1 { }	{ }
SETBOUNDS		include/bintree.h	/^#define SETBOUNDS(one, a, b, c, d) \\/ ;" macro 1 { }	{ d }
SETUPPARAMS		devpattern/ims11d11.c	/^#define SETUPPARAMS(args) \\/ ;" macro 1 { }	{ NIL RAISE ecLimitCheck }
SETUPSTM		language/scanner.c	/^#define SETUPSTM stmPtr = stm->ptr; stmCnt = stm->/ ;" macro 1 { GETC PSReadHexString PSReadLine StmToken UNGETC }	{ }
SFAProc		language/string.c	/^private procedure SFAProc()/ ;" function 16 { StringInit }	{ EPopP EPushP ETopP Object PushInteger STail StrObj TypeCheck VMGetChar integer strObj strcmd }
SFCEntry		fonts/fontspriv.h	/^typedef struct _SFCEntry {/ ;" typedef 10 { }	{ }
SFCache		fonts/fontspriv.h	/^typedef struct {/ ;" typedef 7 { InitSFCache }	{ }
SGA		include/package_specs.h	/^#define SGA		"sga.h"/ ;" macro 1 { CONTROLLER_DEFS }	{ }
SHIFTPIXEL		devpattern/imagepriv.h	/^#define SHIFTPIXEL(g,b) ((g) << (SCANUNIT - BPP - / ;" macro 1 { ImS12D12NoTfr }	{ BPP SCANUNIT }
SHead		language/string.c	/^private procedure SHead(s, n, pstrob)/ ;" function 6 { PSAnchorSearch PSSearch SubPString }	{ s }
SIGN		fp/isinfieee.c	/^#define SIGN     0x80000000/ ;" macro 1 { os_isnan }	{ }
SIGNALSTACKSIZE		product/nextmain.c	/^#define SIGNALSTACKSIZE 2048	\/* Stack usage for si/ ;" macro 1 { Mnextmain }	{ }
SIN		include/bintree.h	/^#define SIN		3	\/* Source in destination *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
SIZES		include/package_specs.h	/^#define SIZES		"sizes.h"/ ;" macro 1 { }	{ }
SIZES_H		include/sizes.h	/^#define	SIZES_H/ ;" macro 1 { }	{ }
SIZE_CUSTOMDICT		include/sizes.h	/^#define	SIZE_CUSTOMDICT			0/ ;" macro 1 { }	{ }
SIZE_FONT_CACHE		device/devinit.c	/^#define	SIZE_FONT_CACHE         10/ ;" macro 1 { PSDeviceInit StartCache ps_getsize }	{ }
SIZE_GC_DEF_THRESHOLD		include/sizes.h	/^#define	SIZE_GC_DEF_THRESHOLD		4/ ;" macro 1 { GCInternal_VMChange PSSetThresh }	{ }
SIZE_GC_MAX_THRESHOLD		include/sizes.h	/^#define	SIZE_GC_MAX_THRESHOLD		3/ ;" macro 1 { PSSetThresh }	{ }
SIZE_GC_MIN_THRESHOLD		include/sizes.h	/^#define	SIZE_GC_MIN_THRESHOLD		2/ ;" macro 1 { PSSetThresh }	{ }
SIZE_GC_OVERSIZE_THRESHOLD		include/sizes.h	/^#define	SIZE_GC_OVERSIZE_THRESHOLD	6/ ;" macro 1 { }	{ }
SIZE_GC_SHARED_THRESHOLD		include/sizes.h	/^#define	SIZE_GC_SHARED_THRESHOLD	5/ ;" macro 1 { }	{ }
SIZE_GS_DEVICE_DATA		include/sizes.h	/^#define	SIZE_GS_DEVICE_DATA		7/ ;" macro 1 { }	{ }
SIZE_ID_SPACE		include/sizes.h	/^#define	SIZE_ID_SPACE			17/ ;" macro 1 { ContextOpsInit }	{ }
SIZE_IMAGE_BUFFER		include/sizes.h	/^#define	SIZE_IMAGE_BUFFER		8/ ;" macro 1 { MaxNEW }	{ }
SIZE_LAST		include/sizes.h	/^#define	SIZE_LAST			21	\/* Index of last parameter / ;" macro 1 { ps_getsize }	{ }
SIZE_MASKS		device/devinit.c	/^#define	SIZE_MASKS              11/ ;" macro 1 { PSDeviceInit StartCache ps_getsize }	{ }
SIZE_MAX_HALFTONE_PATTERN		include/sizes.h	/^#define	SIZE_MAX_HALFTONE_PATTERN	14/ ;" macro 1 { GrayInit }	{ }
SIZE_MAX_PATTERN		include/sizes.h	/^#define	SIZE_MAX_PATTERN		15/ ;" macro 1 { }	{ }
SIZE_MAX_TOTAL_PATTERN		include/sizes.h	/^#define	SIZE_MAX_TOTAL_PATTERN		16/ ;" macro 1 { }	{ }
SIZE_MIDS		include/sizes.h	/^#define	SIZE_MIDS			12/ ;" macro 1 { StartCache ps_getsize }	{ }
SIZE_SPARE_18		include/sizes.h	/^#define	SIZE_SPARE_18			18/ ;" macro 1 { }	{ }
SIZE_SPARE_19		include/sizes.h	/^#define	SIZE_SPARE_19			19/ ;" macro 1 { }	{ }
SIZE_SPARE_20		include/sizes.h	/^#define	SIZE_SPARE_20			20/ ;" macro 1 { }	{ }
SIZE_TFR_FCN_POOL		include/sizes.h	/^#define	SIZE_TFR_FCN_POOL		13/ ;" macro 1 { }	{ }
SIZE_UNDEFINED		include/sizes.h	/^#define	SIZE_UNDEFINED	0x8000000/ ;" macro 1 { ps_getsize }	{ }
SIZE_UPATH_CACHE		include/sizes.h	/^#define	SIZE_UPATH_CACHE		9/ ;" macro 1 { IniUCache PSNormalUCache }	{ }
SIZE_VM_EXPANSION		include/sizes.h	/^#define	SIZE_VM_EXPANSION		1/ ;" macro 1 { CreateVM ExpandVMSection }	{ }
SLCcmd		fonts/fontbuild.c	/^#define SLCcmd	23/ ;" macro 1 { BuildChar CCRunStd }	{ }
SLJesc		fonts/fontbuild.c	/^#define SLJesc 21/ ;" macro 1 { CCRunStd }	{ }
SLName		devpattern/patternimpl.c	/^private readonly char *SLName = "DB\/ScreenList";/ ;" global 1 { InitSLFiles }	{ }
SLWesc		fonts/fontbuild.c	/^#define SLWesc 5/ ;" macro 1 { CCRunStd }	{ }
SMASK		devpattern/ims11d11.c	/^#define SMASK SCANMASK/ ;" macro 1 { ImS1XD11 }	{ SCANMASK }
SND_SUFFIX		product/miscops.c	/^#define SND_SUFFIX ".snd"/ ;" macro 1 { PSPlaySound }	{ }
SND_SUFFIX_LENGTH		product/miscops.c	/^#define SND_SUFFIX_LENGTH 4/ ;" macro 1 { PSPlaySound }	{ }
SODEVTRAP		device/blacktrap.030.s	/^#define SODEVTRAP	28	\/* sizeof(DevTrap)			   *\// ;" macro 1 { }	{ }
SOSCANTYPE		device/blacktrap.030.s	/^#define SOSCANTYPE	4	\/* Size of SCANTYPE in bytes./ ;" macro 1 { }	{ }
SOURCEADVANCE		mp/moverect.c	/^#define SOURCEADVANCE(sI, lS) \\/ ;" macro 1 { MRMoveRect }	{ MRPatternAdvance data }
SOUT		include/bintree.h	/^#define SOUT		4	\/* Source out of destination *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
SOVER		include/bintree.h	/^#define SOVER		2	\/* Source over destination *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
SPACE		include/vm.h	/^#define SPACE 0/ ;" macro 1 { }	{ }
SPAT		mp/mp12.h	/^#define SPAT 2	\/* pattern *\// ;" macro 1 { MRPatternAdvance SetUpSource }	{ }
SPLICEDELTA		graphics/cscan.c	/^#define SPLICEDELTA (0x0001L)	\/* The distance betw/ ;" macro 1 { SplicePixel }	{ }
SPUD		include/package_specs.h	/^#define SPUD		"spud.h"/ ;" macro 1 { CONTROLLER_DEFS }	{ }
SR		vm/saverestore.h	/^typedef struct _t_SR {/ ;" typedef 8 { ProcessSaveData Save }	{ }
SR01		device/blacktrap.030.s	/^#define SR01		0x3f3c/ ;" macro 1 { }	{ }
SRD		vm/saverestore.h	/^typedef struct _t_SRD {/ ;" typedef 5 { ProcessSaveData VMPutDict }	{ }
SRG		vm/saverestore.h	/^typedef struct _t_SRG {/ ;" typedef 5 { ProcessSaveData VMPutGeneric }	{ }
SRO		vm/saverestore.h	/^typedef struct _t_SRO {/ ;" typedef 5 { ProcessSaveData saveobj }	{ }
SRQitem		vm/saverestore.c	/^typedef struct {/ ;" typedef 3 { }	{ }
SSClose		language/stream.c	/^private int SSClose(stm) Stm stm; {StmDestroy(stm)/ ;" function 1 { }	{ StmDestroy }
SSFAvail		language/stream.c	/^private int SSFAvail(stm) Stm stm; {return stm->cn/ ;" function 1 { }	{ }
SSFilBuf		language/stream.c	/^private int SSFilBuf(stm) Stm stm; {stm->flags.eof/ ;" function 1 { }	{ EOF }
SSFlush		language/stream.c	/^private int SSFlush(stm) Stm stm; {stm->ptr += stm/ ;" function 1 { }	{ }
SSGetChar		fonts/compshow.c	/^#define SSGetChar(d) \\/ ;" macro 1 { CompSlowShow }	{ RangeCheck VMGetChar cardinal d ssr }
SSHIFT		devpattern/ims11d11.c	/^#define SSHIFT SCANSHIFT/ ;" macro 1 { ImS1XD11 }	{ SCANSHIFT }
SSPCesc		fonts/fontbuild.c	/^#define SSPCesc 8/ ;" macro 1 { CCRunStd }	{ }
SSRestoreState		fonts/compshow.c	/^private procedure SSRestoreState ()/ ;" function 10 { CompSlowShow }	{ ShowState fontDict gs register ss ssr }
SSSOutCall		fonts/fontshow.c	/^public boolean SSSOutCall() {/ ;" function 20 { CompSlowShow SlowShow }	{ CheckCI DelayedMakeFont TrimShowStates ValidMID boolean false showLevel ss true }
SSState		fonts/compshow.c	/^typedef struct/ ;" typedef 9 { CompSlowShow CompositeShow ScanCompString }	{ }
SSStatePtr		fonts/compshow.c	/^typedef struct/ ;" typedef 9 { CompSlowShow CompositeShow GetInfo ScanCompString }	{ }
SSUnGetc		language/stream.c	/^private int SSUnGetc(c, stm)/ ;" function 6 { os_sscanf }	{ EOF }
STACK_H		language/stack.h	/^#define	STACK_H/ ;" macro 1 { }	{ }
START_SYMBOL		bintree/bintreetypes.h	/^#define START_SYMBOL          "_Start"/ ;" macro 1 { LoadSingleDriver }	{ }
STATELENGTH		coroutine/corouxfer.c	/^#define STATELENGTH 4/ ;" macro 1 { }	{ }
STATICEVENTFLAG		include/orphans.h	/^#define	STATICEVENTFLAG(x)	(1 << ((integer)(x)))/ ;" macro 1 { CallDataProcedures CustomOpsInit DATA_HANDLER_FLAGS FontsInit GraphicsInit LANGUAGESTATICEVENTS SAVERESTOREEVENTS VMSTATICEVENTS }	{ integer }
STKGROWINC		language/stack.h	/^#define	STKGROWINC	20	\/* Stack growth increment	*\// ;" macro 1 { Overflow }	{ }
STKINITSIZE		language/stack.h	/^#define	STKINITSIZE	10	\/* Initial Stack size		*\// ;" macro 1 { NewStack }	{ }
STKSIZELIMIT		language/stack.h	/^#define	STKSIZELIMIT	2048	\/* Default maximum stack/ ;" macro 1 { LanguageDataHandler }	{ }
STKWDTHcmd		fonts/fontbuild.c	/^#define STKWDTHcmd 25/ ;" macro 1 { BuildChar CCRunStd }	{ }
STODEV		include/package_specs.h	/^#define STODEV		"stodev.h"/ ;" macro 1 { }	{ }
STODEV_H		include/stodev.h	/^#define	STODEV_H/ ;" macro 1 { }	{ }
STOREIT		bitmap/bm34comp.c	/^#define STOREIT(p,v)  asm("movel %2, %0@+" : "=a" / ;" macro 1 { BM34MoveRect }	{ p }
STREAM		include/package_specs.h	/^#define STREAM		"stream.h"/ ;" macro 1 { }	{ }
STREAM_DATA_MESSAGE_ID		product/ipcstream.h	/^#define STREAM_DATA_MESSAGE_ID 3049/ ;" macro 1 { FIRST_MESSAGE_ID IPCFillBuf IPCInitializeStm IPCWrite }	{ }
STREAM_DATA_WITH_ACK_ID		product/ipcstream.h	/^#define STREAM_DATA_WITH_ACK_ID 3051/ ;" macro 1 { IPCFillBuf sendAck }	{ }
STREAM_H		include/stream.h	/^#define	STREAM_H/ ;" macro 1 { }	{ }
STREAM_SOURCE		graphics/image.c	/^#define STREAM_SOURCE 2/ ;" macro 1 { ImageInternal ReadSlices }	{ }
STRING_SOURCE		graphics/image.c	/^#define STRING_SOURCE 1/ ;" macro 1 { ImageInternal }	{ }
STRIPCONVERTCAUSE		bintree/bintreetypes.h	/^#define STRIPCONVERTCAUSE(c) (c & 0x7fffffff)/ ;" macro 1 { CSPrintOn DPRevealInside }	{ }
STROKE_H		graphics/stroke.h	/^#define	STROKE_H/ ;" macro 1 { }	{ }
STUTTER		include/copyright.h	/^#define STUTTER (ISP==isp_mc68020? 4 : ISP==isp_mc/ ;" macro 1 { }	{ isp_mc68010 isp_mc68020 }
STail		language/string.c	/^private procedure STail(s, n, pstrob)/ ;" function 8 { PSAnchorSearch PSSearch PutString SFAProc SubPString }	{ s }
STcmd		fonts/fontbuild.c	/^#define STcmd	19/ ;" macro 1 { BuildChar CCRunStd }	{ }
SUBesc		fonts/fontbuild.c	/^#define SUBesc 11/ ;" macro 1 { CCRunStd }	{ }
SUNIT		devpattern/ims11d11.c	/^#define SUNIT SCANUNIT/ ;" macro 1 { }	{ SCANUNIT }
SWAP		bitmap/bm34comp.c	/^#define SWAP(a) asm("swap %0" : "=d" (a) : "0d" (a/ ;" macro 1 { BM34MoveRect }	{ }
SWAP2		language/binaryobject.c	/^#define SWAP2(pValue) { \\/ ;" macro 1 { ReadBinObjSeq ReadNumAry WriteObject }	{ Card8 PCard8 register }
SWAP4		language/binaryobject.c	/^#define SWAP4(pValue) { \\/ ;" macro 1 { ReadBinObjSeq ReadNumAry WriteObject }	{ Card8 PCard8 register }
SWAPBITS		include/environment.h	/^#define SWAPBITS 1/ ;" macro 1 { AppendSegmentHeader ApplyRelocation BinObjInit BuildInitialState LanguageDataHandler ReadBinObjSeq ReadNumAry WriteObject WriteRelocatedVMToFile WriteRelocationTable WriteVMSection WriteVMToFile }	{ }
SWITCHESVERSION		include/environment.h	/^#define SWITCHESVERSION 3/ ;" macro 1 { VMVERSION }	{ }
SYNCHRONOUS_TIMESLICE		product/timeslice.h	/^#define SYNCHRONOUS_TIMESLICE (OS == os_mach)/ ;" macro 1 { }	{ os_mach }
SafeFilBuf		language/scanner.c	/^private int SafeFilBuf(stm, pss)/ ;" function 12 { GETC }	{ DURING END_HANDLER FreeStrStorage HANDLER RERAISE }
SafeMalloc		product/machportdevice.c	/^static char *SafeMalloc(int size)/ ;" function 8 { New PopMallocString }	{ PSLimitCheck os_malloc }
SafeShowMask		fonts/fontshow.c	/^private procedure SafeShowMask(mask, dc, args)/ ;" function 11 { ShowByName }	{ CleanShowState DURING DevFlushMask END_HANDLER HANDLER RERAISE ShowMask ss }
SafeUnGetc		language/scanner.c	/^private procedure SafeUnGetc(c, stm, pss)/ ;" function 10 { UNGETC }	{ CantHappen DURING END_HANDLER FreeStrStorage HANDLER RERAISE ungetc }
SanityCheck		bintree/drivers.c	/^static int SanityCheck()/ ;" function 43 { DriverInit }	{ Bounds INF IntersectAndCompareBounds NXMonitor net netCount }
SavObjMacro		vm/saverestore.c	/^#define SavObjMacro(o) { \\/ ;" macro 1 { VMCopyArray VMPutDKeyVal VMPutDValue VMPutElem }	{ VMObjPtr level saveobj }
Save		vm/saverestore.c	/^private Save()/ ;" function 30 { PSSave }	{ ABM_AllocateVM AllocVMAligned ConditionalResetRecycler ForAllSProcs LimitCheck MAXlevel NIL NOLL NULL NoteLevel PCard8 PSR SR SaveSemaphore false free integer level privateRecycler rootPrivate vmPrivate }
SaveObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 45 { PSSave }	{ }
SaveProcs		vm/saverestore.c	/^private SRQitem SaveProcs[MAXnSRQProcs], RstrProcs/ ;" global 1 { ForAllSProcs RgstSaveProc }	{ }
SaveRestore_Data		vm/saverestore.c	/^typedef struct {/ ;" typedef 4 { Init_SaveRestore }	{ }
SaveRestore_Data_Handler		vm/saverestore.c	/^private procedure SaveRestore_Data_Handler (code)/ ;" function 27 { Init_SaveRestore }	{ NIL NOLL PerformFinalization RootPointer RstrToLevel level rootPrivate saveRestoreData true vmPrivate }
SaveSemaphore		vm/saverestore.c	/^private PVoidProc SaveSemaphore;/ ;" global 1 { RgstSaveSemaphoreProc RstrToLevel Save }	{ }
Scal		graphics/graphics.c	/^public procedure Scal(c)  Cd c;/ ;" function 6 { BMRun PSScal }	{ Cnct Mtx ScalMtx s }
ScalMtx		fp/mtxvec.c	/^public procedure ScalMtx(xs, ys, m)  Preal xs, ys;/ ;" function 2 { ArcInternal PSScal Scal }	{ d fpZero }
ScanCompString		fonts/compshow.c	/^public integer ScanCompString () {/ ;" function 116 { ShowInternal }	{ CSGCh CSGetChar CSTestChar FMap17 FMap88 FMap97 FMapEscape FMapGen FMapNone GetInfo PSRangeCheck SSState SSStatePtr ShowState UniqueMID charptr fontDict gs integer register ss ssr }
ScanFromAry		vm/makevm.c	/^private procedure ScanFromAry(ary)/ ;" function 13 { BuildRelocationTable RelocateObject }	{ AddToMarkTable PObject RelocateObject cardinal true }
ScanFromDict		vm/makevm.c	/^private procedure ScanFromDict(dict)/ ;" function 34 { BuildRelocationTable RelocateObject }	{ AddToMarkTable Assert NoteRelocationEntry PCard8 PDictBody PKeyVal PObject RelocateObject TrickyDict cardinal true }
ScanLineCxtn		graphics/cscan.c	/^private Cxtn ScanLineCxtn(cstart, cend, x, dy, del/ ;" function 56 { BuildCxtn }	{ CrossPtr Cxtn IntX NOCXTN REG RelPixelToCxtn boolean false right true }
ScanList		graphics/qreducer.c	/^typedef struct scanrec {/ ;" typedef 5 { IniQReducer InsertEdge QReduce }	{ }
ScanNameArray		vm/makevm.c	/^private procedure ScanNameArray (NameArray)/ ;" function 18 { BuildRelocationTable RelocateObject }	{ Assert NoteRelocationEntry PNameEntry escObj integer nullObj objNameArray }
ScanPkdAry		vm/makevm.c	/^private procedure ScanPkdAry(ary)/ ;" function 42 { RelocateObject }	{ AddToMarkTable Card16 PCard8 PackedArrayRelocator PkdaryObj RelocateObject arrayObj cardinal charptr dictObj false pkdaryObj }
ScanRec		graphics/qreducer.c	/^typedef struct scanrec {/ ;" typedef 5 { IniQReducer }	{ }
ScannerInit		language/scanner.c	/^public procedure ScannerInit(reason)  InitReason r/ ;" function 31 { LanguageInit }	{ Assert Card32 MAXInt32 MakePName Object PSLBrak PSRBrak RgstExplicit baseLimitDiv10 baseLimitMod10 beginDAcmd binClassArray btokhdr endDAcmd endswitch hex noBinClassArray oct oth rbr }
Scheduler		product/ipcscheduler.c	/^public procedure Scheduler()/ ;" function 79 { Mnextmain }	{ CoReturn NSCurrentContext NSDestroyContext NSLoadContext NSUnloadContext NULL PSLimitCheck PSSchedulerContext RestrictInputPort SelectPSContext SetEffectiveUser TimedEvent contextGid contextList contextUid currentContextType currentPSContext currentSchedulerContext false notifyPort os_freeelement portNeedsContext scStorage scheduler stillRunning true }
SchedulerInit		product/ipcscheduler.c	/^public procedure SchedulerInit()/ ;" function 9 { Mnextmain }	{ COROUTINESTACKSIZE InitCoroutine InitPSContextType NULL _t_PSSchedulerContextRec contextList currentContextType false os_newpool scStorage scheduler }
SchedulerMsg		product/ipcscheduler.c	/^typedef struct _SchedulerMsg {/ ;" typedef 5 { AcquireMsg ContextYield HandleDataMsg ReleaseMsg SelectPSContext }	{ }
Screen		include/graphics.h	/^typedef struct _t_ScreenRec {/ ;" typedef 10 { GSAddRefs GSRemRefs GetType3Screen GetType4Screen InstallNewScreen MakeScreenDict MakeType1Screen MakeType2Screen NewScreen PSCrColorScreen PSCrHalftone PSCrScreen PSSetColorScreen PSSetHalftone PSSetScreen PushGStateItems RemScrRef SetDefaultHalftone }	{ }
ScreenPrivate		devpattern/patternpriv.h	/^typedef struct {/ ;" typedef 5 { AllocScreenPrivate InitPatternImpl }	{ }
ScreenRec		include/graphics.h	/^typedef struct _t_ScreenRec {/ ;" typedef 10 { NewScreen }	{ }
ScreenToBase		product/coordinates.c	/^public procedure ScreenToBase(PWindowDevice wd, Cd/ ;" function 8 { PSFindWindow PSScreenToBase }	{ Bounds GetWinBounds Wd2Layer p }
SearchDict		language/dict.c	/^public boolean SearchDict(db, key, pResult)/ ;" function 35 { DictTestP KAEndCSDict NextKeyVal PutInDict UnDef dknown trytoload }	{ CantHappen Equal MAX NIL Nclash Nmaxprobe Nsearch PKeyVal TypeCheck false integer nameObj nullObj register true }
SearchSelectFont		fonts/selectfont.c	/^public boolean SearchSelectFont(key, mtx, isScaleF/ ;" function 47 { PSSelectFont }	{ DebugAssert DecrSetMIDAge MT NIL PMTItem PSFCEntry d false freemem nameObj register rootPrivate sfCache true vmCurrent }
SegmentAddress		vm/vm_relocate.h	/^typedef struct _t_SegmentAddress {/ ;" typedef 14 { DecodeAddress EncodeAddress }	{ }
SegmentDir		graphics/cscan.c	/^typedef Int16 SegmentDir;/ ;" typedef 1 { }	{ }
SegmentTable		vm/vm_relocate.c	/^typedef struct _t_SegmentTable {/ ;" typedef 13 { BuildSegmentTable }	{ }
SelectPSContext		product/ipcscheduler.c	/^private PSSchedulerContext SelectPSContext()/ ;" function 41 { Scheduler }	{ AcquireMsg HandleMsg Msg_Receive NSTimeoutContext NULL PSSchedulerContext PickContext ReleaseMsg SchedulerMsg TIMESLICE TimedEvent boolean currentSchedulerContext eventGlobals false os_fprintf os_stderr true }
SelectionSort		fonts/glbclr.c	/^private void SelectionSort(ss, first, stop)/ ;" function 21 { SortStems }	{ Fixed PGlbClr register ss }
SelfDestructPSContext		product/pscontext.c	/^public procedure SelfDestructPSContext()/ ;" function 8 { }	{ ContextYield PSContextToID currentPSContext os_fprintf os_stderr }
SendEvent		product/event.c	/^private boolean SendEvent(NXEvent *ep, boolean for/ ;" function 124 { PostEvent }	{ ActiveApp EASY_FORMAT EventCodeMask EventFlush GlobalToLocal ID2Wd IDToPSContext IPCGetWCParams NULL NX_KEYDOWN NX_KEYUP NX_LMOUSEDOWN NX_RMOUSEDOWN PSClrToMrk PSContext PSExecuteObject PSGetObjectType PSInvalidID PSMark PSObject PSPushInteger PWindowDevice TimedEvent WriteEvent boolean currentPSContext data eventErrorPending eventGlobals eventHeader false fflush fwrite lastKey lastLeft lastRight objectFormat prevKey scheduler true window }
SendOldestToDisk		devpattern/patternimpl.c	/^private boolean SendOldestToDisk()/ ;" function 24 { AllocScrnSlot GetMemForTA }	{ Card32 MAXSCRN NULL NULLSLOT PCard8 PScreenPrivate SendTAToDisk curTAUsage false haveFiles integer largestChIndex screens taTimeStamp true }
SendTAToDisk		devpattern/patternimpl.c	/^private boolean SendTAToDisk(slot, mem, size)/ ;" function 26 { GetMemForTA SendOldestToDisk }	{ Assert DevScreen EOF NULL PScreenPrivate false ferror fseek ftell fwrite haveFiles integer os_clearerr register s screens slstm stmBytesUsed true }
Set1BitCMYKValues		devpattern/imsupport.c	/^public procedure Set1BitCMYKValues(cData, tfrFcn, / ;" function 24 { }	{ NULL integer max real register }
Set1BitValues		devpattern/imsupport.c	/^public procedure Set1BitValues(cData, tfrFcn, vals/ ;" function 25 { }	{ NULL integer max real register }
Set2BitCMYKValues		devpattern/imsupport.c	/^public procedure Set2BitCMYKValues(cData, tfrFcn, / ;" function 27 { }	{ NULL integer max real register }
Set2BitValues		devpattern/imsupport.c	/^public procedure Set2BitValues(cData, tfrFcn, vals/ ;" function 28 { }	{ NULL integer max real register }
Set4BitCMYKValues		devpattern/imsupport.c	/^public procedure Set4BitCMYKValues(cData, tfrFcn, / ;" function 27 { }	{ NULL integer max real register }
Set4BitValues		devpattern/imsupport.c	/^public procedure Set4BitValues(cData, tfrFcn, vals/ ;" function 28 { }	{ NULL integer max real register }
Set8BitCMYKValues		devpattern/imsupport.c	/^public procedure Set8BitCMYKValues(cData, tfrFcn, / ;" function 24 { }	{ NULL integer max real register }
Set8BitValues		devpattern/imsupport.c	/^public procedure Set8BitValues(cData, tfrFcn, vals/ ;" function 25 { }	{ NULL integer max real register }
SetAbort		language/exec.c	/^public procedure SetAbort(reason) integer reason; / ;" function 4 { BuildChar CCRunStd DoUAppend PSExecOpNm PathForAll TopError UCGetDevPrim }	{ execAbort execAbortPending }
SetBBCompMark		graphics/graphics.c	/^public procedure SetBBCompMark(delta)/ ;" function 10 { MakeCacheDev MakeCacheDev2 }	{ BBCompare BBoxRec FCeil FTrunc GetDevClipBBox edgemaxx edgemaxy edgeminx edgeminy ms }
SetCETimeStamp		language/dict.c	/^public procedure SetCETimeStamp(index)/ ;" function 11 { CreateContext }	{ Assert MAXGenericIDIndex timestamp }
SetCacheDev		fonts/cachedev.c	/^private procedure SetCacheDev(m, hasVertMetrics)/ ;" function 14 { PSSetCchDevice PSSetCchDevice2 }	{ NIL NullDevice PopPCd RCd SetCchDevice Undefined fpZero ss }
SetCacheLimit		fonts/fontdisk.c	/^private procedure SetCacheLimit(cacheThreshold) in/ ;" function 9 { PSSetCacheLimit PSStCParams }	{ DevMaskCacheInfo LimitCheck NIL PVoidProc RangeCheck WriteContextParam ctxCacheThreshold integer }
SetCch		fonts/cachedev.c	/^private boolean SetCch(ll, ur, delta) FCd ll, ur; / ;" function 40 { SetCchDevice }	{ Cd FCd FRoundF IDTfmP NIL NoRoom SetDeltaAndTlate SetupMaskDev ShowState TfmP Tlat curMT false fixtopflt fpZero gs os_abs register ss ssr true xChunkOffset yChunkOffset }
SetCchDevice		fonts/cachedev.c	/^public boolean SetCchDevice(m, delta) RMetrics *m;/ ;" function 16 { BMRun CCBuild CCRunStd PathEndChar SetCacheDev }	{ CrMtx DTfmPCd DTfmToFixed FCd FSetCharWidth Mtx NoRoom RCd SetCch SetCharWidth TfmToBB gs }
SetCharAge		fonts/fontcache.h	/^#define SetCharAge(c) (c)->touched = true/ ;" macro 1 { CompositeShow FastShow FasterShow ShowByName }	{ true }
SetCharWidth		fonts/cachedev.c	/^private procedure SetCharWidth(width)  Cd width; {/ ;" function 11 { MakeCacheDev2 PSSetCharWidth ROkToBuild SetCchDevice }	{ CrMtx CvtToFixed DTfmPCd FCd LOWERSHOWBOUND Mtx ShowState UPPERSHOWBOUND fixtopflt register ss ssr }
SetCurrentContext		postscript/contextimpl.c	/^private PCard8 SetCurrentContext (id)/ ;" function 7 { ContextOpsInit }	{ Assert IDToPSContext NIL PSContext staticData }
SetDefaultHalftone		graphics/gray.c	/^public procedure SetDefaultHalftone() {/ ;" function 25 { PSCrHalftone PSSetHalftone }	{ DevHalftone InstallNewScreen NIL NewScreen RemScrRef Screen gs iLNullObj integer register s screenList true }
SetDeltaAndTlate		fonts/cachedev.c	/^private procedure SetDeltaAndTlate(delta, rcd) RCd/ ;" function 7 { NoRoom SetCch }	{ IDTfmP RRoundP Tlat gs }
SetDevColor		graphics/colorops1.c	/^public procedure SetDevColor(c) Color c; {/ ;" function 13 { NewDevice PSSetAlpha PSSetCMYKColor PSSetGrayPattern SetGray SetRGBColor SetTransfer }	{ ActivateTfr NIL PGState TfrFcn gs register }
SetDictAccess		language/dict.c	/^public procedure SetDictAccess(d, access)  DictObj/ ;" function 13 { CreateSharedVM InitPostScript PSDefineFont PSDeviceInfo PSNoAccess PSReadOnly WriteRelocatedVMToFile }	{ DictBody DictFinalize InvlAccess PDictObj VMGetDict VMPutDict XlatDictRef d rAccess wAccess }
SetEffectiveUser		product/listener.c	/^public procedure SetEffectiveUser(uid_t toUid, gid/ ;" function 31 { PSResetUser PSSetJobUser PSSetUser Scheduler }	{ ROOT_GID ROOT_UID SetGroups }
SetFixedPathProcs		fonts/fontbuild.c	/^private procedure SetFixedPathProcs() {/ ;" function 4 { CCRunStd GetMtxInfo }	{ FCurveTo FLineTo FMoveTo RClosePath closepath curveto lineto moveto }
SetFlushClipProc		device/devprim.c	/^public PVoidProc SetFlushClipProc (p) PVoidProc p;/ ;" function 5 { }	{ FlushClipProc PVoidProc p }
SetFmDeviceMetrics		device/framedev.c	/^public procedure SetFmDeviceMetrics(/ ;" function 85 { FrameDevice PSMachPortDevice }	{ ConstCMYKPattern DepthToLog2BD DevColorData GrayPattern GryPat4Of4 MonochromePattern PatternHandle RGBPattern boolean integer }
SetFont		fonts/fontbuild.c	/^public procedure SetFont(fdict)  DictObj fdict;/ ;" function 6 { FillCircle InitGS PSSelectFont PSSetFont }	{ Equal MIDNULL fontDict gs }
SetGSCursor		product/mouse_driver.c	/^private procedure SetGSCursor(Cd userPt, Cd userSp/ ;" function 35 { PSSetCursor }	{ Bounds CURSORSIZE DUserToDevice DevCd LBoundsAt Layer Mtx NULL PSGetDevice PSGetMatrix PSRangeCheck UserToDevice Wd2Layer }
SetGStateExtProc		graphics/gstates.c	/^public procedure SetGStateExtProc(PVoidProc proc)/ ;" function 4 { InitPostScript }	{ gStateExtProc }
SetGray		graphics/colorops1.c	/^public procedure SetGray(gray) Preal gray;/ ;" function 7 { InitGraphics PSErasePage PSSetGray PSShowPage SetMaskDevice }	{ ChangeColor Color DEVGRAY_COLOR_SPACE SetDevColor }
SetGroups		product/listener.c	/^SetGroups(uid_t uid, gid_t gid)/ ;" function 32 { SetEffectiveUser }	{ GROUPCACHESIZE GroupCache GroupCacheItem cacheclock }
SetHalfWidth		graphics/stroke.c	/^private procedure SetHalfWidth()/ ;" function 40 { PreStroke }	{ AnamorphicNormStrkWdth CheckForAnamorphicMatrix CrMtx LengthTfm Mtx MtxInvert NormalizeStrokeWidth RealEq0 RealNe0 SetNormMidPts boolean curIMtx d dashed false fpTwo fpZero fpp001 gs needTfm os_fabs real true uhalfwidth }
SetHowPost		product/event.c	/^public procedure SetHowPost(int what, short how)/ ;" function 4 { PSSetHowPost }	{ postHow }
SetIntersection		graphics/cscan.c	/^#define SetIntersection(i, iy, icross, idir) \\/ ;" macro 1 { FillInColumn FillInInflection }	{ }
SetLeftFlag		graphics/cscan.c	/^private procedure SetLeftFlag(cross)/ ;" function 18 { SplicePixel }	{ CrossPtr DEBUGERROR NULL Pixel YCROSS true }
SetLineWidth		graphics/strokeops.c	/^public procedure SetLineWidth(pr)  Preal pr;/ ;" function 5 { PSSetLineWidth }	{ RealLt0 fpZero gs }
SetMIDAge		fonts/fontcache.h	/^#define SetMIDAge(mid) MA[mid] = CurrentMIDAge/ ;" macro 1 { CompSlowShow CompositeShow InsertMID }	{ CurrentMIDAge MA }
SetMTPE		fonts/fontspriv.h	/^#define SetMTPE(p, i, v) \\/ ;" macro 1 { CheckCompositeFont }	{ p }
SetMaskDevice		graphics/gstates.c	/^public procedure SetMaskDevice(device)/ ;" function 11 { SetupMaskDev }	{ LAryObj NIL NULL NewDevice PGState RemTfrRef SetGray fpZero gs real register true }
SetMouse		mousekeyboard/kbdroutines.c	/^void SetMouse(int x, int y)/ ;" function 8 { PSAdjustCursor PSAdjustMouse PSSetMouse }	{ Point p }
SetMtx		graphics/graphics.c	/^public procedure SetMtx(pmtx) PMtx pmtx;/ ;" function 6 { BuildChar FillCircle PSSetMtx PSUStroke PSUStrokePath UCGetDevPrim UStrkPthProc }	{ MIDNULL fpZero gs }
SetMtxProcs		fonts/fontmatrix.c	/^private procedure SetMtxProcs()/ ;" function 62 { SetupFntMtx }	{ adz_fixed_tfm adz_frac_tfm bcz_fixed_tfm bcz_frac_tfm d_adz_fixed_tfm d_adz_frac_tfm d_bcz_fixed_tfm d_bcz_frac_tfm d_gen_fixed_tfm d_gen_frac_tfm fntmtx gen_fixed_tfm gen_frac_tfm inv_adz_fixed_tfm inv_bcz_fixed_tfm inv_d_adz_fixed_tfm inv_d_bcz_fixed_tfm inv_d_gen_fixed_tfm inv_gen_fixed_tfm }
SetNormMidPts		graphics/stroke.c	/^private procedure SetNormMidPts() {/ ;" function 8 { NormalizeStrokeWidth SetHalfWidth }	{ false fpTwo integer oddXwidth oddYwidth r real true uhalfwidth }
SetObjFormat		language/binaryobject.c	/^public procedure SetObjFormat(f) integer f; {/ ;" function 5 { PSFork PSStObjFormat }	{ NIL PVoidProc WriteContextParam integer objectFormat }
SetPatInfo		devpattern/patternimpl.c	/^public PPatCacheInfo SetPatInfo(screen, data, colo/ ;" function 28 { Gry4Of4Setup MonoSetup SetupGrayPattern }	{ AllocPatternIndex Card8 PCachedHalftone PCard8 PPatCacheInfo PScreenPrivate data integer patID patterns register start }
SetPixelInDropOut		graphics/cscan.c	/^private boolean SetPixelInDropOut(x, iknown, iothe/ ;" function 34 { FillInColumn FillInInflection }	{ ExtendRunDropOut IntX MidPixel PIntersection Pixel SplicePixel false true }
SetPrebuiltPath		device/devinit.c	/^public procedure SetPrebuiltPath() {}/ ;" function 1 { }	{ }
SetPrinterContext		product/ipcscheduler.c	/^public procedure SetPrinterContext( PSSchedulerCon/ ;" function 4 { PSMachPortDevice mpdWakeup }	{ true }
SetRGBColor		graphics/colorops1.c	/^public procedure SetRGBColor(r, g, b) Preal r, g, / ;" function 12 { PSSetHSBColor PSSetRGBColor }	{ ChangeColor Color DEVRGB_COLOR_SPACE SetDevColor Undefined gs r }
SetRGBtoCMYKValues		devpattern/imsupport.c	/^public procedure SetRGBtoCMYKValues(cData, tfrFcn,/ ;" function 25 { }	{ NULL integer max real register }
SetRdcScal		graphics/graphics.c	/^public procedure SetRdcScal(maxval, minval) intege/ ;" function 15 { ConvertToListPath DoRdcPth InitOFill OffsetFill ReduceQuadPath SetScalFromBBoxes }	{ FixInt RDCBIAS frdcbias gs integer rdcbias register }
SetRealClockAddress		include/language.h	/^#define	SetRealClockAddress(clockAddress) {pTimeSl/ ;" macro 1 { InitPostScript PSSetRealClockAddress }	{ pTimeSliceClock }
SetRealPathProcs		fonts/fontbuild.c	/^private procedure SetRealPathProcs() {/ ;" function 4 { CCRunStd GetMtxInfo }	{ RClosePath RCurveTo RLineTo RMoveTo closepath curveto lineto moveto }
SetRemotePort		product/ipcscheduler.c	/^public procedure SetRemotePort(PSSchedulerContext / ;" function 4 { NSCreatePS NSCreateWB }	{ }
SetScal		graphics/graphics.c	/^public procedure SetScal()/ ;" function 14 { NewDevice }	{ DevLBounds FRDCBIAS MAX RDCBIAS frdcbias gs integer os_abs rdcbias }
SetScalFromBBoxes		graphics/pathreduce.c	/^private procedure SetScalFromBBoxes(bb1, bb2) BBox/ ;" function 10 { DoRdcPth ReduceQuadPath }	{ MAX MIN SetRdcScal integer }
SetShared		vm/vm_memory.c	/^public procedure SetShared (Shared)/ ;" function 11 { ABM_AllocateVM AllocPName AllocRAMArray AllocRAMStr AllocVMAligned ContextOpsInit CopyDelayedFont CopyTrickyDict CreatePrivateVM CreateSharedVM DetermineFormat EndWholeClothInit GC_CollectPrivate GC_CollectShared GC_MoveRecycleRange GetDMFDict GetDMFItem InitPostScript LoadVM MakeCompFont MakeFontSupp MakeScreenDict PSDefUserObj PSEExec PSFontRun PSMakeVM PSRun PSSetShared PSdummymakevm RgstOpSet RstrSetShared StartVM TraceSharedVM }	{ NOLL level vmCurrent vmPrivate vmShared }
SetStmDecryptionKey		language/stream.c	/^public procedure SetStmDecryptionKey(stm, key)/ ;" function 6 { OCFetchFromDisk }	{ CStmRndNum }
SetTimeLimit		language/exec.c	/^public procedure SetTimeLimit (limit)/ ;" function 9 { PSSetTimeLimit }	{ clockLimit unitClock }
SetTransfer		graphics/transferimpl.c	/^public procedure SetTransfer(/ ;" function 33 { PSSetBlkGeneration PSSetClrTransfer PSSetTransfer PSSetUCRemoval }	{ ActivateTfr ChangeColor GetTfr MAXCOLOR NULL RemTfrRef SetDevColor TfrFcn Undefined boolean gs real register }
SetTrapBounds		graphics/graphmark.c	/^public procedure SetTrapBounds(bbox)/ ;" function 10 { DoStroke FillCircle Reinitms }	{ Fixed MakeBounds ms pflttofix register true }
SetUpForRectClip		graphics/pathreduce.c	/^public procedure SetUpForRectClip(clnewpt, rdcclos/ ;" function 13 { ConvertToListPath DoRdcPth ReduceQuadPath }	{ fp8 rcbtfirst rcclipbt rccliplf rccliprt rccliptp rcclnewpt rclffirst rcrdcclose rcrtfirst rctpfirst true }
SetUpSource		mp/moverect.c	/^void SetUpSource(BitsOrPatInfo **psi, LineOperatio/ ;" function 55 { MRMoveRect }	{ BitsOrPatInfo CantHappen NULL PAABS SBMA SBMU SCON SPAT WCOPY WF4 data memoryOffsets moveLineDispatch mpAddr screenOffsets use_wf_hardware }
SetVMSegmentType		vm/vm_segment.c	/^public procedure SetVMSegmentType(type)/ ;" function 51 { AllocPName AllocPStream PSMakeVM RgstOpSet RgstPackageNames VMSetRAMAlloc VMSetROMAlloc }	{ DebugAssert ExpandVMSection NIL PCard8 PVMSegment ResetVMSection current free level register vVMSPLIT vmShared }
SetWindow		product/windowops.c	/^procedure SetWindow(int windowID, boolean realScal/ ;" function 7 { PSWindowDevice PSWindowDeviceRound }	{ ID2Wd NULL PSGetGStateExt PWindowDevice REALSCALE SetWindowDevice }
SetWindowDevice		product/windowops.c	/^procedure SetWindowDevice(PWindowDevice win)/ ;" function 6 { SetWindow }	{ PSInvalidID PSSetDevice false }
SetXABounds		graphics/graphics.c	/^public procedure SetXABounds(pBounds)/ ;" function 30 { GStackRestore InitClipPath }	{ CHUNKSIZE DevLong InitChunk maxXChunk maxYChunk os_labs xChunkOffset yChunkOffset }
SetXLock		fonts/fontbuild.c	/^internal procedure SetXLock(f1, f2, anchored, hw1,/ ;" function 12 { DoLock PSSetXLock RMLock RYLock }	{ FixedOne InsertLock LokPair lokSeqX pLokData }
SetYLock		fonts/fontbuild.c	/^internal procedure SetYLock(f1, f2, anchored, hw1,/ ;" function 12 { BlueLock DoLock PSSetYLock RVLock }	{ FixedOne InsertLock LokPair lokSeqY pLokData }
SetupBlueLocs		fonts/fontbuild.c	/^internal procedure SetupBlueLocs(/ ;" function 21 { AdjustBlues BuildChar CCRunStd }	{ FCd Fixed FntTfmP IntX boolean false register true }
SetupCacheDevice		fonts/fontbuild.c	/^private boolean SetupCacheDevice(fm) FMetrics *fm;/ ;" function 8 { CSEndChar }	{ MakeCacheDev MakeCacheDev2 PccCount hasCDevProc }
SetupDeepOnes		devpattern/patternimpl.c	/^public procedure SetupDeepOnes(bpp) integer bpp; {/ ;" function 151 { ConstCMYKPattern ConstGrayPattern ConstRGBPattern GrayPattern GryPat4Of4 IniDeepOnes RGBPattern }	{ GETMEM NULL SCANTYPE SCANUNIT deepOnes deepPixOneVals deepPixOnes integer swapPixOnes }
SetupFntMtx		fonts/fontmatrix.c	/^public boolean SetupFntMtx()/ ;" function 70 { CCRunStd GetMtxInfo }	{ BitField Len1000 MtxInvert RMtx SetMtxProcs d false fntmtx fpOne fr gs os_fabs pflttofix pflttofrac real true }
SetupForCircles		graphics/stroke.c	/^private procedure SetupForCircles() {/ ;" function 30 { DoStroke PreCacheTrapCircles }	{ CircleCache DisposeDevPrim NULL PGState RealNe0 circ_a circ_b circ_c circ_cannot circ_d circ_maskID circ_size circ_uhalfwidth d false fpHalf fpOne gs integer os_sqrt real register uhalfwidth xHiCirCenter xLowCirCenter yHiCirCenter yLowCirCenter }
SetupGrayPattern		devpattern/graypattern.c	/^public PPatCacheInfo SetupGrayPattern(/ ;" function 60 { ColorSetup GraySetup }	{ AllocInfoVector BuildGrayPattern CantHappen Card8 ConstantColor MakeConstValue NIL PCachedHalftone PCard8 PPatCacheInfo PScreenPrivate RAISE RollPattern SCANTYPE SetPatInfo ValidateTA data ecLimitCheck integer patTimeStamp patterns register start true }
SetupMaskDev		fonts/cachedev.c	/^private integer SetupMaskDev(ll, ur, saveScale) FC/ ;" function 34 { MakeCacheDev MakeCacheDev2 SetCch }	{ Assert CIAlloc FCeil MakeMaskDevArgs NULL PDevice SetMaskDevice ShowState ctxCacheThreshold ctxCompThreshold false gs integer register ss ssr }
SetupMonoPattern		devpattern/monopattern.c	/^private procedure SetupMonoPattern(/ ;" function 100 { MonoSetup }	{ AllocPatternStorage CantHappen Card8 GCD LASTSCANVAL LSHIFT MAXCOLOR SCANTYPE SCANUNIT boolean data deepPixOneVals false integer maxPatternSize register start true }
SetupNumStrm		language/numstrm.c	/^public procedure SetupNumStrm(pob, ns) PObject pob/ ;" function 106 { BuildMultiRectPath CheckIfEncodedUserPath FastRectFill MultiRectFill XYShow }	{ AObjF AObjR HF2F HF2R HF4F HF4R HIRF HIRR HNRF HNRR InvlAccess LF2F LF2R LF4F LF4R LIRF LIRR LNRF LNRR PkAObjF PkAObjR TypeCheck arrayObj boolean character false integer pkdaryObj r rAccess s strObj string true }
SetupPattern		include/devpattern.h	/^#define SetupPattern(h, info, data) (*(h)->setupPa/ ;" macro 1 { FmSetupMark LBMSetupMark MP12SetupPat MaskSetupMark }	{ data }
SetupStdWs		fonts/fontbuild.c	/^private IntX SetupStdWs(/ ;" function 31 { GetStandardWidths }	{ Fixed FixedHalf FixedOne GetStdW IntX PutStdW }
ShipLeftAnchoredTrap		graphics/reducer.c	/^private procedure ShipLeftAnchoredTrap/ ;" function 9 { RdcBend }	{ Fixed FixedXatY ShipTrapezoid }
ShipRightAnchoredTrap		graphics/reducer.c	/^private procedure ShipRightAnchoredTrap/ ;" function 9 { RdcBend }	{ Fixed FixedXatY ShipTrapezoid }
ShipTrapezoid		graphics/reducer.c	/^private procedure ShipTrapezoid(callBack, region, / ;" function 50 { Interchange RdcEntry RdcExit ShipLeftAnchoredTrap ShipRightAnchoredTrap }	{ MAX MIN PLn PPt PRegion PRg debugOn eoRule false fclpxmax fclpxmin fixtodbl interiorClipMode os_printf outxl outxr outyt putchar trapShipped true }
ShortenLine		graphics/reducer.c	/^private procedure ShortenLine(line, x, y)  LnOffse/ ;" function 12 { Interchange RdcExit }	{ MakePoint PLine PLn PPoint PPt PtOffset RatComp }
ShowByName		fonts/fontshow.c	/^public boolean ShowByName(c, pcn, fno, CFmp)/ ;" function 314 { CompSlowShow SimpleShowByName SlowShow }	{ AlreadyValidMID Assert BuildChar CI CIFree CINULL CIOffset CN Cd CharMetrics CheckCI CleanShowState DTfmPCd DebugAssert DelayedMakeFont DevCd DevFlushMask DevFlushMaskArgs FIXCD FIXINT FIXTOPFLT FROUND Fixed GetShowFlushArgs LOWERSHOWBOUND MID MIDCount MaxCharSortInterval Mtx NIL NULL OkFixed PCIItem PMTItem PMask PNameEntry PShowState PccCount PreBuiltChar RRoundP SafeShowMask SetCharAge ShowMask SortCharAges UNFIXCD UPPERSHOWBOUND ValidMID VecAdd Vmem boolean charSortInterval crMID curMT false fdcp fixmul fpZero gs integer nameObj (etc) }
ShowInternal		fonts/fontshow.c	/^private procedure ShowInternal()/ ;" function 57 { PSAShow PSAWidthShow PSCShow PSKShow PSShow PSStrWidth PSWidthShow SimpleShow XYShow }	{ CheckForCurrentPoint DecrSetMIDAge FMap17 FMap88 FMap97 FMapEscape FMapGen FMapNone InvalidateCachedMIDs InvlAccess NIL PCard8 PGState PSRangeCheck PShowState ScanCompString UniqueMID ValidMID crMID curMT fontDict gs integer p rAccess rdcp register ss ssr }
ShowMask		graphics/graphmark.c	/^public procedure ShowMask(mask, dc)/ ;" function 83 { SafeShowMask ShowByName }	{ BBCompare BBoxCompareResult BBoxRec BoundsCompare DevBBCompare DevBBoxRec DevCd DevClipIsRect DevMarkInfo DevMask DevPrim DevPrivate FixInt GetDevClipDevBBox GetDevClipPrim InitDevPrim LinkDP MakeBounds Mark MarkDevPrim NULL PGState PathIsRect UnlinkDP gs register xaOffset }
ShowState		fonts/fontshow.h	/^typedef struct _ShowState {/ ;" typedef 46 { CSRun CompSlowShow CompositeShow DMFRestore DelayedMakeFont ENDSHOW FSetCharWidth FontShowInit FreeShowState MakeCacheDev MakeCacheDev2 NewShowState NoRoom PSSetCharWidth ROkToBuild SSRestoreState ScanCompString SetCch SetCharWidth SetupMaskDev }	{ }
ShrinkBM		device/maskcache.c	/^private procedure ShrinkBM(size)/ ;" function 33 { DevSetMaskCacheSize }	{ Assert BMHeader BMUsedTag CompactBM Data EXPAND PBMHeader PBMItem PSFlushMasks bmBase bmBytes bmFree bmScratch data free header integer mskBase register }
SimpleCounter		fonts/glbclr.c	/^private boolean SimpleCounter(ss, ns, cntr)/ ;" function 56 { CullCounters }	{ Assert Even FTrunc MAX MIN NINTERVAL Odd PGlbClr false register ss }
SimpleMarkProcsRec		mp/devmark.h	/^typedef struct {/ ;" typedef 5 { }	{ }
SimpleMatch		stodev/simplematch.c	/^public boolean SimpleMatch(name, pattern)/ ;" function 26 { FontEnumOneDir SimpleMatch UDEnumerate }	{ SimpleMatch false register true }
SimpleShow		fonts/fontshow.c	/^public procedure SimpleShow(so)/ ;" function 8 { FillCircle PSCharPath }	{ BEGINSHOW ENDSHOW ShowInternal ssr }
SimpleShowByName		fonts/fontshow.c	/^public procedure SimpleShowByName(c, pcn)/ ;" function 25 { CCRun }	{ BEGINSHOW CheckForCurrentPoint CvtToXFixed DecrSetMIDAge ENDSHOW FIXTOPFLT LOWERSHOWBOUND MoveToAfterShow NIL NOLL NULL RAISE ShowByName TrimShowStates UPPERSHOWBOUND ValidMID crMID fdcp gs rdcp ss ssr true useReal }
SizeNumStrmForCache		language/numstrm.c	/^public integer SizeNumStrmForCache(ns) PNumStrm ns/ ;" function 14 { EnterPathInCache }	{ CantHappen Card32 arrayObj integer pkdaryObj strObj }
SizeSElem		fonts/compshow.c	/^#define SizeSElem 11/ ;" macro 1 { }	{ }
SizeWElem		fonts/compshow.c	/^#define SizeWElem 4/ ;" macro 1 { }	{ }
SlopeNumber		graphics/cscan.c	/^typedef enum {/ ;" typedef 9 { }	{ }
SlopesArray		graphics/cscan.c	/^private Fixed SlopesArray[MAXSLOPENUMBER];/ ;" global 1 { BuildInitialRuns ResetCScan }	{ }
SlopesArrayInit		graphics/cscan.c	/^private readonly Fixed SlopesArrayInit[MAXSLOPENUM/ ;" global 8 { ResetCScan }	{ }
SlowShow		fonts/fontshow.c	/^private procedure SlowShow()/ ;" function 40 { }	{ Assert Cd IDTfmP MoveTo MoveToAfterShow NIL NOLL NULL PCard8 PShowState PushInteger PushPCd RAISE SSSOutCall ShowByName TrimShowStates gs integer rdcp register ss ssr true useReal }
SmallArc		graphics/pathbuild.c	/^private procedure SmallArc(pa, m, curveTo, ccwise,/ ;" function 17 { ArcInternal }	{ Cd RAD TfmPCd fp1p3333333 fpOne fpTwo real }
SortCharAges		fonts/cicache.c	/^public procedure SortCharAges ()/ ;" function 60 { PSFlushMasks PreBuiltChar ShowByName TrimCI }	{ CI CINULL CIOffset CISortedEnd CISortedList CheckBM CheckCI ClearMark CondAssignF IsMarked IsNonNull IsNull NextAge PCIItem PrevAge charSortInterval register }
SortCounters		fonts/glbclr.c	/^private void SortCounters(stems, cs, nc)/ ;" function 15 { GlobalColoring }	{ NULL PGlbCntr register }
SortEdges		graphics/qreducer.c	/^private Edge SortEdges(edge) Edge edge;/ ;" function 29 { QReduce }	{ Edge NIL register true }
SortGQ		graphics/graypriv.c	/^private procedure SortGQ (gqbase, curgq) PGrayQ gq/ ;" function 60 { CalcThresholds }	{ GrayGreaterThan GrayQ PGrayQ boolean cardinal exch p r true }
SortGroupsByFrac		fonts/glbclr.c	/^private void SortGroupsByFrac(cs, nc)/ ;" function 24 { FixOnePath }	{ CounterGt PGlbCntr }
SortMIDAges		fonts/midcache.c	/^private procedure SortMIDAges ()/ ;" function 39 { MSEldest }	{ Assert CurrentMIDAge IndMArray IndSArray IsSortedMID LastCurMID MA MMEldestPtr MSEldestPtr MT MTSize PCard16 PCard32 PMTItem PeterPan QuickSort integer register true }
SortStems		fonts/glbclr.c	/^private int SortStems(stems, ss) PGlbClr stems, *s/ ;" function 20 { GlobalColoring }	{ NULL PGlbClr SelectionSort register ss }
Sover		mp/soverrect.c	/^#define Sover(s,a,dp) do { uint d;			\\/ ;" macro 1 { SoverRect }	{ DoSover d s uint }
SoverMask		mp/soverrect.c	/^#define SoverMask(s,a,dp,mask) do { uint d;		 \\/ ;" macro 1 { SoverRect }	{ DoSover d s uint }
SoverRect		mp/soverrect.c	/^void SoverRect(LineOperation *alop, LineOperation / ;" function 78 { MRMoveRect }	{ Sover SoverMask data memoryOffsets mpAddr s screenOffsets uchar uint use_wf_hardware }
SpaceExclusionSemaphore		postscript/contextimpl.c	/^private procedure SpaceExclusionSemaphore (count)/ ;" function 24 { ContextOpsInit }	{ Assert NIL currentPSContext }
SpaceID		include/postscript.h	/^typedef GenericID SpaceID;/ ;" typedef 1 { }	{ }
SplicePixel		graphics/cscan.c	/^private procedure SplicePixel(x, y, cross, dir)/ ;" function 118 { SetPixelInDropOut }	{ AddYCross CrossPtr DEBUGERROR ExchangeCrossPtr ExpandCharBBox FinishSplice FixCrossFlags Fixed MidPixel NULL NewCross NewXtraCross PathCross Pixel SPLICEDELTA SetLeftFlag StartSplice ValidateCrossPtr YCROSS boolean checkRuns false printf true }
SpotFunction		include/graphics.h	/^typedef struct _t_SpotFunction {/ ;" typedef 4 { GetType1Screen GetType2Screen PSSetColorScreen PSSetScreen }	{ }
Stack		include/language.h	/^typedef struct _t_Stack {/ ;" typedef 6 { NewStack }	{ }
StackChecker		vm/saverestore.c	/^private boolean (*StackChecker)();/ ;" global 1 { RgstStackChecker RstrToLevel }	{ }
StackGrowInc		vm/gcmisc.c	/^#define	StackGrowInc	50/ ;" macro 1 { GCInternal_GrowStack }	{ }
StackInit		language/stack.c	/^public procedure StackInit(reason)/ ;" function 18 { LanguageInit }	{ CheckAllStacks DEVELOP PSSetStackLimit PSStackStats RgstExplicit RgstStackChecker endswitch vSTAGE }
StackPopDiscard		language/stack.c	/^public procedure StackPopDiscard(stack)/ ;" function 8 { PSPop }	{ RecyclerPop Underflow }
StackPopP		language/stack.c	/^StackPopP(pob, stack)/ ;" function 6 { EPopP PSClrToMrk PopP }	{ IPop }
StackPushP		language/stack.c	/^public procedure StackPushP(pob, stack)/ ;" function 6 { ArrayToStack EPushP PushP }	{ IPush }
StackTopP		language/stack.c	/^public procedure StackTopP(pob, stack)/ ;" function 7 { DTopP ETopP TopP }	{ Underflow }
StartCache		fonts/fontdisk.c	/^public procedure StartCache()/ ;" function 17 { FontDiskInit RstrFC }	{ CIItem Card16 Card32 InitFontCache MAX MTItem PNameEntry SIZE_FONT_CACHE SIZE_MASKS SIZE_MIDS integer ps_getsize }
StartGlcrLock		fonts/fontbuild.c	/^internal procedure StartGlcrLock() {/ ;" function 4 { BuildChar }	{ PGlbClr false glbClrLst register }
StartLock		fonts/fontbuild.c	/^public procedure StartLock() {/ ;" function 20 { CCRunStd }	{ LokData NEW NIL PGlbClr PLokData false glbClrLst glcrOn glcrPrepass pLokData register stdLokData true }
StartSplice		graphics/cscan.c	/^private procedure StartSplice(startc)/ ;" function 37 { SplicePixel }	{ CrossPtr IntX NEWCROSS NewLinkCross Pixel YCROSS crossCount spliceInsert startSplice true }
StartVM		vm/vm_startfile.c	/^public boolean StartVM(file)/ ;" function 35 { BuildInitialState }	{ ApplyRelocation BuildSegmentTable FreeSegmentTable NIL PCard8 ReadRelocationTable ReadVM SetShared Switches VMSetRAMAlloc boolean false fread os_fprintf os_stderr switches true vmShared }
State		language/grammar.h	/^typedef unsigned char Class, State, Action;/ ;" global 1 { }	{ }
StateInit		postscript/postscript.c	/^public procedure StateInit (reason)/ ;" function 47 { PostScriptInit }	{ Begin Def End GetCArg Known MakePName MakeStr NULL NUM_PACKAGE_NAMES NameObj PACKAGE_INDEX PSAbort RgstExplicit RgstObject RgstPackageNames StrObj endswitch exitCode exitNormal integer os_fprintf os_stderr postscriptNames rAccess rootShared s string trickyErrorDict trickyFontDirectory trickyStatusDict trickyUserDict vmShared }
StateRec		language/grammar.h	/^typedef struct {/ ;" typedef 4 { }	{ }
StaticData		vm/staticdata.c	/^typedef struct _StaticData {/ ;" typedef 6 { Init_StaticData }	{ }
StaticEvent		include/orphans.h	/^typedef enum {/ ;" typedef 7 { }	{ }
StdInitMark		graphics/graphmark.c	/^public procedure StdInitMark(m, clip)/ ;" function 7 { DoRdcStroke FastRectFill FloatRectFill MarkInit MultiRectFill }	{ EmptyDevBounds false }
StdTermMark		graphics/graphmark.c	/^public procedure StdTermMark(m) register PMarkStat/ ;" function 4 { DoRdcStroke FastRectFill FloatRectFill MarkInit MultiRectFill }	{ }
StdTrapsFilled		graphics/graphmark.c	/^private procedure StdTrapsFilled(m) register PMark/ ;" function 6 { MarkInit }	{ ClipForMark EmptyDevBounds MarkDevPrim }
StillDown		mousekeyboard/kbdroutines.c	/^int StillDown(int eNum)/ ;" function 5 { PSStillDown }	{ }
Stm		include/stream.h	/^typedef struct _t_StmRec *Stm;/ ;" typedef 1 { BMRun Bang CCRunStd CloseFile CloseStmForSB ComStmClose ComStmFAvail ComStmFRead ComStmFSeek ComStmFTell ComStmFilBuf ComStmFlush ComStmUnGetc CreateFileStm CreateFileStream CreateFilterStm DPrintSOP DetermineFormat DumpDefault DumpDict DumpRoot GetStreamSource InitPostScript KACharDef KAEndCSDict KARdSubrsData LineEdit OCFetchFromDisk PSFilPos PSFork PSInitWrite PSStFilPos PSToken PSWrObject PSWriteData PrAryBody PrNameAryBody PrPkdaryBody PrStmBody PrintAccess PrintBlanks PrintBoolean PrintDOB PrintDevCoord PrintKeyVal PrintMTX PrintMidDict PrintNameEntry PrintObj PrintSOP PrintVal StoDevCreateStm WriteObject pCIs pEldest pFD pMID pMM pMS pSFC (etc) }	{ }
StmBody		include/vm.h	/^typedef struct _t_StmBody {/ ;" typedef 10 { AllocPStream BMRun TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
StmCreate		stream/streamimpl.c	/^public Stm StmCreate(procs, xtraBytes)/ ;" function 10 { CreateFilterStm CreateIPCStreams LineEdit MakeDecryptionStm PSNewContextStms StrStmCreate os_fdopen os_fopen }	{ InsertLink NULL StmElem integer os_sureCalloc stmList }
StmCtxCreate		language/stream.c	/^public procedure StmCtxCreate()/ ;" function 5 { LanguageDataHandler }	{ Lobj MakePStm os_stdin os_stdout stdinStm stdoutStm }
StmCtxDestroy		language/stream.c	/^public procedure StmCtxDestroy()/ ;" function 13 { PSCoProc }	{ CloseFile StmProcs closedStmProcs stdinStm stdoutStm true }
StmDestroy		stream/streamimpl.c	/^public procedure StmDestroy(stm)/ ;" function 11 { CStmClose ComStmClose CreateIPCStreams LineFClose MFClose SSClose UFClose os_fdopen }	{ Links RemoveLink StmElem StmRec closedStmProcs integer }
StmElem		stream/streamimpl.c	/^typedef struct {Links links; StmRec stmRec;} StmEl/ ;" typedef 1 { StmCreate StmDestroy os_cleanup }	{ }
StmErr		stream/streamimpl.c	/^public int StmErr() {return EOF;}/ ;" function 1 { WriteObject }	{ EOF }
StmErrLong		stream/streamimpl.c	/^public long int StmErrLong() {return EOF;}/ ;" function 1 { WriteObject }	{ EOF }
StmFRead		stream/streamimpl.c	/^public long int StmFRead(ptr, itemSize, nItems, st/ ;" function 24 { }	{ register }
StmFWrite		stream/streamimpl.c	/^public long int StmFWrite(ptr, itemSize, nItems, s/ ;" function 22 { WriteObject }	{ register }
StmFinalize		language/stream.c	/^private procedure StmFinalize(obj, reason)/ ;" function 14 { StreamInit }	{ CantHappen CloseStmForSB NIL PStmBody register rootPrivate rootShared }
StmInit		stream/streamimpl.c	/^public procedure StmInit()/ ;" function 5 { Mnextmain }	{ InitLink NULL os_stderr os_stdin os_stdout stmList }
StmObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 38 { Bang CStmClose CStmSource ComStmClose ComStmSource CreateFilterStm FCOpenStream IsCrFile LineEdit PSBytesAvailable PSCloseFile PSCrFile PSFilPos PSFile PSFlsFile PSInitWrite PSPopStream PSRead PSReadHexString PSReadLine PSReadString PSResFile PSRun PSStFilPos PSUClRead PSWrite PSWriteData PSWrtHexString PSWrtString WriteObject }	{ }
StmProcs		include/stream.h	/^typedef struct _t_StmProcs {	\/* Procedure record f/ ;" typedef 18 { MakeDecryptionStm PSNewContextStms StmCtxDestroy WriteObject os_fdopen os_fopen os_sscanf }	{ }
StmRec		include/stream.h	/^typedef struct _t_StmRec {	\/* Generic stream insta/ ;" typedef 19 { BMRun ComStmSource StmDestroy StrToken StreamInit WriteObject os_sprintf os_sscanf }	{ }
StmToken		language/scanner.c	/^public boolean StmToken(stm, pobj, exec)/ ;" function 652 { PSFontRun PSToken StrToken }	{ AllocPString AryToMrk CR CantHappen Card32 Code DURING DebugAssert END_HANDLER EOF EOL ExtendRecycler ExtendStrStorage FF FastName GETC HANDLER IEEEHighToNative IEEELowToNative IPush Int32 IsValidReal LBoolObj LF LIntObj LMarkObj LNameObj LRealObj LStrObj LimitCheck LoadName Lobj MAXCard32 MAXnameLength MAXstringLength NEWSTATE NIL NewState ObjFromStrStorage PCard8 PNameArrayBody PNameEntry PSClrToMrk PSError PS_ERROR PStateRec PopP PushP RAISE ReadBinObjSeq ReadNumAry ReclaimRecyclableVM SETUPSTM StrStorage UNGETC UPDATESTM UndefNameIndex XNameObj _appeol _appesc (etc) }
StmUnGetc		stream/streamimpl.c	/^public int StmUnGetc(ch, stm)/ ;" function 14 { WriteObject }	{ EOF }
StmZero		language/binaryobject.c	/^private int StmZero() { return(0); }/ ;" function 1 { WriteObject }	{ }
StmZeroLong		stream/streamimpl.c	/^public long int StmZeroLong() {return 0;}/ ;" function 1 { }	{ }
StoDev		include/stodev.h	/^typedef struct _t_StoDev {	\/* Storage Device insta/ ;" typedef 18 { RgstEditorDev RgstFontDevice UnixStoDevInit }	{ }
StoDevAttributes		include/stodev.h	/^typedef struct _t_StoDevAttributes {\/* Result reco/ ;" typedef 5 { PSDevStatus }	{ }
StoDevCreateStm		language/stodevsupport.c	/^public Stm StoDevCreateStm(name, acc)/ ;" function 23 { CreateFileStm }	{ FndStoDev NIL PStoDev Stm StoDevGetNext boolean register }
StoDevEditInit		language/stodevedit.c	/^public procedure StoDevEditInit(reason)/ ;" function 15 { }	{ PSEcho PStoDev RgstEditorDev RgstExplicit false true }
StoDevFileAttributes		include/stodev.h	/^typedef struct _t_StoDevFileAttributes {\/* Result / ;" typedef 10 { StoDevStrStatus }	{ }
StoDevGetNext		stodev/stodevimpl.c	/^public PStoDev StoDevGetNext(dev)/ ;" function 5 { PSDevForAll PSFileNameForAll StoDevCreateStm }	{ NIL stoDevList }
StoDevInit		stodev/stodevimpl.c	/^public procedure StoDevInit()/ ;" function 4 { Mnextmain }	{ NIL stoDevList }
StoDevProcs		include/stodev.h	/^typedef struct _t_StoDevProcs { \/* Storage Device / ;" typedef 124 { }	{ }
StoDevStrStatus		language/stodevsupport.c	/^public procedure StoDevStrStatus(ob)/ ;" function 30 { PSStatus }	{ DURING END_HANDLER FndStoFile HANDLER InvlAccess LimitCheck MAXNAMELENGTH NIL PStoDev PushBoolean PushInteger StoDevFileAttributes StringText false integer rAccess string true }
StoDevSupportInit		language/stodevsupport.c	/^public procedure StoDevSupportInit(reason)/ ;" function 4 { }	{ }
StrExtension		language/scanner.c	/^typedef struct _StrExtension {/ ;" typedef 4 { ExtendStrStorage }	{ }
StrForAll		language/string.c	/^public procedure StrForAll(strOb, procOb)  StrObj / ;" function 7 { PSForAll }	{ EPushP InvlAccess rAccess strcmd }
StrIntoStr		language/string.c	/^private procedure StrIntoStr(from, into)  StrObj f/ ;" function 5 { PSCVS }	{ PutString }
StrLen		include/publictypes.h	/^#define StrLen(s)\\/ ;" macro 1 { FFAAction MakePName MakeStaticPName PSCVS PSDevForAll PSUClRead TextIntoString VMObjForPString VMPutText makestring }	{ s }
StrObj		include/basictypes.h	/^typedef struct _t_Object {/ ;" typedef 37 { AddStringEntry CVT CheckCompositeFont ChrMapBuildChar FFAAction FillCircle GetProcSource GetStringSource InternalBuildChar InvalidateCachedMIDs KAEndCSDict MakeCompFont MakeScreenDict PSAnchorSearch PSCVN PSCVRS PSCVS PSCacheFlush PSCacheInit PSCacheStatistics PSCharPath PSChdir PSDevForAll PSDumpNames PSFile PSFontRun PSInitWrite PSMakeVM PSMkTemp PSPopString PSPrint PSPushString PSRdBytes PSReadHexString PSReadLine PSReadString PSRun PSSearch PSString PSToken PSUClRead PSUndef PSWriteData PSWrtHexString PSWrtString PSeCCRun PopFlName PrintNameString PutString PutThresholdEntries SFAProc SetFont StateInit makestring pCIs pMID }	{ }
StrStmCreate		language/stream.c	/^private Stm StrStmCreate(str)/ ;" function 11 { PSEExec }	{ NIL Stm StmCreate integer strStmProcs }
StrStorage		language/scanner.c	/^typedef struct {/ ;" typedef 15 { StmToken }	{ }
StrToName		language/name.c	/^public procedure StrToName(so, pno)  StrObj so;  P/ ;" function 6 { KeyName PSCVN PSDefineFont PSSelectFont PSUnDefineFont }	{ FastName InvlAccess rAccess }
StrToken		language/scanner.c	/^public boolean StrToken (ob, rem, ret, exec)/ ;" function 17 { PSCvI PSCvR PSToken }	{ Int32 StmRec StmToken boolean strStmProcs }
StreamError		language/stream.c	/^public procedure StreamError(stm)/ ;" function 6 { CloseFile LineEdit PSFilPos PSFls PSFlsFile PSRead PSReadHexString PSReadLine PSReadString PSStFilPos PSToken PSWrite PSWrtHexString PSWrtString WriteObject }	{ PSError closedStm ioerror os_clearerr }
StreamInit		language/stream.c	/^public procedure StreamInit(reason)  InitReason re/ ;" function 37 { LanguageInit }	{ Assert DEVELOP EnumerateStmBody GC_RgstStmEnumerator InitHexToBin KEYHASH LIntObj NumCArg Object PSStSKey RgstExplicit Stm StmFinalize StmRec VMGetElem VMPutElem VMRgstFinalize cardinal closedStm endswitch frset_reclaim hexToBinary intObj integer invlStmProcs os_sureCalloc os_sureMalloc rootShared rpStreamKey stmObj true vSTAGE }
StringCompare		language/string.c	/^public integer StringCompare(a,b)/ ;" function 13 { LGt PSCacheFlush PSCacheInit PSCacheStatistics StringMatch }	{ MIN charptr integer register }
StringInit		language/string.c	/^public procedure StringInit(reason)  InitReason re/ ;" function 10 { LanguageInit }	{ RgstMark SFAProc endswitch integer mrk2Args strcmd }
StringMark		graphics/graphmark.c	/^public procedure StringMark(scip, len, llx, lly, u/ ;" function 22 { CompositeShow FastShow FasterShow }	{ BBoxCompareResult DevBBCompare DevBBoxRec DevClipIsRect DevPrim GetDevClipDevBBox GetDevClipPrim MakeBounds MarkDevPrim NULL llx lly scip string urx ury xaOffset }
StringMatch		language/type.c	/^#define StringMatch(a,b) ((a.length==b.length)?(bo/ ;" macro 1 { Equal }	{ StringCompare boolean false }
StringText		include/vm.h	/^#define StringText(s,t)\\/ ;" macro 1 { CreateFileStream PSFile PopFlName StoDevStrStatus }	{ VMGetText s }
StrkCap		graphics/stroke.c	/^private procedure StrkCap()/ ;" function 64 { DoStroke }	{ Cd DTransIfNeed Dist FillCircle FillQuad HalfRoundCap ITransIfNeed RealEq0 VecAdd VecMul VecSub buttCap dLf dLfSt dP1 dP1St dRt dRtSt dashed ffldDsh filledDash fpHalf gs needVec normalize real roundCap tenonCap uP1 uP1St uV1 uV2St uhalfwidth }
StrkClose		graphics/stroke.c	/^private procedure StrkClose()/ ;" function 6 { DoStroke }	{ FillCircle FillJoin StrkLnTo dLfSt dP1St dRtSt dashed filledDash gs needVec roundCap uP1St uV2St }
StrkCurve		graphics/stroke.c	/^private procedure StrkCurve(start)  boolean start;/ ;" function 3 { DoStroke }	{ atcurve flatEps fpTwo gs incurve mitposs start true }
StrkInternal		graphics/strokeops.c	/^public procedure StrkInternal(p, isSP) PPath p; bo/ ;" function 20 { StrkPth Stroke }	{ Cd ConvertToListPath DevClipIsRect DoPath DoStroke FinStroke GetDevClipBBox ListPath NULL PPthElt PathType boolean false ms p pathlineto register true }
StrkLnTo		graphics/stroke.c	/^private procedure StrkLnTo(dP2)  Cd dP2;/ ;" function 47 { DoStroke StrkClose }	{ AdjstHW Cd Dist FillJoin FillLineSegment FillQuad ITransIfNeed NormalizePoint RealEq0 RealGt0 TransIfNeed VecAdd VecMul VecSub atcurve dLf dLfSt dP1 dRt dRtSt dashed doingVectors false filledDash fpOne incurve mitposs needVec normalize os_fabs r real uP1 uV1 uV2St }
StrkPath		include/graphics.h	/^typedef struct _t_StrkPath {/ ;" typedef 17 { AddPathRef ConvertToListPath DoStrkPth PathBuildInit RemPathRef TracePath }	{ }
StrkPth		graphics/stroke.c	/^public Path StrkPth(p) PPath p;/ ;" function 11 { ConvertToListPath Stroke }	{ DURING END_HANDLER FrPth HANDLER InitPath RERAISE StrkInternal p secret strokePath true }
StrkPthCtx		graphics/userpath.c	/^typedef struct {/ ;" typedef 5 { PSUStrokePath }	{ }
StrkPthProc		graphics/strokeops.c	/^public DevPri** StrkPthProc(path) PPath path; {/ ;" function 5 { InStroke PSStrkPth UStrkPthProc XAStrkPthProc }	{ DevCd DevPrim DoPath DoRdcStroke NULL false true }
StrkRec		graphics/ucache.c	/^typedef struct { \/* all the stuff from GState that/ ;" typedef 18 { IniUCache RdcSize }	{ }
StrkStrt		graphics/stroke.c	/^private procedure StrkStrt(dP) Cd dP;/ ;" function 7 { DoStroke }	{ ITransIfNeed atcurve crDash crDshLen dP1 dP1St dashed fDshLen false fcrDash ffldDsh filledDash needVec true uP1 uP1St }
StrkTrp		graphics/stroke.c	/^public procedure (*StrkTrp)();/ ;" global 1 { CheckForRectangle DoRdcPth DoStroke FastFillBevel FastFillQuad FillQuad QuadTrap ReduceQuadPath }	{ }
Stroke		graphics/pathops.c	/^public procedure Stroke(p) PPath p;/ ;" function 24 { CCRunStd PSRectStroke PSStroke PathEndChar }	{ AppendPath BreakUpPath DURING END_HANDLER FrPth HANDLER Path RERAISE StrkInternal StrkPth chrPth chrPthStrk false gs p strokeOp true }
StrokeSemaphore		graphics/stroke.c	/^private PVoidProc StrokeSemaphore;/ ;" global 1 { FillCircle RgstStrokeSemaphoreProc }	{ }
StrokeUserPathEnumerate		graphics/userpath.c	/^public procedure StrokeUserPathEnumerate(context, / ;" function 20 { PSUStroke UCGetDevPrim UXAStroke XADoRdcStroke }	{ DoEUserPath DoUserPath PreEnumerateSetup start }
Sub4		graphics/reducer.c	/^private procedure Sub4(a, b, diff)  FourPlace *a, / ;" function 19 { Div3By2 Intersect }	{ AddUn4 FourPlace SubUn4 Un4Comp }
SubList		include/bintree.h	/^typedef struct _sublist {/ ;" typedef 4 { LFill LFind LMoveTo PSCountScreenList PSOrderWindow PSScreenList PSSetWindowLevel WLAboveButNotAbove WLBelowButNotBelow }	{ }
SubPArray		language/array.c	/^public procedure SubPArray(a, beg, len, pao)/ ;" function 5 { PSGetInterval }	{ AHead ATail }
SubPString		language/string.c	/^public procedure SubPString(s, beg, len, pstrob)/ ;" function 7 { ChrMapBuildChar PSGetInterval }	{ RangeCheck SHead STail s }
SubUn4		graphics/reducer.c	/^private procedure SubUn4(a, b, diff)  FourPlace *a/ ;" function 15 { Add4 Sub4 }	{ Card16 Int32 register }
SubrFrame		fonts/fontbuild.c	/^typedef struct{/ ;" typedef 4 { BuildChar CCRunStd }	{ }
SubtractPtr		graphics/cscan.c	/^#define SubtractPtr(larger, smaller)  ((larger) - / ;" macro 1 { BuildYCross GrowRunBuff ReturnBits }	{ }
Swap		fonts/midcache.c	/^#define Swap(A,B) {Temp = A; A = B; B = Temp;}/ ;" macro 1 { QuickSort }	{ }
Swap2		product/event.c	/^private procedure Swap2(char *from, char *to)/ ;" function 5 { WriteEvent }	{ }
Swap4		product/event.c	/^private procedure Swap4(int *from, int *to)/ ;" function 4 { WriteEvent }	{ CopySwap4 }
SwapMoveLow		bitmap/bm34comp.c	/^\/\/#define SwapMoveLow(output, sw_input) asm("swap / ;" function 1 { }	{ }
SwitchListDefaultValue		postscript/postscript.c	/^#define SwitchListDefaultValue -1	\/* Ought to go t/ ;" macro 1 { }	{ }
SwitchPSContext		postscript/contextimpl.c	/^public boolean SwitchPSContext(context)/ ;" function 16 { CreatePSContext NSCreatePS NSLoadPS PSFork }	{ Assert ExclusivePSContext LoadData NIL PSContext UnloadContext currentPSContext false os_stdin os_stdout staticData true vmPrivate }
Switches		include/environment.h	/^typedef struct {/ ;" typedef 10 { StartVM WriteRelocatedVMToFile WriteVMToFile }	{ }
SyntaxError		language/binaryobject.c	/^private procedure SyntaxError(problem)/ ;" function 6 { ReadBinObjSeq ReadNumAry }	{ PS_ERROR RAISE psERROR syntaxerror }
SysDictGetP		include/vm.h	/^#define SysDictGetP(k,v)\\/ ;" macro 1 { CCBuild GetFontDirectory }	{ DictGetP rootShared }
SysHideCursor		mousekeyboard/common.c	/^void SysHideCursor()/ ;" function 5 { CheckShield SysObscureCursor }	{ RemoveCursor evp }
SysObscureCursor		mousekeyboard/common.c	/^void SysObscureCursor()/ ;" function 7 { }	{ SysHideCursor evp }
SysRevealCursor		mousekeyboard/common.c	/^void SysRevealCursor()/ ;" function 7 { }	{ SysShowCursor evp }
SysRoot		include/disk.h	/^typedef struct _t_SysRoot {	\/* data page 0 of syst/ ;" typedef 16 { }	{ }
SysShowCursor		mousekeyboard/common.c	/^void SysShowCursor()/ ;" function 9 { CheckShield SysRevealCursor }	{ DisplayCursor evp }
SysSyncCursor		mousekeyboard/common.c	/^void SysSyncCursor(int sync)/ ;" function 9 { }	{ NXDevice deviceList }
T1		fonts/fontbuild.c	/^#define T1 0x2000L/ ;" macro 1 { CONVERT32TO8 CalcHW2 }	{ }
T2		fonts/fontbuild.c	/^#define T2 0x5000L/ ;" macro 1 { CONVERT32TO8 CalcHW2 }	{ }
T3		fonts/fontbuild.c	/^#define T3 0xE000L/ ;" macro 1 { CalcHW2 }	{ }
TAB		language/grammar.h	/^#define TAB '\\011'/ ;" macro 1 { }	{ }
TABLEINDEX		graphics/ucache.c	/^#define TABLEINDEX(hash) (((hash) >> HASHSHIFT) & / ;" macro 1 { CheckUCache FreePath UCGetDevPrim }	{ HASHSHIFT UCMSK }
TEMPCAUSEEXPAND		bintree/layer.c	/^#define TEMPCAUSEEXPAND 32	\/* Number of causes to / ;" macro 1 { ExpandTempCauses }	{ }
TEMPCOROUTINEOVERHEAD		coroutine/corouxfer.c	/^#define TEMPCOROUTINEOVERHEAD 20 \/* size of 1 loca/ ;" macro 1 { CallAsCoroutine }	{ }
TIME		device/hostdict.c	/^#define TIME() ++timestamp;/ ;" macro 1 { defHostDict getHostDict }	{ timestamp }
TIMEBUFCOLUMNS		product/timelog.c	/^#define TIMEBUFCOLUMNS 5 \/* Warning: this cannot b/ ;" macro 1 { InitTimedEvents TimedEvent }	{ }
TIMEBUFLENGTH		product/timelog.c	/^#define TIMEBUFLENGTH	20/ ;" macro 1 { InitTimedEvents PrintTimedEvents TimedEvent }	{ }
TIMELOG		product/timelog.h	/^#define TIMELOG 0/ ;" macro 1 { }	{ }
TIMESLICE		product/timeslice.h	/^#define TIMESLICE 20/ ;" macro 1 { SelectPSContext }	{ }
TIMESLICE_H		product/timeslice.h	/^#define TIMESLICE_H/ ;" macro 1 { }	{ }
TIMING		product/event.c	/^#define TIMING 1/ ;" macro 1 { }	{ }
TOO_HIGH		product/windowops.c	/^#define TOO_HIGH	1/ ;" macro 1 { PSOrderWindow checkOrderingValdity }	{ }
TOO_LOW		product/windowops.c	/^#define TOO_LOW		-1/ ;" macro 1 { PSOrderWindow checkOrderingValdity }	{ }
TOUCHBOUNDS		include/bintree.h	/^#define TOUCHBOUNDS(one, two) \\/ ;" macro 1 { BPRevealInside CheckShield LFill LMoveTo LObscureSubList LRevealSubList LSubListObscure LSubListReveal }	{ }
TRACE_RECYCLER		vm/recycler.c	/^#define	TRACE_RECYCLER	((STAGE == DEVELOP) && !INL/ ;" macro 1 { }	{ DEVELOP INLINE_RECYCLER }
TRANSPARENT		include/bintree.h	/^#define TRANSPARENT	0	\/* equivalent to (0.0 setalp/ ;" macro 1 { LCompositeFrom }	{ }
TTLRec		language/dict.c	/^typedef struct _t_TTLRec {PKeyVal kvl; PDictBody d/ ;" typedef 1 { Load LoadName PSStore PSWhere }	{ }
TWELVEBITHACK		devpattern/im110.c	/^#define TWELVEBITHACK 1/ ;" macro 1 { }	{ }
TableSampleProc		graphics/image.c	/^private procedure TableSampleProc(sample, result, / ;" function 42 { ImageInternal }	{ CIELIGHTNESS_COLOR_SPACE Color DEVCMYK_COLOR_SPACE DEVGRAY_COLOR_SPACE DEVRGB_COLOR_SPACE GetABComponent GetDevComponent GetLComponent integer lab max real }
TempCoroutineParam		coroutine/corouxfer.c	/^typedef struct {/ ;" typedef 5 { CallAsCoroutine TempCoroutineProc }	{ }
TempCoroutineProc		coroutine/corouxfer.c	/^private TempCoroutineProc(source, info)/ ;" function 9 { CallAsCoroutine }	{ CoReturn TempCoroutineParam arg currentCoroutine }
TermClipDevPrim		graphics/viewclip.c	/^public procedure TermClipDevPrim(clip)/ ;" function 21 { RemReducedRef XAReducePath }	{ DevFlushClip NULL PViewClipCacheEntry TermViewClipIntersection os_freeelement register vcCacheStorage viewclipCache viewclipcachelength }
TermNRects		product/windowops.c	/^private procedure TermNRects(PWindowDevice win)/ ;" function 13 { TermWindow }	{ NRect NULL nrStorage os_fprintf os_freeelement os_stderr }
TermViewClip		graphics/viewclip.c	/^private procedure TermViewClip(vc, freevc)/ ;" function 26 { NewViewClip PSInitViewClip VCRestoreProc }	{ DevFlushClip DevPrim NULL PViewClipCacheEntry RemPathRef TermViewClipIntersection curVC os_freeelement register vcCacheStorage vcStorage viewclipCache viewclipcachelength }
TermViewClipIntersection		graphics/viewclip.c	/^private procedure TermViewClipIntersection(ce)/ ;" function 8 { FindCurrentViewInCache TermClipDevPrim TermViewClip }	{ Assert DevFlushClip DisposeDevPrim }
TermWindow		product/windowops.c	/^public procedure TermWindow(PWindowDevice wd)/ ;" function 18 { PSTermWindow TermWindowsBy }	{ LOrder NULL OUT PSInvalidID RecalcMouseRect TermNRects TermWindowDevice eventGlobals false mouseWindow }
TermWindowDevice		product/windowops.c	/^public procedure TermWindowDevice(PWindowDevice de/ ;" function 14 { IniWdDevImpl TermWindow }	{ GetMouseMovedMask ID2PrevWd LFree PWindowDevice nullProcs os_freeelement wdPool windowBase }
TermWindowsBy		product/windowops.c	/^public procedure TermWindowsBy(int id)/ ;" function 19 { NSDestroyPS }	{ NULL PWindowDevice TermWindow windowBase }
TerminatePSSpace		postscript/contextimpl.c	/^public procedure TerminatePSSpace(space) PSSpace s/ ;" function 7 { }	{ NIL NotifyPSContext PSContext PSMakeRunnable }
TerminateUserContexts		product/ipcscheduler.c	/^public procedure TerminateUserContexts()/ ;" function 7 { PSResetUser }	{ NSTermContext NULL PSSchedulerContext contextList }
TextIntoString		language/string.c	/^private procedure TextIntoString(from, into)  stri/ ;" function 7 { PSCVRS PSCVS }	{ RangeCheck StrLen VMPutText cardinal }
TfmCd		fp/mtxvec.c	/^public Cd TfmCd(c, m)  Cd c; PMtx m;/ ;" function 6 { PSCurrentToBase PSCurrentToScreen }	{ Cd TfmPCd }
TfmLockPt1		fonts/fontbuild.c	/^private procedure TfmLockPt1(pt, p)  PFCd pt, p;/ ;" function 17 { BuildChar CCRunStd GetMtxInfo }	{ FCd FntTfmP InitSlopes Map glcrOn glcrPrepass lokSeqX lokSeqY lokSlopesInited p pLokData }
TfmLockPt2		fonts/fontbuild.c	/^private procedure TfmLockPt2(pt, p)  PFCd pt, p;/ ;" function 9 { BuildChar CCRunStd }	{ FCd FntTfmP glcrOn glcrPrepass lockoffset p }
TfmLockPt3		fonts/fontbuild.c	/^private procedure TfmLockPt3(pt, p)  PFCd pt, p;/ ;" function 4 { BuildChar CCRunStd GetMtxInfo }	{ FntTfmP p }
TfmLockPt4		fonts/fontbuild.c	/^private procedure TfmLockPt4(pt, p)  PFCd pt; PRCd/ ;" function 6 { CCRunStd GetMtxInfo }	{ PFCdToPRCd RCd TfmP p }
TfmP		graphics/graphics.c	/^public procedure TfmP(c, ct)  Cd c; PCd ct;/ ;" function 4 { CCRun PSTfm RFlexCurveTo SetCch TfmLockPt4 }	{ TfmPCd gs }
TfmPCd		fp/mtxvec.c	/^public procedure TfmPCd(c, m, ct)  Cd c;  register/ ;" function 20 { ArcInternal ArcToInternal BuildMultiRectPath CheckPkdMtLt CompositePriv FillCurveJoin IDTfmPCd ITfmPCd ITransIfNeed Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 MakeBBox MakeCacheDev2 PSCurveTo PSLineTo PSMoveTo PSTfm PSUPath PathForAll PointInDevPrim SmallArc TfmCd TfmP TfmToBB TransIfNeed UserToDevice UsrPthCheckMtLt UsrPthDoCurveTo UsrPthDoLineTo UsrPthDoMoveTo }	{ RealEq0 d real register s }
TfmToBB		fonts/cachedev.c	/^private boolean TfmToBB(fll, fur, rll, rur) PFCd f/ ;" function 31 { SetCchDevice }	{ Cd CrMtx LOWERSHOWBOUND MAX MIN Mtx OkFixed TfmPCd UPPERSHOWBOUND pflttofix r1 real }
TfrFcn		include/graphics.h	/^typedef struct _t_TfrFncRec \/* transfer function o/ ;" typedef 15 { GSAddRefs GSHasPrivateStuff GSRemRefs GetInactiveTables GetTfr PSClrTransfer PSCrCMYKColor PSSetBlkGeneration PSSetClrTransfer PSSetTransfer PSSetUCRemoval SetDevColor SetTransfer UnlinkTfr }	{ }
TfrFcnRec		include/graphics.h	/^typedef struct _t_TfrFncRec \/* transfer function o/ ;" typedef 15 { GetTfr IniTransfer }	{ }
ThresholdArray		include/graphics.h	/^typedef struct _t_ThresholdArray {/ ;" typedef 4 { }	{ }
TimeLog		product/timelog.c	/^typedef struct timelog {/ ;" typedef 4 { InitTimedEvents TimedEvent }	{ }
TimedEvent		product/timelog.c	/^void TimedEvent(int column)/ ;" function 20 { PSGetEvents Scheduler SelectPSContext SendEvent }	{ NULL PSContextToID TIMEBUFCOLUMNS TIMEBUFLENGTH TimeLog currentPSContext timeLog timeLogIndices }
TimevalToReal		product/miscops.c	/^private real TimevalToReal(struct timeval *then)/ ;" function 5 { PSCurrentRUsage }	{ }
Tlat		graphics/graphics.c	/^public procedure Tlat(c)  Cd c;/ ;" function 11 { PSSetCharWidth PSTlat SetCch SetDeltaAndTlate }	{ Cnct Mtx TlatMtx UniqueMID gs real }
TlatBBox		graphics/pathops.c	/^public procedure TlatBBox(bbox,delta)/ ;" function 7 { BreakUpPath ImageInternal XARdc }	{ }
TlatMtx		fp/mtxvec.c	/^public procedure TlatMtx(tx, ty, m)  Preal tx, ty;/ ;" function 2 { ArcInternal PSTlat Tlat }	{ d fpOne fpZero }
TlatPath		graphics/pathops.c	/^public procedure TlatPath(p, delta) register PPath/ ;" function 15 { BreakUpPath ConvertToListPath PathEndChar XAReducePath }	{ AllocListPathRec ConvertToListPath ListPath MakeOwnListPath NULL PPthElt PathType RealEq0 p real register }
TopError		postscript/postscript.c	/^public procedure TopError(errorCode, what)/ ;" function 34 { InitPostScript }	{ NIL PNameEntry PS_ERROR PS_EXIT PS_STOP PS_TERMINATE RAISE SetAbort exitCode exitError fwrite integer nameObj nullObj os_fprintf os_stderr postscriptNames psERROR }
TopP		language/stack.c	/^public procedure TopP(pob)  PObject pob; {StackTop/ ;" function 1 { CheckForMtx InFill InStroke InUFill KABegin KACharDef KAClosefile KAEexec KAEndCSDict KAFontType KAFontrunType KAHires KAKnown KAPassword KAPutDef KARdSubrsData PSDTfm PSFontRun PSFork PSIDTfm PSITfm PSImage PSInUStroke PSMakeVM PSRectClip PSRectViewClip PSRtat PSScal PSTfm PSTlat PSUPath }	{ StackTopP opStk }
TotalExclusionSemaphore		postscript/contextimpl.c	/^private procedure TotalExclusionSemaphore (count)/ ;" function 16 { ContextOpsInit }	{ Assert NIL currentPSContext exclusiveContextSemaphore exclusivePSContext }
TraceInvalidation		vm/recycler.c	/^private procedure TraceInvalidation (movedOK, R)/ ;" function 14 { InvalidateRecycler }	{ RecyclerName fflush os_fprintf recyclerStm traceRecycler }
TracePath		graphics/gstates.c	/^procedure TracePath(path, info)/ ;" function 20 { PushGStateItems TracePath }	{ GC_Push IntersectPath PathType StrkPath TracePath true }
TracePrivateForShared		vm/gcsharedimpl.c	/^private procedure TracePrivateForShared(space, sha/ ;" function 270 { TraceSharedVM }	{ ABM_ClearAll ABM_SetAllocated CAST CallBackItem CantHappen Card32 ContainsRefs Ctxt_GetCurrentCtxt Ctxt_GetNextCtxt Ctxt_NIL Ctxt_SetCurrentCtxt DictBody GCInternal_GetSegHnd GCInternal_Pop GCInternal_PushNoTest GC_Info GC_PData GenericID KeyVal NIL Object PCard8 PDictBody PGenericBody PKeyVal PObject PStmBody PVMSegment RefAny StmBody XlatDictRef arrayObj boolObj boolean cardinal charptr cmdObj dictObj escObj fontObj gcFinalizeProcs getRootsProcs intObj nameObj nilSegment nullObj objCond objGState objLock objMark objNameArray objSave pkdaryObj pushGStateItems pushPkdAryComposites pushStmItems realObj register segmentCache stmObj (etc) }
TracePrivateVM		vm/gcimpl.c	/^private void TracePrivateVM(space, gcData)/ ;" function 268 { GC_CollectPrivate }	{ ABM_ClearAll ABM_SetAllocated CAST CallBackItem CantHappen Card32 ContainsRefs Ctxt_GetCurrentCtxt Ctxt_GetNextCtxt Ctxt_NIL Ctxt_RestartAllSiblings Ctxt_SetCurrentCtxt Ctxt_StopAllSiblings DebugAssert DictBody GCInternal_AllocStack GCInternal_FreeStack GCInternal_GetSegHnd GCInternal_Pop GCInternal_PushNoTest GC_Info GC_Stack GenericID HasRefs KeyVal NIL Object PCard8 PDictBody PGenericBody PKeyVal PObject PStmBody PVMSegment RefAny StmBody XlatDictRef arrayObj boolObj boolean cardinal charptr cmdObj dictObj escObj false fontObj getRootsProcs intObj nameObj nilSegment nullObj objCond objGState objLock objMark objNameArray objSave pkdaryObj pushGStateItems (etc) }
TraceSharedVM		vm/gcsharedimpl.c	/^private procedure TraceSharedVM(gcData)/ ;" function 368 { GC_CollectShared }	{ ABM_ClearAll ABM_SetAllocated Assert CAST CallBackItem CantHappen Card32 ContainsRefs Ctxt_GetNextSpace CurrentShared DebugAssert DictBody GCInternal_AllocStack GCInternal_FreeStack GCInternal_GetSegHnd GCInternal_Pop GCInternal_PushNoTest GCInternal_ResetFreePointer GC_Info GC_Stack HasRefs InvalidateRecycler IsROMSegment KeyVal LNullObj NIL NameEntry NullObj Object PCard8 PDictBody PGenericBody PKeyVal PNameArrayBody PNameEntry PObject PRecycler PStmBody PVM PVMSegment RefAny SetShared StmBody TracePrivateForShared TrickyDict arrayObj boolObj boolean cardinal charptr cmdObj dictObj escObj false fontObj header intObj nameObj nilSegment nullObj (etc) }
Trace_OFCP		graphics/pathpriv.c	/^private procedure Trace_OFCP() {/ ;" function 3 { OFClose }	{ NIL RAISE of_cp }
Trace_OFDone		graphics/pathpriv.c	/^private procedure Trace_OFDone() { / ;" function 3 { OffsetFill }	{ NIL RAISE of_done }
Trace_OFInit		graphics/pathpriv.c	/^private procedure Trace_OFInit() {/ ;" function 3 { OffsetFill }	{ NIL RAISE of_init }
Trace_OFNP		graphics/pathpriv.c	/^private procedure Trace_OFNP(cd) Cd cd; {/ ;" function 4 { OFClose OFIntersect OFLineTo }	{ NIL PushPCd RAISE of_np }
TransCircle		graphics/stroke.c	/^private boolean TransCircle(dp, i) Cd dp; integer / ;" function 10 { FillCircle }	{ Cd CircleCache PCircle TransDevPrim false true }
TransDevPrim		graphics/ucache.c	/^public boolean TransDevPrim(dp, cd) register DevPr/ ;" function 29 { TransCircle TransRdc }	{ BBoxRec DevPrim DevShort NULL PPath RRoundP RealEq0 false gs maxDevShort minDevShort register true xaOffset }
TransDevRun		graphics/ucache.c	/^public procedure TransDevRun(run, dx, dy) DevRun */ ;" function 17 { CSRun OFAddRunMark TransDevPrim }	{ DevShort data lines register }
TransIfNeed		graphics/stroke.c	/^private procedure TransIfNeed(c, pc) Cd c;  PCd pc/ ;" function 2 { AddCirclePath FillJoin FillLineSegment HalfRoundCap StrkLnTo }	{ TfmPCd gs needTfm }
TransRdc		graphics/ucache.c	/^private boolean TransRdc(prdc) register PRdc prdc;/ ;" function 12 { UCGetDevPrim }	{ Cd RRoundP TransDevPrim d false gs true }
TransformFID		fonts/fontspriv.h	/^#define TransformFID(fid) \\/ ;" macro 1 { PreBuiltChar }	{ shiftFIDType transformFIDMask transformFIDShift }
TrapTrapClip		device/devprim.c	/^private DevPrim *TrapTrapClip(trap1, trap2, clip)/ ;" function 10 { ClipDevPrim }	{ DevInterval NULL TrapTrapClipCallBack TrapTrapInt clipCallBack }
TrapTrapClipCallBack		device/devprim.c	/^private procedure TrapTrapClipCallBack(trap)/ ;" function 8 { TrapTrapClip }	{ AddDevPrim DevBounds DevPrivate DevTrap DevTrapDevBounds clipCallBack }
TrapTrapDispatch		device/mark.c	/^public procedure TrapTrapDispatch(/ ;" function 1 { CompositePriv Mark }	{ }
TrapTrapInfo		device/mark.c	/^typedef struct trptrp {/ ;" typedef 6 { LBMMark TrapTrapDispatch }	{ }
TrapTrapInt		graphics/maketrap.c	/^public integer TrapTrapInt(t0, t1, yptr, callback,/ ;" function 69 { IntersectDP LBMMark TrapTrapClip TrapTrapDispatch TrapTrapInt XATrapTrapInt }	{ CopyTrimmedEdge DevInterval DevTrap IntInterval OKTrap TrapTrapInt YDelta false register }
TriLock		fonts/fontbuild.c	/^internal procedure TriLock(p, sb, pre, post)/ ;" function 59 { RMLock RVLock }	{ Fixed MAX MIN NULL locktype os_labs p post register true }
TrickyDict		include/vm.h	/^#define	TrickyDict(pObj) ((pObj)->length != 0)/ ;" macro 1 { GCInternal_TraceROMDict GetFontDirectory MakeFont MakeMID PSDefineFont PSSCheck PSWhere RelocateObj RelocateObject ScanFromDict SetFont TraceSharedVM XlatDictRef }	{ }
TrickyDictP		language/dict.c	/^public procedure TrickyDictP(maxlength, pdobj)/ ;" function 24 { CreateSharedVM PSTrickyDict }	{ CurrentShared DictObj DictP FInvlAccess LDictObj LimitCheck PDictBody VMPutElem cardinal nullObj rootPrivate rootShared true }
TrimCI		fonts/cicache.c	/^private boolean TrimCI () {/ ;" function 44 { CIAlloc }	{ Assert CI CINULL CIOffset CISize CISortedList CheckCI MIDCount MaxMCount PCIItem ReleaseCI RelinkCIItem SortCharAges Vmem boolean false freemem integer register true }
TrimEldestMID		fonts/midcache.c	/^private boolean TrimEldestMID(amount)/ ;" function 28 { MTAlloc }	{ MID MIDNULL MMEldest MSEldest MTSize PurgeMID false fcData integer register true }
TrimShowStates		fonts/fontshow.c	/^private procedure TrimShowStates()/ ;" function 10 { BEGINSHOW FontShwDataHandler PushShowState SSSOutCall SimpleShowByName SlowShow }	{ FreeShowState NIL PShowState level register showLevel ss ssr }
Trp		graphics/qreducer.c	/^typedef struct {/ ;" typedef 5 { }	{ }
TrpEdge		graphics/qreducer.c	/^typedef struct {/ ;" typedef 7 { }	{ }
Truncate		language/stodevedit.c	/^private procedure Truncate(stm)/ ;" function 10 { LineEdit }	{ BufItem FREE LSData NIL data }
TwoPI		graphics/pathextraops.c	/^#define TwoPI 6.2831853071/ ;" macro 1 { ArcC PSArcC }	{ }
TypeCheck		include/error.h	/^#define TypeCheck	PSTypeCheck/ ;" macro 1 { AFixedCar AGetP AssertCheck Bang BuildMultiRectPath CheckCompositeFont CheckIfEncodedUserPath ComputeDataLen DictGetPType DictTestPType DoEUserPath DoImage DoUserPath FastRectFill FixedValue FloatRectFill GetEUsrPthBBox GetInt GetSpotDictEntries GetThresholdDictEntries ImageDict ImageInternal KADict MonExitProc MonitorExit MtxToPAry MultiRectFill PAryToMtx PRealValue PSAcquireLock PSCurrentGState PSDictGetPObj PSDictGetTestPObj PSFontRun PSFork PSMonitor PSNotify PSPopGState PSPopManagedObject PSPopTempObject PSRectFill PSReleaseLock PSSelectFont PSSetGState PSSetHalftone PSStringLength PSWait PopGState QDoEUsrPth QDoEUsrPthFloat QDoUserPath QUsrPthArcTo QUsrPthCurveTo QUsrPthLineTo UsrPthArcTo UsrPthBBox UsrPthCurveTo UsrPthDoCurveTo UsrPthDoFinish UsrPthDoLineTo (etc) }	{ PSTypeCheck }
TypeInit		language/type.c	/^public procedure TypeInit(reason)/ ;" function 27 { LanguageInit }	{ DebugAssert LBoolObj LNullObj MAXarrayLength MAXcardinal MAXdctCount MAXstringLength Object RgstObject endswitch false true }
TypeOfFID		fonts/fontspriv.h	/^#define TypeOfFID(fid) (((fid)>>shiftFIDType)&mask/ ;" macro 1 { FindMaxFID FindSibling PSDefineFont PreBuiltChar RgstInitialFont }	{ maskFIDType shiftFIDType }
TypeOfObj		postscript/customops.c	/^private PSOperandType TypeOfObj(pobj) PObject pobj/ ;" function 24 { PSDictGetPObj PSDictGetTestPObj PSGetObjectType PSGetOperandType }	{ PSOperandType arrayObj boolObj cmdObj dictObj escObj intObj integer nameObj nullObj objCond objGState objLock pkdaryObj realObj stmObj strObj }
UCGetDevPrim		graphics/ucache.c	/^public DevPrim * UCGetDevPrim(context, smtx)/ ;" function 99 { DoUAppend GetAperatureDP InUFill PSInUStroke UCacheMark UStrkPthProc }	{ BBox Card32 Cd CheckUCache Cnct CopyDevPrim DURING DevPrim DevPrimBytes DisposeDevPrim DoRdcPth DoRdcStroke END_HANDLER EUsrPthCheckMtLt EnterPathInCache EnterRdcInCache FillUserPathEnumerate FindPathInCache FindRdcInCache FreePath HANDLER HashPath Mtx NULL PRdc PUCache QEnumOk QFillUserPathEnumerate QStrokeUserPathEnumerate RERAISE RdcSize SetAbort SetMtx StrokeUserPathEnumerate TABLEINDEX TransRdc UserPathContext UsrPthBBox UsrPthCheckMtLt UsrPthQRdcOk XADoRdcPth XADoRdcStroke XARdc blimit boolean false fp16k gs integer real register true uXARectangle uXAc1 uXAc2 }
UCMSK		graphics/ucache.c	/^#define UCMSK (0x1F)/ ;" macro 1 { TABLEINDEX UCSZ }	{ }
UCSZ		graphics/ucache.c	/^#define UCSZ (UCMSK+1)/ ;" macro 1 { CheckUCache IniUCache PSUCacheHist }	{ UCMSK }
UCache		graphics/ucache.c	/^private PUCache *UCache;/ ;" global 1 { CheckUCache EnterPathInCache FindPathInCache FreePath IniUCache PSUCacheHist }	{ }
UCacheData		graphics/graphdata.h	/^typedef struct {/ ;" typedef 3 { }	{ }
UCacheDataHandler		graphics/ucache.c	/^public procedure UCacheDataHandler (code)/ ;" function 10 { GStateDataHandler }	{ BLIMIT blimit bmax }
UCacheMark		graphics/ucache.c	/^public boolean UCacheMark(context, mtx)/ ;" function 12 { FillUserPath PSUStroke }	{ DevPrim DisposeDevPrim GetDevClipPrim MarkDevPrim NULL UCGetDevPrim false register true }
UCacheRec		graphics/ucache.c	/^typedef struct _ucacherec {/ ;" typedef 14 { EnterPathInCache IniUCache }	{ }
UDDelete		stodev/stodevunix.c	/^private procedure UDDelete(dev, name)/ ;" function 27 { }	{ IsContextWriteProhibited MapErrno integer }
UDDevAttr		stodev/stodevunix.c	/^private procedure UDDevAttr(dev, attr)/ ;" function 5 { }	{ }
UDEnumerate		stodev/stodevunix.c	/^private int UDEnumerate(dev, pattern, action, arg)/ ;" function 86 { }	{ DURING END_HANDLER HANDLER NIL RERAISE SimpleMatch arg register }
UDNop		stodev/stodevunix.c	/^private procedure UDNop (dev)/ ;" function 4 { }	{ }
UDReadAttr		stodev/stodevunix.c	/^private procedure UDReadAttr(dev, name, attr)/ ;" function 15 { }	{ BUFSIZ MPWUDReadAttr MapErrno NIL RAISE ecIOError integer }
UDRename		stodev/stodevunix.c	/^private procedure UDRename (dev, old, new)/ ;" function 25 { }	{ IsContextWriteProhibited MapErrno NIL RAISE ecIOError integer }
UDUndef		stodev/stodevunix.c	/^private procedure UDUndef (dev)/ ;" function 5 { }	{ NIL RAISE ecUndef }
UDiskFind		stodev/stodevunix.c	/^private boolean UDiskFind(dev, name)/ ;" function 8 { }	{ NIL Stm false fclose os_fopen true }
UDiskStmCreate		stodev/stodevunix.c	/^private Stm UDiskStmCreate(dev, name, acc)/ ;" function 9 { }	{ MapErrno NIL Stm os_fopen }
UFAvail		stream/unixstream.c	/^private int UFAvail(stm)/ ;" function 11 { }	{ fileno }
UFClose		stream/unixstream.c	/^private int UFClose(stm)/ ;" function 24 { }	{ EOF GetPUnixData StmDestroy fflush fileno integer r register }
UFFlush		stream/unixstream.c	/^private int UFFlush(stm)/ ;" function 31 { UFPutEOF }	{ BUFSIZ EOF GetPUnixData NULL UFilBuf UnixData data feof register }
UFPutEOF		stream/unixstream.c	/^private int UFPutEOF(stm)/ ;" function 5 { }	{ EOF UFFlush }
UFSeek		stream/unixstream.c	/^private int UFSeek(stm, offset, origin)/ ;" function 72 { }	{ EOF GetPUnixData PREFERREDALIGN UnixData data fflush getc integer p register }
UFTell		stream/unixstream.c	/^private long int UFTell(stm)/ ;" function 25 { }	{ GetPUnixData fileno r }
UFilBuf		stream/unixstream.c	/^private int UFilBuf(stm)/ ;" function 58 { UFFlush }	{ BUFSIZ EOF GetPUnixData NULL UnixData data fflush fileno os_malloc os_stderr os_stdin os_stdout register }
UFlsBuf		stream/unixstream.c	/^private int UFlsBuf(ch, stm)/ ;" function 82 { }	{ BUFSIZ EOF GetPUnixData NULL UnixData data fileno os_malloc os_stdout register }
UFrac		include/fp.h	/^typedef long int \/* Fixed, *\/ Frac, UFrac;/ ;" typedef 1 { IniPathPriv OFLineTo }	{ }
UHANDLER		language/exec.c	/^#define UHANDLER } else {/ ;" macro 1 { }	{ }
UNFIXCD		fonts/fontshow.h	/^#define UNFIXCD(dc,pcd) {xfixtopflt((dc).x,&((pcd)/ ;" macro 1 { FixedMoveTo GetCPDelta MakeCacheDev2 MoveToAfterShow NoRoom PSSetCharWidth ShowByName }	{ }
UNGETC		language/scanner.c	/^#define UNGETC \\/ ;" macro 1 { StmToken }	{ SETUPSTM SafeUnGetc UPDATESTM ss }
UNIXSTMPRIV_H		stream/unixstmpriv.h	/^#define UNIXSTMPRIV_H/ ;" macro 1 { }	{ }
UNIXSTREAM		include/package_specs.h	/^#define UNIXSTREAM	"unixstream.h"/ ;" macro 1 { }	{ }
UNIXSTREAM_H		include/unixstream.h	/^#define UNIXSTREAM_H/ ;" macro 1 { }	{ }
UNIXSYS		stream/unixstream.c	/^#define UNIXSYS (OS==os_bsd || OS==os_sun || OS==o/ ;" macro 1 { }	{ os_aix os_bsd os_mach os_sun os_ultrix os_xenix }
UNIX_PRODUCT		include/package_specs.h	/^#define UNIX_PRODUCT 	"unix_product.h"/ ;" macro 1 { }	{ }
UNIX_PRODUCT_H		include/unix_product.h	/^#define	UNIX_PRODUCT_H/ ;" macro 1 { }	{ }
UNSIGNEDCHARS		include/environment.h	/^#define UNSIGNEDCHARS 0/ ;" macro 1 { }	{ }
UOBJINITSIZE		language/exec.h	/^#define UOBJINITSIZE 10		\/* initial number of entr/ ;" macro 1 { PSDefUserObj }	{ }
UObject		language/scanner.h	/^typedef union {/ ;" typedef 4 { BinObjInit InitBOSTypeMap ReadBinObjSeq WriteObject }	{ }
UOffset		graphics/userpath.c	/^Cd UOffset, uXAc1, uXAc2;/ ;" global 1 { BreakUpPath DoUAppend QUsrPthArcTo UXAStroke UsrPthArcTo UsrPthDoCurveTo UsrPthDoLineTo UsrPthDoMoveTo XADoRdcStroke XARdc }	{ }
UPArcInit		graphics/userpath.c	/^private boolean UPArcInit(context) PUserPathContex/ ;" function 2 { UsrPthArc UsrPthArcTo }	{ HasCurrentPoint gs }
UPClosePath		graphics/userpath.c	/^private procedure UPClosePath(context)/ ;" function 5 { DoUAppend }	{ AssertCheck ClosePath gs }
UPCurveTo		graphics/userpath.c	/^private procedure UPCurveTo(cd1, cd2, cd3, context/ ;" function 4 { DoUAppend }	{ AssertCheck CurveTo cd1 cd2 cd3 gs }
UPDATESTM		language/scanner.c	/^#define UPDATESTM stm->ptr = stmPtr; stm->cnt = st/ ;" macro 1 { GETC PSReadHexString PSReadLine StmToken UNGETC }	{ }
UPLineTo		graphics/userpath.c	/^private procedure UPLineTo(cd, context)/ ;" function 5 { DoUAppend }	{ AssertCheck LineTo gs }
UPMoveTo		graphics/userpath.c	/^private procedure UPMoveTo(cd, context)/ ;" function 5 { DoUAppend }	{ MoveTo gs true }
UPPERSHOWBOUND		fonts/fontshow.h	/^#define UPPERSHOWBOUND (integer)(1<<13)/ ;" macro 1 { CCRunStd DTfmToFixed FasterShow LOWERSHOWBOUND MakeCacheDev SetCharWidth ShowByName SimpleShowByName TfmToBB if }	{ integer }
UPPERSTKLIMIT		language/stack.h	/^#define	UPPERSTKLIMIT	4096	\/* Absolute maximum sta/ ;" macro 1 { PSSetStackLimit }	{ }
USE68KATM		graphics/atm.h	/^#define USE68KATM 0/ ;" macro 1 { }	{ }
USE_ERRNO		fp/os_math.h	/^#define USE_ERRNO (OS != os_vaxeln)/ ;" macro 1 { }	{ os_vaxeln }
USE_SIGNAL		fp/os_math.h	/^#define USE_SIGNAL (OS != os_mpw)/ ;" macro 1 { }	{ os_mpw }
USE_SIGSTACK		product/nextmain.c	/^#define USE_SIGSTACK 0		\/* Whether to use separate/ ;" macro 1 { }	{ }
UStrkPthProc		graphics/userpath.c	/^private DevPrim * UStrkPthProc(spctx) StrkPthCtx */ ;" function 23 { PSUStrokePath }	{ CopyDevPrim DURING DevPrim END_HANDLER HANDLER Mtx NULL PMtx PUserPathContext RERAISE SetMtx StrkPthProc UCGetDevPrim false gs true }
UXAFillPath		graphics/userpath.c	/^private procedure UXAFillPath(pContext, evenOdd)/ ;" function 8 { FillUserPath }	{ FillUserPathEnumerate QEnumOk QFillUserPathEnumerate UsrPthQRdcOk }
UXAStroke		graphics/userpath.c	/^private procedure UXAStroke(pContext,bool)/ ;" function 16 { PSUStroke }	{ DevBBox DevClipIsRect DoStroke FinStroke GetDevClipBBox NULL QEnumOk QStrokeUserPathEnumerate StrokeUserPathEnumerate UOffset false ms uXARectangle uXAc1 uXAc2 }
Un4Comp		graphics/reducer.c	/^private short int Un4Comp(a, b)/ ;" function 16 { Add4 RatComp Sub4 }	{ Card16 register }
UnDef		language/dict.c	/^private procedure UnDef(dict, key, checkAccess)/ ;" function 62 { DictUnDef ForceUnDef PSUnDef }	{ Assert CopyTrickyDict DictBody InvlAccess KeyName KeyVal LNullObj NIL PDictBody PKeyVal PNameEntry SearchDict VMGetDict VMPutDKeyVal VMPutDict XlatDictRef enableTrickyDictCopy nameObj nullObj register true wAccess }
UnFixCd		language/type.c	/^public procedure UnFixCd(d, c) DevCd d;  PCd c;/ ;" function 2 { FFltnCurve FMiniFltn F_FillCircle F_HalfRoundCap FastFillCurveJoin UNFIXCD }	{ d fixtopflt }
UnMFix		graphics/fflattenpath.c	/^#define UnMFix(f) ((f)<<8)/ ;" macro 1 { FMiniFltn }	{ }
UnRgstStoDevice		stodev/stodevimpl.c	/^public procedure UnRgstStoDevice(dev)/ ;" function 11 { }	{ CantHappen NIL PStoDev stoDevList }
UndefFileName		include/error.h	/^#define UndefFileName	PSUndefFileName/ ;" macro 1 { CreateFileStm PSChdir PSDeleteFile PSDevDisMount PSDevFormat PSDevMount PSRenameFile }	{ PSUndefFileName }
UndefNameIndex		language/scanner.c	/^public procedure UndefNameIndex(table, index)/ ;" function 11 { ReadBinObjSeq StmToken }	{ MakePName NameObj PushP Undefined false os_sprintf stackRstr }
UndefResult		fonts/fontbuild.c	/^public procedure UndefResult() { BCERROR(BE_UNDEF)/ ;" function 1 { ArcToInternal Div3By2 GetValidFreqAngleOctet GetValidFreqAnglePair PSATan PSDiv PSIDiv PSMod ReadBinObjSeq ReadNumAry }	{ BCERROR }
Undefined		include/error.h	/^#define Undefined	PSUndefined/ ;" macro 1 { DictGetP DoImage ForceGetP NewViewClip PSCurrentGState PSDeviceInfo PSGState PSLoad PSRgstOps PSSetCMYKColor PSSetCharWidth PSSetGState PSSetGray PSSysNameMap PSViewClipPath ReadBinObjSeq SetCacheDev SetRGBColor SetTransfer UndefNameIndex ValidatePObj WriteObject }	{ PSUndefined }
Underflow		language/stack.c	/^public procedure Underflow(stack) PStack stack; {P/ ;" function 1 { AStore Array Copy CopyStack IPopSimple PSCvLit PSCvX PSDup PSExch PSFork PSGetOperandType PSIndex PSStringLength Roll StackPopDiscard StackTopP }	{ PSError stackunderflow }
UniqueCause		bintree/layer.c	/^static int UniqueCause()/ ;" function 10 { ExpandTempCauses LMoveTo LNewAt LNewDummyAt }	{ NOREASON OFFSCREENREASON ONSCREENREASON }
UniqueMID		include/graphics.h	/^typedef union {			\/* permanently unique MID *\// ;" typedef 7 { CheckCompositeFont CompSlowShow CompositeShow DMFRestore GetInfoSupp InvalidateCachedMIDs MakeCompFont ScanCompString SetFont ShowInternal Tlat }	{ }
UniqueWindowId		product/windowops.c	/^public short UniqueWindowId()/ ;" function 23 { window }	{ NULL PWindowDevice WRAPPEDBIT lastWID true windowBase }
UnixData		stream/unixstmpriv.h	/^typedef struct {		\/* Interpretation of StmRec.data/ ;" typedef 8 { GetPUnixData UFFlush UFSeek UFilBuf UFlsBuf }	{ }
UnixInit		unix_product/unix.c	/^public procedure UnixInit(reason)/ ;" function 21 { }	{ Begin End MAKEVM PSDayTime RgstExplicit RgstMCmds endswitch rootShared unixCmds }
UnixStmInit		stream/unixstream.c	/^public procedure UnixStmInit()/ ;" function 7 { Mnextmain }	{ GetPUnixData os_fdopen os_stderr os_stdin os_stdout }
UnixStoDevInit		stodev/stodevunix.c	/^public procedure UnixStoDevInit()/ ;" function 17 { Mnextmain }	{ PStoDev RgstStoDevice StoDev Uprocs false os_sureCalloc true }
UnlinkCI		fonts/cicache.c	/^private procedure UnlinkCI(oldcio)/ ;" function 17 { ReleaseCI }	{ CI CINULL CIOffset CIUNLINKED CN CantHappen NIL PCIItem PCIOffset register }
UnlinkDP		graphics/graphics.c	/^public DevPrim *UnlinkDP(dp)/ ;" function 15 { MarkDevPrim ReducePathClipInt ShowMask }	{ DevCd DevPrim NULL xaOffset }
UnlinkEntry		fonts/cacheimpl.c	/^private procedure UnlinkEntry(cache, hdr)/ ;" function 7 { CacheInvalidate CacheRemoveEntry DisplaceEntries }	{ Links RemoveLink }
UnlinkTfr		graphics/transferimpl.c	/^private procedure UnlinkTfr(tfrFcn) register TfrFc/ ;" function 18 { ActivateTfr RemTfrRef }	{ NIL TfrFcn integer tfrFcnFirst tfrFcnLast }
UnloadContext		postscript/contextimpl.c	/^private procedure UnloadContext ()/ ;" function 9 { CreateContext CreatePSContext SwitchPSContext }	{ NIL UnloadData currentPSContext staticData vmCurrent vmPrivate }
UnloadData		vm/staticdata.c	/^public PCard8 UnloadData ()/ ;" function 17 { UnloadContext }	{ CallDataProcedures NIL PCard8 staticData }
UnrestrictInputPort		product/ipcscheduler.h	/^#define UnrestrictInputPort(psc) \\/ ;" macro 1 { ContextYield }	{ }
UnwindExecStk		language/exec.c	/^private procedure UnwindExecStk(pob)  register POb/ ;" function 13 { HandleStackOverflow PSExit }	{ CantHappen EPopP cmdObj execStk mrkNone until }
UpDir		graphics/cscan.c	/^#define UpDir		4/ ;" macro 1 { }	{ }
Uprocs		stodev/stodevunix.c	/^private readonly StoDevProcs Uprocs =/ ;" global 13 { UnixStoDevInit }	{ }
UseStdWidth		fonts/fontbuild.c	/^internal boolean UseStdWidth(pw, stdws, numstd)/ ;" function 43 { AdjustToStdWidths BlueLock PreXLock PreYLock }	{ FTruncF FixInt Fixed FixedHalf IntX false fixmul register true wbnd }
Use_Reserve		vm/vm_segment.c	/^private procedure Use_Reserve (vmStructure)/ ;" function 16 { ExpandVMSection }	{ Assert NIL ResetVMSection current free level }
UserPathContext		graphics/userpath.h	/^typedef struct {/ ;" typedef 40 { FillUserPath InFill InStroke InUFill PSInUStroke PSUAppend PSUStroke PSUStrokePath UCGetDevPrim }	{ }
UserToDevice		product/coordinates.c	/^public procedure UserToDevice(Mtx *matrix, Cd user/ ;" function 8 { PSAdjustMouse PSSetMouse SetGSCursor }	{ Cd RealRound TfmPCd }
UsrPthArc		graphics/userpath.c	/^public procedure UsrPthArc(cd, radius, startAng, e/ ;" function 35 { DoEUserPath DoUserPath }	{ ArcInternal AssertCheck CurveTo LineTo MoveTo UPArcInit UsrPthCurveTo UsrPthInit UsrPthLineTo UsrPthMoveTo false true }
UsrPthArcTo		graphics/userpath.c	/^public procedure UsrPthArcTo(c1, c2, radius, conte/ ;" function 37 { DoEUserPath DoUserPath }	{ ArcToInternal AssertCheck Cd CheckForCurrentPoint CurveTo ITfmP LineTo MoveTo TypeCheck UOffset UPArcInit UsrPthCurveTo UsrPthInit UsrPthLineTo UsrPthMoveTo gs true }
UsrPthBBox		graphics/userpath.c	/^public procedure UsrPthBBox(context)/ ;" function 47 { DoUAppend FillUserPath GetAperatureDP InUFill PSUStroke UCGetDevPrim }	{ AssertCheck Component GetEUsrPthBBox MakeBBox Object PObject Preal RRoundP TypeCheck VMCarCdr cd1 cd2 cmdObj gs intObj integer nameObj real realObj register setbboxNm }
UsrPthCheckMtLt		graphics/userpath.c	/^public boolean UsrPthCheckMtLt(pAryObj, pc1, pc2)/ ;" function 56 { PSUStroke UCGetDevPrim }	{ Cd CheckPkdMtLt Component PNameEntry PObject RTfmPCd TfmPCd arg cmdObj false gs intObj linetoNm movetoNm nameObj pkdaryObj realObj register rlinetoNm true }
UsrPthCurveTo		graphics/userpath.c	/^private procedure UsrPthCurveTo(c1, c2, c3, contex/ ;" function 44 { UsrPthArc UsrPthArcTo }	{ AssertCheck CurveTo DevCd FFltnCurve FLATTENLIMIT FixCd FltnCurve FltnRec TypeCheck boolean false fr true }
UsrPthDoClsPth		graphics/userpath.c	/^public procedure UsrPthDoClsPth(context)/ ;" function 19 { DoEUserPath DoUserPath }	{ ClosePath DevCd FixCd }
UsrPthDoCurveTo		graphics/userpath.c	/^public procedure UsrPthDoCurveTo(context, vals, fr/ ;" function 51 { DoEUserPath DoUserPath }	{ BBoxTest CurveTo DevCd FFltnCurve FLATTENLIMIT FixCd FltnCurve PMtx RTfmPCd TfmPCd TypeCheck UOffset boolean cd1 cd2 cd3 false fr true }
UsrPthDoFinish		graphics/userpath.c	/^public procedure UsrPthDoFinish(context)/ ;" function 20 { DoEUserPath DoUserPath }	{ DevCd FixCd TypeCheck }
UsrPthDoLineTo		graphics/userpath.c	/^public procedure UsrPthDoLineTo(context, cd, absFl/ ;" function 30 { DoEUserPath DoUserPath }	{ BBoxTest DevCd FixCd LineTo PMtx RTfmPCd TfmPCd TypeCheck UOffset }
UsrPthDoMoveTo		graphics/userpath.c	/^public procedure UsrPthDoMoveTo(context, cd, absFl/ ;" function 24 { DoEUserPath DoUserPath }	{ BBoxTest MoveTo PMtx RTfmPCd TfmPCd UOffset }
UsrPthInit		graphics/userpath.c	/^private boolean UsrPthInit(context)/ ;" function 4 { QUsrPthArc QUsrPthArcTo UsrPthArc UsrPthArcTo }	{ }
UsrPthLineTo		graphics/userpath.c	/^private procedure UsrPthLineTo(cd, context)/ ;" function 29 { UsrPthArc UsrPthArcTo }	{ AssertCheck DevCd FixCd LineTo TypeCheck }
UsrPthMoveTo		graphics/userpath.c	/^private procedure UsrPthMoveTo(cd, context)/ ;" function 22 { QUsrPthArc QUsrPthArcTo UsrPthArc UsrPthArcTo }	{ AssertCheck MoveTo }
UsrPthQRdcOk		graphics/userpath.c	/^public boolean UsrPthQRdcOk(context, fill)/ ;" function 80 { FillUserPath GetAperatureDP InUFill UCGetDevPrim UXAFillPath XADoRdcPth }	{ BBox Object PNameEntry PObject VMCarCdr arcNm arcnNm arctNm character cmdObj curvetoNm false integer nameObj rcurvetoNm register ss true }
V		bintree/bintreetypes.h	/^#define V 1/ ;" macro 1 { BPObscureInside CONVERT16TO32 CONVERT16TO8 CONVERT32TO8 }	{ }
VADJ		bintree/extent.c	/^#define VADJ(a,b)	(((a).minx<=(b).maxx)&&((a).maxx/ ;" macro 1 { EXBuildExtents }	{ }
VCLIP_H		graphics/viewclip.h	/^#define VCLIP_H/ ;" macro 1 { }	{ }
VCRestoreProc		graphics/viewclip.c	/^private procedure VCRestoreProc(level) Level level/ ;" function 10 { IniViewClip }	{ PViewClip TermViewClip curVC level true viewClips }
VCSaveProc		graphics/viewclip.c	/^private procedure VCSaveProc(level) Level level; {/ ;" function 11 { IniViewClip }	{ CopyPath NULL PViewClip curVC level os_newelement register vcStorage viewClips }
VDTcmd		fonts/fontbuild.c	/^#define VDTcmd	7/ ;" macro 1 { BuildChar CCRunStd }	{ }
VHCTcmd		fonts/fontbuild.c	/^#define VHCTcmd 30/ ;" macro 1 { BuildChar CCRunStd }	{ }
VISCHAN		include/bintree.h	/^#define VISCHAN		 1	\/* Visible channel *\// ;" macro 1 { BAGCompositeFrom BPAdjust BPCompositeFrom BPCompositeTo BPCopyBitsFrom BPCopyback BPInitialize BPMark BPPointScreen BPRenderInBounds BPRevealBecause LRepaintIn MPComposite MPMark }	{ }
VISIBLE		bintree/bintreetypes.h	/^#define VISIBLE		0	\/* On the screen, visible by us/ ;" macro 1 { BPAdjust BPCompositeFrom BPCompositeTo BPCopyback BPMark BPObscureBecause BPPointScreen BPPrintOn BPReplaceBits BPRevealBecause DPRevealInside }	{ }
VM		include/package_specs.h	/^#define VM		"vm.h"/ ;" macro 1 { }	{ }
VMAlloc		mp/mp.c	/^#define VMAlloc(ptr, size) \\/ ;" macro 1 { }	{ }
VMCarCdr		vm/saverestore.c	/^public procedure VMCarCdr(pao, pobj)/ ;" function 19 { AFAProc AFixedCar ARealCarP Bang CheckForMtx CheckIfEncodedUserPath CheckIfUCache CheckPkdMtLt CopyNumStrmForCache DoStroke DoUserPath EnterPathInCache EnterRdcInCache EqNumStrmCache FindPathInCache FindRdcInCache FontEncode HashArray ImageDict PAryToMtx PSALoad PSSetDash PkAObjF PkAObjR UsrPthBBox UsrPthQRdcOk }	{ CantHappen DecodeObj NIL PObject arrayObj pkdaryObj }
VMChangeType		vm/gcinternal.h	/^typedef enum {creating, deleting} VMChangeType;/ ;" typedef 1 { }	{ }
VMCopyArray		vm/saverestore.c	/^public procedure VMCopyArray(src, dst)/ ;" function 39 { CreatePrivateVM EndWholeClothInit PSCopy PSdummymakevm PutArray }	{ CheckSharable ConditionalResetRecycler InvlAccess IsRecyclable MIN PObject PRecycler RecyclerAddress RecyclerForObject SavObjMacro boolean integer level rAccess register wAccess }
VMCopyGeneric		vm/saverestore.c	/^public procedure VMCopyGeneric (src, dst)/ ;" function 32 { PSCopy }	{ Assert CallFinalizeProc InvlAccess PCard8 PGenericBody TypeCheck VMPutGeneric escObj rAccess wAccess }
VMCopyString		vm/saverestore.c	/^public procedure VMCopyString(src,dst)  StrObj src/ ;" function 10 { PSCVS PSCopy PutString }	{ InvlAccess rAccess wAccess }
VMERROR		vm/vm.c	/^public procedure VMERROR() {PSError(VMerror);}/ ;" function 1 { AddProcToList EXPAND ExpandVMSection GCInternal_AllocStack GCInternal_GrowStack GCInternal_VMChange }	{ PSError VMerror }
VMExpandDict		vm/vm_alloc.c	/^VMExpandDict(d,SearchFunc)		\/* expand dictionary */ ;" function 70 { PutInDict }	{ ABM_Allocate AllocAligned CantHappen Card16 ConditionalResetRecycler DictBody KeyVal Level NOLL NULL PCard8 PKeyVal PNameEntry PVM VMGetDict VMPutDKeyVal VMPutDict d integer level nameObj nullObj os_fprintf os_stderr register savelevel vmCurrent vmPrivate vmShared }
VMFree		mp/mp.c	/^#define VMFree(ptr, size) \\/ ;" macro 1 { }	{ }
VMGetChar		include/vm.h	/^#define VMGetChar(so,i)	((so).val.strval)[i]/ ;" macro 1 { BytefromString DPrintSOP FixedfromString PSGet PSWrtHexString PrintSOP SFAProc SSGetChar }	{ }
VMGetDict		include/vm.h	/^#define VMGetDict(dp,d) *(dp) = *((d).val.dictval)/ ;" macro 1 { DictP DumpDict PrintDOB PutInDict SetDictAccess UnDef VMExpandDict copydict }	{ d }
VMGetElem		include/vm.h	/^#define VMGetElem(ao,i) (((ao).val.arrayval)[i])/ ;" macro 1 { AGetP CheckCompositeFont CmdIndexObj CompSlowShow EncCharNameProc FDNestedDepth FindOpSet FontBuildInit Init_Cmds InvalidateCachedMIDs MakeCompFont MakeFontSupp MinEncodingLength PSDefUserObj PSDefineFont PSEExec PSExecUserObj PSRgstNames PSRgstOps PrAryBody RgstDynamicCmd RgstOpSet RgstPackageNames StreamInit }	{ }
VMGetKeyVal		include/vm.h	/^#define VMGetKeyVal(kvp,kvo) *(kvp) = *(kvo)/ ;" macro 1 { NextKeyVal PrintKeyVal }	{ }
VMGetText		vm/saverestore.c	/^public procedure VMGetText(so, str)  StrObj so; st/ ;" function 16 { Bang PSChdir PSMakeVM PSMkTemp PSPopString PSUndef StringText }	{ InvlAccess NUL charptr integer rAccess register }
VMGetValue		include/vm.h	/^#define VMGetValue(obp,kvo) *(obp) = (kvo)->value/ ;" macro 1 { DictTestP ILoadPNE Load LoadName }	{ }
VMINIT		include/environment.h	/^#define VMINIT (STAGE==DEVELOP)/ ;" macro 1 { }	{ DEVELOP }
VMInit		vm/vm.c	/^public procedure VMInit(reason)/ ;" function 23 { }	{ ABM_Init GCInternal_Init GC_RgstGetRootsProc GC_RgstSharedRootsProc Init_Cmds Init_Recycler Init_SaveRestore Init_StaticData Init_VM_Garbage Init_VM_Memory Init_VM_Space NIL NUM_PACKAGE_NAMES PACKAGE_INDEX PushSharedVMRoots PushVMRoots RefAny RgstPackageNames errorNames integer nm_dictfull }
VMNAMES_H		vm/vmnames.h	/^#define	VMNAMES_H/ ;" macro 1 { }	{ }
VMObjForPString		vm/saverestore.c	/^public procedure VMObjForPString(s, pstrob)/ ;" function 8 { FillCircle }	{ Assert LStrObj StrLen s }
VMObjPtr		vm/saverestore.c	/^#define VMObjPtr(o) ((PObject)(o))/ ;" macro 1 { SavObjMacro }	{ PObject }
VMPrivateData		vm/vm_memory.h	/^typedef struct _t_VMPrivateData {/ ;" typedef 4 { CreateVM }	{ }
VMPutChar		vm/saverestore.c	/^public procedure VMPutChar(so, i, c)/ ;" function 11 { PSPut }	{ InvlAccess charptr s wAccess }
VMPutDKeyVal		vm/saverestore.c	/^public procedure VMPutDKeyVal(dp, vmkvp, kvp)/ ;" function 9 { PutInDict UnDef VMExpandDict }	{ CheckSharable SavObjMacro level }
VMPutDValue		vm/saverestore.c	/^public procedure VMPutDValue(dp, kvp, obp)/ ;" function 10 { PutInDict }	{ CheckSharable SavObjMacro level }
VMPutDict		vm/saverestore.c	/^public procedure VMPutDict(d, dp)/ ;" function 21 { DictP PutInDict SetDictAccess UnDef VMExpandDict copydict }	{ ABM_AllocateVM AllocVMAligned Assert ConditionalResetRecycler NULL PCard8 PDictBody PSRD SRD d false integer level privateRecycler rootPrivate }
VMPutElem		vm/saverestore.c	/^public procedure VMPutElem(ao, i, ob)/ ;" function 30 { APut AStore CopyTrickyDict DMFRestore DelayedMakeFont FontBuildInit FreeShowState GetDMFItem MakeCompFont MtxToPAry PSCopy PSDefineFont PSPutArray PSPutInterval PSRgstNames PSStFKey PSStSKey RgstOpSet RgstPackageNames StreamInit TrickyDictP }	{ CheckSharable ConditionalResetRecycler InvlAccess IsRecyclable PObject PRecycler RecyclerAddress RecyclerForObject SavObjMacro level vmPrivate vmShared wAccess }
VMPutGeneric		vm/saverestore.c	/^public procedure VMPutGeneric (gObject, newBody)/ ;" function 44 { PSCurrentGState VMCopyGeneric }	{ ABM_AllocateVM AllocVMAligned Assert CallFinalizeProc ConditionalResetRecycler GenericBody InvlAccess NULL PCard8 PGenericBody PSRG SRG escObj false header integer level privateRecycler rootPrivate wAccess }
VMPutNChars		vm/saverestore.c	/^public procedure VMPutNChars(so, str, count)/ ;" function 9 { VMPutText }	{ InvlAccess string wAccess }
VMPutText		vm/saverestore.c	/^public procedure VMPutText(so, str)  StrObj so; st/ ;" function 4 { CVT FFAAction PSMkTemp PSUClRead TextIntoString makestring }	{ StrLen VMPutNChars integer }
VMRgstFinalize		vm/saverestore.c	/^public procedure VMRgstFinalize(type, proc, reason/ ;" function 9 { DictInit IniGStates StreamInit }	{ Assert finalizeProcs finalizeReasons nObTypes }
VMRoot		include/vm.h	/^typedef struct _t_VMRoot {/ ;" typedef 35 { CreatePrivateVM CreateSharedVM PushSharedVMRoots PushVMRoots }	{ }
VMSTATICEVENTS		vm/vm_memory.c	/^#define VMSTATICEVENTS \\/ ;" macro 1 { Init_VM_Memory }	{ STATICEVENTFLAG }
VMSegment		vm/vm_segment.h	/^typedef struct _t_VMSegment {/ ;" typedef 15 { AppendSegmentHeader CreateSegmentPool ReadVM WriteRelocatedVMToFile WriteVMSection }	{ }
VMSegmentSize		vm/vm_segment.h	/^#define VMSegmentSize(v)	((v)->last - (v)->first +/ ;" macro 1 { ABM_BytesForBitmap Display_VM_Segment ExpandVMSection ReadVM }	{ }
VMSetRAMAlloc		vm/vm_memory.c	/^public procedure VMSetRAMAlloc() {SetVMSegmentType/ ;" function 1 { CreateSharedVM Init_VM_Memory StartVM }	{ SetVMSegmentType stPermanentRAM }
VMSetROMAlloc		vm/vm_memory.c	/^public procedure VMSetROMAlloc() {SetVMSegmentType/ ;" function 1 { CreateSharedVM Init_VM_Memory PSMakeVM RgstPackageNames }	{ SetVMSegmentType stROM }
VMStructure		include/vm.h	/^typedef struct _t_VMStructure {/ ;" typedef 19 { CreateVM ReadVM WriteRelocatedVMToFile WriteVMSection }	{ }
VMTcmd		fonts/fontbuild.c	/^#define VMTcmd	4/ ;" macro 1 { BuildChar CCRunStd }	{ }
VMVERSION		include/vm.h	/^#define VMVERSION ((SWITCHESVERSION*32) + 3)/ ;" macro 1 { CheckVersion CreateSharedVM }	{ SWITCHESVERSION }
VM_Context_Data		vm/vm_memory.c	/^private PVM_Data VM_Context_Data;/ ;" global 1 { Init_VM_Memory VM_Data_Handler }	{ }
VM_Data		vm/vm_memory.c	/^typedef struct {/ ;" typedef 4 { Init_VM_Memory }	{ }
VM_Data_Handler		vm/vm_memory.c	/^private procedure VM_Data_Handler (code)/ ;" function 17 { Init_VM_Memory }	{ VM_Context_Data vmCurrent vmPrivate }
VM_H		include/vm.h	/^#define	VM_H/ ;" macro 1 { }	{ }
VM_MEMORY_H		vm/vm_memory.h	/^#define	VM_MEMORY_H/ ;" macro 1 { }	{ }
VM_RELOCATE_H		vm/vm_relocate.h	/^#define	VM_RELOCATE_H/ ;" macro 1 { }	{ }
VM_REVERSE_H		vm/vm_reverse.h	/^#define	VM_REVERSE_H/ ;" macro 1 { }	{ }
VM_SEGMENT_H		vm/vm_segment.h	/^#define	VM_SEGMENT_H/ ;" macro 1 { }	{ }
VM_SPACE_H		vm/vm_space.h	/^#define	VM_SPACE_H/ ;" macro 1 { }	{ }
VM_Usage		vm/vm_segment.c	/^public procedure VM_Usage (vmStructure, Used, Size/ ;" function 34 { PSMakeVM PSVMStatus }	{ FreeBytesBehindStack Int32 PVMSegment current free register true }
VMerror		include/error.h	/^#define VMerror errorNames[24]/ ;" macro 1 { VMERROR }	{ errorNames }
VMpassword		vm/vm_segment.h	/^#define VMpassword 91239/ ;" macro 1 { CreateVM DisplayVMSection ReadVM }	{ }
ValidMID		fonts/fontshow.h	/^#define ValidMID() \\/ ;" macro 1 { DelayedMakeFont FindInCache GetFontAndCharInfo SSSOutCall ShowByName ShowInternal SimpleShowByName }	{ AlreadyValidMID ReValidateMID curMT gs }
ValidateCrossPtr		graphics/cscan.c	/^#define ValidateCrossPtr(ptr) \\/ ;" macro 1 { CheckHorizWhite DoXInflections EditBlackHoriz EditBlackSpace FillInRange SplicePixel }	{ }
ValidateObj		fonts/fontrun.c	/^#define ValidateObj(ob, t)		\\/ ;" macro 1 { KAEndCSDict KAKnown }	{ false }
ValidatePObj		postscript/customops.c	/^private ManagedItem *ValidatePObj(pobj) PObject po/ ;" function 14 { PSReleaseManagedObject }	{ ITEMSPERCHUNK ItemChunk ManagedItem NULL PCard8 Undefined chunks }
ValidateTA		devpattern/patternimpl.c	/^public boolean ValidateTA(s)/ ;" function 25 { Gry4Of4Setup ImS1XD11 ImSXXD11 MonoSetup SetupGrayPattern }	{ AllocScreenPrivate DEFAULTSCREEN DecStmByteCnt DevPrivate GetMemForTA NULL PScreenPrivate false ferror fread fseek haveFiles integer os_clearerr s slstm taTimeStamp true }
VecAdd		fp/mtxvec.c	/^public procedure VecAdd(v1, v2, v3) Cd v1, v2;  PC/ ;" function 2 { AddCirclePath FillLineSegment MiterPoint PathEndChar RTfmPCd ShowByName StrkCap StrkLnTo }	{ }
VecMul		fp/mtxvec.c	/^public procedure VecMul(v, pr, v2) Cd v; Preal pr;/ ;" function 2 { AdjstHW ArcToInternal FillLineSegment MiterPoint StrkCap StrkLnTo }	{ }
VecStrkTrp		graphics/stroke.c	/^private procedure VecStrkTrp(yt, yb, xtl, xtr, xbl/ ;" function 7 { DoStroke }	{ BresenhamMT Fixed }
VecSub		fp/mtxvec.c	/^public procedure VecSub(v1, v2, v3) Cd v1, v2;  PC/ ;" function 2 { ArcToInternal CCBuild FillLineSegment PSStrWidth PathEndChar StrkCap StrkLnTo }	{ }
VecTurn		fp/mtxvec.c	/^public integer VecTurn(v1, v2) Cd v1, v2;/ ;" function 6 { FillJoin }	{ RealEq0 RealLt0 real }
VertDir		graphics/cscan.c	/^#define VertDir		3/ ;" macro 1 { CSPathPoints FinishPath }	{ }
ViewClip		graphics/viewclip.h	/^typedef struct _viewclip {/ ;" typedef 6 { IniViewClip }	{ }
ViewClipCacheEntry		graphics/viewclip.c	/^typedef struct _viewclipce {/ ;" typedef 10 { IniViewClip }	{ }
ViewClipData		graphics/graphdata.h	/^typedef struct {	\/* Data for viewclip.c			*\// ;" typedef 4 { }	{ }
Vmem		fonts/fontspriv.h	/^#define Vmem 1		\/* volatile storage *\// ;" macro 1 { CheckCI FindInCache InsertMID IsAllocatedCI IsFreeCI IsNormalCI IsReleasedCI PSFlushFontCache PSFlushMasks PurgeMID ShowByName TrimCI pCIs }	{ }
WBCList		product/wbcontext.c	/^WBContext *WBCList = NULL;/ ;" global 1 { NSCreateWB NSDestroyWB PSPlaceWindow WBChangeBitmap WBOpenBitmap }	{ }
WBChangeBitmap		product/windowbitmap.c	/^void WBChangeBitmap(int wid)/ ;" function 31 { PSPlaceWindow }	{ Bounds CantHappen LBoundsAt LGetBacking Layer WBCList WBContext WBID2Layer scheduler strcpy true }
WBCloseBitmap		product/windowbitmap.c	/^int WBCloseBitmap(int wid)/ ;" function 26 { NSDestroyWB WBCoProc }	{ LFree Layer NXWB_ENOWIN NXWB_NOERR WBCopyLayer WBCurrentLayer currentLayer currentWBContext currentwin }
WBCoProc		product/wbcontext.c	/^static void WBCoProc()/ ;" function 81 { NSCreateWB }	{ CantHappen ContextYield NXWBMessage NXWBOpenMsg NXWB_CLOSE NXWB_FLUSH NXWB_FUNCTIONS NXWB_GET NXWB_NOERR NXWB_OPEN NXWB_PUT NXWB_SYNCFLUSH WBCloseBitmap WBError WBFlushBitmap WBGetBitmap WBMarkBitmap WBMsg_send WBNotifyNewShmem WBOpenBitmap YieldReason currentWBContext header scheduler }
WBContext		product/wbcontext.h	/^typedef struct _WBContext/ ;" typedef 13 { NSCreateWB NSDestroyWB PSPlaceWindow WBChangeBitmap WBOpenBitmap }	{ }
WBContextP		product/wbcontext.h	/^typedef struct _WBContext/ ;" typedef 13 { NSCreateWB }	{ }
WBCopyLayer		product/windowbitmap.c	/^static Layer *WBCopyLayer(Layer *oldLayer, WindowD/ ;" function 8 { WBCloseBitmap WBOpenBitmap }	{ BUFFERED Bounds LBoundsAt LNewAt NX_TWOBITGRAY }
WBCurrentLayer		product/windowbitmap.c	/^static boolean WBCurrentLayer(int wid)/ ;" function 14 { WBCloseBitmap WBFlushBitmap WBGetBitmap WBMarkBitmap WBOpenBitmap }	{ Layer NULL WBID2Layer currentLayer currentwid currentwin false true }
WBERROR		product/wberror.h	/^#define WBERROR		(NXWindowBitmapError != NULL)/ ;" macro 1 { }	{ NULL }
WBError		product/wbcontext.c	/^static void WBError(int etype)/ ;" function 12 { WBCoProc }	{ WBMsg_send currentWBContext scheduler true }
WBFlushBitmap		product/windowbitmap.c	/^int WBFlushBitmap(NXWBMessage *msg)/ ;" function 8 { WBCoProc }	{ LFlushBits NXWB_ENOWIN NXWB_NOERR WBCurrentLayer currentLayer }
WBGetBitmap		product/windowbitmap.c	/^int WBGetBitmap(NXWBMessage *msg)/ ;" function 21 { WBCoProc }	{ Bounds LBackingBounds LBoundsAt NXCoord NXWB_ENOWIN NXWB_NOERR WBCurrentLayer currentLayer header }
WBGetDeviceInfo		product/windowbitmap.c	/^void WBGetDeviceInfo(NXWBOpenMsg *msg, int wid)/ ;" function 23 { WBNotifyNewShmem WBOpenBitmap }	{ Bounds DeviceStatus LBackingBounds LBoundsAt LGetBacking LGetDeviceStatus Layer NULL NXCoord WBID2Layer d }
WBID2Layer		product/windowbitmap.c	/^static Layer *WBID2Layer(int wid)/ ;" function 13 { WBChangeBitmap WBCurrentLayer WBGetDeviceInfo }	{ NULL PWindowDevice currentwin windowBase }
WBMarkBitmap		product/windowbitmap.c	/^int WBMarkBitmap(NXWBMessage *msg)/ ;" function 20 { WBCoProc }	{ Bounds LAddToDirty LBackingBounds NXWB_ENOWIN NXWB_NOERR WBCurrentLayer currentLayer }
WBMsg_send		product/wbcontext.c	/^static msg_return_t WBMsg_send(msg_header_t *heade/ ;" function 11 { NSCreateWB WBCoProc WBError WBNotifyNewShmem }	{ ContextYield header }
WBNotifyNewShmem		product/wbcontext.c	/^void WBNotifyNewShmem(WBContext *wbc)/ ;" function 36 { WBCoProc }	{ NXWBOpenMsg NXWB_NOERR WBGetDeviceInfo WBMsg_send WBSHPATHLEN false header scheduler }
WBOpenBitmap		product/windowbitmap.c	/^int WBOpenBitmap(NXWBOpenMsg *msg)/ ;" function 61 { WBCoProc }	{ Bounds LBoundsAt LCopyContents LFree LGetBacking Layer NXWB_EDUP NXWB_ENOSHMEM NXWB_ENOSTAT NXWB_ENOWIN NXWB_NOERR WBCList WBContext WBCopyLayer WBCurrentLayer WBGetDeviceInfo currentLayer currentWBContext currentwid currentwin header strcpy }
WBSHPATHLEN		product/wbprotocol.h	/^#define WBSHPATHLEN	15/ ;" macro 1 { WBNotifyNewShmem }	{ }
WBmain		product/wbcontext.c	/^int WBmain(NSContextType *myEntry)/ ;" function 17 { NSLoadContextType }	{ NSContext NSCreateWB NSDestroyWB NSLoadWB NSTermWB NULL NXWB_CONTEXTID current currentWBContext }
WCDUMP_SHMEM		mousekeyboard/routines.c	/^#define WCDUMP_SHMEM()			os_fprintf(os_stderr, "sn/ ;" macro 1 { }	{ evp os_fprintf os_stderr }
WCOPY		mp/mp12.h	/^#define WCOPY 0/ ;" macro 1 { BUFFERSOURCEHW CONSTSOURCE MRMoveRect SetUpSource }	{ }
WCOPYBmALine		mp/copyline.c	/^void WCOPYBmALine(LineOperation *lop)/ ;" function 15 { }	{ data uint }
WCOPYBmULine		mp/copyline.c	/^void WCOPYBmULine(LineOperation *lop)/ ;" function 29 { }	{ MP12LOG2BD MP12SCANUNIT data uint }
WCOPYConLine		mp/copyline.c	/^void WCOPYConLine(LineOperation *lop)/ ;" function 15 { }	{ data s uint }
WCOPYPatLine		mp/copyline.c	/^void WCOPYPatLine(LineOperation *lop)/ ;" function 21 { }	{ data uint }
WCParams		include/mousekeyboard.h	/^typedef struct _WCParams {/ ;" typedef 16 { IPCInitializeStm PSCurrentWaitCursorEnabled stmWCParams }	{ }
WCTRACE		mousekeyboard/routines.c	/^#define WCTRACE(msg)			os_fprintf(os_stderr, (msg)/ ;" macro 1 { }	{ os_fprintf os_stderr }
WCTRACE1		mousekeyboard/routines.c	/^#define WCTRACE1(msg, a1)		os_fprintf(os_stderr, (/ ;" macro 1 { }	{ os_fprintf os_stderr }
WCTRACE2		mousekeyboard/routines.c	/^#define WCTRACE2(msg, a1, a2)		os_fprintf(os_stder/ ;" macro 1 { }	{ os_fprintf os_stderr }
WF0		mp/mp12.h	/^#define WF0 1	\/* SD *\// ;" macro 1 { MRMoveRect }	{ }
WF1		mp/mp12.h	/^#define WF1 2	\/* CEILING(S+D) *\// ;" macro 1 { MRMoveRect }	{ }
WF2		mp/mp12.h	/^#define WF2 3	\/* (1-S)D *\// ;" macro 1 { MRMoveRect }	{ }
WF3		mp/mp12.h	/^#define WF3 4	\/* S+D-SD *\// ;" macro 1 { MRMoveRect }	{ }
WF4		mp/mp12.h	/^#define WF4 5	\/* 1 - CEILING((1-S) + (1-D)) *** (t/ ;" macro 1 { BUFFERSOURCEHW MRMoveRect SetUpSource }	{ }
WHILEEITHER		include/windowdevice.h	/^#define WHILEEITHER 0x05/ ;" macro 1 { }	{ }
WHILELEFT		include/windowdevice.h	/^#define WHILELEFT 0x04/ ;" macro 1 { PostNotification }	{ }
WHILERIGHT		include/windowdevice.h	/^#define WHILERIGHT 0x01/ ;" macro 1 { PostNotification }	{ }
WHITE		bitmap/bm38.c	/^#define WHITE 	0xffffffff/ ;" macro 1 { }	{ }
WHITE_COLOR		include/bintree.h	/^#define WHITE_COLOR	0xFFFFFFFF/ ;" macro 1 { PInitialize }	{ }
WHITE_HIGH		graphics/cscan.c	/^#define WHITE_HIGH (0x118000L)	\/* 17.5 pt *\// ;" macro 1 { ResetCScan }	{ }
WHITE_LOW		graphics/cscan.c	/^#define WHITE_LOW  (0x68000L)	\/* 6.5 pt *\// ;" macro 1 { ResetCScan }	{ }
WIDEST_DEVICE		device/framedev.c	/^#define WIDEST_DEVICE 10000 \/* must be less than L/ ;" macro 1 { FmMark }	{ }
WIDTHSANITY		include/windowdevice.h	/^#define WIDTHSANITY	10000	\/* Maximum width of wind/ ;" macro 1 { PSPlaceWindow PSWindow }	{ }
WINDOWDEVICE		include/package_specs.h	/^#define WINDOWDEVICE	"windowdevice.h"/ ;" macro 1 { }	{ }
WINDOWDEVICE_H		include/windowdevice.h	/^#define WINDOWDEVICE_H/ ;" macro 1 { }	{ }
WINDOWLIMIT		include/windowdevice.h	/^#define WINDOWLIMIT	16000	\/* Maximum pos. or neg. / ;" macro 1 { PSMoveWindow PSPlaceWindow PSWindow }	{ }
WIN_MAX		include/windowdevice.h	/^#define WIN_MAX	    	256	\/* Maximum concurrent win/ ;" macro 1 { }	{ }
WLAboveButNotAbove		bintree/windowlist.c	/^SubList WLAboveButNotAbove(int op1, Layer *window1/ ;" function 35 { LMoveTo LOrder }	{ ABOVE NULL OUT SubList WLOffsetOf pwl }
WLAt		bintree/windowlist.c	/^static Layer *WLAt(int offset)/ ;" function 4 { GetFrontWindow GetNextWindow }	{ NULL pwl }
WLBelowButNotBelow		bintree/windowlist.c	/^SubList WLBelowButNotBelow(int op1, Layer *window1/ ;" function 35 { LFill LFind LFree LMoveTo LOrder PSCountScreenList PSOrderWindow PSScreenList PSSetWindowLevel }	{ ABOVE NULL OUT SubList WLOffsetOf pwl }
WLExpand		bintree/windowlist.c	/^static void WLExpand()/ ;" function 7 { WLPutAfter WLPutBefore }	{ Layer MAXWLSIZE PSLimitCheck WLGROWINC pwl }
WLGROWINC		bintree/windowlist.c	/^#define WLGROWINC 32		\/* Amount to grow by *\// ;" macro 1 { WLExpand WLInitialize }	{ }
WLInitialize		bintree/windowlist.c	/^void WLInitialize()/ ;" function 5 { LayerInit }	{ Layer WLGROWINC pwl }
WLOffsetOf		bintree/windowlist.c	/^static int WLOffsetOf(register Layer *window)/ ;" function 10 { GetNextWindow WLAboveButNotAbove WLBelowButNotBelow }	{ Layer pwl window }
WLPutAfter		bintree/windowlist.c	/^Layer *WLPutAfter(Layer *window1, Layer *window2)/ ;" function 23 { LOrder }	{ Layer NULL WLExpand pwl }
WLPutBefore		bintree/windowlist.c	/^Layer *WLPutBefore(Layer *window1, Layer *window2)/ ;" function 22 { LOrder }	{ Layer NULL WLExpand pwl }
WLRemove		bintree/windowlist.c	/^void WLRemove(Layer *window)/ ;" function 13 { LFree LOrder }	{ pwl register window }
WRAPEVENTS		product/timelog.c	/^#define WRAPEVENTS 1/ ;" macro 1 { }	{ }
WRAPPEDBIT		product/windowops.c	/^#define WRAPPEDBIT ((short)0x8000) \/* sign bit *\// ;" macro 1 { UniqueWindowId }	{ }
WaitOnJoinable		postscript/contextimpl.c	/^private procedure WaitOnJoinable(target) PSContext/ ;" function 19 { PSJoin }	{ Assert BreakLooseCV DURING END_HANDLER HANDLER NIL PSContext RERAISE currentPSContext true }
WannaYield		language/exec.c	/^public boolean WannaYield () {/ ;" function 4 { FmMark }	{ checkingYield clockLimit pTimeSliceClock yieldLoc1 yieldLoc2 }
WantToFinalize		vm/saverestore.h	/^#define WantToFinalize(type, reason) \\/ ;" macro 1 { CallFinalizeProc RstrGenericObjects }	{ finalizeReasons }
Wb		devpattern/imsxxd11.c	/^private Fixed Wr, Wg, Wb;/ ;" global 1 { ImSXXD11 }	{ }
Wd2Layer		product/windowops.c	/^public Layer *Wd2Layer(PWindowDevice wd)/ ;" function 4 { CompositePriv GetBoundsPopCd GetNextWindowDevice GlobalToLocal LInitPage LMark LocalToGlobal PSAdjustMouse PSDumpWindows PSFlushGraphics PSHideInstance PSNewInstance PSReadImage PSSetExposureColor PSSetMouse PSSetNRect PSSizeImage ScreenToBase SetGSCursor }	{ }
WdConvertColor		product/windowdevice.c	/^public DevColor WdConvertColor(PDevice device, int/ ;" function 18 { IniWdDevImpl }	{ AMulInPlace ConvertColorRGB DevColor NOGRAYPAT NULL OPAQUE PNextGSExt PSGetGStateExt r }
WdDefaultBounds		product/windowdevice.c	/^public procedure WdDefaultBounds(WindowDevice *dev/ ;" function 9 { IniWdDevImpl }	{ LGetSize }
WdDefaultMtx		product/windowdevice.c	/^public procedure WdDefaultMtx(WindowDevice *device/ ;" function 10 { IniWdDevImpl }	{ LGetSize NULL PSGetGStateExt REALSCALE d }
WdDeviceInfo		product/windowdevice.c	/^private procedure WdDeviceInfo(PDevice device, Dev/ ;" function 13 { IniWdDevImpl }	{ AddIntEntry CantHappen }
Wg		devpattern/imsxxd11.c	/^private Fixed Wr, Wg, Wb;/ ;" global 1 { ImSXXD11 }	{ }
WhiteMasksMark		device/whitemask.c	/^public procedure WhiteMasksMark(masks, items, args/ ;" function 347 { IniFmDevImpl }	{ Assert BANDMASKID DevMarkInfo DevPoint ExpandMask LSHIFT PCard16 PCard8 PMask PSCANTYPE RSHIFT SCANMASK SCANSHIFT SCANTYPE SCANUNIT boolean data devXAOffset false framebase framebytewidth framelog2BD integer register source2bits source4bits source8bits true until }
WhiteRunMark		device/whiterun.c	/^public procedure WhiteRunMark(run, args)/ ;" function 52 { IniFmDevImpl }	{ DevMarkInfo DevShort PSCANTYPE SCANSHIFT SCANTYPE data devXAOffset framebase framebytewidth framelog2BD integer leftBitArray lines register rightBitArray }
WindowDevice		include/windowdevice.h	/^typedef struct _wd {/ ;" typedef 20 { IniWindowOps Layer2Wd PSCountWindowList PSCurrentWindowLevel PSFillWindow PSOrderWindow PSSetWindowLevel checkOrderingValdity highestWindowInTier lowestWindowInTier }	{ }
WindowList		include/bintree.h	/^typedef struct _windowlist WindowList;/ ;" typedef 1 { }	{ }
Wr		devpattern/imsxxd11.c	/^private Fixed Wr, Wg, Wb;/ ;" global 1 { ImSXXD11 }	{ }
WriteContextParam		vm/saverestore.c	/^public procedure WriteContextParam (param, newValu/ ;" function 46 { PSEcho PSNormalUCache PSSetShared PSSetUCacheParams PSStCParams PSStPacking SetCacheLimit SetObjFormat }	{ NEW NIL PParam Param boolean level paramList }
WriteDefaultNetInfo		bintree/drivers.c	/^static void WriteDefaultNetInfo()/ ;" function 38 { DriverInit }	{ MEGAPIXEL NULL init_prop s }
WriteEvent		product/event.c	/^private procedure WriteEvent(Stm stm, NXEvent *ep,/ ;" function 53 { SendEvent }	{ EASY_FORMAT NXEvent NX_FLAGSCHANGED NX_KEYDOWN NX_KEYUP Swap2 Swap4 _eventHeader data eventHeader fwrite window }
WriteObject		language/binaryobject.c	/^private procedure WriteObject(stm)/ ;" function 270 { PSPrObject PSWrObject }	{ BOSHeader CantHappen Card32 Card8 GetStream InvlAccess LimitCheck Lobj MAXCard16 MAXCard8 MINALIGN NIL NULL NativeToIEEEHigh NativeToIEEELow Object PBObject PNameEntry PObject PopCardinal PopP PopPStream RangeCheck RecyclerPop RecyclerPush SWAP2 SWAP4 SWAPBITS Stm StmErr StmErrLong StmFWrite StmObj StmProcs StmRec StmUnGetc StmZero StreamError TypeCheck UObject Undefined arrayObj bo_mark boolObj boolean data escObj feof ferror fflush formatToType fwrite intObj integer nameObj nullObj objMark objectFormat of_disable of_highIEEE (etc) }
WriteRelocatedVMToFile		vm/makevm.c	/^private boolean WriteRelocatedVMToFile(name, romba/ ;" function 86 { PSMakeVM }	{ AppendSegmentData AppendSegmentHeader ApplyRelocation Assert BuildRelocationTable BuildSegmentTable EncodeAddress FreeSegmentTable NIL ResetNameCache SWAPBITS SetDictAccess Switches VMSegment VMStructure boolean current false fflush free integer level os_printf os_stdout rAccess relocationTable relocationTableSize rootShared stPermanentRAM stROM stVolatileRAM switches vSWAPBITS vVMSPLIT vmShared }
WriteRelocationTable		vm/makevm.c	/^private boolean WriteRelocationTable (vmStm)/ ;" function 30 { WriteVMToFile }	{ Assert NIL RelocationEntry SWAPBITS boolean fwrite integer relocationTable relocationTableSize true vSWAPBITS }
WriteVMSection		vm/makevm.c	/^private boolean WriteVMSection(vmTarget, vmFile)/ ;" function 48 { WriteVMToFile }	{ ContractVMSection EncodeAddress NIL PVMSegment SWAPBITS VMSegment VMStructure boolean current free fwrite integer os_printf vSWAPBITS }
WriteVMToFile		vm/makevm.c	/^private boolean WriteVMToFile(name)/ ;" function 53 { PSMakeVM }	{ BuildRelocationTable BuildSegmentTable FreeSegmentTable NIL NULL PCard8 SWAPBITS Stm Switches WriteRelocationTable WriteVMSection boolean false fclose fflush fwrite os_fopen os_printf os_stdout switches vSWAPBITS vmShared }
XA		fonts/fontshow.h	/^#define XA 0/ ;" macro 1 { }	{ }
XADoRdcPth		graphics/ucache.c	/^public DevPrim *XADoRdcPth(context)/ ;" function 6 { GetAperatureDP InUFill UCGetDevPrim }	{ DoRdcPth FillUserPathEnumerate QEnumOk QFillUserPathEnumerate UsrPthQRdcOk }
XADoRdcStroke		graphics/ucache.c	/^private DevPrim *XADoRdcStroke(context)/ ;" function 11 { UCGetDevPrim }	{ DoRdcStroke QEnumOk QStrokeUserPathEnumerate StrokeUserPathEnumerate UOffset uXARectangle uXAc1 uXAc2 }
XAFillPath		graphics/pathops.c	/^private procedure XAFillPath(path,evenOdd)	PPath p/ ;" function 5 { Fill }	{ FeedPathToReducer NULL QRdcOk procedure }
XARdc		graphics/ucache.c	/^public DevPrim *XARdc(RdcProc,context)/ ;" function 63 { GetAperatureDP InUFill UCGetDevPrim }	{ BBCompare Cd DURING DevCd DevPrim DisposeDevPrim END_HANDLER HANDLER InitDevPrim NULL NewDevPrim RERAISE TlatBBox UOffset chunkBBox maxXChunk maxYChunk register xChunkOffset xaOffset yChunkOffset }
XAReducePath		graphics/graphics.c	/^public procedure XAReducePath(RdcProc,path,evenOdd/ ;" function 74 { InFill InStroke InitClipPath ReducePathClipInt }	{ BBCompare Cd DURING DevCd DevPrim DisposeDevPrim END_HANDLER HANDLER InitDevPrim NULL NewDevPrim RERAISE TermClipDevPrim TlatPath chunkBBox maxXChunk maxYChunk os_freeelement register rpStorage xChunkOffset xaOffset yChunkOffset }
XAStrkPthProc		graphics/hitdetect.c	/^private XAStrkPthProc (path, bool)/ ;" function 6 { InStroke }	{ StrkPthProc }
XATrapTrapInt		graphics/maketrap.c	/^public integer XATrapTrapInt(t0, t1, yptr, callbac/ ;" function 28 { TrapTrapDispatch }	{ DevInterval DevShort DevTrap FixInt Fixed NULL TrapTrapInt register }
XA_MAX		graphics/path.h	/^#define XA_MAX CHUNKSIZE/ ;" macro 1 { DoRdcPth DoStroke FillBevel FillQuad OverlapChunk hiBnd }	{ CHUNKSIZE }
XA_MIN		graphics/path.h	/^#define XA_MIN -CHUNKSIZE/ ;" macro 1 { DoStroke FillBevel FillQuad loBnd }	{ CHUNKSIZE }
XAryObj		include/basictypes.h	/^#define	XAryObj(o,l,v)						\\/ ;" macro 1 { GetTfr PSClrTransfer PSCrBlkGeneration PSCrTransfer PSCrUCRemoval PSSetBlkGeneration PSSetClrTransfer PSSetTransfer PSSetUCRemoval Push3NullScreens ReadBinObjSeq }	{ LEVEL iXAryObj level vmCurrent }
XCmdObj		include/basictypes.h	/^#define	XCmdObj(o,i,v)						\\/ ;" macro 1 { CmdIndexObj PSRgstOps RgstDynamicCmd }	{ iXCmdObj }
XHGHTcmd		fonts/fontbuild.c	/^#define XHGHTcmd 29/ ;" macro 1 { BuildChar CCRunStd }	{ }
XNameObj		include/basictypes.h	/^#define	XNameObj(o,v)	o = iXNameObj; (o).val.nmval/ ;" macro 1 { AllocPName FastName StmToken }	{ iXNameObj }
XOR		include/bintree.h	/^#define XOR		10	\/* Exclusive-Or *\// ;" macro 1 { BMComposite34 BMComposite38 }	{ }
XOVResc		fonts/fontbuild.c	/^#define XOVResc 22/ ;" macro 1 { CCRunStd }	{ }
XPkdaryObj		include/basictypes.h	/^#define	XPkdaryObj(o,l,v)					\\/ ;" macro 1 { DecodeObj RelocateObj }	{ LEVEL iXPkdaryObj level vmCurrent }
XStrObj		include/basictypes.h	/^#define	XStrObj(o,l,v)						\\/ ;" macro 1 { }	{ LEVEL iXStrObj level vmCurrent }
XYShow		fonts/fontshow.c	/^public procedure XYShow(x, y) boolean x, y;/ ;" function 13 { PSXShow PSXYShow PSYShow }	{ BEGINSHOW ENDSHOW Object PopP PopPString SetupNumStrm ShowInternal ssr }
XatY		graphics/reducer.c	/^public Rational XatY(line, y, chooseLeft)/ ;" function 27 { Intersect RdcEntry }	{ Int32 PLine PLn PPoint PPt Rational r register }
XferState		coroutine/corouxfer.c	/^typedef integer XferState[STATELENGTH];/ ;" typedef 1 { }	{ }
XlatDictRef		include/vm.h	/^#define	XlatDictRef(pObj) \\/ ;" macro 1 { AllocCopyDict Begin CopyDict DictForAll DictLength DictTestP DumpDict EnumerateDict GC_WasCollected GetFontDirectory NextKeyVal PSMaxLength PSRCheck PSWCheck PrintDOB PutInDict SetDictAccess TracePrivateForShared TracePrivateVM UnDef copydict dknown trytoload }	{ DoDictXlat TrickyDict }
Xobj		include/basictypes.h	/^#define	Xobj	1	\/* tag for executable object *\// ;" macro 1 { AryToMrk BindArray BindPkdary CheckForPSNotify CheckStackElement DecodeObj DetermineFormat InitBOSTypeMap MakeXStr PSCvX PSEExec PSExecUserObj PSFontRun PSOpDef PSRgstNames PSRun PSXCheck RelocateObj }	{ }
Xxxxx		fonts/compshow.c	/^private integer Xxxxx(p, i) PCard8 p; integer i; {/ ;" function 3 { GetInfo }	{ GetMTPE p }
YCROSS		graphics/cscan.c	/^#define YCROSS(pixel) (yCross[pixel])	\/* Entry for/ ;" macro 1 { AddYCross BuildCxtn BuildInitialRuns BuildYCross EditBlackSpace EditWhiteHoriz EditWhiteSpace ExpandWhiteDropOuts FillInColumn FixupExtendLeft FixupExtendRight PixelIsBlack ReturnBits SetLeftFlag SplicePixel StartSplice }	{ yCross }
YDelta		graphics/maketrap.c	/^YDelta(edgeA, edgeB, yRange)/ ;" function 47 { TrapTrapInt }	{ FixInt register }
YatX		graphics/reducer.c	/^private Rational YatX(lowX, dx, lowY, dy, x)/ ;" function 18 { Intersect }	{ Int32 Rational r }
YieldByRequest		postscript/contextimpl.c	/^private procedure YieldByRequest ()/ ;" function 4 { ContextOpsInit RgstContextProcs }	{ NIL }
YieldOp		postscript/contextimpl.c	/^public procedure YieldOp () {/ ;" function 3 { }	{ NIL }
YieldReason		product/nscontexts.h	/^typedef enum {/ ;" typedef 14 { IPCFillBuf PSGetEvents PSListener WBCoProc }	{ }
YieldTimeLimit		postscript/contextimpl.c	/^private procedure YieldTimeLimit ()/ ;" function 4 { ContextOpsInit RgstContextProcs }	{ NIL }
ZapDelayedDict		fonts/compshow.c	/^private procedure ZapDelayedDict (d)/ ;" function 32 { DMFRestore }	{ CheckCI KeyVal NOLL NULL NullObj PDictBody PNameEntry d integer level nameObj register }
Zchunks		vm/vm_space.c	/^private integer Zchunks;/ ;" global 1 { PSPrintChunks }	{ }
_BM12Class		include/bitmap.h	/^typedef struct _BM12Class { \/* two-bit gray bitmap/ ;" struct 3 { }	{ }
_BM18Class		include/bitmap.h	/^typedef struct _BM18Class { \/* eight-bit gray bitm/ ;" struct 3 { }	{ }
_BM34Class		include/bitmap.h	/^typedef struct _BM34Class { \/* twelve-bit RGB bitm/ ;" struct 3 { }	{ }
_BM38Class		include/bitmap.h	/^typedef struct _BM38Class { \/* twenty-four-bit RGB/ ;" struct 3 { }	{ }
_BMClass		include/bitmap.h	/^typedef struct _BMClass {/ ;" struct 30 { }	{ }
_BMCompOp		include/bitmap.h	/^typedef struct _BMCompOp {/ ;" struct 15 { }	{ }
_Bitmap		include/bitmap.h	/^typedef struct _Bitmap {/ ;" struct 16 { }	{ }
_Bitmap12		include/bitmap.h	/^typedef struct _Bitmap12 {/ ;" struct 3 { }	{ }
_Bitmap18		include/bitmap.h	/^typedef struct _Bitmap18 {/ ;" struct 3 { }	{ }
_Bitmap34		include/bitmap.h	/^typedef struct _Bitmap34 {/ ;" struct 3 { }	{ }
_Bitmap38		include/bitmap.h	/^typedef struct _Bitmap38 {/ ;" struct 3 { }	{ }
_BufItem		language/stodevedit.c	/^typedef struct _BufItem {/ ;" struct 5 { }	{ }
_CScanBuffer		graphics/cscan.c	/^typedef struct _CScanBuffer {/ ;" struct 4 { }	{ }
_ChangeRecyclerExecLevel		include/recycler.h	/^#define _ChangeRecyclerExecLevel(newLevel, deeper)/ ;" macro 1 { ChangeRecyclerExecLevel }	{ privateRecycler sharedRecycler }
_Cross		graphics/cscan.c	/^typedef union _Cross {/ ;" struct 16 { }	{ }
_CrossFlags		graphics/cscan.c	/^typedef struct _CrossFlags {/ ;" struct 12 { }	{ }
_DataRecord		vm/staticdata.c	/^typedef struct _DataRecord {/ ;" struct 7 { }	{ }
_DictData		language/langdata.h	/^struct _DictData {/ ;" struct 3 { }	{ }
_E_RESTORE		include/except.h	/^#define	_E_RESTORE	_Exc_Header = Exception.Prev/ ;" macro 1 { E_RETURN E_RTRN_VOID HANDLER }	{ _Exc_Header }
_Exc_Buf		include/except.h	/^typedef struct _t_Exc_buf {/ ;" typedef 6 { DURING os_raise }	{ }
_Exc_Header		pslib/except.c	/^public _Exc_Buf *_Exc_Header;/ ;" global 1 { CoReturn CreateCoroutine DURING _E_RESTORE os_raise }	{ }
_ExecData		language/langdata.h	/^struct _ExecData {	\/* Data for exec implementation/ ;" struct 7 { }	{ }
_ExtendRecycler		include/recycler.h	/^#define	_ExtendRecycler(R, endOfVM)	\\/ ;" macro 1 { ExtendRecycler }	{ }
_Fbuild		fonts/fontbuild.h	/^#define _Fbuild	extern/ ;" macro 1 { }	{ }
_IPCData		product/ipcstream.h	/^typedef struct _IPCData {/ ;" struct 21 { }	{ }
_ImageMessage		include/imagemessage.h	/^typedef struct _ImageMessage {/ ;" struct 31 { }	{ }
_ImageMessageCell		product/windowimage.c	/^typedef struct _ImageMessageCell {/ ;" struct 5 { }	{ }
_ListenerState		product/listener.c	/^typedef enum _ListenerState {/ ;" struct 6 { }	{ }
_LocalBMClass		include/bitmap.h	/^typedef struct _LocalBMClass {/ ;" struct 24 { }	{ }
_LocalBitmap		include/bitmap.h	/^typedef struct _LocalBitmap {/ ;" struct 9 { }	{ }
_LokData		fonts/fontbuild.c	/^typedef struct _LokData/ ;" struct 8 { }	{ }
_MP12Class		mp/mp12.h	/^typedef struct _MP12Class {/ ;" struct 3 { }	{ }
_MPBitmap		mp/mp12.h	/^typedef struct _MPBitmap {/ ;" struct 3 { }	{ }
_MPMarkInfo		mp/mp12.h	/^typedef struct _MPMarkInfo {/ ;" struct 7 { }	{ }
_MathData		language/langdata.h	/^struct _MathData {	\/* Data for Math implementation/ ;" struct 3 { }	{ }
_NSContextType		product/nscontexts.h	/^typedef struct _NSContextType/ ;" struct 20 { }	{ }
_NXBag		include/bintree.h	/^typedef struct _NXBag {/ ;" struct 14 { }	{ }
_NXCursorInfo		include/bintree.h	/^typedef struct _NXCursorInfo {/ ;" struct 21 { }	{ }
_NXDevice		include/bintree.h	/^struct _NXDevice {/ ;" struct 12 { }	{ }
_NXDriver		include/bintree.h	/^struct _NXDriver {/ ;" struct 7 { }	{ }
_NXEvent		include/event.h	/^typedef struct _NXEvent {/ ;" struct 10 { }	{ }
_NXHook		include/bintree.h	/^typedef enum _NXHook {/ ;" struct 8 { }	{ }
_NXHookData		include/bintree.h	/^typedef struct _NXHookData {/ ;" struct 28 { }	{ }
_NXPoint		product/wbprotocol.h	/^typedef struct _NXPoint {	\/* point *\// ;" struct 3 { }	{ }
_NXPrintPageMessage		include/printmessage.h	/^typedef struct _NXPrintPageMessage {/ ;" struct 21 { }	{ }
_NXProcs		include/bintree.h	/^typedef struct _NXProcs {/ ;" struct 21 { }	{ }
_NXRect		product/wbprotocol.h	/^typedef struct _NXRect {	\/* rectangle *\// ;" struct 4 { }	{ }
_NXSize		product/wbprotocol.h	/^typedef struct _NXSize {	\/* size *\// ;" struct 3 { }	{ }
_NameChunk		language/name.c	/^typedef struct _NameChunk {/ ;" struct 5 { }	{ }
_ReclaimRecyclableVM		include/recycler.h	/^#define _ReclaimRecyclableVM()						\\/ ;" macro 1 { ReclaimRecyclableVM }	{ Assert InitRecycler PRecycler free vmCurrent }
_RecordFinalizableObject		vm/saverestore.c	/^public procedure _RecordFinalizableObject(obj)/ ;" function 23 { RecordFinalizableObject }	{ ABM_AllocateVM AllocVMAligned Assert ConditionalResetRecycler FinalizeNode NIL NULL PCard8 PFinalizeNode PRecycler PVMRoot RecyclerForObject finalizeReasons integer level rootPrivate rootShared }
_Recyclable		include/recycler.h	/^#define _Recyclable(pObject) \\/ ;" macro 1 { Recyclable }	{ IsRecyclableType ObjectInRecyclerRange }
_RecyclerPop		include/recycler.h	/^#define	_RecyclerPop(pObject)				\\/ ;" macro 1 { RecyclerPop }	{ Assert IsRecyclable PRecycler RecyclerForObject register }
_RecyclerPush		include/recycler.h	/^#define	_RecyclerPush(pObject)				\\/ ;" macro 1 { RecyclerPush }	{ IsRecyclable NIL PRecycler RecyclerForObject recyclerContextHandle true }
_ResetRecycler		include/recycler.h	/^#define	_ResetRecycler(R)	\\/ ;" macro 1 { ResetRecycler }	{ NIL false }
_SFCEntry		fonts/fontspriv.h	/^typedef struct _SFCEntry {/ ;" struct 10 { }	{ }
_ScannerData		language/langdata.h	/^struct _ScannerData {	\/* Data for scanner implemen/ ;" struct 7 { }	{ }
_SchedulerMsg		product/ipcscheduler.c	/^typedef struct _SchedulerMsg {/ ;" struct 5 { PSListener }	{ }
_ShowState		fonts/fontshow.h	/^typedef struct _ShowState {/ ;" struct 46 { }	{ }
_StackData		language/langdata.h	/^struct _StackData {	\/* Data for stack implementati/ ;" struct 7 { }	{ }
_StaticData		vm/staticdata.c	/^typedef struct _StaticData {/ ;" struct 6 { }	{ }
_StrExtension		language/scanner.c	/^typedef struct _StrExtension {/ ;" struct 4 { }	{ }
_StreamData		language/langdata.h	/^struct _StreamData {	\/* Data for stream implementa/ ;" struct 5 { }	{ }
_WBCONTEXTH_		product/wbcontext.h	/^#define _WBCONTEXTH_/ ;" macro 1 { }	{ }
_WBContext		product/wbcontext.h	/^typedef struct _WBContext/ ;" struct 13 { }	{ }
_WBERRORH_		product/wberror.h	/^#define _WBERRORH_/ ;" macro 1 { }	{ }
_WBPROTOCOLH_		product/wbprotocol.h	/^#define _WBPROTOCOLH_/ ;" macro 1 { }	{ }
_WCParams		include/mousekeyboard.h	/^typedef struct _WCParams {/ ;" struct 16 { }	{ }
__GNU__		fp/DEFSsun.h	/^#ifdef __GNU__ / ;" global 2 { }	{ }
_any		include/bintree.h	/^struct _any {/ ;" struct 3 { BAGCompositeFrom }	{ }
_appeol		language/grammar.h	/^#define _appeol 21/ ;" macro 1 { StmToken }	{ }
_appesc		language/grammar.h	/^#define _appesc 22/ ;" macro 1 { StmToken }	{ }
_appfrac		language/grammar.h	/^#define _appfrac 14/ ;" macro 1 { StmToken }	{ }
_appint		language/grammar.h	/^#define _appint 12/ ;" macro 1 { StmToken }	{ }
_appname		language/grammar.h	/^#define _appname 9/ ;" macro 1 { StmToken }	{ }
_appoct		language/grammar.h	/^#define _appoct 25/ ;" macro 1 { StmToken }	{ }
_appstr		language/grammar.h	/^#define _appstr 19/ ;" macro 1 { StmToken }	{ }
_array		language/array.h	/^#define _array extern/ ;" macro 1 { }	{ }
_begbnum		language/grammar.h	/^#define _begbnum 15/ ;" macro 1 { StmToken }	{ }
_begexp		language/grammar.h	/^#define _begexp 17/ ;" macro 1 { StmToken }	{ }
_begname		language/grammar.h	/^#define _begname 6/ ;" macro 1 { StmToken }	{ }
_begnum		language/grammar.h	/^#define _begnum 4/ ;" macro 1 { StmToken }	{ }
_begoct		language/grammar.h	/^#define _begoct 24/ ;" macro 1 { StmToken }	{ }
_begxnum		language/grammar.h	/^#define _begxnum 5/ ;" macro 1 { StmToken }	{ }
_begxtext		language/grammar.h	/^#define _begxtext 7/ ;" macro 1 { StmToken }	{ }
_bitpiece		bintree/bintreetypes.h	/^struct _bitpiece {		\/* 28 bytes *\// ;" struct 10 { }	{ }
_bitsorpatinfo		mp/mp12.h	/^typedef struct _bitsorpatinfo {/ ;" struct 21 { }	{ }
_bm34		bitmap/bm34.c	/^BM34Class _bm34 = {/ ;" global 12 { bm34 }	{ }
_bm38		bitmap/bm38.c	/^BM38Class _bm38 = {/ ;" global 12 { bm38 }	{ }
_bmClass		bitmap/bitmap.c	/^BMClass _bmClass = {/ ;" global 7 { bmClass }	{ }
_bnum		language/grammar.h	/^#define _bnum 37/ ;" macro 1 { StmToken }	{ }
_bounds		include/bintree.h	/^typedef struct _bounds {/ ;" struct 3 { }	{ }
_cache		fonts/cache.h	/^#define _cache extern/ ;" macro 1 { }	{ }
_causeset		bintree/bintreetypes.h	/^typedef struct _causeset {	\/* 8 bytes *\// ;" struct 5 { }	{ }
_compel		include/bintree.h	/^typedef union _compel {/ ;" struct 7 { }	{ }
_compositeinfo		include/bintree.h	/^typedef struct _compositeinfo { / ;" struct 8 { }	{ }
_devicestatus		include/bintree.h	/^typedef struct _devicestatus {/ ;" struct 6 { }	{ }
_dict		include/language.h	/^#define _dict extern/ ;" macro 1 { }	{ }
_discard		language/grammar.h	/^#define _discard 1/ ;" macro 1 { StmToken }	{ }
_divpiece		bintree/bintreetypes.h	/^struct _divpiece {		\/* 16 bytes *\// ;" struct 8 { }	{ }
_empty		language/grammar.h	/^#define _empty 44/ ;" macro 1 { LineComplete StmToken }	{ }
_ename		language/grammar.h	/^#define _ename 31/ ;" macro 1 { StmToken }	{ }
_errhex		language/grammar.h	/^#define _errhex 47/ ;" macro 1 { LineComplete StmToken }	{ }
_errini		language/grammar.h	/^#define _errini 46/ ;" macro 1 { LineComplete StmToken }	{ }
_error		include/error.h	/^#define _error extern/ ;" macro 1 { }	{ }
_errstr		language/grammar.h	/^#define _errstr 45/ ;" macro 1 { LineComplete StmToken }	{ }
_esceol		language/grammar.h	/^#define _esceol 23/ ;" macro 1 { StmToken }	{ }
_eventHeader		product/event.c	/^private readonly struct _eventHeader {/ ;" struct 9 { WriteEvent }	{ }
_exec		language/exec.h	/^#define _exec extern/ ;" macro 1 { }	{ }
_gclist		fonts/fontbuild.c	/^typedef struct _gclist {/ ;" struct 4 { }	{ }
_gclr		fonts/glbclr.h	/^typedef struct _gclr { \/* stem *\// ;" struct 24 { }	{ }
_gcntr		fonts/glbclr.h	/^typedef struct _gcntr { \/* counter *\// ;" struct 9 { }	{ }
_gray		graphics/gray.h	/^#define _gray extern/ ;" macro 1 { }	{ }
_gstack		graphics/gstack.h	/^typedef struct _gstack {/ ;" struct 4 { gstack }	{ }
_hstrg		language/grammar.h	/^#define _hstrg 33/ ;" macro 1 { StmToken }	{ }
_image		graphics/image.h	/^#define _image extern/ ;" macro 1 { }	{ }
_inline		include/language.h	/^_inline	\/*		IPopDiscard(PStack);*\// ;" global 1 { }	{ }
_inum		language/grammar.h	/^#define _inum 35/ ;" macro 1 { StmToken }	{ }
_layer		include/mousekeyboard.h	/^struct _layer;	\/* Doesn't affect compile, just pre/ ;" global 1 { }	{ }
_lineoperation		mp/mp12.h	/^typedef struct _lineoperation {/ ;" struct 5 { }	{ }
_lineoperationcommon		mp/mp12.h	/^typedef struct _lineoperationcommon {/ ;" struct 8 { }	{ }
_lname		language/grammar.h	/^#define _lname 29/ ;" macro 1 { StmToken }	{ }
_localBM		bitmap/bmlocal.c	/^LocalBMClass _localBM = {/ ;" global 34 { localBM }	{ }
_markrec		include/bintree.h	/^typedef struct _markrec {/ ;" struct 6 { }	{ }
_mp12		mp/mp12.c	/^MP12Class _mp12 = {/ ;" global 12 { MP12SetupPat mp12 }	{ }
_name		language/name.h	/^#define _name extern/ ;" macro 1 { }	{ }
_nextgsext		include/bintree.h	/^typedef struct _nextgsext {/ ;" struct 9 { }	{ }
_nrect		include/windowdevice.h	/^typedef struct _nrect {/ ;" struct 12 { }	{ }
_pattern		include/bintree.h	/^typedef struct _pattern {/ ;" struct 9 { }	{ }
_piece		bintree/bintreetypes.h	/^typedef union _piece {/ ;" struct 5 { }	{ }
_pkdary		language/packedarray.h	/^#define _pkdary extern/ ;" macro 1 { }	{ }
_point		include/bintree.h	/^typedef struct _point {/ ;" struct 3 { }	{ }
_priv		include/publictypes.h	/^#define	_priv	extern/ ;" macro 1 { }	{ }
_qreducer		graphics/reducer.h	/^#define _qreducer extern/ ;" macro 1 { }	{ }
_rdcrec		graphics/ucache.c	/^typedef struct _rdcrec {/ ;" struct 12 { }	{ }
_reducer		graphics/reducer.h	/^#define _reducer extern/ ;" macro 1 { }	{ }
_rgstcmds		include/orphans.h	/^#define	_rgstcmds	extern/ ;" macro 1 { }	{ }
_rnum		language/grammar.h	/^#define _rnum 39/ ;" macro 1 { StmToken }	{ }
_stack		include/language.h	/^#define _stack extern/ ;" macro 1 { }	{ }
_stream		include/language.h	/^#define _stream extern/ ;" macro 1 { }	{ }
_strg		language/grammar.h	/^#define _strg 32/ ;" macro 1 { LineComplete StmToken }	{ }
_string		include/language.h	/^#define _string extern/ ;" macro 1 { }	{ }
_strnest		language/grammar.h	/^#define _strnest 20/ ;" macro 1 { LineComplete StmToken }	{ }
_stroke		graphics/stroke.h	/^#define _stroke extern/ ;" macro 1 { }	{ }
_sublist		include/bintree.h	/^typedef struct _sublist {/ ;" struct 4 { }	{ }
_t_BBoxRec		include/graphics.h	/^typedef struct _t_BBoxRec {/ ;" struct 4 { }	{ }
_t_BMItem		device/maskcache.h	/^typedef struct _t_BMItem {/ ;" struct 4 { }	{ }
_t_CIItem		include/graphics.h	/^typedef struct _t_CIItem {		\/* Cache Item *\// ;" struct 11 { }	{ }
_t_Cache		fonts/cacheimpl.h	/^typedef struct _t_Cache {/ ;" struct 15 { }	{ }
_t_CacheEntHdr		fonts/cacheimpl.h	/^typedef struct _t_CacheEntHdr {/ ;" struct 8 { }	{ }
_t_CacheProcs		fonts/cache.h	/^typedef struct _t_CacheProcs {/ ;" struct 7 { }	{ }
_t_CachedColor		devpattern/colorpattern.c	/^typedef struct _t_CachedColor {/ ;" struct 5 { }	{ }
_t_Cd		include/publictypes.h	/^typedef struct _t_Cd {/ ;" struct 4 { }	{ }
_t_CharData		fonts/fontrun.h	/^typedef struct _t_CharData {/ ;" struct 10 { }	{ }
_t_CharMetrics		include/devicetypes.h	/^typedef struct _t_CharMetrics/ ;" struct 6 { }	{ }
_t_CharOffsetsEntry		fonts/fontrun.h	/^typedef struct _t_CharOffsetsEntry {/ ;" struct 8 { }	{ }
_t_CmdTable		include/orphans.h	/^typedef struct _t_CmdTable {/ ;" struct 4 { }	{ }
_t_ColorRec		include/graphics.h	/^typedef struct _t_ColorRec \/* color rendering obje/ ;" typedef 1 { }	{ }
_t_ColorSpaceParams		include/graphics.h	/^typedef struct _t_ColorSpaceParams {/ ;" struct 5 { }	{ }
_t_Condition		postscript/contextimpl.c	/^typedef struct _t_Condition { \/* concrete represen/ ;" struct 4 { }	{ }
_t_CoroutineRec		coroutine/corouxfer.c	/^typedef struct _t_CoroutineRec {\/* Coroutine concr/ ;" struct 8 { }	{ }
_t_DCPixelArgs		include/devcreate.h	/^typedef struct _t_DCPixelArgs/ ;" struct 21 { }	{ }
_t_DevBBoxRec		include/graphics.h	/^typedef struct _t_DevBBoxRec {/ ;" struct 4 { }	{ }
_t_DevBounds		include/devicetypes.h	/^typedef struct _t_DevBounds/ ;" struct 6 { }	{ }
_t_DevCd		include/publictypes.h	/^typedef struct _t_DevCd {/ ;" struct 4 { }	{ }
_t_DevColorData		include/devpattern.h	/^typedef struct _t_DevColorData {/ ;" struct 3 { }	{ }
_t_DevColorVal		include/devpattern.h	/^typedef struct _t_DevColorVal {/ ;" struct 3 { }	{ }
_t_DevFixedPoint		include/devicetypes.h	/^typedef struct _t_DevFixedPoint/ ;" struct 6 { }	{ }
_t_DevFlushMaskArgs		include/devicetypes.h	/^typedef struct _t_DevFlushMaskArgs/ ;" struct 9 { }	{ }
_t_DevHalftone		include/devicetypes.h	/^typedef struct _t_DevHalftone {/ ;" struct 7 { }	{ }
_t_DevImSampleDecode		include/devicetypes.h	/^typedef struct _t_DevImSampleDecode {/ ;" struct 3 { }	{ }
_t_DevImage		include/devicetypes.h	/^typedef struct _t_DevImage/ ;" struct 12 { }	{ }
_t_DevImageInfo		include/devicetypes.h	/^typedef struct _t_DevImageInfo/ ;" struct 11 { }	{ }
_t_DevImageSource		include/devicetypes.h	/^typedef struct _t_DevImageSource/ ;" struct 16 { }	{ }
_t_DevInputColor		include/devicetypes.h	/^typedef struct _t_DevInputColor {/ ;" struct 16 { }	{ }
_t_DevInterval		include/devicetypes.h	/^typedef struct _t_DevInterval/ ;" struct 6 { }	{ }
_t_DevLBounds		include/devicetypes.h	/^typedef struct _t_DevLBounds/ ;" struct 6 { }	{ }
_t_DevLInterval		include/devicetypes.h	/^typedef struct _t_DevLInterval/ ;" struct 6 { }	{ }
_t_DevMarkInfo		include/devicetypes.h	/^typedef struct _t_DevMarkInfo/ ;" struct 10 { }	{ }
_t_DevMask		include/devicetypes.h	/^typedef struct _t_DevMask/ ;" struct 6 { }	{ }
_t_DevPageImageProcsRec		include/devcreate.h	/^typedef struct _t_DevPageImageProcsRec/ ;" struct 30 { }	{ }
_t_DevPoint		include/devicetypes.h	/^typedef struct _t_DevPoint/ ;" struct 6 { }	{ }
_t_DevPrim		include/devicetypes.h	/^typedef struct _t_DevPrim/ ;" struct 20 { }	{ }
_t_DevProcs		include/device.h	/^typedef struct _t_DevProcs {/ ;" struct 47 { }	{ }
_t_DevRun		include/devicetypes.h	/^typedef struct _t_DevRun/ ;" struct 8 { }	{ }
_t_DevScreen		include/devicetypes.h	/^typedef struct _t_DevScreen {/ ;" struct 6 { }	{ }
_t_DevTfrFcn		include/devicetypes.h	/^typedef struct _t_DevTfrFcn {/ ;" struct 9 { }	{ }
_t_DevTrackingProcsRec		include/devcreate.h	/^typedef struct _t_DevTrackingProcsRec/ ;" struct 7 { }	{ }
_t_DevTrap		include/devicetypes.h	/^typedef struct _t_DevTrap/ ;" struct 7 { }	{ }
_t_DevTrapEdge		include/devicetypes.h	/^typedef struct _t_DevTrapEdge/ ;" struct 8 { }	{ }
_t_DevWhitePoint		include/devicetypes.h	/^typedef struct _t_DevWhitePoint {/ ;" struct 3 { }	{ }
_t_Device		include/device.h	/^typedef struct _t_Device {/ ;" struct 7 { }	{ }
_t_DeviceInfoArgs		include/devicetypes.h	/^typedef struct _t_DeviceInfoArgs/ ;" struct 11 { }	{ }
_t_DictBody		include/vm.h	/^typedef struct _t_DictBody {/ ;" struct 18 { }	{ }
_t_DirEntry		include/disk.h	/^typedef struct _t_DirEntry {	\/* directory entry *\// ;" struct 8 { }	{ }
_t_DiskAttributes		include/filesystem.h	/^typedef struct _t_DiskAttributes {\/* disk informat/ ;" struct 10 { }	{ }
_t_DiskOp		include/disk.h	/^typedef struct _t_DiskOp {	\/* disk operation recor/ ;" struct 10 { }	{ }
_t_DiskRec		include/disk.h	/^typedef struct _t_DiskRec {	\/* The Disk object, re/ ;" struct 50 { }	{ }
_t_Exc_buf		include/except.h	/^typedef struct _t_Exc_buf {/ ;" struct 6 { }	{ }
_t_FCd		include/publictypes.h	/^typedef struct _t_FCd {/ ;" struct 3 { }	{ }
_t_FMetrics		fonts/fontdata.h	/^typedef struct _t_FMetrics {/ ;" struct 3 { }	{ }
_t_FileAttributes		include/filesystem.h	/^typedef struct _t_FileAttributes {\/* file attribut/ ;" struct 10 { }	{ }
_t_FileEntry		fonts/fontrun.h	/^typedef struct _t_FileEntry {/ ;" struct 10 { }	{ }
_t_FileTag		fonts/fontrun.h	/^typedef struct _t_FileTag {/ ;" struct 4 { }	{ }
_t_FilterDataRec		language/streampriv.h	/^typedef struct _t_FilterDataRec {/ ;" struct 4 { }	{ }
_t_FinalizeNode		vm/saverestore.h	/^typedef struct _t_FinalizeNode {/ ;" struct 4 { }	{ }
_t_FontInfo		fonts/fontrun.h	/^typedef struct _t_FontInfo {/ ;" struct 7 { }	{ }
_t_FontrunState		fonts/fontrun.h	/^typedef struct _t_FontrunState {/ ;" struct 28 { }	{ }
_t_GC_Data		vm/gcinternal.h	/^typedef struct _t_GC_Data {\/* Garbage collector pe/ ;" struct 10 { }	{ }
_t_GState		include/graphics.h	/^typedef struct _t_GState {/ ;" struct 43 { }	{ }
_t_GamutTfrRec		include/graphics.h	/^typedef struct _t_GamutTfrRec \/* gamut transfer ob/ ;" typedef 1 { }	{ }
_t_GenericBody		include/vm.h	/^typedef	struct _t_GenericBody {/ ;" struct 7 { }	{ }
_t_HostDict		device/hostdict.h	/^typedef struct _t_HostDict {/ ;" struct 8 { }	{ }
_t_HostDictEntry		device/hostdict.h	/^typedef struct _t_HostDictEntry {/ ;" struct 6 { }	{ }
_t_IOStms		include/io.h	/^typedef struct _t_IOStms {	\/* return value from St/ ;" struct 3 { }	{ }
_t_ImageArgs		include/devimage.h	/^typedef struct  _t_ImageArgs {/ ;" struct 10 { }	{ }
_t_ImageProcsRec		include/devimage.h	/^typedef struct _t_ImageProcsRec {/ ;" struct 27 { }	{ }
_t_Int64		include/fp.h	/^typedef struct _t_Int64 {		\/* Double precision int/ ;" struct 7 { }	{ }
_t_IntersectPath		include/graphics.h	/^typedef struct _t_IntersectPath {/ ;" struct 5 { }	{ }
_t_ItemChunk		postscript/customops.c	/^typedef struct _t_ItemChunk {/ ;" struct 4 { }	{ }
_t_KeyVal		include/vm.h	/^typedef struct _t_KeyVal {/ ;" struct 4 { }	{ }
_t_KeywordAction		fonts/fontrun.h	/^typedef struct _t_KeywordAction {/ ;" struct 4 { }	{ }
_t_LdrHeader		include/disk.h	/^typedef struct _t_LdrHeader {	\/* fixed header for / ;" struct 11 { }	{ }
_t_Links		include/pslib.h	/^typedef struct _t_Links {/ ;" struct 3 { }	{ }
_t_ListPath		include/graphics.h	/^typedef struct _t_ListPath {/ ;" struct 6 { }	{ }
_t_Lock		postscript/contextimpl.c	/^typedef struct _t_Lock { \/* concrete representatio/ ;" struct 5 { }	{ }
_t_MakeMaskDevArgs		include/devicetypes.h	/^typedef struct _t_MakeMaskDevArgs/ ;" struct 9 { }	{ }
_t_MarkObject		vm/vm_relocate.h	/^typedef struct _t_MarkObject {/ ;" struct 8 { }	{ }
_t_MaskRec		include/devicetypes.h	/^typedef struct _t_MaskRec/ ;" struct 10 { }	{ }
_t_Mtx		include/fp.h	/^typedef struct _t_Mtx/ ;" struct 5 { }	{ }
_t_NameArrayBody		include/vm.h	/^typedef struct _t_NameArrayBody {/ ;" struct 6 { }	{ }
_t_NameEntry		include/vm.h	/^typedef struct _t_NameEntry {/ ;" struct 15 { }	{ }
_t_NumStrRec		include/language.h	/^typedef struct _t_NumStrRec {/ ;" struct 6 { }	{ }
_t_NumStrm		include/language.h	/^typedef struct _t_NumStrm {/ ;" struct 10 { }	{ }
_t_Object		include/basictypes.h	/^typedef struct _t_Object {/ ;" struct 31 { DoEUserPath }	{ }
_t_OutlineEntry		fonts/fontrun.h	/^typedef struct _t_OutlineEntry {/ ;" struct 5 { }	{ }
_t_OutlineTag		fonts/fontrun.h	/^typedef struct _t_OutlineTag {/ ;" struct 5 { }	{ }
_t_PSContextRec		include/postscript.h	/^typedef struct _t_PSContextRec {/ ;" struct 9 { }	{ }
_t_PSKernelContextRec		postscript/contextimpl.c	/^ typedef struct _t_PSKernelContextRec {/ ;" struct 30 { }	{ }
_t_PSObject		include/customops.h	/^typedef struct _t_PSObject {/ ;" struct 16 { }	{ }
_t_PSSchedulerContextRec		product/ipcscheduler.h	/^struct _t_PSSchedulerContextRec {/ ;" struct 39 { SchedulerInit }	{ }
_t_PSSpaceRec		postscript/contextimpl.c	/^typedef struct _t_PSSpaceRec {/ ;" struct 11 { }	{ }
_t_Path		include/graphics.h	/^typedef struct _t_Path {/ ;" struct 20 { }	{ }
_t_PatternData		include/devpattern.h	/^typedef struct _t_PatternData {/ ;" struct 7 { }	{ }
_t_PatternProcsRec		include/devpattern.h	/^typedef struct _t_PatternProcsRec {/ ;" struct 19 { }	{ }
_t_Pool		pslib/pool.c	/^typedef struct _t_Pool {/ ;" struct 8 { }	{ }
_t_PoolChunk		pslib/pool.c	/^typedef struct _t_PoolChunk {/ ;" struct 3 { }	{ }
_t_PoolElement		pslib/pool.c	/^typedef struct _t_PoolElement {/ ;" struct 3 { }	{ }
_t_PostScriptParameters		include/postscript.h	/^typedef struct _t_PostScriptParameters {/ ;" struct 52 { }	{ }
_t_PreBuiltArgs		include/devicetypes.h	/^typedef struct _t_PreBuiltArgs/ ;" struct 13 { }	{ }
_t_PrebuiltFile		device/prebuiltformat.h	/^typedef struct _t_PrebuiltFile {/ ;" struct 40 { }	{ }
_t_PrebuiltMask		device/prebuiltformat.h	/^typedef struct _t_PrebuiltMask {/ ;" struct 11 { }	{ }
_t_PrebuiltMatrix		device/prebuiltformat.h	/^typedef struct _t_PrebuiltMatrix {/ ;" struct 9 { }	{ }
_t_PrebuiltVertMetrics		device/prebuiltformat.h	/^typedef struct _t_PrebuiltVertMetrics {/ ;" struct 6 { }	{ }
_t_PrebuiltVertWidths		device/prebuiltformat.h	/^typedef struct _t_PrebuiltVertWidths {/ ;" struct 4 { }	{ }
_t_PrebuiltWidth		device/prebuiltformat.h	/^typedef struct _t_PrebuiltWidth {/ ;" struct 4 { }	{ }
_t_PthElt		include/graphics.h	/^typedef struct _t_PthElt {/ ;" struct 5 { }	{ }
_t_PubLangCtxt		include/language.h	/^typedef struct _t_PubLangCtxt {/ ;" struct 3 { }	{ }
_t_QuadPath		include/graphics.h	/^typedef struct _t_QuadPath {/ ;" struct 4 { }	{ }
_t_RMetrics		fonts/fontdata.h	/^typedef struct _t_RMetrics {/ ;" struct 3 { }	{ }
_t_Recycler		include/recycler.h	/^typedef struct _t_Recycler {/ ;" struct 8 { }	{ }
_t_ReducedPath		include/graphics.h	/^typedef struct _t_ReducedPath {/ ;" struct 4 { }	{ }
_t_RelocationEntry		vm/vm_relocate.h	/^typedef struct _t_RelocationEntry {/ ;" struct 4 { }	{ }
_t_RenderingRec		include/graphics.h	/^typedef struct _t_RenderingRec \/* color rendering / ;" typedef 1 { }	{ }
_t_RgCmdEntry		include/orphans.h	/^typedef struct _t_RgCmdEntry {/ ;" struct 4 { }	{ }
_t_RgNameEntry		include/orphans.h	/^typedef struct _t_RgNameEntry {/ ;" struct 4 { }	{ }
_t_RgOpEntry		include/customops.h	/^typedef struct _t_RgOpEntry {/ ;" struct 4 { }	{ }
_t_RunEntry		include/disk.h	/^typedef struct _t_RunEntry {	\/* run table entry *\// ;" struct 4 { }	{ }
_t_RunTable		include/disk.h	/^typedef struct _t_RunTable {	\/* run table *\// ;" struct 16 { }	{ }
_t_SR		vm/saverestore.h	/^typedef struct _t_SR {/ ;" struct 8 { }	{ }
_t_SRD		vm/saverestore.h	/^typedef struct _t_SRD {/ ;" struct 5 { }	{ }
_t_SRG		vm/saverestore.h	/^typedef struct _t_SRG {/ ;" struct 5 { }	{ }
_t_SRO		vm/saverestore.h	/^typedef struct _t_SRO {/ ;" struct 5 { }	{ }
_t_ScreenRec		include/graphics.h	/^typedef struct _t_ScreenRec {/ ;" struct 10 { }	{ }
_t_SegmentAddress		vm/vm_relocate.h	/^typedef struct _t_SegmentAddress {/ ;" struct 14 { }	{ }
_t_SegmentTable		vm/vm_relocate.c	/^typedef struct _t_SegmentTable {/ ;" struct 13 { }	{ }
_t_SpotFunction		include/graphics.h	/^typedef struct _t_SpotFunction {/ ;" struct 4 { }	{ }
_t_Stack		include/language.h	/^typedef struct _t_Stack {/ ;" struct 6 { }	{ }
_t_StmBody		include/vm.h	/^typedef struct _t_StmBody {/ ;" struct 10 { }	{ }
_t_StmProcs		include/stream.h	/^typedef struct _t_StmProcs {	\/* Procedure record f/ ;" struct 18 { }	{ }
_t_StmRec		include/stream.h	/^typedef struct _t_StmRec {	\/* Generic stream insta/ ;" struct 19 { }	{ }
_t_StoDev		include/stodev.h	/^typedef struct _t_StoDev {	\/* Storage Device insta/ ;" struct 18 { }	{ }
_t_StoDevAttributes		include/stodev.h	/^typedef struct _t_StoDevAttributes {\/* Result reco/ ;" struct 5 { }	{ }
_t_StoDevFileAttributes		include/stodev.h	/^typedef struct _t_StoDevFileAttributes {\/* Result / ;" struct 10 { }	{ }
_t_StoDevProcs		include/stodev.h	/^typedef struct _t_StoDevProcs { \/* Storage Device / ;" struct 124 { }	{ }
_t_StrkPath		include/graphics.h	/^typedef struct _t_StrkPath {/ ;" struct 17 { }	{ }
_t_SysRoot		include/disk.h	/^typedef struct _t_SysRoot {	\/* data page 0 of syst/ ;" struct 16 { }	{ }
_t_TTLRec		language/dict.c	/^typedef struct _t_TTLRec {PKeyVal kvl; PDictBody d/ ;" struct 1 { }	{ }
_t_TfrFncRec		include/graphics.h	/^typedef struct _t_TfrFncRec \/* transfer function o/ ;" typedef 1 { }	{ }
_t_ThresholdArray		include/graphics.h	/^typedef struct _t_ThresholdArray {/ ;" struct 4 { }	{ }
_t_VMPrivateData		vm/vm_memory.h	/^typedef struct _t_VMPrivateData {/ ;" struct 4 { }	{ }
_t_VMRoot		include/vm.h	/^typedef struct _t_VMRoot {/ ;" struct 35 { }	{ }
_t_VMSegment		vm/vm_segment.h	/^typedef struct _t_VMSegment {/ ;" struct 15 { }	{ }
_t_VMStructure		include/vm.h	/^typedef struct _t_VMStructure {/ ;" struct 19 { }	{ }
_type		include/language.h	/^#define _type extern/ ;" macro 1 { }	{ }
_ubnum		language/grammar.h	/^#define _ubnum 36/ ;" macro 1 { StmToken }	{ }
_ucacherec		graphics/ucache.c	/^typedef struct _ucacherec {/ ;" struct 14 { }	{ }
_uename		language/grammar.h	/^#define _uename 30/ ;" macro 1 { LineComplete StmToken }	{ }
_uinum		language/grammar.h	/^#define _uinum 34/ ;" macro 1 { LineComplete StmToken }	{ }
_ulname		language/grammar.h	/^#define _ulname 28/ ;" macro 1 { LineComplete StmToken }	{ }
_urnum		language/grammar.h	/^#define _urnum 38/ ;" macro 1 { LineComplete StmToken }	{ }
_uxname		language/grammar.h	/^#define _uxname 26/ ;" macro 1 { LineComplete StmToken }	{ }
_viewclip		graphics/viewclip.h	/^typedef struct _viewclip {/ ;" struct 6 { }	{ }
_viewclipce		graphics/viewclip.c	/^typedef struct _viewclipce {/ ;" struct 10 { }	{ }
_vm		include/vm.h	/^#define _vm extern/ ;" macro 1 { }	{ }
_wd		include/windowdevice.h	/^typedef struct _wd {/ ;" struct 20 { }	{ }
_windowlist		bintree/bintreetypes.h	/^struct _windowlist {		\/* 12 bytes *\// ;" struct 5 { }	{ }
_xname		language/grammar.h	/^#define _xname 27/ ;" macro 1 { StmToken }	{ }
a0		fp/DEFSmach.h	/^#define MCOUNT		 lea 277$,a0;\\/ ;" global 1 { BezierDivide FixedBezDiv MulUn22 }	{ }
aAccess		include/basictypes.h	/^#define	aAccess	7/ ;" macro 1 { }	{ }
abfn		language/grammar.h	/^#define abfn 51/ ;" macro 1 { StmToken }	{ }
abtokhdr		language/grammar.h	/^#define abtokhdr 52/ ;" macro 1 { StmToken }	{ }
abtokhi		language/grammar.h	/^#define abtokhi 48/ ;" macro 1 { StmToken }	{ }
abtoklo		language/grammar.h	/^#define abtoklo 49/ ;" macro 1 { StmToken }	{ }
abtokn		language/grammar.h	/^#define abtokn 50/ ;" macro 1 { StmToken }	{ }
adbeg		language/grammar.h	/^#define adbeg 42/ ;" macro 1 { StmToken }	{ }
addPath		graphics/pathreduce.c	/^private PPath addPath;/ ;" global 1 { CallAddTrapToPath ConvertToListPath }	{ }
adend		language/grammar.h	/^#define adend 43/ ;" macro 1 { StmToken }	{ }
adobeFID		fonts/fontspriv.h	/^#define adobeFID 1/ ;" macro 1 { FndFntSibling PSDefineFont }	{ }
adobeType1FontComment		fonts/fontrun.c	/^private char adobeType1FontComment[] = "%!PS-Adobe/ ;" global 1 { DetermineFormat }	{ }
adz_fixed_tfm		fonts/fontmatrix.c	/^private procedure adz_fixed_tfm(c, ct) FCd c; PFCd/ ;" function 5 { SetMtxProcs }	{ Fixed PFixMtx fixmul fntmtx register }
adz_frac_tfm		fonts/fontmatrix.c	/^private procedure adz_frac_tfm(c, ct) FCd c; PFCd / ;" function 5 { SetMtxProcs }	{ Fixed PFracMtx fntmtx fr fxfrmul register }
allSegmentsIn		graphics/stroke.c	/^          allSegmentsIn,/ ;" global 1 { DoStroke FillBevel FillQuad }	{ }
allocmem		fonts/fontspriv.h	/^#define allocmem 2	\/* allocated but not completely/ ;" macro 1 { CIAlloc InitFontCache MTAlloc }	{ }
alphaOp		mp/mp12.c	/^static const char alphaOp[NCOMPOSITEOPS][2] = {/ ;" global 18 { MP12Composite }	{ }
alwaysErode		fonts/fontbuild.c	/^public boolean alwaysErode;/ ;" global 1 { FontBuildInit GetErosion PSAlwaysErode }	{ }
anyRedraws		product/windowops.c	/^private boolean anyRedraws; \/* any update rects si/ ;" global 1 { ChangedWindowDevice FlushRedrawRects RedrawWindowDevice }	{ }
aovrname		fonts/fontbuild.c	/^                   xovrname, capovrname, aovrname,/ ;" global 1 { CCRunStd }	{ }
appbnum		language/grammar.h	/^#define appbnum 16/ ;" macro 1 { StmToken }	{ }
appfrac		language/grammar.h	/^#define appfrac 13/ ;" macro 1 { StmToken }	{ }
apphex		language/grammar.h	/^#define apphex 10/ ;" macro 1 { StmToken }	{ }
appint		language/grammar.h	/^#define appint 11/ ;" macro 1 { StmToken }	{ }
appname		language/grammar.h	/^#define appname 8/ ;" macro 1 { StmToken }	{ }
appstr		language/grammar.h	/^#define appstr 18/ ;" macro 1 { StmToken }	{ }
arcNm		graphics/userpath.c	/^#define arcNm graphicsNames[nm_arc].val.nmval/ ;" macro 1 { DoUserPath QDoUserPath UsrPthQRdcOk }	{ graphicsNames nm_arc }
arcnNm		graphics/userpath.c	/^#define arcnNm graphicsNames[nm_arcn].val.nmval/ ;" macro 1 { DoUserPath QDoUserPath UsrPthQRdcOk }	{ graphicsNames nm_arcn }
arctNm		graphics/userpath.c	/^#define arctNm graphicsNames[nm_arct].val.nmval/ ;" macro 1 { DoUserPath QDoUserPath UsrPthQRdcOk }	{ graphicsNames nm_arct }
arg		bintree/bounds.c	/^void FindDiffBounds(Bounds *minus, Bounds *sum, vo/ ;" global 2 { CallAsCoroutine CoroutineRootProc FontEnumOneDir FontEnumerate GetCArg GetCSwitch MIDPurgedByGC MIDPurgedByRestore PATTERN PurgeMM RdBytesCopy TempCoroutineProc UDEnumerate UsrPthCheckMtLt }	{ }
argsUsed		vm/arguments.c	/^private char *argsUsed;		\/* boolean array parallel/ ;" global 1 { BeginParseArguments EndParseArguments GetCArg GetCSwitch }	{ }
arrayObj		include/basictypes.h	/^#define	arrayObj	9/ ;" macro 1 { AFAProc AGetP ATail BinObjInit BindArray BindPkdary BuildMultiRectPath CheckCompositeFont CheckForMtx CheckIfEncodedUserPath ChrMapBuildChar CopyNumStrmForCache DMFRestore DelayedMakeFont EncCharNameProc EqNumStrmCache Equal ExecPushP FreeShowState GetMetrics GetMetrics2 GetStemWidth HashArray ImageDict ImageInternal InFill InStroke InUFill InternalBuildChar ModifyCachingParams MtxToPAry NextKeyVal PAryToMtx PSBind PSDTfm PSDefineFont PSExCheck PSFork PSIDTfm PSITfm PSInUStroke PSMonitor PSPutArray PSRectFill PSRtat PSScal PSSelectFont PSSetColorScreen PSSetScreen PSTfm PSTlat PopPArray PrintObj PrintVal ReadBinObjSeq RelocateObj SetupNumStrm SizeNumStrmForCache StmToken TypeOfObj (etc) }	{ }
arrayType		include/customops.h	/^#define	arrayType	9/ ;" macro 1 { }	{ }
arraycmd		language/array.c	/^private NameObj arraycmd;/ ;" global 1 { AFAProc ArrayInit AryForAll }	{ }
ascndname		fonts/fontbuild.c	/^                   xhghtname, dscndname, ascndname/ ;" global 1 { CCRunStd }	{ }
asyncDriversExist		bintree/layer.c	/^int asyncDriversExist;          \/* True if >0 driv/ ;" global 1 { DriverInit sendAck }	{ }
atcurve		graphics/stroke.c	/^          atcurve,/ ;" global 1 { FF_StrkLnTo FF_StrkStrt StrkCurve StrkLnTo StrkStrt }	{ }
autoPrivate		vm/gcmisc.c	/^public boolean autoShared, autoPrivate;/ ;" global 1 { ABM_Allocate ABM_AllocateVM GCInternal_Init GC_MoveRecycleRange PSCollect }	{ }
autoShared		vm/gcmisc.c	/^public boolean autoShared, autoPrivate;/ ;" global 1 { ABM_Allocate ABM_AllocateVM GCInternal_Init GC_MoveRecycleRange PSCollect }	{ }
axbeg		language/grammar.h	/^#define axbeg 40/ ;" macro 1 { LineComplete StmToken }	{ }
axend		language/grammar.h	/^#define axend 41/ ;" macro 1 { LineComplete StmToken }	{ }
ba_bool		language/grammar.h	/^#define ba_bool 7/ ;" macro 1 { StmToken }	{ }
ba_fixed		language/grammar.h	/^#define ba_fixed 4/ ;" macro 1 { StmToken }	{ }
ba_int16		language/grammar.h	/^#define ba_int16 2/ ;" macro 1 { StmToken }	{ }
ba_int32		language/grammar.h	/^#define ba_int32 1/ ;" macro 1 { StmToken }	{ }
ba_int8		language/grammar.h	/^#define ba_int8 3/ ;" macro 1 { StmToken }	{ }
ba_lstr		language/grammar.h	/^#define ba_lstr 9/ ;" macro 1 { StmToken }	{ }
ba_numArray		language/grammar.h	/^#define ba_numArray 12/ ;" macro 1 { StmToken }	{ }
ba_objSeq		language/grammar.h	/^#define ba_objSeq 0/ ;" macro 1 { StmToken }	{ }
ba_realIEEE		language/grammar.h	/^#define ba_realIEEE 5/ ;" macro 1 { StmToken }	{ }
ba_realNative		language/grammar.h	/^#define ba_realNative 6/ ;" macro 1 { StmToken }	{ }
ba_sstr		language/grammar.h	/^#define ba_sstr 8/ ;" macro 1 { StmToken }	{ }
ba_systemName		language/grammar.h	/^#define ba_systemName 10/ ;" macro 1 { StmToken }	{ }
ba_userName		language/grammar.h	/^#define ba_userName 11/ ;" macro 1 { StmToken }	{ }
bagPool		bintree/bag.c	/^static char *bagPool;  \/* Blind pointer to storage/ ;" global 1 { BAGFree BAGInitialize BAGNew }	{ }
baseLimitDiv10		language/scanner.c	/^private Card32 baseLimitDiv10;	\/* Static initialis/ ;" global 1 { ScannerInit StmToken }	{ }
baseLimitMod10		language/scanner.c	/^private Card32 baseLimitMod10;/ ;" global 1 { ScannerInit StmToken }	{ }
bbase		language/grammar.h	/^#define bbase 9/ ;" macro 1 { }	{ }
bbaseState		language/scanner.c	/^private readonly StateRec bbaseState = {/ ;" global 15 { }	{ }
bbox2		graphics/fflattenpath.c	/^#define bbox2 (p[1])/ ;" macro 1 { FMiniFltn }	{ p }
bboxname		fonts/fontbuild.c	/^                   xhghtname, dscndname, ascndname/ ;" global 1 { GetFontBBox }	{ }
bcz_fixed_tfm		fonts/fontmatrix.c	/^private procedure bcz_fixed_tfm(c, ct) FCd c; PFCd/ ;" function 5 { SetMtxProcs }	{ Fixed PFixMtx d fixmul fntmtx register }
bcz_frac_tfm		fonts/fontmatrix.c	/^private procedure bcz_frac_tfm(c, ct) FCd c; PFCd / ;" function 5 { SetMtxProcs }	{ Fixed PFracMtx d fntmtx fr fxfrmul register }
beginDAcmd		language/scanner.c	/^private NameObj beginDAcmd, endDAcmd;/ ;" global 1 { ScannerInit StmToken }	{ }
bevelJoin		graphics/graphicspriv.h	/^#define bevelJoin 2/ ;" macro 1 { PSSetLineJoin }	{ }
bfn		language/classarray.h	/^  bfn,						\/* 137 *\// ;" global 1 { }	{ }
binClassArray		language/scanner.c	/^private readonly Class binClassArray[] = {/ ;" global 5 { LineComplete ScannerInit StmToken }	{ }
binaryToHex		language/stream.c	/^private readonly char binaryToHex[] = "0123456789a/ ;" global 1 { PSWrtHexString }	{ }
bitPiecePool		bintree/bitpiece.c	/^static char *bitPiecePool;		\/* Blind ptr to BitPie/ ;" global 1 { BPCopy BPFree BPInitialize BPNewAt }	{ }
bitmapAddrInited		mp/mp.c	/^static int bitmapAddrInited = 0;/ ;" global 1 { MP12SetBitmapExtent }	{ }
blackpattern		bintree/layer.c	/^Pattern *blackpattern;/ ;" global 1 { MP12Composite PInitialize }	{ }
blfuzznm		fonts/fontbuild.c	/^                   bluename, mnftrnm, blfuzznm, su/ ;" global 1 { CCRunStd }	{ }
blimit		graphics/ucache.c	/^#define	blimit	(graphicsStatics->uCache._blimit)/ ;" macro 1 { EnterPathInCache PSNormalUCache PSSetUCacheParams PSUCacheStatus UCGetDevPrim UCacheDataHandler }	{ graphicsStatics }
blueScale		fonts/fontbuild.c	/^#define blueScale (fontCtx->fontBuild._blueScale)/ ;" macro 1 { BlueLock BuildChar CCRunStd CheckBlueScale }	{ fontCtx }
blueScaleName		fonts/fontbuild.c	/^                   blueShiftName, blueScaleName, l/ ;" global 1 { CCRunStd }	{ }
blueShiftName		fonts/fontbuild.c	/^                   blueShiftName, blueScaleName, l/ ;" global 1 { CCRunStd }	{ }
blueShiftStart		fonts/fontbuild.c	/^#define blueShiftStart (fontCtx->fontBuild._blueSh/ ;" macro 1 { BlueLock BuildChar CCRunStd }	{ fontCtx }
blueThresholds		devpattern/imagepriv.h	/^#define blueThresholds pixelThresholds/ ;" macro 1 { }	{ pixelThresholds }
blueValues		devpattern/imagepriv.h	/^#define blueValues pixelValues/ ;" macro 1 { }	{ }
bluename		fonts/fontbuild.c	/^                   bluename, mnftrnm, blfuzznm, su/ ;" global 1 { GetBlueValues }	{ }
bm12		include/bitmap.h	/^#define bm12    ((BMClass *)&_bm12)/ ;" macro 1 { }	{ BMClass }
bm18		include/bitmap.h	/^#define bm18	((BMClass *)&_bm18)/ ;" macro 1 { }	{ BMClass }
bm34		include/bitmap.h	/^#define bm34	((BMClass *)&_bm34)/ ;" macro 1 { MPInitScreen }	{ BMClass _bm34 }
bm34DevHalftone		bitmap/bm34.c	/^DevHalftone bm34DevHalftone;/ ;" global 1 { BM34InitClassVars }	{ }
bm34DevScreen		bitmap/bm34.c	/^static DevScreen bm34DevScreen;/ ;" global 1 { BM34InitClassVars }	{ }
bm34Thresholds		bitmap/bm34.c	/^static const unsigned char bm34Thresholds[64] = {/ ;" global 10 { BM34InitClassVars }	{ }
bm38		include/bitmap.h	/^#define bm38	((BMClass *)&_bm38)/ ;" macro 1 { }	{ BMClass _bm38 }
bmBase		device/maskcache.c	/^private PBMItem bmBase, bmFree, bmScratch;/ ;" global 1 { CheckBM CompactBM GrowBM InitMaskCache ShrinkBM }	{ }
bmBytes		device/maskcache.c	/^private integer bmUsed, bmSize, bmBytes, bmMinSize/ ;" global 1 { DevSetMaskCacheSize GrowBM InitMaskCache ShrinkBM }	{ }
bmClass		include/bitmap.h	/^#define bmClass ((BMClass *)&_bmClass)/ ;" macro 1 { LBMFree LBMInitClassVars LBMNew LBMNewFromData }	{ BMClass _bmClass }
bmClassFromDepth		bintree/layer.c	/^static BMClass *bmClassFromDepth[] = {mp12, mp12, / ;" global 1 { LCopyBitsFrom MPNewWindow MPPromoteWindow MPStart }	{ }
bmClassFromDepth_COLOR		mp/mp.c	/^static BMClass *bmClassFromDepth_COLOR[] = {mp12, / ;" global 1 { MPStart }	{ }
bmClassFromDepth_MONO		mp/mp.c	/^static BMClass *bmClassFromDepth_MONO[] = {mp12, m/ ;" global 1 { MPStart }	{ }
bmFree		device/maskcache.c	/^private PBMItem bmBase, bmFree, bmScratch;/ ;" global 1 { BMAlloc BMLink BMUnlink CheckBM CompactBM GrowBM InitMaskCache ShrinkBM }	{ }
bmMaxSize		device/maskcache.c	/^private integer bmUsed, bmSize, bmBytes, bmMinSize/ ;" global 1 { DevSetMaskCacheSize InitMaskCache }	{ }
bmMinSize		device/maskcache.c	/^private integer bmUsed, bmSize, bmBytes, bmMinSize/ ;" global 1 { DevSetMaskCacheSize InitMaskCache }	{ }
bmScratch		device/maskcache.c	/^private PBMItem bmBase, bmFree, bmScratch;/ ;" global 1 { CheckBM CompactBM GrowBM InitMaskCache MCFreeBytes MCGetTempBytes ShrinkBM }	{ }
bmSize		device/maskcache.c	/^private integer bmUsed, bmSize, bmBytes, bmMinSize/ ;" global 1 { BMAlloc CheckBM DevMaskCacheInfo DevSetMaskCacheSize InitMaskCache }	{ }
bmUsed		device/maskcache.c	/^private integer bmUsed, bmSize, bmBytes, bmMinSize/ ;" global 1 { BMAlloc CheckBM DevFlushMask DevMaskCacheInfo InitMaskCache MCFreeBytes }	{ }
bm__mark		include/bitmap.h	/^#define bm__mark(bm,mrec,clip) (*((LocalBMClass *)/ ;" macro 1 { LBMAddTrap LBMMark LBMMarkRun }	{ Bitmap LocalBMClass }
bm_becomePSDevice		include/bitmap.h	/^#define bm_becomePSDevice(bm) (*((LocalBMClass *) / ;" macro 1 { LBMMark MP12Composite }	{ Bitmap LocalBMClass LocalBitmap }
bm_composite		include/bitmap.h	/^#define bm_composite(bm,bcop) \\/ ;" macro 1 { BM34ConvertFrom BM38ConvertFrom BPCopyBitsFrom MPComposite }	{ BMClass Bitmap }
bm_convertFrom		include/bitmap.h	/^#define bm_convertFrom(db,sb,dBounds,sBounds,phase/ ;" macro 1 { BPCopyBitsFrom MPComposite MPPromoteWindow }	{ BMClass Bitmap }
bm_delete		include/bitmap.h	/^#define bm_delete(bm) if(--((Bitmap *)bm)->refcoun/ ;" macro 1 { BPCopyBitsFrom LCopyBitsFrom MPComposite MPFreeWindow MPPromoteWindow PSReadImage }	{ Bitmap bm_free }
bm_dup		include/bitmap.h	/^#define bm_dup(bm) (((Bitmap *)bm)->refcount++,bm)/ ;" macro 1 { LBMMakePublic }	{ Bitmap }
bm_free		include/bitmap.h	/^#define bm_free(bm) (*((BMClass *)((Bitmap *)bm)->/ ;" macro 1 { bm_delete }	{ BMClass Bitmap }
bm_makePublic		include/bitmap.h	/^#define bm_makePublic(bm,hintBounds,hintDepth) \\/ ;" macro 1 { BPCopyBitsFrom LCopyBitsFrom MPComposite MPPromoteWindow }	{ BMClass Bitmap }
bm_mark		include/bitmap.h	/^#define bm_mark(bm,mrec,markBds,bpBds) \\/ ;" macro 1 { MPMark }	{ BMClass Bitmap mark }
bm_new		include/bitmap.h	/^#define bm_new(class,bounds,local) \\/ ;" macro 1 { LCopyBitsFrom MP12MakePublic MPComposite MPNewWindow MPPromoteWindow }	{ BMClass }
bm_newAlpha		include/bitmap.h	/^#define bm_newAlpha(bm,i) (*((BMClass *)((Bitmap */ ;" macro 1 { BM38ConvertFrom LCopyBitsFrom MP12ConvertFrom MP12MakePublic MPNewAlpha }	{ BMClass Bitmap }
bm_newFromData		include/bitmap.h	/^#define bm_newFromData(class,bounds,bits,abits,byt/ ;" macro 1 { MPInitScreen }	{ LocalBMClass }
bm_offset		include/bitmap.h	/^#define bm_offset(bm,dx,dy) (*((BMClass *)((Bitmap/ ;" macro 1 { MPMoveWindow }	{ BMClass Bitmap }
bm_sizeBits		include/bitmap.h	/^#define bm_sizeBits(class,bounds,size,rowBytes) \\/ ;" macro 1 { LBMNew }	{ BMClass }
bm_sizeInfo		include/bitmap.h	/^#define bm_sizeInfo(bm,localSize,remoteSize) \\/ ;" macro 1 { MPWindowSize }	{ BMClass Bitmap }
bmax		graphics/ucache.c	/^private integer bsize, bmax, rsize, rmax, pmax;/ ;" global 1 { EnterPathInCache EnterRdcInCache IniUCache PSNormalUCache PSSetUCacheParams PSTinyUCache PSUCacheStatus UCacheDataHandler }	{ }
bmbase		graphics/cscan.c	/^global unsigned char *bmbase;/ ;" global 1 { PrintBitmap }	{ }
bmbytewidth		graphics/cscan.c	/^global Card16 bmbytewidth, bmscanlines;/ ;" global 1 { PrintBitmap }	{ }
bmscanlines		graphics/cscan.c	/^global Card16 bmbytewidth, bmscanlines;/ ;" global 1 { }	{ }
bmsize		graphics/cscan.c	/^global Int32 bmsize;/ ;" global 1 { }	{ }
bo_immEvalName		language/binaryobject.c	/^#define bo_immEvalName 6	\/* same as stmObj *\// ;" macro 1 { BinObjInit ReadBinObjSeq }	{ }
bo_mark		language/binaryobject.c	/^#define bo_mark 10		\/* same as fontObj *\// ;" macro 1 { BinObjInit ReadBinObjSeq WriteObject }	{ }
bo_max		language/binaryobject.c	/^#define bo_max 10/ ;" macro 1 { InitBOSTypeMap }	{ }
boolObj		include/basictypes.h	/^#define	boolObj		4/ ;" macro 1 { BinObjInit CheckPrebuiltOptions EncodeObj Equal HashObject ImageDict KAPutDef PSAnd PSCVS PSNot PSOr PSPopBoolean PSXor PrintObj ReadBinObjSeq RelocateObj RelocateObject TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj WriteObject }	{ }
boolType		include/customops.h	/^#define	boolType	4/ ;" macro 1 { }	{ }
boolean		graphics/pathreduce.c	/^public boolean	   \/* return (isRect) *\// ;" global 1 { ActivateTfr AddEntry Adjust AllocRAMArray AllocRAMStr BMRun BlackMasksMarkReal BlueLock BuildChar BuildEdge BuildGlbCntrs BuildGrayPattern BuildMultiRectPath BuildPattern CCRunStd CacheInvalidate CacheLookup CheckBlueScale CheckForRectangle CheckIfOkToBuild ChrMapBuildChar ClippedMasksMark ColorIsWhite CompSlowShow CompactBM CompositeShow ConstantColor ConstantMasksMark ConstantTrapsMark ContextOpsInit CopyDelayedFont CounterGt CreatePrivateVM DelayedMakeFont DetermineFormat DevAllocTfrFcn DevCheckScreenDims DevIndependentColors DoStroke DoUAppend DoUserPath EnterCircle EnterCirclesInCache EnterRdcInCache FF_StrkLnTo FastFillBevel FastShow FillCircle FillLineSegment FindPathInCache FindRdcInCache FixBands FlexProc FmMark FudgeBlueBands GetDMFDict GetDMFItem GetErosion GetNextContext GlbClrLine (etc) }	{ }
bottom		graphics/stroke.c	/^#define bottom 8/ ;" macro 1 { AssignBounds ClipVect CodePoint ConnectWhitePairs FillInPairs }	{ }
boundBounds		bintree/bounds.c	/^int boundBounds(Bounds *one, Bounds *two, Bounds */ ;" function 14 { BAGCompositeFrom ChangedWindowDevice DriverInit LAddToDirty LAddToInstance LCompositeFrom LFill LMark RedrawWindowDevice }	{ }
bovrname		fonts/fontbuild.c	/^                   scrtnm, stkwdthname, bslnname, / ;" global 1 { CCRunStd }	{ }
bpart		language/grammar.h	/^#define bpart 10/ ;" macro 1 { }	{ }
bpartState		language/scanner.c	/^private readonly StateRec bpartState = {/ ;" global 15 { }	{ }
bprocs		fonts/fontbuild.c	/^public PBuildCharProcs bprocs;/ ;" global 1 { BuildChar CScan GlobalColoring GrowRunBuff NewGlbClr NewGlbCntr }	{ }
breakeven		device/markimage.c	/^private real breakeven = 0.005;/ ;" global 1 { ImageTrapsOrRun }	{ }
bsize		graphics/ucache.c	/^private integer bsize, bmax, rsize, rmax, pmax;/ ;" global 1 { CheckUCache EnterPathInCache EnterRdcInCache FreePath FreeRdc IniUCache PSUCacheStatus ReadBinObjSeq ReadNumAry }	{ }
bslnname		fonts/fontbuild.c	/^                   scrtnm, stkwdthname, bslnname, / ;" global 1 { CCRunStd }	{ }
bt_bool		language/scanner.h	/^#define bt_bool 141/ ;" macro 1 { }	{ }
bt_fixed		language/scanner.h	/^#define bt_fixed 137/ ;" macro 1 { }	{ }
bt_implDependent		language/scanner.h	/^#define bt_implDependent 159/ ;" macro 1 { }	{ }
bt_int16Hi		language/scanner.h	/^#define bt_int16Hi 134/ ;" macro 1 { }	{ }
bt_int16Lo		language/scanner.h	/^#define bt_int16Lo 135/ ;" macro 1 { }	{ }
bt_int32Hi		language/scanner.h	/^#define bt_int32Hi 132/ ;" macro 1 { }	{ }
bt_int32Lo		language/scanner.h	/^#define bt_int32Lo 133/ ;" macro 1 { }	{ }
bt_int8		language/scanner.h	/^#define bt_int8 136/ ;" macro 1 { }	{ }
bt_numArray		language/scanner.h	/^#define bt_numArray 149/ ;" macro 1 { ReadNumAry }	{ }
bt_objSeqHiIEEE		language/scanner.h	/^#define bt_objSeqHiIEEE 128/ ;" macro 1 { BinObjInit ReadBinObjSeq StmToken }	{ }
bt_objSeqHiNative		language/scanner.h	/^#define bt_objSeqHiNative 130/ ;" macro 1 { BinObjInit ReadBinObjSeq }	{ }
bt_objSeqLoIEEE		language/scanner.h	/^#define bt_objSeqLoIEEE 129/ ;" macro 1 { BinObjInit ReadBinObjSeq }	{ }
bt_objSeqLoNative		language/scanner.h	/^#define bt_objSeqLoNative 131/ ;" macro 1 { BinObjInit ReadBinObjSeq }	{ }
bt_realHiIEEE		language/scanner.h	/^#define bt_realHiIEEE 138/ ;" macro 1 { }	{ }
bt_realLoIEEE		language/scanner.h	/^#define bt_realLoIEEE 139/ ;" macro 1 { }	{ }
bt_realNative		language/scanner.h	/^#define bt_realNative 140/ ;" macro 1 { }	{ }
bt_str		language/scanner.h	/^#define bt_str 142/ ;" macro 1 { }	{ }
bt_strLongHi		language/scanner.h	/^#define bt_strLongHi 143/ ;" macro 1 { }	{ }
bt_strLongLo		language/scanner.h	/^#define bt_strLongLo 144/ ;" macro 1 { }	{ }
bt_systemLName		language/scanner.h	/^#define bt_systemLName 145/ ;" macro 1 { StmToken }	{ }
bt_systemXName		language/scanner.h	/^#define bt_systemXName 146/ ;" macro 1 { StmToken }	{ }
bt_userLName		language/scanner.h	/^#define bt_userLName 147/ ;" macro 1 { StmToken }	{ }
bt_userXName		language/scanner.h	/^#define bt_userXName 148/ ;" macro 1 { StmToken }	{ }
btokhdr		language/classarray.h	/^  btokhdr, btokhdr, btokhdr, btokhdr,		\/* 128 - 13/ ;" global 1 { ScannerInit }	{ }
btokhi		language/classarray.h	/^  btokhi,					\/* 132 *\// ;" global 1 { }	{ }
btoklo		language/classarray.h	/^  btoklo,					\/* 133 *\// ;" global 1 { }	{ }
btokn		language/classarray.h	/^  btokn,					\/* 136 *\// ;" global 1 { }	{ }
buffData		graphics/qreducer.c	/^private Int16 *buffData, *endBuffData, *clipBuffDa/ ;" global 1 { IniQReducer QReduce }	{ }
buildError		fonts/fontbuild.c	/^public jmp_buf buildError;/ ;" global 1 { BCERROR BuildChar }	{ }
buildPrebuilt		device/nextprebuilt.c	/^static boolean buildPrebuilt(PreBuiltArgs *args, N/ ;" function 95 { GetPreBuiltChar }	{ Fixed MCFreeMask MCGetCacheBytes MCGetMask MCGetTempBytes NIL NULL PMask PrebuiltFile PrebuiltMask PrebuiltMatrix PrebuiltVertMetrics d data false findMatrixNumber fixdiv fixmul pflttofix true uchar }
builtInFiles		language/stream.c	/^private readonly BIF builtInFiles[] = {/ ;" global 5 { CreateFileStm }	{ }
bund		language/classarray.h	/^  bund, bund, bund, bund, bund, bund, bund,	\/* 150/ ;" global 1 { }	{ }
buttCap		graphics/graphicspriv.h	/^#define buttCap 0/ ;" macro 1 { DoStroke F_StrkCap InitGraphics StrkCap }	{ }
c0x		graphics/fflattenpath.c	/^#define c0x (p[-8])/ ;" macro 1 { FMiniFltn }	{ p }
c0y		graphics/fflattenpath.c	/^#define c0y (p[-7])/ ;" macro 1 { FMiniFltn }	{ p }
c1x		graphics/fflattenpath.c	/^#define c1x (p[-6])/ ;" macro 1 { FMiniFltn }	{ p }
c1y		graphics/fflattenpath.c	/^#define c1y (p[-5])/ ;" macro 1 { FMiniFltn }	{ p }
c2x		graphics/fflattenpath.c	/^#define c2x (p[-4])/ ;" macro 1 { FMiniFltn }	{ p }
c2y		graphics/fflattenpath.c	/^#define c2y (p[-3])/ ;" macro 1 { FMiniFltn }	{ p }
c3x		graphics/fflattenpath.c	/^#define c3x (p[-2])/ ;" macro 1 { FMiniFltn }	{ p }
c3y		graphics/fflattenpath.c	/^#define c3y (p[-1])/ ;" macro 1 { FMiniFltn }	{ p }
cStmBinProcs		language/stream.c	/^private readonly StmProcs cStmBinProcs = {/ ;" global 4 { EncryptedStream MakeDecryptionStm }	{ }
cStmHexProcs		language/stream.c	/^private readonly StmProcs cStmHexProcs = {/ ;" global 4 { EncryptedStream MakeDecryptionStm PSEExec }	{ }
c_firstPoint		graphics/reducer.c	/^  c_firstPoint, c_lastPoint;/ ;" global 1 { }	{ }
c_lastPoint		graphics/reducer.c	/^  c_firstPoint, c_lastPoint;/ ;" global 1 { }	{ }
c_pqHead		graphics/reducer.c	/^  c_pqHead, c_pqRecent;/ ;" global 1 { }	{ }
c_pqRecent		graphics/reducer.c	/^  c_pqHead, c_pqRecent;/ ;" global 1 { }	{ }
c_ptserial		graphics/reducer.c	/^private cardinal ptserial, c_ptserial;/ ;" global 1 { }	{ }
c_xmax		graphics/reducer.c	/^private integer clipxmin, clipxmax, c_xmin, c_xmax/ ;" global 1 { }	{ }
c_xmin		graphics/reducer.c	/^private integer clipxmin, clipxmax, c_xmin, c_xmax/ ;" global 1 { }	{ }
cacheChain		fonts/cacheimpl.c	/^private PCache cacheChain;/ ;" global 1 { CacheCreate PSCacheFlush PSCacheInit PSCacheStatistics }	{ }
cacheDelta		graphics/cscan.c	/^FCd cacheDelta;/ ;" global 1 { CScan }	{ }
cacheHits		vm/gcmisc.c	/^public Card32 lookups, cacheHits;/ ;" global 1 { GCInternal_GetSegHnd GCInternal_Init PSGCStats }	{ }
cacheclock		product/listener.c	/^static unsigned short cacheclock;/ ;" global 1 { SetGroups }	{ }
callBackItem		vm/gcinternal.h	/^typedef struct callBackItem {	\/* Callback proc lis/ ;" struct 5 { }	{ }
calledFromPS		fonts/debug.c	/^private boolean calledFromPS;/ ;" global 1 { Aborted CallFromPS GetDebugStm PSPrObject PSPrValue }	{ }
capovrname		fonts/fontbuild.c	/^                   xovrname, capovrname, aovrname,/ ;" global 1 { CCRunStd }	{ }
cardinal		include/publictypes.h	/^typedef unsigned short int cardinal;/ ;" typedef 1 { AStore AddEntry AllocCopyDict ArrayFromStack ArrayToStack AryToMrk BindArray BytefromString CCBMRun CCRunStd CalcThresholds ChrMapBuildChar CompSlowShow CopyDict CopyTrickyDict CreateSharedVM DFAProc DPrintSOP DecodeObj DictP EncodeObj FixedfromString FontEncode GetInfo HashObject InitHexToBin KAEndCSDict MakePName MakeScreenDict MakeStaticPName MtxToPAry ObjFromStrStorage PSArray PSCCRun PSCoProc PSDefUserObj PSFontRun PSFork PSPkdary PSPushStream PSReadString PSRoll PSSetLineCap PSSetLineJoin PSSetStackLimit PSStSKey PSUClRead PSUndefUserObj PSWrtHexString Pkdary PrAryBody PrNameAryBody PrintSOP PutThresholdEntries RelocateObj SSGetChar SortGQ StmToken StreamInit TrickyDictP (etc) }	{ }
ccEnd		devpattern/colorpattern.c	/^PCard8 ccEnd;/ ;" global 1 { GetCachePlace InitCCCache }	{ }
ccHead		devpattern/colorpattern.c	/^PCachedColor ccHead;/ ;" global 1 { ComposeColors GetCachePlace InitCCCache }	{ }
ccLast		devpattern/colorpattern.c	/^PCachedColor ccLast;/ ;" global 1 { GetCachePlace InitCCCache }	{ }
cchInited		fonts/fontdisk.c	/^public boolean cchInited, dlFC;/ ;" global 1 { FontDiskInit InitFontCache RstrFC }	{ }
ccw		graphics/stroke.c	/^private boolean ccw(p0, p1, p2) Cd p0, p1, p2; { \// ;" function 6 { MiterPoint }	{ real }
cd1		graphics/userpath.h	/^#define cd1 ((PCd) &vals[0])/ ;" macro 1 { DetermineTieBreaker DoEUserPath DoUserPath MakeBBox PSUPath UPCurveTo UsrPthBBox UsrPthDoCurveTo }	{ PCd }
cd2		graphics/userpath.h	/^#define cd2 ((PCd) &vals[2])/ ;" macro 1 { DetermineTieBreaker DoEUserPath DoUserPath MakeBBox PSUPath UPCurveTo UsrPthBBox UsrPthDoCurveTo }	{ PCd }
cd3		graphics/userpath.h	/^#define cd3 ((PCd) &vals[4])/ ;" macro 1 { MakeBBox UPCurveTo UsrPthDoCurveTo }	{ PCd }
cd4		graphics/userpath.h	/^#define cd4 ((PCd) &vals[6])/ ;" macro 1 { MakeBBox }	{ PCd }
cdevprocname		fonts/fontbuild.c	/^		   cdevprocname, metricsname, wvname;/ ;" global 1 { BMRun CCRunStd ModifyCachingParams }	{ }
cdisceol		language/grammar.h	/^#define cdisceol 3/ ;" macro 1 { LineComplete StmToken }	{ }
ceil		fonts/flex.c	/^#define ceil(f) ((((f) & 0xFFFFL) == 0)? (floor(f)/ ;" macro 1 { FlexProc }	{ FixedOne floor }
chPerPg		include/basictypes.h	/^#define chPerPg 1024		\/* VAX specific *\// ;" macro 1 { }	{ }
chPerWd		include/basictypes.h	/^#define chPerWd 4/ ;" macro 1 { }	{ }
charBBox		graphics/cscan.c	/^global DevBBox charBBox;/ ;" global 1 { PrintBitmap }	{ }
charMap		fonts/fontrun.c	/^private char charMap[] = "CharMap";/ ;" global 1 { KAEndCSDict }	{ }
charSortInterval		fonts/cicache.c	/^public integer charSortInterval;/ ;" global 1 { PreBuiltChar ShowByName SortCharAges }	{ }
charStringsKeywordsTable		fonts/fontrun.c	/^private KeywordAction charStringsKeywordsTable[] =/ ;" global 5 { KADict }	{ }
character		include/publictypes.h	/^typedef unsigned char character, *string, *charptr/ ;" typedef 1 { Bang CCBMRun ComputeDataLen CreateFileStream EnterPathInCache FastShow FilterRegion HF2F HF4F HF4R HIRR HNRF HNRR LF2F LF4F LF4R LIRR LNRF LNRR LineEdit NumEncode PSCCRun PSCVRS PSCVS PSFile PSMkTemp PSPut PSUCall PSUClRead PSUndef QDoEUsrPth QDoEUsrPthFloat RdBytes ReadCtrlByte SetupNumStrm UsrPthQRdcOk }	{ }
chardataname		fonts/fontbuild.c	/^                   pnttypnm, fntpthnm, stdencname,/ ;" global 1 { ChrMapBuildChar }	{ }
charoffsetsname		fonts/fontbuild.c	/^                   fdgbndsnm, eNm, lNm, ErNm, char/ ;" global 1 { ChrMapBuildChar }	{ }
charptr		include/publictypes.h	/^typedef unsigned char character, *string, *charptr/ ;" typedef 1 { AllocCmds AllocPName AllocPString BindPkdary CheckStack CompositeShow DecodeObj DumpStack EXPAND FastShow GC_HandleIndex KAEndCSDict MNew MaxNEW PLn PPq PPt PRg PSAllocBM PSFontRun PSReadHexString PSReadLine PSTrashVM PrPkdaryBody RelocateObj ScanCompString ScanPkdAry StringCompare TracePrivateForShared TracePrivateVM TraceSharedVM VMGetText VMPutChar sStringMatch }	{ }
charsInLine		fonts/fontbuild.c	/^private int charsInLine; / ;" global 1 { OutputEnc PSInitWrite }	{ }
charstringsname		fonts/fontbuild.c	/^private NameObj BCcmdName, strokewidthname, charst/ ;" global 1 { CharStringsVal ChrMapBuildChar InternalBuildChar }	{ }
checkOrderingValdity		product/windowops.c	/^private int checkOrderingValdity(int op, int relWi/ ;" function 40 { PSOrderWindow }	{ ABOVE CantHappen ID2Layer JUST_RIGHT Layer Layer2Wd NOT_ON_SCREEN NULL TOO_HIGH TOO_LOW WindowDevice level }
checkRuns		graphics/cscan.c	/^private boolean checkRuns;		\/* True: Run pairs may/ ;" global 1 { DoFixupAction ResetCScan ReturnBits SplicePixel }	{ }
checkerboard		bintree/pattern.c	/^static unsigned char checkerboard[4] = {64, 191, 2/ ;" global 1 { PInitialize }	{ }
checkingYield		language/exec.c	/^private int checkingYield;/ ;" global 1 { LanguageInit PSSetYieldChecking WannaYield }	{ }
chksum		coroutine/xfersun.s	/^#define chksum 4	\/* minor error checking *\// ;" macro 1 { }	{ }
chrPth		graphics/pathops.c	/^private Path chrPth;/ ;" global 1 { Fill PSCharPath Stroke }	{ }
chrPthStrk		graphics/pathops.c	/^private boolean chrPthStrk;  \/* if false, stroked / ;" global 1 { PSCharPath Stroke }	{ }
chunkBBox		graphics/graphics.c	/^BBoxRec chunkBBox;/ ;" global 1 { BreakUpPath CallAddTrapToPath ConvertToListPath DoRdcPth InitChunk ReduceQuadPath XARdc XAReducePath }	{ }
chunkPool		postscript/customops.c	/^private Pool chunkPool;/ ;" global 1 { CustomOpsInit PSPopManagedObject }	{ }
chunkqp		graphics/graphics.c	/^QuadPath *chunkqp;/ ;" global 1 { DoRdcPth IniGraphics InitChunk ReduceQuadPath }	{ }
chunks		postscript/customops.c	/^private ItemChunk *chunks;/ ;" global 1 { CustomOpsInit GrowPool PSPopManagedObject ValidatePObj myGetRoots myTerminateSpace os_freepool os_newpool }	{ }
cipher		fonts/fontbuild.c	/^private int cipher;/ ;" global 1 { Decrypt Encrypt PSInitWrite PSWriteData PSeCCRun }	{ }
circ_a		graphics/stroke.c	/^          circ_a,/ ;" global 1 { SetupForCircles }	{ }
circ_b		graphics/stroke.c	/^          circ_b,/ ;" global 1 { SetupForCircles }	{ }
circ_c		graphics/stroke.c	/^          circ_c,/ ;" global 1 { SetupForCircles }	{ }
circ_cannot		graphics/stroke.c	/^private boolean circ_cannot,/ ;" global 1 { EnterCircle SetupForCircles }	{ }
circ_d		graphics/stroke.c	/^          circ_d;/ ;" global 1 { SetupForCircles }	{ }
circ_llx		graphics/stroke.c	/^private Fixed   circ_llx,/ ;" global 1 { AddCircleMask FinStroke }	{ }
circ_lly		graphics/stroke.c	/^          circ_lly,/ ;" global 1 { AddCircleMask FinStroke }	{ }
circ_maskID		graphics/stroke.c	/^private integer circ_maskID;/ ;" global 1 { DoStroke SetupForCircles }	{ }
circ_maxsize		graphics/stroke.c	/^          circ_maxsize;/ ;" global 1 { EnterCircle IniStroke }	{ }
circ_size		graphics/stroke.c	/^private Card16  circ_size,/ ;" global 1 { EnterCircle SetupForCircles }	{ }
circ_uhalfwidth		graphics/stroke.c	/^private real    circ_uhalfwidth,/ ;" global 1 { IniStroke SetupForCircles }	{ }
circ_urx		graphics/stroke.c	/^          circ_urx,/ ;" global 1 { AddCircleMask FinStroke }	{ }
circ_ury		graphics/stroke.c	/^          circ_ury;/ ;" global 1 { AddCircleMask FinStroke }	{ }
circleFont		graphics/stroke.c	/^private DictObj circleFont;/ ;" global 1 { FillCircle }	{ }
circleMasks		graphics/stroke.c	/^private DevMask *circleMasks,/ ;" global 1 { AddCircleMask DoStroke FinStroke IniStroke }	{ }
circleTraps		graphics/stroke.c	/^          circleTraps,/ ;" global 1 { DoStroke FillCircle }	{ }
clear		fonts/fontbuild.c	/^private int clear;/ ;" global 1 { Decrypt Encrypt FmShowPage PSInitWrite PSWriteData PSeCCRun }	{ }
clientFID		fonts/fontspriv.h	/^#define clientFID 0/ ;" macro 1 { PSDefineFont }	{ }
clipBBox		graphics/stroke.c	/^private BBox    clipBBox;/ ;" global 1 { DoRdcPth DoStroke FillBevel FillQuad }	{ }
clipBounds		bintree/bounds.c	/^void clipBounds(Bounds *one, Bounds *two, Bounds */ ;" function 29 { LCompositeFrom }	{ }
clipBuffData		graphics/qreducer.c	/^private Int16 *buffData, *endBuffData, *clipBuffDa/ ;" global 1 { QIntersect QIntersectTrp }	{ }
clipBuffSz		graphics/qreducer.c	/^#define clipBuffSz (1000)/ ;" macro 1 { QIntersect QIntersectTrp }	{ }
clipCallBack		device/devprim.c	/^private DevPrim *clipCallBack;/ ;" global 1 { RunRunClip RunRunClipCallBack RunTrapClip TrapTrapClip TrapTrapClipCallBack }	{ }
clipxmax		graphics/reducer.c	/^private integer clipxmin, clipxmax, c_xmin, c_xmax/ ;" global 1 { NewPoint Reduce ResetReducer }	{ }
clipxmin		graphics/reducer.c	/^private integer clipxmin, clipxmax, c_xmin, c_xmax/ ;" global 1 { NewPoint Reduce ResetReducer }	{ }
clockLimit		language/exec.c	/^private	Card32	clockLimit;		\/* Current bound on *p/ ;" global 1 { SetTimeLimit WannaYield }	{ }
closedStm		language/stream.c	/^private Stm closedStm;/ ;" global 1 { CrFile InvlStm MakePStm StreamError StreamInit }	{ }
closedStmProcs		stream/streamimpl.c	/^public readonly StmProcs closedStmProcs = {/ ;" global 4 { PSNewContextStms StmCtxDestroy StmDestroy os_sprintf os_sscanf }	{ }
closepath		fonts/fontbuild.c	/^#define closepath (fontCtx->fontBuild._closepath)/ ;" macro 1 { BuildChar CCRunStd SetFixedPathProcs SetRealPathProcs }	{ fontCtx }
closepathNm		graphics/userpath.c	/^#define closepathNm graphicsNames[nm_closepath].va/ ;" macro 1 { DoUserPath QDoUserPath }	{ graphicsNames nm_closepath }
clrStorage		graphics/colorops1.c	/^private  Pool clrStorage;    \/* Blind pointer to p/ ;" global 1 { ChangeColor IniClrSpace RemColorRef }	{ }
cmdCoordinates		product/coordinates.c	/^private readonly RgOpTable cmdCoordinates = {/ ;" global 10 { IniCoordinates }	{ }
cmdEvents		product/event.c	/^private readonly RgOpTable cmdEvents = {/ ;" global 17 { EventInit }	{ }
cmdFontBuild		fonts/fontbuild.c	/^private readonly RgCmdTable cmdFontBuild = {/ ;" global 11 { FontBuildInit }	{ }
cmdListener		product/listener.c	/^private readonly RegOpEntry cmdListener[] = {/ ;" global 17 { ListenerInit }	{ }
cmdMiscops		product/miscops.c	/^private readonly RgOpTable cmdMiscops = {/ ;" global 15 { MiscOpsInit }	{ }
cmdMouse		product/mouse_driver.c	/^private readonly RgOpTable cmdMouse = {/ ;" global 19 { MouseInit }	{ }
cmdNonExport		fonts/fontbuild.c	/^private readonly RgCmdTable cmdNonExport = {/ ;" global 5 { FontBuildInit }	{ }
cmdObj		include/basictypes.h	/^#define	cmdObj		7/ ;" macro 1 { BindArray BindPkdary CheckIfUCache CheckPkdMtLt ClearExecStack DoUserPath EncodeObj Equal ExecPushP GC_WasCollected HashObject PSCVS PSExecuteOperator PSFontRun PSOpDef PrintObj QDoUserPath RelocateObj RelocateObject RgstExplicit TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj UnwindExecStk UsrPthBBox UsrPthCheckMtLt UsrPthQRdcOk }	{ }
cmdWindowGraphics		product/windowgraphics.c	/^private readonly RgOpTable cmdWindowGraphics = {/ ;" global 17 { IniWindowGraphics }	{ }
cmdWindowImage		product/windowimage.c	/^private readonly RgOpTable cmdWindowImage = {/ ;" global 3 { IniWindowImage }	{ }
cmdWindowOps		product/windowops.c	/^private readonly RgOpTable cmdWindowOps = {/ ;" global 41 { IniWindowOps }	{ }
cmds		vm/rgstcmds.c	/^public CmdTable cmds;/ ;" global 1 { AllocCmds Init_Cmds PSExecuteOperator PutCmd QDoEUsrPth QDoEUsrPthFloat RgstExplicit RgstOpSet }	{ }
coSignal		product/nextmain.c	/^public integer coSignal(int sig, int (*func)())/ ;" function 14 { }	{ integer }
collapseBounds		bintree/bounds.c	/^void collapseBounds(Bounds *one, Bounds *two)/ ;" function 7 { LFlushBits LNewAt LNewDummyAt LSetType }	{ }
colorIndexBlue		include/graphics.h	/^#define colorIndexBlue 2/ ;" macro 1 { }	{ }
colorIndexGray		include/graphics.h	/^#define colorIndexGray 3/ ;" macro 1 { }	{ }
colorIndexGreen		include/graphics.h	/^#define colorIndexGreen 1/ ;" macro 1 { }	{ }
colorIndexRed		include/graphics.h	/^#define colorIndexRed 0/ ;" macro 1 { }	{ }
colorWb		graphics/colorops1.c	/^private real colorWr, colorWg, colorWb;/ ;" global 1 { ConvertColorRGB IniClrSpace IniDevCommon PSCrGray }	{ }
colorWg		graphics/colorops1.c	/^private real colorWr, colorWg, colorWb;/ ;" global 1 { ConvertColorRGB IniClrSpace IniDevCommon PSCrGray }	{ }
colorWr		graphics/colorops1.c	/^private real colorWr, colorWg, colorWb;/ ;" global 1 { ConvertColorRGB IniClrSpace IniDevCommon PSCrGray }	{ }
com		language/classarray.h	/^  com,						\/* % *\// ;" global 1 { }	{ }
comnt		language/grammar.h	/^#define comnt 1/ ;" macro 1 { }	{ }
comntState		language/scanner.c	/^private readonly StateRec comntState = {/ ;" global 15 { }	{ }
const		include/environment.h	/^#define const/ ;" macro 1 { LPrintOn MPRemoveCursor2 MRMoveRect RegisterGraphicsPackages readonly }	{ }
cont_atlas		include/controller.h	/^#define	cont_atlas		1006/ ;" macro 1 { }	{ }
cont_emerald		include/controller.h	/^#define cont_emerald		3/ ;" macro 1 { }	{ }
cont_garnet		include/controller.h	/^#define cont_garnet		2/ ;" macro 1 { }	{ }
cont_generic		include/controller.h	/^#define	cont_generic		1/ ;" macro 1 { }	{ }
cont_lps20		include/controller.h	/^#define cont_lps20		1008/ ;" macro 1 { }	{ }
cont_rca		include/controller.h	/^#define cont_rca		1009/ ;" macro 1 { }	{ }
cont_scout		include/controller.h	/^#define	cont_scout		1004/ ;" macro 1 { }	{ }
cont_sga		include/controller.h	/^#define cont_sga		1010/ ;" macro 1 { }	{ }
cont_spud		include/controller.h	/^#define cont_spud		1011/ ;" macro 1 { }	{ }
cont_swift		include/controller.h	/^#define	cont_swift		1007/ ;" macro 1 { }	{ }
contextGid		product/ipcscheduler.h	/^#define contextGid(psc) ((psc) ? ((psc)->userSet ?/ ;" macro 1 { Scheduler }	{ globalGid }
contextList		product/ipcscheduler.c	/^public PSSchedulerContext contextList;/ ;" global 1 { CreateNewContext CreateTypedContext HandleDataMsg HandleNotifyMsg MarkSystemContexts PickContext Scheduler SchedulerInit TerminateUserContexts }	{ }
contextTypeList		product/nscontexts.c	/^static NSContextType	*contextTypeList = NULL;/ ;" global 1 { NSAddContextType NSGetContextType }	{ }
contextUid		product/ipcscheduler.h	/^#define contextUid(psc) ((psc) ? ((psc)->userSet ?/ ;" macro 1 { Scheduler }	{ globalUid }
copyCO		bintree/layer.c	/^void copyCO(CompositeOperation *cop)/ ;" function 5 { BPAdjust BPCopyback BPInitialize BPRevealBecause CopyOffscreen CopyOnscreen LFill LHideInstanceIn LInitPage LNewAt LPlaceAt LRepaintIn }	{ COPY CompositeOperation }
copydict		language/dict.c	/^private procedure copydict(alloc, fd, td, checkacc/ ;" function 46 { AllocCopyDict CopyDict CopyTrickyDict ReallocDict }	{ DictBody DictP ForcePut InvlAccess PDictBody PDictObj PKeyVal RangeCheck VMGetDict VMPutDict XlatDictRef integer nullObj rAccess register rootShared wAccess }
coroutineCheckFlag		coroutine/corouxfer.c	/^public boolean coroutineCheckFlag;/ ;" global 1 { CoReturn CreateCoroutine InitCoroutine }	{ }
coroutineExtraStack		coroutine/corouxfer.c	/^public integer coroutineExtraStack;/ ;" global 1 { CreateCoroutine InitCoroutine }	{ }
cosTable		graphics/stroke.c	/^private real cosTable[] = { \/* cosTable[i] == cos(/ ;" global 18 { GetMaxBevelChord }	{ }
cphghtname		fonts/fontbuild.c	/^                   scrtnm, stkwdthname, bslnname, / ;" global 1 { CCRunStd }	{ }
crDash		graphics/stroke.c	/^          crDash,/ ;" global 1 { CheckForRectangle FillLineSegment StrkStrt }	{ }
crDshLen		graphics/stroke.c	/^          crDshLen,/ ;" global 1 { FillLineSegment StrkStrt }	{ }
crMID		fonts/fontshow.h	/^#define crMID (curMT->umid.rep.mid)/ ;" macro 1 { CompSlowShow FastShow FindInCache ShowByName ShowInternal SimpleShowByName }	{ curMT }
crossCount		graphics/cscan.c	/^static Int32 crossCount;		\/* Normal Crosses *\// ;" global 1 { CScan NewCross ResetCScan StartSplice }	{ }
crt		language/classarray.h	/^  crt,						\/* CR *\// ;" global 1 { }	{ }
csCausePool		bintree/causeset.c	/^static char *csCausePool;	\/* Blind ptr to pool for/ ;" global 1 { CSExpand CSFree CSInitialize }	{ }
csPool		bintree/causeset.c	/^static char *csPool;		\/* Blind ptr to pool for Cau/ ;" global 1 { CSFree CSInitialize CSNew }	{ }
cslimit		fonts/fontbuild.c	/^private integer cslimit, oflimit;/ ;" global 1 { CSLIMIT FontBuildInit PSSetCSLimit }	{ }
ctxCacheThreshold		fonts/fontdata.h	/^#define ctxCacheThreshold (fontCtx->_cacheThreshol/ ;" macro 1 { FontShwDataHandler PSCacheStatus PSCrCParams PreBuiltChar SetCacheLimit SetupMaskDev }	{ fontCtx }
ctxCompThreshold		fonts/fontdata.h	/^#define ctxCompThreshold (fontCtx->_compThreshold)/ ;" macro 1 { FontShwDataHandler PSCrCParams PSStCParams PreBuiltChar SetupMaskDev }	{ fontCtx }
ctxTab		postscript/contextimpl.c	/^private CtxItem *ctxTab;/ ;" global 1 { ContextOpsInit IDToPSContext IDToPSSpace NewContextID NewSpaceID RecycleID }	{ }
ctxTabSize		postscript/contextimpl.c	/^private integer ctxTabSize;/ ;" global 1 { ContextOpsInit NewContextID NewSpaceID }	{ }
curIMtx		graphics/stroke.c	/^private Mtx     curIMtx;/ ;" global 1 { DoStroke FillCurveJoin ITransIfNeed SetHalfWidth }	{ }
curIsClipLine		graphics/reducer.c	/^private boolean curIsClipLine, interiorClipMode, e/ ;" global 1 { InitReducer MakeLine NewPoint RdcClip }	{ }
curLine		graphics/reducer.c	/^private LnOffset curLine, endLine;/ ;" global 1 { InitReducer MakeLine }	{ }
curMT		fonts/fontdata.h	/^#define curMT (fontCtx->fontShow._curMT)/ ;" macro 1 { AlreadyValidMID CompSlowShow CompositeShow FastShow FasterShow GetFontAndCharInfo InvalidateCachedMIDs ReValidateMID SetCch ShowByName ShowInternal ValidMID crMID }	{ fontCtx }
curPoint		graphics/reducer.c	/^private PtOffset curPoint, firstPoint, lastPoint, / ;" global 1 { InitReducer MakePoint ResetReducer }	{ }
curPq		graphics/reducer.c	/^private PqOffset curPq, pqHead, pqRecent, endPntQ,/ ;" global 1 { InitReducer PQInsert }	{ }
curStackLimit		language/langdata.h	/^#define	curStackLimit	(languageCtxt->stackData._cu/ ;" macro 1 { LanguageDataHandler Overflow PSSetStackLimit PSStackStats }	{ languageCtxt }
curTAUsage		devpattern/patternimpl.c	/^private integer curTAUsage;	\/* Current mem alloc'e/ ;" global 1 { FreeScreen GetMemForTA InitPatternImpl SendOldestToDisk }	{ }
curTfrFcnID		graphics/gray.h	/^_gray integer curTfrFcnID;/ ;" global 1 { }	{ }
curVC		graphics/viewclip.c	/^#define	curVC		(graphicsStatics->viewClip._curVC)/ ;" macro 1 { CurIsFirst DevClipIsRect FindCurrentViewInCache GetDevClipBBox GetDevClipDevBBox GetDevClipPrim NewViewClip PSInitViewClip PSViewClipPath TermViewClip VCRestoreProc VCSaveProc }	{ graphicsStatics }
current		bitmap/bmlocal.c	/^static LocalBMClass *current;/ ;" global 1 { ABM_ClearAll AllocLarge AllocSmall ApplyRelocation ClaimPreallocChars ContractVMSection CreateVM CurrentVMSegmentType DestroyVM DisplayVMSection Display_VM_Segment EXPAND ExpandVMSection FindFreeBytes GCInternal_LookupSegment GCInternal_ResetFreePointer LBMBecomePSDevice LBMSetupImageArgs LBMSetupMark LBMWakeUp NSCurrentContext NoteLevel PreallocChars ReadVM Reclaim_Reserve ResetAllocCounter ResetVMSection SetVMSegmentType Use_Reserve VM_Usage WBmain WriteRelocatedVMToFile WriteVMSection }	{ }
currentCmd		vm/rgstcmds.c	/^public Card16 currentCmd;/ ;" global 1 { OpDefProc }	{ }
currentContextType		product/ipcscheduler.c	/^public NSContextType *currentContextType;/ ;" global 1 { Scheduler SchedulerInit }	{ }
currentCoroutine		coroutine/corouxfer.c	/^public Coroutine currentCoroutine;/ ;" global 1 { CoReturn CoroutineRootProc CurStackUnused DestroyCoroutine InitCoroutine TempCoroutineProc }	{ }
currentCross		graphics/cscan.c	/^internal CrossPtr currentCross;		\/* Space for the / ;" global 1 { BuildYCross CScan FinishPath NEWCROSS ResetCScan }	{ }
currentLayer		product/windowbitmap.c	/^static Layer *currentLayer;/ ;" global 1 { WBCloseBitmap WBCurrentLayer WBFlushBitmap WBGetBitmap WBMarkBitmap WBOpenBitmap }	{ }
currentPSContext		postscript/contextimpl.c	/^public PSContext currentPSContext;/ ;" global 1 { AcquireLock BeginFlush CheckForPSNotify ContextOpsInit CreateContext CreatePSContext DestroyPSContext DisableCC DoQuit EnableCC EndFlush EventFlush FindImageMessage GetCurrentContext GetNotifyAbortCode IsContextWriteProhibited NSCreatePS NSLoadPS NotifyPSContext PSClrInt PSCoProc PSCurrentContext PSCurrentNextStepContext PSCurrentWriteBlock PSFork PSGetEvents PSInitEvents PSJoin PSListener PSLoginExit PSMachPortDevice PSMonitor PSNewContextStms PSQuit PSResetUser PSSetBootstrapPort PSSetDevice PSSetJobUser PSSetLastEventSentTime PSSetLoginContext PSSetNextObjectFormat PSSetNextStepContext PSSetUser PSSetWriteBlock PSStartWaitCursorTimer PSWait ReceiveNextImage ReleaseLock Scheduler SelfDestructPSContext SendEvent SpaceExclusionSemaphore SwitchPSContext TimedEvent TotalExclusionSemaphore UnloadContext WaitOnJoinable window }	{ }
currentSchedulerContext		product/ipcscheduler.c	/^public PSSchedulerContext currentSchedulerContext;/ ;" global 1 { ContextYield DidInteract IPCFlush IPCWrite PSSetDefaultDepthLimit PSSetWindowDepthLimit Scheduler SelectPSContext window }	{ }
currentWBContext		product/wbcontext.c	/^WBContext *currentWBContext = NULL;/ ;" global 1 { NSDestroyWB NSLoadWB WBCloseBitmap WBCoProc WBError WBOpenBitmap WBmain }	{ }
currentwid		product/windowbitmap.c	/^static int currentwid = 0;/ ;" global 1 { WBCurrentLayer WBOpenBitmap }	{ }
currentwin		product/windowbitmap.c	/^static WindowDevice *currentwin;/ ;" global 1 { WBCloseBitmap WBCurrentLayer WBID2Layer WBOpenBitmap }	{ }
curveto		fonts/flex.c	/^#define curveto (fontCtx->fontBuild._curveto)/ ;" macro 1 { BuildChar CCRunStd FlexCurveTo PathForAll RFlexCurveTo SetFixedPathProcs SetRealPathProcs }	{ fontCtx }
curvetoNm		graphics/userpath.c	/^#define curvetoNm graphicsNames[nm_curveto].val.nm/ ;" macro 1 { DoUserPath QDoUserPath UsrPthQRdcOk }	{ graphicsNames nm_curveto }
d		graphics/pathops.c	/^#define d d2.x/ ;" macro 1 { AdjustBlues AdjustDevMatrix AlignIsolatedStems AllocCopyDict AnamorphicNormStrkWdth BM38Convert16to32 BMComposite34 BMComposite38 BMRun BPObscureBecause BPRevealBecause CSGetChar CheckForAnamorphicMatrix CheckPrebuiltMatrix CompositeShow CopyObject DFAProc DelayedMakeFont DictGetP DictGetPType DictLength DictPut DictTestP DictTestPType DoSover DumpBuff EXDummyScreens End EnterRdcInCache EnumerateDict FTfm FastShow FillCircle FilterDirProc FinGlbClrLocs FindRdcInCache FixCd FltnCurve FmMakeMaskDevice ForceGetP ForceKnown ForcePut FrameDevice GetDMFItem GlbClrLine HashMID Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImageTrapsOrRun InitOFill InsertMID InsertSelectFont Known LMoveTo LOrder LPlaceAt LRepaintIn Load (etc) }	{ }
d0x		graphics/fflattenpath.c	/^#define d0x (p[2])/ ;" macro 1 { FMiniFltn }	{ p }
d0y		graphics/fflattenpath.c	/^#define d0y (p[3])/ ;" macro 1 { FMiniFltn }	{ p }
d1x		graphics/fflattenpath.c	/^#define d1x (p[4])/ ;" macro 1 { FMiniFltn }	{ p }
d1y		graphics/fflattenpath.c	/^#define d1y (p[5])/ ;" macro 1 { FMiniFltn }	{ p }
d2x		graphics/fflattenpath.c	/^#define d2x (p[6])/ ;" macro 1 { FMiniFltn }	{ p }
d2y		graphics/fflattenpath.c	/^#define d2y (p[7])/ ;" macro 1 { FMiniFltn }	{ p }
d3x		graphics/fflattenpath.c	/^#define d3x (p[8])/ ;" macro 1 { FMiniFltn }	{ p }
d3y		graphics/fflattenpath.c	/^#define d3y (p[9])/ ;" macro 1 { FMiniFltn }	{ p }
dLf		graphics/stroke.c	/^          dLf,/ ;" global 1 { FillJoin FillLineSegment StrkCap StrkLnTo }	{ }
dLfSt		graphics/stroke.c	/^          dLfSt,/ ;" global 1 { StrkCap StrkClose StrkLnTo }	{ }
dP1		graphics/stroke.c	/^          dP1,/ ;" global 1 { FillJoin StrkCap StrkLnTo StrkStrt }	{ }
dP1St		graphics/stroke.c	/^          dP1St,/ ;" global 1 { F_StrkStrt StrkCap StrkClose StrkStrt }	{ }
dRt		graphics/stroke.c	/^          dRt;/ ;" global 1 { FillJoin FillLineSegment StrkCap StrkLnTo }	{ }
dRtSt		graphics/stroke.c	/^          dRtSt,/ ;" global 1 { StrkCap StrkClose StrkLnTo }	{ }
d_adz_fixed_tfm		fonts/fontmatrix.c	/^private procedure d_adz_fixed_tfm(c, ct) FCd c; PF/ ;" function 4 { SetMtxProcs }	{ Fixed PFixMtx fixmul fntmtx register }
d_adz_frac_tfm		fonts/fontmatrix.c	/^private procedure d_adz_frac_tfm(c, ct) FCd c; PFC/ ;" function 4 { SetMtxProcs }	{ Fixed PFracMtx fntmtx fr fxfrmul register }
d_bcz_fixed_tfm		fonts/fontmatrix.c	/^private procedure d_bcz_fixed_tfm(c, ct) FCd c; PF/ ;" function 3 { SetMtxProcs }	{ Fixed PFixMtx d fixmul fntmtx register }
d_bcz_frac_tfm		fonts/fontmatrix.c	/^private procedure d_bcz_frac_tfm(c, ct) FCd c; PFC/ ;" function 3 { SetMtxProcs }	{ Fixed PFracMtx d fntmtx fr fxfrmul register }
d_gen_fixed_tfm		fonts/fontmatrix.c	/^private procedure d_gen_fixed_tfm(c, ct) FCd c; PF/ ;" function 4 { SetMtxProcs }	{ Fixed PFixMtx d fixmul fntmtx register }
d_gen_frac_tfm		fonts/fontmatrix.c	/^private procedure d_gen_frac_tfm(c, ct) FCd c; PFC/ ;" function 4 { SetMtxProcs }	{ Fixed PFracMtx d fntmtx fr fxfrmul register }
dashLength		graphics/stroke.c	/^private real    dashLength[DASHLIMIT],/ ;" global 1 { CheckForRectangle DoStroke FillLineSegment }	{ }
dashLim		graphics/stroke.c	/^private integer dashLim,/ ;" global 1 { CheckForRectangle DoStroke FillLineSegment }	{ }
dashed		graphics/stroke.c	/^          dashed,/ ;" global 1 { CheckForRectangle DoStroke FillLineSegment PreStroke SetHalfWidth StrkCap StrkClose StrkLnTo StrkStrt }	{ }
data		bintree/layer.c	/^void NXRenderInBounds(Layer *layer, Bounds *b, voi/ ;" global 2 { AddEntry AddRunDevPrim BM34InitClassVars BM34SetupPattern BM38InitClassVars BM38SetupPattern BPApplyBounds BPApplyBoundsProc BPCopyBitsFrom BPRenderInBounds BUFFERSOURCE BUFFERSOURCEHW BlackMasksMark BlackMasksMarkReal BlackRunMark BmALine BmRLine BmULine BytesInSeg CONSTSOURCE CacheAddEntry CacheInvalidate CacheLookup CacheReuseEntry ClippedMasksMark ConLine ConstantMasksMark ConstantRunMark CopyDevPrim CopyRun DPApplyBoundsProc DisposeDevPrim DisposeEntry DumpBuff ExpandMask FCOpenStream FetchCharOutline FindMaxFID FindSibling FlushMID FmMakeMaskDevice FmSetupImageArgs LLEventPost MP12InitBricks MP12InitClassVars MP12SetupBits MP12SetupPat MP12SetupPattern MRMoveRect MRPatternAdvance NXGrayPatSetup OCFetchFromDisk PatLine RWCOPYBmALine RWCOPYBmULine ReadSegHdr ReturnBits RollRight RstrSetShared SOURCEADVANCE (etc) }	{ }
dataOp		mp/mp12.c	/^static const char dataOp[NCOMPOSITEOPS][2][2] = {/ ;" global 18 { MP12Composite }	{ }
dbltofix		fp/fixedmach.030.s	/^ENTRY(dbltofix)/ ;" function 1 { DevToRdc DoPath PreEnumerateSetup }	{ }
dbltofrac		fp/fixedmach.030.s	/^ENTRY(dbltofrac)/ ;" function 1 { }	{ }
dc1		graphics/euserpath.c	/^#define dc1 ((DevCd *) &vals[0])/ ;" macro 1 { CheckForRectangle DoRdcPth FastFillBevel FastFillCurveJoin FastFillQuad FillBevel FillQuad QDoEUsrPth QDoUserPath ReduceQuadPath }	{ DevCd }
dc2		graphics/euserpath.c	/^#define dc2 ((DevCd *) &vals[2])/ ;" macro 1 { CheckForRectangle DoRdcPth FastFillBevel FastFillCurveJoin FastFillQuad FillBevel FillQuad QDoEUsrPth QDoUserPath ReduceQuadPath }	{ DevCd }
dc3		graphics/euserpath.c	/^#define dc3 ((DevCd *) &vals[4])/ ;" macro 1 { DoRdcPth FastFillCurveJoin FastFillQuad FillQuad QDoEUsrPth QDoUserPath ReduceQuadPath }	{ DevCd }
deFile		include/disk.h	/^#define deFile 3		\/* entry for (normal) file *\// ;" macro 1 { }	{ }
deFree		include/disk.h	/^#define deFree 1		\/* free entry *\// ;" macro 1 { }	{ }
deFreeEnd		include/disk.h	/^#define deFreeEnd 2		\/* free; no further non-free / ;" macro 1 { }	{ }
debugCmdDPSUCache		graphics/ucache.c	/^private readonly RgCmdTable debugCmdDPSUCache = {/ ;" global 7 { IniUCache }	{ }
debugOn		graphics/reducer.c	/^private boolean debugOn;/ ;" global 1 { CheckIntersection IniReducer Interchange MakeLine MakePoint NewPoint RdcBend RdcClose RdcEntry RdcExit Reduce ShipTrapezoid psReducerDebug }	{ }
debugStm		fonts/debug.c	/^public Stm debugStm;/ ;" global 1 { GetDebugStm }	{ }
dec		language/classarray.h	/^  dec, dec,					\/* 89 *\// ;" global 1 { }	{ }
deepOnes		devpattern/patternimpl.c	/^public PSCANTYPE *deepOnes;/ ;" global 1 { IniDeepOnes SetupDeepOnes }	{ }
deepPixOneVals		devpattern/patternimpl.c	/^public PSCANTYPE *deepPixOneVals;/ ;" global 1 { BuildGrayPattern BuildPattern IniDeepOnes SetupDeepOnes SetupMonoPattern }	{ }
deepPixOnes		devpattern/patternimpl.c	/^public PSCANTYPE *deepPixOnes;/ ;" global 1 { CmptMaskBBMin IniDeepOnes SetupDeepOnes }	{ }
defBoolKeywordsTable		fonts/fontrun.c	/^private KeywordAction defBoolKeywordsTable[] = {/ ;" global 4 { KAPutDef }	{ }
defHostDict		device/hostdict.c	/^void defHostDict(hostDict, key, value)/ ;" function 33 { DevRgstPrebuiltFontInfo getPrebuiltFont }	{ HostDictEntry TIME hashHostDict hostDictPurge integer os_sureMalloc strcmp strcpy strlen }
defIntKeywordsTable		fonts/fontrun.c	/^private KeywordAction defIntKeywordsTable[] = {/ ;" global 6 { KAPutDef }	{ }
defaultCacheThreshold		fonts/fontdisk.c	/^public integer defaultCompThreshold, defaultCacheT/ ;" global 1 { FontDiskInit FontShwDataHandler PSStCParams }	{ }
defaultCompThreshold		fonts/fontdisk.c	/^public integer defaultCompThreshold, defaultCacheT/ ;" global 1 { FontDiskInit FontShwDataHandler }	{ }
defaultCustomDictSize		postscript/postscript.c	/^#define	defaultCustomDictSize 8/ ;" macro 1 { }	{ }
defaultHalftone		device/devinit.c	/^public DevHalftone *defaultHalftone;/ ;" global 1 { BM34InitClassVars FmSetupMark GenDefaultHalftone LBMWakeUp MP12InitClassVars MaskSetupMark mpdWakeup }	{ }
defaultInUse		graphics/gray.c	/^private boolean defaultInUse;/ ;" global 1 { FreePatternBase GetPatternBase GrayInit }	{ }
defaultPatBase		graphics/gray.c	/^private PGrayQ defaultPatBase;/ ;" global 1 { FreePatternBase GetPatternBase }	{ }
defaultPostHow		product/event.c	/^} postHow, defaultPostHow = { {/ ;" global 6 { EventInit }	{ }
devPrimStorage		device/devprim.c	/^private Pool devPrimStorage;/ ;" global 1 { DisposeDevPrim NewDevPrim }	{ }
devXAOffset		device/mark.c	/^DevCd devXAOffset;/ ;" global 1 { BlackMasksMarkReal BlackRunMark ClippedMasksMark FmGetReadWriteScanline FmGetWriteScanline GrayMasksMark GrayRectMark GrayRunMark Mark WhiteMasksMark WhiteRunMark }	{ }
deviceCause		bintree/layer.c	/^NXDevice *deviceCause;		\/* Device of current cause/ ;" global 1 { BPObscureInside LMoveTo LNewAt }	{ }
deviceCount		bintree/layer.c	/^int deviceCount;		\/* Number of active devices *\// ;" global 1 { DriverInit PSCountFrameBuffers PSFrameBuffer }	{ }
deviceList		bintree/layer.c	/^NXDevice *deviceList;		\/* Head of linked-list of d/ ;" global 1 { DriverInit EXBuildExtents EXDummyScreens EXInitialize LNewAt PSFrameBuffer PSInitEvents PingAsyncDrivers SysSyncCursor }	{ }
devsweven		fonts/fontbuild.c	/^#define devsweven (fontCtx->fontBuild._devsweven)/ ;" macro 1 { Adjust BlueLock BuildChar CCRunStd }	{ fontCtx }
dfCacheThreshold		fonts/fontcache.h	/^#define dfCacheThreshold 12500	\/* max size for any/ ;" macro 1 { FontDiskInit }	{ }
dfCompThreshold		fonts/fontcache.h	/^#define dfCompThreshold 1250	\/* min size for compr/ ;" macro 1 { FontDiskInit }	{ }
dfacmd		language/dict.c	/^private CmdObj dfacmd;/ ;" global 1 { DFAProc DictInit }	{ }
dgBlue		devpattern/patternpriv.h	/^#define dgBlue 0/ ;" macro 1 { ColorSetup }	{ }
dgGray		devpattern/patternpriv.h	/^#define dgGray 3/ ;" macro 1 { ColorSetup GraySetup Gry4Of4Setup MonoSetup }	{ }
dgGreen		devpattern/patternpriv.h	/^#define dgGreen 1/ ;" macro 1 { ColorSetup }	{ }
dgNColors		devpattern/patternpriv.h	/^#define dgNColors 4/ ;" macro 1 { AllocScreen FlushPatCache }	{ }
dgRed		devpattern/patternpriv.h	/^#define dgRed 2/ ;" macro 1 { ColorSetup }	{ }
dictObj		include/basictypes.h	/^#define	dictObj		8/ ;" macro 1 { AddEntry AllocPDict CCBMRun CheckCompositeFont DFAProc DictInit End Equal FillCircle FindMaxFID FindSibling GCInternal_TraceROMDict GC_WasCollected KAKnown MIDPurgedByGC MIDPurgedByRestore MakeCompFont MakeFontSupp MakeMID MapFontDirectory PSCopy PSCrColorScreen PSCrScreen PSDictGetPObj PSDictGetTestPObj PSForAll PSGet PSImage PSLength PSNoAccess PSPut PSRCheck PSReadOnly PSRgstOps PSSCheck PSSetColorScreen PSSetHalftone PSSetScreen PSWCheck PopPDict PrintObj PrintVal RelocateObj RelocateObject RgstInitialFont ScanPkdAry TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj pFD trytoload }	{ }
dictStk		language/stack.c	/^public	PStack	dictStk;/ ;" global 1 { CStmClose CheckAllStacks ClearDictStack CreateContext CreateStacks DPopP DPushP DTopP DictInit DumpDefault HandleStackOverflow LanguageDataHandler PSCntDictStack PSDictStack PSEnd PSFontRun PSFork PSStackStats PSWhere PushStackRoots trytoload }	{ }
dictfull		include/error.h	/^#define dictfull errorNames[0]/ ;" macro 1 { PutInDict }	{ errorNames }
digitToBinary		language/scanner.c	/^private readonly Card8 digitToBinary[] = {/ ;" global 6 { StmToken }	{ }
disableRecovery		include/disk.h	/^#define disableRecovery 4	\/* disable error recover/ ;" macro 1 { }	{ }
discard		language/grammar.h	/^#define discard 0/ ;" macro 1 { ATail CarefulPushP ClearExecStack PSExit Pkdary StmToken dknown }	{ }
disceol		language/grammar.h	/^#define disceol 2/ ;" macro 1 { LineComplete StmToken }	{ }
diskRead		include/disk.h	/^#define diskRead 0x7a90		\/* magic numbers for disk/ ;" macro 1 { }	{ }
diskWrite		include/disk.h	/^#define diskWrite 0x7a91/ ;" macro 1 { }	{ }
displayPath		bintree/drivers.c	/^static const char *displayPath = NEXTSTEP_DISPLAY_/ ;" global 1 { FilterDirProc LoadAllDrivers LoadSingleDriver }	{ }
disposeHostDict		device/hostdict.c	/^void disposeHostDict(hostDict)/ ;" function 20 { }	{ HostDictEntry free }
disposePrebuiltFont		device/nextprebuilt.c	/^static void disposePrebuiltFont(NextPrebuiltFont */ ;" function 6 { IniPreBuiltChars }	{ fclose free standardEncoding }
divBoundsAt		bintree/bounds.c	/^void divBoundsAt(Bounds *original, Bounds *lesser,/ ;" function 7 { DPCompositeFrom DPCompositeTo }	{ MaxBound MinBound }
divPiecePool		bintree/divpiece.c	/^static char *divPiecePool;    \/* Blind pointer to / ;" global 1 { DPFree DPInitialize DPNewAt }	{ }
dknown		language/dict.c	/^private boolean dknown(d, name, checkacc)/ ;" function 15 { ForceKnown Known }	{ InvlAccess KeyName PDictObj PKeyVal SearchDict XlatDictRef d discard nAccess nameObj true }
dlFC		fonts/fontdisk.c	/^public boolean cchInited, dlFC;/ ;" global 1 { }	{ }
dlm		language/classarray.h	/^  dlm,						\/* NUL *\// ;" global 1 { }	{ }
doFixupMap		fonts/fontbuild.c	/^#define doFixupMap (fontCtx->fontBuild._doFixup)/ ;" macro 1 { BuildChar CCRunStd InitSlopes }	{ fontCtx }
doLong		bitmap/bm34comp.c	/^#define doLong(s,d)  *((int *)d) = *((int *)s), s+/ ;" macro 1 { BM34MoveRect }	{ d s }
doOffsetting		graphics/pathpriv.c	/^  private boolean needVec, doOffsetting;/ ;" global 1 { InitOFill OFClose OFLineTo OFMoveToP OffsetFill }	{ }
doShort		bitmap/bm34comp.c	/^#define doShort(s,d) *d++ = *s++/ ;" macro 1 { BM34MoveRect }	{ d s }
doSkip		bitmap/bm34comp.c	/^#define doSkip(p,rb)  p = (pixel_t *)((char *)p + / ;" macro 1 { BM34MoveRect }	{ p }
doTarget		vm/vm_relocate.c	/^#define doTarget false/ ;" macro 1 { BuildSegmentTable }	{ false }
doingVectors		graphics/stroke.c	/^          doingVectors,/ ;" global 1 { DoStroke FillQuad PreCacheTrapCircles PreStroke StrkLnTo }	{ }
dooffsetlock		fonts/fontbuild.c	/^#define dooffsetlock (fontCtx->fontBuild._dooffset/ ;" macro 1 { BuildChar CCRunStd }	{ fontCtx }
dot		language/classarray.h	/^  dot,						\/* . *\// ;" global 1 { PSCVS }	{ }
dpadd		fp/dpintmach.030.s	/^ENTRY(dpadd)/ ;" function 1 { }	{ }
dpdiv		fp/dpintmach.030.s	/^ENTRY(dpdiv)/ ;" function 1 { }	{ }
dpmul		fp/dpintmach.030.s	/^ENTRY(dpmul)/ ;" function 1 { }	{ }
dpneg		fp/dpintmach.030.s	/^ENTRY(dpneg)/ ;" function 1 { }	{ }
dpsfpglobals		fp/mtxvec.c	/^public DPSFPGlobalsRec *dpsfpglobals;/ ;" global 1 { FPInit fp10 fp100 fp1024 fp1073741824 fp16k fp180 fp1p3333333 fp1p5707963268 fp270 fp3 fp360 fp3p1415926535 fp4 fp5 fp50 fp6 fp65536 fp6p2831853071 fp72 fp8 fp90 fpHalf fpOne fpTwo fpZero fpp001 fpp015 fpp03 fpp05 fpp1 fpp11 fpp2 fpp25 fpp3 fpp3364 fpp45 fpp515 fpp53 fpp552 fpp59 fpp7 fpp9 }	{ }
dpsub		fp/dpintmach.030.s	/^ENTRY(dpsub)/ ;" function 1 { }	{ }
driverCount		bintree/layer.c	/^int driverCount;		\/* Number of active drivers *\// ;" global 1 { DriverInit LoadSingleDriver }	{ }
driverList		bintree/layer.c	/^NXDriver *driverList;		\/* Head of linked-list of d/ ;" global 1 { DriverInit LoadActiveDrivers LoadSingleDriver }	{ }
dscndname		fonts/fontbuild.c	/^                   xhghtname, dscndname, ascndname/ ;" global 1 { CCRunStd }	{ }
dstkoverflow		include/error.h	/^#define dstkoverflow errorNames[1]/ ;" macro 1 { HandleStackOverflow }	{ errorNames }
dstkunderflow		include/error.h	/^#define dstkunderflow errorNames[2]/ ;" macro 1 { PSEnd }	{ errorNames }
dummyClock		product/nextmain.c	/^static int dummyClock;/ ;" global 1 { Mnextmain }	{ }
dummyMark		language/exec.c	/^private int *dummyMark;/ ;" global 1 { }	{ }
dummySubList		bintree/layer.c	/^SubList dummySubList;		\/* SubList of on&offscreen / ;" global 1 { EXAllocDummies EXDummyScreens LMoveTo }	{ }
dynCmdIndex		vm/rgstcmds.c	/^  dynCmdIndex,		\/* base cmdIndex for current OpSet/ ;" global 1 { RgstDynamicCmd }	{ }
dynOpIndex		vm/rgstcmds.c	/^  dynOpIndex,		\/* index of next op to assign in cu/ ;" global 1 { RgstDynamicCmd }	{ }
dynOpLimit		vm/rgstcmds.c	/^  dynOpLimit;		\/* size of current OpSet *\// ;" global 1 { RgstDynamicCmd }	{ }
dynOpSetID		vm/rgstcmds.c	/^private Int16 dynOpSetID; \/* next OpSet ID to assi/ ;" global 1 { RgstDynamicCmd }	{ }
dynOpSetIndex		vm/rgstcmds.c	/^  dynOpSetIndex,	\/* current OpSet table index for / ;" global 1 { RgstDynamicCmd }	{ }
dynamicCmdsDelta		vm/rgstcmds.c	/^#define dynamicCmdsDelta 50	\/* increment to expand/ ;" macro 1 { AllocCmds Init_Cmds RgstDynamicCmd }	{ }
eNm		fonts/fontbuild.c	/^                   fdgbndsnm, eNm, lNm, ErNm, char/ ;" global 1 { GetErosion }	{ }
ecDeviceBase		include/except.h	/^#define ecDeviceBase 256/ ;" macro 1 { }	{ }
ecFileSystemBase		include/except.h	/^#define ecFileSystemBase 0/ ;" macro 1 { }	{ }
ecIOError		include/except.h	/^#define ecIOError (ecPostScript+2)		\/* ioerror *\// ;" macro 1 { FetchCharOutline GetFontStream MapErrno OCFetchFromDisk UDReadAttr UDRename }	{ ecPostScript }
ecInvalidAccess		include/except.h	/^#define ecInvalidAccess (ecPostScript+0)	\/* invali/ ;" macro 1 { }	{ ecPostScript }
ecInvalidFileAccess		include/except.h	/^#define ecInvalidFileAccess (ecPostScript+1)	\/* in/ ;" macro 1 { EStmCreate FontStmCreate MapErrno }	{ ecPostScript }
ecInvalidID		include/except.h	/^#define	ecInvalidID (ecPostScript+8)		\/* invalidid/ ;" macro 1 { PSInvalidID }	{ ecPostScript }
ecLimitCheck		include/except.h	/^#define ecLimitCheck (ecPostScript+3)		\/* limitche/ ;" macro 1 { BuildRelocationTable CCRunStd ConstCMYKPattern ConstGrayPattern ConstRGBPattern GetBuffers GrayPattern Gry4Of4Setup Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 MonoSetup RGBPattern ReadRelocationTable SETUPPARAMS SetupGrayPattern StmToken }	{ ecPostScript }
ecPostScript		include/except.h	/^#define ecPostScript 512/ ;" macro 1 { ecIOError ecInvalidAccess ecInvalidFileAccess ecInvalidID ecLimitCheck ecRangeCheck ecUndef ecUndefFileName ecUndefResult }	{ }
ecRangeCheck		include/except.h	/^#define ecRangeCheck (ecPostScript+4)		\/* rangeche/ ;" macro 1 { ReportErrno ps_getsize }	{ ecPostScript }
ecUndef		include/except.h	/^#define ecUndef (ecPostScript+5)		\/* undefined *\// ;" macro 1 { EIUndef EUndef FontUndef UDUndef }	{ ecPostScript }
ecUndefFileName		include/except.h	/^#define ecUndefFileName (ecPostScript+6)	\/* undefi/ ;" macro 1 { FontReadAttr MapErrno }	{ ecPostScript }
ecUndefResult		include/except.h	/^#define ecUndefResult (ecPostScript+7)		\/* undefin/ ;" macro 1 { MtxInvert NumOverflow RaiseHack ReportErrno StmToken }	{ ecPostScript }
echo		language/langdata.h	/^#define	echo		(languageCtxt->streamData._echo)/ ;" macro 1 { Erase LanguageDataHandler LineEdit PSEcho }	{ languageCtxt }
edent		language/grammar.h	/^#define edent 14/ ;" macro 1 { }	{ }
edentState		language/scanner.c	/^private readonly StateRec edentState = {/ ;" global 15 { }	{ }
edgeArray		graphics/qreducer.c	/^private Edge edgeArray, freeEdge, endEdgeArray;/ ;" global 1 { IniQReducer QResetReducer }	{ }
edgemaxx		graphics/graphics.c	/^public Fixed edgeminx, edgeminy, edgemaxx, edgemax/ ;" global 1 { BuildEdge FClNewPt FinishPath FontPathBBox InitFontFlat SetBBCompMark }	{ }
edgemaxy		graphics/graphics.c	/^public Fixed edgeminx, edgeminy, edgemaxx, edgemax/ ;" global 1 { BuildEdge FClNewPt FinishPath FontPathBBox InitFontFlat SetBBCompMark }	{ }
edgeminx		graphics/graphics.c	/^public Fixed edgeminx, edgeminy, edgemaxx, edgemax/ ;" global 1 { BuildEdge FClNewPt FinishPath FontPathBBox InitFontFlat SetBBCompMark }	{ }
edgeminy		graphics/graphics.c	/^public Fixed edgeminx, edgeminy, edgemaxx, edgemax/ ;" global 1 { BuildEdge FClNewPt FinishPath FontPathBBox InitFontFlat SetBBCompMark }	{ }
edgerec		graphics/qreducer.c	/^typedef struct edgerec {/ ;" struct 13 { }	{ }
emptyDevBounds		device/devbounds.c	/^static DevBounds emptyDevBounds =/ ;" global 2 { EmptyDevBounds }	{ }
emptyarray		fonts/fontbuild.c	/^#define emptyarray	globals->_emptyarray/ ;" macro 1 { CCRunStd FontBuildInit }	{ globals }
enableTrickyDictCopy		language/dict.c	/^private boolean enableTrickyDictCopy;/ ;" global 1 { DictCtxDestroy PutInDict UnDef }	{ }
encRealValues		language/packedarray.c	/^public readonly real encRealValues[RealCodes] = {-/ ;" global 1 { DecodeObj EncodeObj RelocateObj }	{ }
encname		fonts/fontbuild.c	/^                   famBluesNm, famOtherBluesNm, en/ ;" global 1 { CCBMRun FontEncode PSCCRun }	{ }
endBuffData		graphics/qreducer.c	/^private Int16 *buffData, *endBuffData, *clipBuffDa/ ;" global 1 { IniQReducer QReduce }	{ }
endCircleMasks		graphics/stroke.c	/^         *endCircleMasks;/ ;" global 1 { AddCircleMask IniStroke }	{ }
endClipBuffData		graphics/qreducer.c	/^private Int16 *buffData, *endBuffData, *clipBuffDa/ ;" global 1 { }	{ }
endDAcmd		language/scanner.c	/^private NameObj beginDAcmd, endDAcmd;/ ;" global 1 { ScannerInit StmToken }	{ }
endEdgeArray		graphics/qreducer.c	/^private Edge edgeArray, freeEdge, endEdgeArray;/ ;" global 1 { BuildEdge IniQReducer }	{ }
endGlbClrLst		fonts/fontbuild.c	/^#define endGlbClrLst ((PGlbClr)(fontCtx->fontBuild/ ;" macro 1 { IniGlbClrBuffs NewGlbClr }	{ PGlbClr fontCtx }
endGlbCntrLst		fonts/fontbuild.c	/^#define endGlbCntrLst ((PGlbCntr)(fontCtx->fontBui/ ;" macro 1 { IniGlbClrBuffs NewGlbCntr }	{ PGlbCntr fontCtx }
endLine		graphics/reducer.c	/^private LnOffset curLine, endLine;/ ;" global 1 { IniReducer MakeLine }	{ }
endPntQ		graphics/reducer.c	/^private PqOffset curPq, pqHead, pqRecent, endPntQ,/ ;" global 1 { IniReducer PQInsert }	{ }
endPoint		graphics/reducer.c	/^private PtOffset curPoint, firstPoint, lastPoint, / ;" global 1 { IniReducer MakePoint }	{ }
endScanArray		graphics/qreducer.c	/^private ScanList scanArray, freeScan, endScanArray/ ;" global 1 { AllocScanList IniQReducer }	{ }
endchar		fonts/fontbuild.c	/^#define endchar (fontCtx->fontBuild._endchar)/ ;" macro 1 { CCRunStd }	{ fontCtx }
endswitch		include/publictypes.h	/^#define endswitch default:;/ ;" macro 1 { ArrayInit BinObjInit ControlInit DictInit ExecInit ExecPushP FontBuildInit FontCacheInit FontDiskInit FontShowInit GrayInit Init_SaveRestore Init_VM_Memory Init_VM_Space PkdaryInit Reduce ScannerInit StackInit StateInit StreamInit StringInit TypeInit UnixInit }	{ }
engineclassnm		fonts/fontbuild.c	/^                   otherBluesName, engineclassnm, / ;" global 1 { GetErosion }	{ }
enumerateHostDict		device/hostdict.c	/^void enumerateHostDict(hostDict, enumerate)/ ;" function 11 { }	{ HostDictEntry }
eoRule		graphics/reducer.c	/^private boolean curIsClipLine, interiorClipMode, e/ ;" global 1 { Reduce ShipTrapezoid }	{ }
eos		language/grammar.h	/^#define eos 0/ ;" macro 1 { }	{ }
epart		language/grammar.h	/^#define epart 8/ ;" macro 1 { }	{ }
epartState		language/scanner.c	/^private readonly StateRec epartState = {/ ;" global 15 { }	{ }
eqa		graphics/pathops.c	/^#define eqa d0.x/ ;" macro 1 { FMiniFltn FltnCurve }	{ }
eqb		graphics/pathops.c	/^#define eqb d0.y/ ;" macro 1 { FMiniFltn FltnCurve }	{ }
eqc		graphics/pathops.c	/^#define eqc d1.x/ ;" macro 1 { FltnCurve }	{ }
eqd		graphics/pathops.c	/^#define eqd d1.y/ ;" macro 1 { FltnCurve }	{ }
eraseStr		language/stodevedit.c	/^private readonly character eraseStr[] = "\\010 \\010/ ;" global 1 { Erase }	{ }
erodeConst		graphics/pathpriv.c	/^  private Fixed offsetwidth, erodeConst, ofwSt, ol/ ;" global 1 { InitOFill OFLineTo OffsetFill }	{ }
erodeFoo		fonts/fontbuild.c	/^public Fixed erodeOffset, erodeFoo;/ ;" global 1 { GetErosion }	{ }
erodeOffset		fonts/fontbuild.c	/^public Fixed erodeOffset, erodeFoo;/ ;" global 1 { GetErosion }	{ }
erosion		fonts/flex.c	/^global Fixed erosion;/ ;" global 1 { Adjust BlueLock BuildChar CCRunStd CalcHW2 FinGlbClrLocs FlexProc GetErosion NormalizeSW PathEndChar }	{ }
errorNames		vm/vm.c	/^public PNameObj errorNames;/ ;" global 1 { VMInit VMerror dictfull dstkoverflow dstkunderflow estkoverflow invlaccess invlcontext invlexit invlflaccess invlfont invlid invlrestore ioerror limitcheck nocurrentpoint rangecheck stackoverflow stackunderflow syntaxerror typecheck undeffilename undefined undefresult unmatchedmark unregistered }	{ }
escObj		include/basictypes.h	/^#define	escObj		15/ ;" macro 1 { AryToMrk CheckStackElement CmdIndexObj ContainsRefs CountToMark Equal FindOpSet GC_PrivGCMustTrace GC_WasCollected HandleGCFinalize MonExitProc MonitorExit PSAcquireLock PSClrToMrk PSCopy PSMonitor PSNoAccess PSNotify PSPopGState PSRCheck PSReadOnly PSReleaseLock PSRgstOps PSRstr PSType PSWCheck PSWait PerformFinalization PopGState PrintObj RelocateObj RelocateObject RgstDynamicCmd RgstOpSet ScanNameArray TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj VMCopyGeneric VMPutGeneric WriteObject }	{ }
escToChar		language/scanner.c	/^private readonly Card8 escToChar[] = {/ ;" global 3 { StmToken }	{ }
escbf		language/classarray.h	/^  escbf,					\/* b *\// ;" global 1 { }	{ }
escchr		language/grammar.h	/^#define escchr 16/ ;" macro 1 { }	{ }
escchrState		language/scanner.c	/^private readonly StateRec escchrState = {/ ;" global 15 { }	{ }
escnrt		language/classarray.h	/^  escnrt,					\/* n *\// ;" global 1 { }	{ }
escoct1		language/grammar.h	/^#define escoct1 17/ ;" macro 1 { }	{ }
escoct1State		language/scanner.c	/^private readonly StateRec escoct1State = {/ ;" global 15 { }	{ }
escoct2		language/grammar.h	/^#define escoct2 18/ ;" macro 1 { }	{ }
escoct2State		language/scanner.c	/^private readonly StateRec escoct2State = {/ ;" global 15 { }	{ }
esign		language/grammar.h	/^#define esign 7/ ;" macro 1 { }	{ }
esignState		language/scanner.c	/^private readonly StateRec esignState = {/ ;" global 15 { }	{ }
estkoverflow		include/error.h	/^#define estkoverflow errorNames[3]/ ;" macro 1 { HandleStackOverflow }	{ errorNames }
evFd		mousekeyboard/routines.c	/^int evFd = -1;/ ;" global 1 { }	{ }
eventErrorPending		product/event.c	/^private int eventErrorPending;/ ;" global 1 { DispatchEvents PSGetEvents SendEvent }	{ }
eventGlobals		mousekeyboard/vars.h	/^EventGlobals *eventGlobals;	\/* Pointer to globals / ;" global 1 { CheckShield ClearWdNRect CurrentMouse DispatchEvents DisplayCursor PSButton PSCurrentEventTime PSGetEvents PSInitEvents PSMoveWindow PSOrderWindow PSPlaceWindow PSRightButton PSSetNRect PSSetWindowLevel PostNotification SelectPSContext SendEvent TermWindow }	{ }
eventHeader		product/event.c	/^} eventHeader =/ ;" global 5 { SendEvent WriteEvent }	{ }
eventPort		product/event.c	/^private	port_t eventPort;	\/* Port to which event n/ ;" global 1 { PSGetEvents PSInitEvents }	{ }
evp		mousekeyboard/vars.h	/^EvVars *evp;			\/* Pointer to all my shared variabl/ ;" global 1 { CHECKOPEN CheckShield DisplayCursor RemoveCursor SysHideCursor SysObscureCursor SysRevealCursor SysShowCursor WCDUMP_SHMEM }	{ }
exactSizeFIDFactor		fonts/fontspriv.h	/^#define exactSizeFIDFactor 1/ ;" macro 1 { CheckPrebuiltOptions }	{ }
exch		graphics/graypriv.c	/^#define exch(a,b) {x = *a;  *a = *b;  *b = x;}/ ;" macro 1 { SortGQ }	{ }
exclusiveContextSemaphore		postscript/contextimpl.c	/^private integer exclusiveContextSemaphore;/ ;" global 1 { TotalExclusionSemaphore }	{ }
exclusivePSContext		postscript/contextimpl.c	/^private PSContext exclusivePSContext;	\/* Only cont/ ;" global 1 { ExclusivePSContext TotalExclusionSemaphore }	{ }
execAbort		language/exec.c	/^#define	execAbort		(languageCtxt->execData._execAb/ ;" macro 1 { CExec PSStop SetAbort }	{ languageCtxt }
execAbortPending		language/exec.c	/^#define	execAbortPending	(languageCtxt->execData._/ ;" macro 1 { CExec NotifyAbort PSStop SetAbort }	{ languageCtxt }
execKeywordsTable		fonts/fontrun.c	/^private KeywordAction execKeywordsTable[] = {/ ;" global 11 { NewState }	{ }
execLevel		language/exec.c	/^#define	execLevel		(languageCtxt->execData._execLe/ ;" macro 1 { }	{ languageCtxt }
execStk		language/stack.c	/^public	PStack	execStk;/ ;" global 1 { CLoop CRepeat CheckAllStacks CheckStackElement ClearExecStack CrFile CreateContext CreateStacks DumpDefault EPopInteger EPopP EPopPReal EPushInteger EPushP EPushPReal ETopP ExecPushP GC_MoveRecycleRange HandleStackOverflow LanguageDataHandler PSCntExecStack PSExecStack PSStackStats PushStackRoots UnwindExecStk }	{ }
execcmd		language/exec.c	/^private CmdObj execcmd, stoppedcmd, reptcmd, intfo/ ;" global 1 { ExecInit }	{ }
exitCode		postscript/postscript.c	/^public integer exitCode;/ ;" global 1 { StateInit TopError }	{ }
exitError		include/publictypes.h	/^#define exitError 2/ ;" macro 1 { CheckVersion PSAbort TopError }	{ }
exitNormal		include/publictypes.h	/^#define exitNormal 1/ ;" macro 1 { StateInit }	{ }
exitRegion		graphics/reducer.c	/^private RgOffset rgFree, rgHead, exitRegion;/ ;" global 1 { RdcEntry RdcExit }	{ }
exp		language/classarray.h	/^  exp,						\/* E *\// ;" global 1 { DEBUGERROR }	{ }
expand2to16		bitmap/bm34conv.c	/^static unsigned short expand2to16[4] = {0x000, 0x5/ ;" global 1 { BM34Convert2to16 }	{ }
expand2to32		bitmap/bm38conv.c	/^static const uint expand2to32[4] = {0, 0x55555500,/ ;" global 1 { BM38Convert2to32 }	{ }
expand2to4		bitmap/bm34conv.c	/^static unsigned char expand2to4[4]   = {0x0, 0x5, / ;" global 1 { BM34Convert2to16 }	{ }
expand2to8		bitmap/bm38conv.c	/^static const uint expand2to8[4]  = {0, 0x55, 0xAA,/ ;" global 1 { BM38Convert2to32 }	{ }
expandedScanLine		device/clippedmask.c	/^private PSCANTYPE expandedScanLine;/ ;" global 1 { ExpandOneLine }	{ }
expandedScanLineLength		device/clippedmask.c	/^private integer expandedScanLineLength = 0;/ ;" global 1 { ExpandOneLine }	{ }
expfctrname		fonts/fontbuild.c	/^		   rndstmname, expfctrname,/ ;" global 1 { CCRunStd }	{ }
expon		language/grammar.h	/^#define expon 6/ ;" macro 1 { }	{ }
exponState		language/scanner.c	/^private readonly StateRec exponState = {/ ;" global 15 { }	{ }
extSubList		bintree/layer.c	/^SubList extSubList;		\/* SubList of extent layers */ ;" global 1 { EXBuildExtents EXDummyScreens EXFindHoles EXInitialize LMoveTo LNewAt }	{ }
extended		graphics/pathbuild.c	/^#define extended longreal/ ;" macro 1 { Equal LGt PSAdd PSCvI PSDiv PSMul PSRound PSSub PSTruncate }	{ longreal }
fDshLen		graphics/stroke.c	/^          fDshLen;/ ;" global 1 { CheckForRectangle DoStroke StrkStrt }	{ }
fMetrics		fonts/cachedev.c	/^#define fMetrics (fontCtx->fontBuild._fMetrics)/ ;" macro 1 { BMRun CCRunStd }	{ fontCtx }
f_ccw		graphics/stroke.c	/^private boolean f_ccw(p0, p1, p2) DevCd p0, p1, p2/ ;" function 7 { F_MiterPoint }	{ Fixed fixmul }
f_dLf		graphics/stroke.c	/^          f_dLf,/ ;" global 1 { FF_StrkLnTo F_FillJoin F_FillLineSegment F_StrkCap }	{ }
f_dLfSt		graphics/stroke.c	/^          f_dLfSt,/ ;" global 1 { FF_StrkLnTo F_StrkCap F_StrkClose }	{ }
f_dP1		graphics/stroke.c	/^	  f_dP1,/ ;" global 1 { CheckForRectangle FF_StrkLnTo FF_StrkStrt FF_Vector F_FillJoin F_NormPair F_StrkCap }	{ }
f_dP1St		graphics/stroke.c	/^          f_dP1St,/ ;" global 1 { FF_StrkStrt F_StrkCap F_StrkClose F_VecClose }	{ }
f_dRt		graphics/stroke.c	/^private DevCd   f_dRt,/ ;" global 1 { FF_StrkLnTo F_FillJoin F_FillLineSegment F_StrkCap }	{ }
f_dRtSt		graphics/stroke.c	/^          f_dRtSt,/ ;" global 1 { FF_StrkLnTo F_StrkCap F_StrkClose }	{ }
f_halfwidth		graphics/stroke.c	/^          f_halfwidth,/ ;" global 1 { DoStroke F_AdjstHW F_FillJoin F_StrkCap FastFillCurveJoin }	{ }
f_maxBevelChord		graphics/stroke.c	/^          f_maxBevelChord;/ ;" global 1 { FastFillCurveJoin GetMaxBevelChord }	{ }
f_throwThreshold		graphics/stroke.c	/^private Fixed   f_throwThreshold,/ ;" global 1 { DoStroke F_MiterPoint }	{ }
f_uV1		graphics/stroke.c	/^          f_uV1,/ ;" global 1 { FF_StrkLnTo F_FillJoin F_StrkCap }	{ }
f_uV2St		graphics/stroke.c	/^          f_uV2St;/ ;" global 1 { FF_StrkLnTo F_StrkCap F_StrkClose }	{ }
fakePrevCross		graphics/cscan.c	/^private Cross fakePrevCross;		\/* Somewhere to poin/ ;" global 1 { CSPathPoints }	{ }
false		include/publictypes.h	/^#define false 0/ ;" macro 1 { AddEntry Adjust BM38ConvertFrom BuildChar CHECKOKBUILD CSContains CacheAddEntry CacheLookup CacheReuseEntry CheckForPSNotify ClearMark CompSlowShow CompositeShow ComputeHideBounds CreatePrivateVM DMFRestore DestroyPSSpace DoQuit EnterGlbClr ErodeSW FastShow FinishLock FlushMID GetDSW GetMetrics2 GetNotifyAbortCode GetStandardWidths InitSlopes InsertLock LBMNewFromData LCompositeFrom LCopyBitsFrom LFree LMark LNewInstance LRemoveFromInstance LoadSingleDriver MP12Composite MP12ConvertFrom MP12MakePublic MP12_Mark MPComposite MakeCacheDev MakeCacheDev2 NoRoom PSClrInt PSCoProc PSDictGetTestPObj PSFlushMasks PSJoin PSSetCchDevice PreXLock ROkToBuild RoundSW SetCch SetupMaskDev StartGlcrLock StartLock SwitchPSContext TrimCI (etc) }	{ }
famBluesNm		fonts/fontbuild.c	/^                   famBluesNm, famOtherBluesNm, en/ ;" global 1 { FamilyBlueLocs }	{ }
famOtherBluesNm		fonts/fontbuild.c	/^                   famBluesNm, famOtherBluesNm, en/ ;" global 1 { FamilyBlueLocs }	{ }
favail		include/stream.h	/^#define favail(stm) (*(stm)->procs->FAvail)(stm)/ ;" macro 1 { CStmFAvail ComStmFAvail PSBytesAvailable }	{ }
fcCheck		fonts/fontcache.c	/^public boolean fcdebug, fchange, fcCheck;/ ;" global 1 { CheckCI FontCacheInit PSFCCheck }	{ }
fcData		fonts/fontdisk.c	/^public FCDataRec fcData;/ ;" global 1 { CIAlloc CIFree CheckMT InitFontCache MTAlloc MTFree PSCacheStatus TrimEldestMID }	{ }
fcdebug		fonts/fontcache.c	/^public boolean fcdebug, fchange, fcCheck;/ ;" global 1 { FontCacheInit PSFCDebug }	{ }
fchange		fonts/fontcache.c	/^public boolean fcdebug, fchange, fcCheck;/ ;" global 1 { FontCacheInit }	{ }
fclose		include/stream.h	/^#define fclose(stm) (*(stm)->procs->FClose)(stm)/ ;" macro 1 { BuildInitialState CloseStmForSB CreateFileStream DetermineFormat FCFreeEntry LineEdit PSEExec PSTraceRecycler UDiskFind WriteVMToFile disposePrebuiltFont os_cleanup readPrebuiltFile }	{ }
fclpxmax		graphics/reducer.c	/^private Fixed fclpxmin, fclpxmax;/ ;" global 1 { Reduce ShipTrapezoid }	{ }
fclpxmin		graphics/reducer.c	/^private Fixed fclpxmin, fclpxmax;/ ;" global 1 { Reduce ShipTrapezoid }	{ }
fcrDash		graphics/stroke.c	/^          fcrDash;/ ;" global 1 { CheckForRectangle DoStroke StrkStrt }	{ }
fdcp		fonts/fontshow.c	/^if (!CvtToXFixed(&(ss-->fdcp), ssr->rdcp, LOWERSHO/ ;" global 1 { CompositeShow FastShow FasterShow GetCPDelta MakeCacheDev MakeCacheDev2 MoveToAfterShow NoRoom PSSetCharWidth ShowByName SimpleShowByName }	{ }
fdgbndsnm		fonts/fontbuild.c	/^                   fdgbndsnm, eNm, lNm, ErNm, char/ ;" global 1 { FudgeBlueBands }	{ }
feof		include/stream.h	/^#define feof(stm) ((stm)->flags.eof)/ ;" macro 1 { CStmClose ComStmClose PSWrtHexString UFFlush WriteObject }	{ }
ferror		include/stream.h	/^#define ferror(stm) ((stm)->flags.error)/ ;" macro 1 { CloseStmForSB DecStmByteCnt LineEdit PSRead PSReadHexString PSReadLine PSReadString PSToken PSWrtHexString SendTAToDisk ValidateTA WriteObject }	{ }
fetchCharOutline		fonts/fontbuild.c	/^public PVoidProc fetchCharOutline;/ ;" global 1 { FontRunInit InternalBuildChar }	{ }
ffldDsh		graphics/stroke.c	/^          ffldDsh,/ ;" global 1 { CheckForRectangle DoStroke StrkCap StrkStrt }	{ }
fflush		include/stream.h	/^#define fflush(stm) (*(stm)->procs->FFlush)(stm)/ ;" macro 1 { BuildRelocationTable CStmFlush CallFromPS ChangeRecyclerExecLevel CheckBM ComStmFlush DPrintSOP DebugPrintEvent DebugPrintIntersect DebugPrintMakeLine DebugPrintMakePoint DebugPrintNewPoint DebugPrintRdcClose DebugPrintRegions DumpRoot EndFlush EventFlush ExtendRecycler LPrintOn LineComplete LineEdit PSFls PSFlsFile PSMakeVM PSPrObject PSPrValue PSProf PSRecyclerStatus PSTraceRecycler PrAryBody PrNameAryBody PrPkdaryBody PrStmBody PrintBoolean PrintDOB PrintDevCoord PrintKeyVal PrintMTX PrintMidDict PrintNameEntry PrintSOP ReclaimRecyclableVM Recyclable RecyclerPop RecyclerPush ResetRecycler SendEvent TraceInvalidation UFClose UFSeek UFilBuf WriteObject WriteRelocatedVMToFile WriteVMToFile os_eprintf pEldest pFD pMM pMS pSFC }	{ }
fileCache		fonts/fontrun.c	/^private PCache fileCache;/ ;" global 1 { FCOpenStream FontRunInit GetFontStream }	{ }
fileCacheProcs		fonts/fontrun.c	/^private CacheProcs fileCacheProcs = {/ ;" global 3 { FontRunInit }	{ }
fileno		stream/unixstmpriv.h	/^#define fileno(stm) (GetPUnixData(stm)->file)/ ;" macro 1 { DynaLoadFile DynaUnloadFile UFAvail UFClose UFTell UFilBuf UFlsBuf os_fdopen os_fileno os_fopen }	{ GetPUnixData }
filledDash		graphics/stroke.c	/^          filledDash,/ ;" global 1 { CheckForRectangle FillLineSegment StrkCap StrkClose StrkLnTo StrkStrt }	{ }
finalizeProcs		vm/saverestore.c	/^public FinalizeProc finalizeProcs[nObTypes];/ ;" global 1 { CallFinalizeProc RstrGenericObjects VMRgstFinalize }	{ }
finalizeReasons		vm/saverestore.c	/^public Card16 finalizeReasons[nObTypes];/ ;" global 1 { RecordFinalizableObject VMRgstFinalize WantToFinalize _RecordFinalizableObject }	{ }
findMatrixNumber		device/nextprebuilt.c	/^static inline int findMatrixNumber(NextPrebuiltFon/ ;" function 14 { buildPrebuilt }	{ Fixed pflttofix }
firstChunk		language/name.c	/^private NameChunk *firstChunk;/ ;" global 1 { AddToGCTable NameInit PushSharedNames }	{ }
firstCross		graphics/cscan.c	/^private CrossPtr firstCross;		\/* First Cross we ge/ ;" global 1 { BuildYCross CScan ResetCScan }	{ }
firstPathBuffer		graphics/cscan.c	/^private boolean firstPathBuffer;	\/* True: Processi/ ;" global 1 { CSPathPoints InitNewPath }	{ }
firstPoint		graphics/cscan.c	/^private FCd firstPoint;			\/* First point in path */ ;" global 1 { CSPathPoints InitReducer InsertLock NewPoint RdcClose }	{ }
fixdiv		fp/fixedmach.030.s	/^ENTRY(fixdiv)/ ;" function 1 { BuildChar CCRunStd CheckBlueScale CompositeShow FF_StrkLnTo F_AdjstHW F_MiterPoint FastFillCurveJoin FastShow FixOnePath FixedXatY FlexProc OFIntersect buildPrebuilt initslope }	{ }
fixedMemAddr		include/disk.h	/^#define fixedMemAddr 2		\/* transfer every page to\// ;" macro 1 { }	{ }
fixmul		fp/fixedmach.030.s	/^ENTRY(fixmul)/ ;" function 1 { ApproxDLen BlueLock BuildEdge CCRunStd CheckBlueScale CompositeShow DoBlend EdgeInit FTfm F_AdjstHW F_MiterPoint F_VecMul F_VecTurn FastFillCurveJoin FastShow FixOnePath FixedXatY GetErosion Map PutStdW QBresenhamMT QDoEUsrPth QDoUserPath ResetCScan ShowByName UseStdWidth adz_fixed_tfm bcz_fixed_tfm buildPrebuilt d_adz_fixed_tfm d_bcz_fixed_tfm d_gen_fixed_tfm f_ccw gen_fixed_tfm inv_adz_fixed_tfm inv_bcz_fixed_tfm inv_d_adz_fixed_tfm inv_d_bcz_fixed_tfm inv_d_gen_fixed_tfm inv_gen_fixed_tfm xshrink yshrink }	{ }
fixratio		fp/fixedmach.030.s	/^ENTRY(fixratio)/ ;" function 1 { AlignIsolatedStems F_Dist FastFillBevel FastFillQuad OFLineTo QuadTrap }	{ }
fixtodbl		fp/fixedmach.030.s	/^ENTRY(fixtodbl)/ ;" function 1 { CallAddTrapToPath DebugPrintRegions PrintDevCoord ShipTrapezoid }	{ }
fixtopflt		fp/fixedmach.030.s	/^ENTRY(fixtopflt)/ ;" function 1 { AdjstHW CCBuild CCRunStd CScan CallAddTrapToPath DoXInflections ErodeSW FIXTOPFLT FRCNextPt FSetCharWidth GetDSW GetErosion HF2R InitOFill LF2R NormalizePoint OffsetFill PFCdToPRCd PathEndChar PushFixed QDoEUsrPth QDoUserPath SetCch SetCharWidth UnFixCd }	{ }
fixupmap		fonts/fontbuild.c	/^private procedure fixupmap(pls) PLokSeq pls;/ ;" function 29 { InitSlopes }	{ Fixed IntX PLokPair lokFixedMap p pLokData register true }
flatEps		fonts/fontbuild.c	/^global Fixed flatEps;/ ;" global 1 { BuildChar CCRunStd ConvertToListPath DoStrkPth DoStroke EnterRdcInCache FeedPathToReducer FillUserPathEnumerate FindRdcInCache InitGS OffsetFill PSCrFlatThreshold PSFltnPth PSSetFlatThreshold QFillUserPathEnumerate StrkCurve }	{ }
flatPth		graphics/pathops.c	/^private Path flatPth;/ ;" global 1 { FlPthCls FlPthLnTo FlPthMvTo FltnPth }	{ }
floor		fonts/flex.c	/^#define floor(f) ((f) & 0xFFFF0000L)/ ;" macro 1 { FlexProc ceil }	{ }
flushCo		bintree/bitpiece.c	/^static CompositeOperation flushCo;	\/* For flushing/ ;" global 1 { BPCompositeFrom BPCompositeTo BPInitialize BPMark BPRenderInBounds }	{ }
flushExposures		product/event.c	/^private boolean flushExposures; \/* Exposure events/ ;" global 1 { EventInit PSGetEvents PSSetFlushExposures }	{ }
fmImageProcs		device/framedev.c	/^public PImageProcs fmImageProcs;/ ;" global 1 { BM34InitClassVars BM38InitClassVars FmSetupImageArgs ImIdent ImIdent32 ImStretch IniFmDevImpl MP12InitClassVars MaskSetupImageArgs }	{ }
fmMarkProcs		device/framedev.c	/^public PMarkProcs fmMarkProcs;/ ;" global 1 { FmSetupMark IniFmDevImpl IniMaskDevImpl IniWdDevImpl MaskGoAway }	{ }
fmProcs		device/framedev.c	/^public DevProcs *fmProcs;/ ;" global 1 { FrameDevice IniFmDevImpl IniMaskDevImpl IniMpdDevImpl IniWdDevImpl mpdGoAway }	{ }
fntmtx		fonts/cachedev.c	/^#define fntmtx (fontCtx->fontBuild._fntmtx)/ ;" macro 1 { ApproxDLen FntITfmP MakeCacheDev MakeCacheDev2 SetMtxProcs SetupFntMtx adz_fixed_tfm adz_frac_tfm bcz_fixed_tfm bcz_frac_tfm d_adz_fixed_tfm d_adz_frac_tfm d_bcz_fixed_tfm d_bcz_frac_tfm d_gen_fixed_tfm d_gen_frac_tfm gen_fixed_tfm gen_frac_tfm gsmatrix inv_adz_fixed_tfm inv_bcz_fixed_tfm inv_d_adz_fixed_tfm inv_d_bcz_fixed_tfm inv_d_gen_fixed_tfm inv_gen_fixed_tfm }	{ fontCtx }
fntpthnm		fonts/fontbuild.c	/^                   pnttypnm, fntpthnm, stdencname,/ ;" global 1 { }	{ }
fntypname		fonts/fontbuild.c	/^#define fntypname fontsNames[nm_FontType]/ ;" macro 1 { BuildChar }	{ fontsNames nm_FontType }
fontCtx		fonts/fontcache.c	/^public PFontCtx fontCtx;/ ;" global 1 { FontsInit PccCount blueScale blueShiftStart closepath ctxCacheThreshold ctxCompThreshold curMT curveto devsweven doFixupMap dooffsetlock endGlbClrLst endGlbCntrLst endchar erosion fMetrics fntmtx freeGlbClr freeGlbCntr glbClrLst glbCntrLst glcrFailure glcrOn glcrPrepass glcrRoundUp gsfactor hasCDevProc idealwidth isoutline lenstdhw lenstdvw lineto lockoffset locktype moveto nGlbClrs nGlbCntrs pGblClrBuf pGblCntrBuf pLokData pfont rndwidth showLevel ss stdhw stdvw tfmLockPt toosmall usefix }	{ }
fontDict		device/nextprebuilt.c	/^static HostDict *nameDict, *fontDict;/ ;" global 1 { BuildChar CompSlowShow CompositeShow CopyDelayedFont DelayedMakeFont GSHasPrivateStuff GetFontAndCharInfo IniPreBuiltChars KABegin KADefinefont KADict KAEndCSDict KAFontDirectory MakeCacheDev2 NewState PSCrFont ReValidateMID SSRestoreState ScanCompString SetFont ShowInternal getPrebuiltFont }	{ }
fontDirPath		stodev/stodevfont.c	/^static char *fontDirPath;/ ;" global 1 { FontEnumerate FontPathSearch FontStoDevInit }	{ }
fontObj		include/basictypes.h	/^#define	fontObj		10/ ;" macro 1 { Equal MakeCompFont MakeFontSupp MakeMID PrintObj RelocateObj RelocateObject TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
fontSemaphore		fonts/fontbuild.c	/^#define fontSemaphore	globals->_fontSemaphore/ ;" macro 1 { BuildChar CCRunStd ChrMapBuildChar InternalBuildChar RgstFontsSemaphoreProc }	{ globals }
fontsNames		fonts/fontcache.c	/^public PNameObj fontsNames;/ ;" global 1 { ActOnKeyword BCcmdName CheckCompositeFont CheckPrebuiltOptions ChrMapBuildChar DelayedMakeFont EncCharNameProc ErNm FDNestedDepth FindMaxFID FindSibling FndFntSibling FontCacheInit GetBuildingOption GetFontAndCharInfo GetFontDirectory GetInfo GetInfoSupp InternalBuildChar InvalidateCachedMIDs KADefinefont KAEndCSDict MakeCompFont MakeFont MakeFontSupp MakeMID MinEncodingLength PSDefineFont PSSelectFont PrintMidDict RgstInitialFont RgstPrebuiltInfo SetFont aovrname ascndname bboxname blfuzznm blueScaleName blueShiftName bluename bovrname bslnname capovrname cdevprocname chardataname charoffsetsname charstringsname cphghtname dscndname eNm encname engineclassnm expfctrname famBluesNm famOtherBluesNm fdgbndsnm fntypname gsfactorNm hlfswname idealwidthNm (etc) }	{ }
footprint		coroutine/corouxfer.c	/^private readonly integer footprint = FOOTPRINT;/ ;" global 1 { CurStackUnused InitCoroutine MinStackUnused }	{ }
forallCI		fonts/fontspriv.h	/^#define forallCI(x) for(x = &CI[1]; x < CIEnd; x++/ ;" macro 1 { CheckCI PSFlushFontCache }	{ CI CIEnd }
forallMM		fonts/fontspriv.h	/^#define forallMM(x) for(x = &MM[0]; x < MMEnd; x++/ ;" macro 1 { InitFontCache PurgeFontRefs PurgeMM pMM }	{ MM MMEnd }
forallMS		fonts/fontspriv.h	/^#define forallMS(x) for(x = &MS[0]; x < MSEnd; x++/ ;" macro 1 { InitFontCache PSFlushCache pMS }	{ MS MSEnd }
forallMT		fonts/fontspriv.h	/^#define forallMT(x) for(x = &MT[1]; x < MTEnd; x++/ ;" macro 1 { CheckMT }	{ MT MTEnd }
forallSFC		fonts/fontspriv.h	/^#define forallSFC(phead, psf) \\/ ;" macro 1 { pSFC }	{ NIL sfCache szSelectFontHash }
forkStartup		postscript/contextimpl.c	/^private Object forkStartup; \/* precompute invarian/ ;" global 1 { ContextOpsInit PSFork }	{ }
formatToType		language/binaryobject.c	/^private Card8 formatToType[] = {/ ;" global 2 { BinObjInit WriteObject }	{ }
fp10		include/fp.h	/^#define fp10  10.0/ ;" macro 1 { AdjstHW FPInit InitGraphics }	{ }
fp100		include/fp.h	/^#define fp100  100.0/ ;" macro 1 { FPInit PSSetFlatThreshold PopLightness }	{ }
fp1024		include/fp.h	/^#define fp1024  1024.0/ ;" macro 1 { Dist FPInit HashMID }	{ }
fp1073741824		include/fp.h	/^#define fp1073741824  1073741824.0/ ;" macro 1 { FPInit }	{ }
fp16k		include/fp.h	/^#define fp16k  16000.0/ ;" macro 1 { AddCircleMask DoPath DoRdcPth DoStroke EnterCircle FPInit FillBevel FillQuad FloatRectFill Get16KBBox GetMaxBevelChord OffsetFill PreEnumerateSetup ReduceQuadPath ReduceRect TransDevPrim UCGetDevPrim hiBnd loBnd }	{ }
fp180		include/fp.h	/^#define fp180  180.0/ ;" macro 1 { FPInit }	{ }
fp1p3333333		include/fp.h	/^#define fp1p3333333  1.3333333/ ;" macro 1 { ArcToInternal FPInit SmallArc }	{ }
fp1p5707963268		include/fp.h	/^#define fp1p5707963268  1.5707963268/ ;" macro 1 { FPInit }	{ }
fp255		device/devcommon.c	/^#define fp255 255.0/ ;" macro 1 { ConvertColorCMYK ConvertColorRGB IniDevCommon }	{ }
fp270		include/fp.h	/^#define fp270  270.0/ ;" macro 1 { FPInit }	{ }
fp3		include/fp.h	/^#define fp3  3.0/ ;" macro 1 { FPInit PSCrHSBColor }	{ }
fp360		include/fp.h	/^#define fp360  360.0/ ;" macro 1 { ArcInternal FPInit PSATan }	{ }
fp3p1415926535		include/fp.h	/^#define fp3p1415926535  3.1415926535/ ;" macro 1 { FPInit }	{ }
fp4		include/fp.h	/^#define fp4  4.0/ ;" macro 1 { FPInit }	{ }
fp5		include/fp.h	/^#define fp5  5.0/ ;" macro 1 { FPInit PSCrHSBColor }	{ }
fp50		include/fp.h	/^#define fp50  50.0/ ;" macro 1 { DoStroke FPInit }	{ }
fp6		include/fp.h	/^#define fp6  6.0/ ;" macro 1 { FPInit PSCrHSBColor PSSetHSBColor }	{ }
fp65536		include/fp.h	/^#define fp65536  65536.0/ ;" macro 1 { FPInit }	{ }
fp6p2831853071		include/fp.h	/^#define fp6p2831853071  6.2831853071/ ;" macro 1 { FPInit }	{ }
fp72		include/fp.h	/^#define fp72  72.0/ ;" macro 1 { FPInit GenerateThresholds GetValidFreqAngleOctet GetValidFreqAnglePair }	{ }
fp8		include/fp.h	/^#define fp8  8.0/ ;" macro 1 { FPInit SetUpForRectClip }	{ }
fp90		include/fp.h	/^#define fp90  90.0/ ;" macro 1 { ArcInternal FPInit RtatMtx }	{ }
fpHalf		include/fp.h	/^#define  fpHalf  0.5/ ;" macro 1 { AddCirclePath ArcCenterShift ArcToInternal CCRunStd CalcThresholds FPInit FillCurveJoin FillInBG FillInTfrTbl FillInUCR GetCPDelta GetCurveMiddle HalfRoundCap NoRoom NormalizePoint PSRound PreCacheTrapCircles RRoundP SetupForCircles StrkCap }	{ }
fpHalf1		device/devcommon.c	/^#define fpHalf1 0.50001/ ;" macro 1 { ConvertColorCMYK ConvertColorRGB }	{ }
fpOne		include/fp.h	/^#define fpOne  1.0/ ;" macro 1 { AdjstHW AnamorphicNormStrkWdth ArcCenterShift ArcInternal ArcToInternal CalcThresholds ConvertColorRGB CrRGBColor DoStroke FPInit FillCircle FillInBG FillInTfrTbl FillInUCR FltnCurve GetMaxBevelChord GetXDistYDist IdentityMtx IniClrSpace IniStroke InitGS InitGraphics LimitColor MakeBBox MiterPoint MtxInvert NormalizePoint NormalizeStrokeWidth NullDefaultMtx OffsetFill PSCrCMYKColor PSCrGray PSCrHSBColor PSErasePage PSSetHSBColor PSSetMiterLimit PSShowPage RtatMtx SetupFntMtx SetupForCircles SmallArc StrkLnTo TlatMtx }	{ }
fpTwo		include/fp.h	/^#define fpTwo  2.0/ ;" macro 1 { AnamorphicNormStrkWdth CCRunStd CDist CalcThresholds FPInit FillCircle GetMaxBevelChord NormalizeStrokeWidth OffsetFill ROkToBuild SetHalfWidth SetNormMidPts SmallArc StrkCurve }	{ }
fpZero		include/fp.h	/^#define fpZero  0.0/ ;" macro 1 { AdjstHW AnamorphicNormStrkWdth ArcCenterShift ArcInternal CCRun Cnct CrRGBColor DoStroke FPInit FastFillCurveJoin FillCircle FillJoin FindCurrentViewInCache FontShowInit GetDSW GetMaxBevelChord GetXDistYDist HalfRoundCap IDTfmPCd IdentityMtx IniStroke InitGraphics InitMtx InitPath LengthTfm LimitColor MtxInvert NewPath NewViewClip NoRoom NormalizePoint NormalizeStrokeWidth PSCrCMYKColor PSCrGray PSCrHSBColor PSScaleFont PSSetHSBColor PSSetStrokeAdjust PopLightness PreCacheTrapCircles RealEq0 RealGe0 RealGt0 RealLe0 RealLt0 RealNe0 RtatMtx ScalMtx SetCacheDev SetCch SetHalfWidth SetLineWidth SetMaskDevice SetMtx ShowByName TlatMtx }	{ }
fpart		language/grammar.h	/^#define fpart 5/ ;" macro 1 { }	{ }
fpartState		language/scanner.c	/^private readonly StateRec fpartState = {/ ;" global 15 { }	{ }
fpp001		include/fp.h	/^#define  fpp001  0.001/ ;" macro 1 { AdjstHW CheckForAnamorphicMatrix DoStroke FPInit MtxEqAlmost SetHalfWidth }	{ }
fpp015		include/fp.h	/^#define  fpp015  0.015/ ;" macro 1 { FPInit }	{ }
fpp03		include/fp.h	/^#define  fpp03  0.03/ ;" macro 1 { FPInit }	{ }
fpp05		include/fp.h	/^#define  fpp05  0.05/ ;" macro 1 { }	{ }
fpp1		include/fp.h	/^#define  fpp1  0.1/ ;" macro 1 { FPInit }	{ }
fpp11		include/fp.h	/^#define  fpp11  0.11/ ;" macro 1 { FPInit }	{ }
fpp2		include/fp.h	/^#define  fpp2  0.2/ ;" macro 1 { FPInit PSSetFlatThreshold }	{ }
fpp25		include/fp.h	/^#define  fpp25  0.25/ ;" macro 1 { FPInit }	{ }
fpp3		include/fp.h	/^#define  fpp3  0.3/ ;" macro 1 { FPInit IniClrSpace IniDevCommon }	{ }
fpp3364		include/fp.h	/^#define  fpp3364  0.3364/ ;" macro 1 { FPInit }	{ }
fpp45		include/fp.h	/^#define  fpp45  0.45/ ;" macro 1 { FPInit }	{ }
fpp515		include/fp.h	/^#define  fpp515  0.515/ ;" macro 1 { FPInit }	{ }
fpp53		include/fp.h	/^#define  fpp53  0.53/ ;" macro 1 { FPInit }	{ }
fpp552		include/fp.h	/^#define  fpp552  0.552/ ;" macro 1 { AddCirclePath ArcInternal FPInit }	{ }
fpp59		include/fp.h	/^#define  fpp59  0.59/ ;" macro 1 { FPInit IniClrSpace IniDevCommon }	{ }
fpp7		include/fp.h	/^#define  fpp7  0.7/ ;" macro 1 { FPInit F_MiterPoint MiterPoint }	{ }
fpp9		include/fp.h	/^#define  fpp9  0.9/ ;" macro 1 { FPInit }	{ }
fputeof		include/stream.h	/^#define fputeof(stm) (*(stm)->procs->FPutEOF)(stm)/ ;" macro 1 { CloseFile }	{ }
fr		graphics/graphics.c	/^private FltnRec fr;/ ;" global 1 { DoEUserPath DoPath DoUserPath FFCurveTo InitFontFlat OffsetFill QDoEUsrPth QDoUserPath QUsrPthCurveTo SetupFntMtx UsrPthCurveTo UsrPthDoCurveTo adz_frac_tfm bcz_frac_tfm d_adz_frac_tfm d_bcz_frac_tfm d_gen_frac_tfm gen_frac_tfm }	{ }
fracmul		fp/fixedmach.030.s	/^ENTRY(fracmul)/ ;" function 1 { F_Dist OFIntersect OFLineTo }	{ }
fracratio		fp/fixedmach.030.s	/^ENTRY(fracratio)/ ;" function 1 { OFIntersect }	{ }
fracsqrt		fp/fixedmach.030.s	/^ENTRY(fracsqrt)/ ;" function 1 { F_Dist IniPathPriv IniStroke OFLineTo }	{ }
fractodbl		fp/fixedmach.030.s	/^ENTRY(fractodbl)/ ;" function 1 { }	{ }
fractopflt		fp/fixedmach.030.s	/^ENTRY(fractopflt)/ ;" function 1 { }	{ }
framebase		device/framedev.c	/^public PSCANTYPE framebase;/ ;" global 1 { BM34_Mark BM38_Mark BlackMasksMark BlackMasksMarkReal BlackRunMark ClippedMasksMark ConstantMasksMark ConstantRectMark ConstantRunMark ConstantTrapsMark FmGetReadWriteScanline FmGetWriteScanline FmShowPage FmWakeup GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark ImIdent ImIdent32 ImStretch MP12MarkDataAndAlpha MaskGoAway WhiteMasksMark WhiteRunMark mpdWakeup }	{ }
framebytewidth		device/framedev.c	/^public integer framebytewidth;/ ;" global 1 { BM34_Mark BM38_Mark BlackMasksMark BlackMasksMarkReal BlackRunMark ClippedMasksMark ConstantMasksMark ConstantRectMark ConstantRunMark ConstantTrapsMark FmGetReadWriteScanline FmGetWriteScanline FmWakeup GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark ImIdent ImIdent32 ImStretch MP12_Mark MaskGoAway WhiteMasksMark WhiteRunMark mpdWakeup }	{ }
framelog2BD		device/framedev.c	/^public Card8 framelog2BD;/ ;" global 1 { BlackMasksMark BlackMasksMarkReal BlackRunMark ClippedMasksMark ConstantMasksMark ConstantRunMark ConstantTrapsMark ExpandOneLine FmGetReadWriteScanline FmGetWriteScanline FmWakeup GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark ImIdent ImStretch LBMWakeUp MaskGoAway WhiteMasksMark WhiteRunMark mpdWakeup }	{ }
frdcbias		graphics/graphics.c	/^private integer rdcbias, frdcbias;/ ;" global 1 { DevToRdc FDevToRdc RdcToDev SetRdcScal SetScal }	{ }
fread		include/stream.h	/^#define fread(ptr, itemSize, nItems, stm) \\/ ;" macro 1 { ComStmFRead GetStreamSource KACharDef KARdSubrsData OCFetchFromDisk PSReadString ReadBinObjSeq ReadNumAry ReadRelocationTable ReadVM StartVM StmToken ValidateTA }	{ }
free		device/hostdict.c	/^#define free(ptr) os_free(ptr)/ ;" macro 1 { ABM_ClearAll AddressValidAtLevel AppendSegmentData AppendSegmentHeader ApplyRelocation BMAlloc BMFree BMUnlink BuildSegmentTable CSExpand CSFree CheckBM ClaimPreallocChars CompactBM DisplayVMSection Display_VM_Segment EXAddToSubList ExpandTempCauses ExpandVMSection FindFreeBytes FreeMon FreeRegion GCInternal_ResetFreePointer GetVMFirst GrowBM GrowPool ImStretch InitMaskCache InitTimedEvents LBMFree Length LinkRegionFreeList LoadAllDrivers LoadSingleDriver MP12_Mark MRMoveRect MakeRegion NSCreateWB NSDestroyWB NSLoadContextType NXGrayPatDestroy PSRecyclerStatus PreallocChars ReadVM ReclaimMovedVM Reclaim_Reserve ReleaseMsg RemColorRef RemGTRef RemRndrRef ResetAllocCounter ResetVMSection RstrToLevel Save SetVMSegmentType ShrinkBM StmToken Use_Reserve VM_Usage WriteRelocatedVMToFile (etc) }	{ }
freeEdge		graphics/qreducer.c	/^private Edge edgeArray, freeEdge, endEdgeArray;/ ;" global 1 { BuildEdge QResetReducer }	{ }
freeGlbClr		fonts/fontbuild.c	/^#define freeGlbClr ((PGlbClr)(fontCtx->fontBuild._/ ;" macro 1 { IniGlbClrBuffs NewGlbClr }	{ PGlbClr fontCtx }
freeGlbCntr		fonts/fontbuild.c	/^#define freeGlbCntr ((PGlbCntr)(fontCtx->fontBuild/ ;" macro 1 { IniGlbClrBuffs NewGlbCntr }	{ PGlbCntr fontCtx }
freeMsg		product/ipcscheduler.c	/^SchedulerMsg *freeMsg;	\/* Free list of one *\// ;" global 1 { AcquireMsg ReleaseMsg }	{ }
freeScan		graphics/qreducer.c	/^private ScanList scanArray, freeScan, endScanArray/ ;" global 1 { AllocScanList QResetReducer }	{ }
freemem		fonts/fontspriv.h	/^#define freemem 0	\/* not allocated *\// ;" macro 1 { CIAlloc CIFree CheckMT InitFontCache InsertSelectFont IsAllocMT IsFreeMT MTAlloc MTFree PSFlushMasks PurgeSFForKey SearchSelectFont TrimCI }	{ }
freset		include/stream.h	/^#define freset(stm) (*(stm)->procs->FReset)(stm)/ ;" macro 1 { PSResFile }	{ }
frset_overwriteCopy		include/vm.h	/^#define frset_overwriteCopy (1<<fr_overwrite | 1<</ ;" macro 1 { IniGStates }	{ }
frset_reclaim		include/vm.h	/^#define frset_reclaim (1<<fr_restore | 1<<fr_priva/ ;" macro 1 { DictInit IniGStates StreamInit }	{ }
fsAge		fonts/fastshow.c	/^private integer FSCacheAge[FSCacheSz], fsAge, fsRe/ ;" global 1 { FastShow }	{ }
fsRecent		fonts/fastshow.c	/^private integer FSCacheAge[FSCacheSz], fsAge, fsRe/ ;" global 1 { FastShow }	{ }
fseek		include/stream.h	/^#define fseek(stm, offset, base) (*(stm)->procs->F/ ;" macro 1 { CStmFSeek ComStmFSeek DecStmByteCnt DetermineFormat OCFetchFromDisk PSFontRun PSStFilPos ReadSegHeader SendTAToDisk ValidateTA os_rewind }	{ }
ftell		include/stream.h	/^#define ftell(stm) (*(stm)->procs->FTell)(stm)/ ;" macro 1 { CStmFTell ComStmFTell KACharDef PSFilPos ReadSegHeader SendTAToDisk }	{ }
fwrite		include/stream.h	/^#define fwrite(ptr, itemSize, nItems, stm) \\/ ;" macro 1 { MFree MNew PSPrint PSWrtString SendEvent SendTAToDisk TopError WriteEvent WriteObject WriteRelocationTable WriteVMSection WriteVMToFile }	{ }
fxdeps		graphics/stroke.c	/^#define fxdeps (64)/ ;" macro 1 { F_NormPair NormalizePoint }	{ }
fxfrmul		fp/fixedmach.030.s	/^ENTRY(fxfrmul)/ ;" function 1 { AlignIsolatedStems BuildChar F_Dist FastFillBevel FastFillQuad OFLineTo QuadTrap adz_frac_tfm bcz_frac_tfm d_adz_frac_tfm d_bcz_frac_tfm d_gen_frac_tfm gen_frac_tfm }	{ }
gMaskPattern		device/framemaskdev.c	/^public PatternHandle gMaskPattern;/ ;" global 1 { FmMakeMaskDevice IniMaskDevImpl MaskSetupImageArgs }	{ }
gPathBBox		graphics/stroke.c	/^private BBoxRec gPathBBox;/ ;" global 1 { DoStroke FillCircle Reinitms }	{ }
gProcNewPoint		graphics/pathpriv.c	/^  private procedure (*gProcNewPoint)(), (*gProcRdc/ ;" global 1 { InitOFill OFClose OFIntersect OFLineTo OFMoveToP OffsetFill }	{ }
gProcRdcClose		graphics/pathpriv.c	/^  private procedure (*gProcNewPoint)(), (*gProcRdc/ ;" global 1 { InitOFill OFClose OffsetFill }	{ }
gStateExtProc		graphics/gstates.c	/^private PVoidProc gStateExtProc;/ ;" global 1 { CreateGStack GSAddRefs GSRemRefs InitPostScript Mnextmain SetGStateExtProc }	{ }
gTimestamp		postscript/contextimpl.c	/^private integer nextID, nextFreeID, gTimestamp;/ ;" global 1 { ContextOpsInit NewContextID NewSpaceID RecycleID }	{ }
gblClrBuf1		fonts/fontbuild.c	/^private GrowableBuffer gblClrBuf1, gblClrBuf2, gbl/ ;" global 1 { IniGlbClrBuffs }	{ }
gblClrBuf2		fonts/fontbuild.c	/^private GrowableBuffer gblClrBuf1, gblClrBuf2, gbl/ ;" global 1 { IniGlbClrBuffs }	{ }
gblClrBuf3		fonts/fontbuild.c	/^private GrowableBuffer gblClrBuf1, gblClrBuf2, gbl/ ;" global 1 { CCRunStd IniGlbClrBuffs }	{ }
gbuf		graphics/reducer.c	/^public GrowableBuffer gbuf[4];/ ;" global 1 { IniReducer }	{ }
gcFd		vm/gcmisc.c	/^public int gcFd;/ ;" global 1 { GCInternal_Init GC_CollectPrivate GC_CollectShared PSSetGCLog }	{ }
gcFinalizeProcs		vm/gcmisc.c	/^public CallBackItem *gcFinalizeProcs;/ ;" global 1 { GCInternal_Init GC_CollectPrivate GC_CollectShared GC_RegisterFinalizeProc TracePrivateForShared }	{ }
gcGetCurrentCtxt		vm/vm_garbage.c	/^GenericID (*gcGetCurrentCtxt)(), (*gcGetNextCtxt)(/ ;" global 1 { Ctxt_GetCurrentCtxt RgstGCContextProcs }	{ }
gcGetNextCtxt		vm/vm_garbage.c	/^GenericID (*gcGetCurrentCtxt)(), (*gcGetNextCtxt)(/ ;" global 1 { Ctxt_GetNextCtxt RgstGCContextProcs }	{ }
gcGetNextSpace		vm/vm_garbage.c	/^PVM	  (*gcGetNextSpace)();/ ;" global 1 { Ctxt_GetNextSpace RgstGCContextProcs }	{ }
gcSetCurrentCtxt		vm/vm_garbage.c	/^PCard8 (*gcSetCurrentCtxt)();/ ;" global 1 { Ctxt_SetCurrentCtxt RgstGCContextProcs }	{ }
gcSpaceSemaphore		vm/vm_garbage.c	/^PVoidProc gcSpaceSemaphore, gcTotalSemaphore;/ ;" global 1 { Ctxt_RestartAllSiblings Ctxt_StopAllSiblings RgstGCContextProcs }	{ }
gcTotalSemaphore		vm/vm_garbage.c	/^PVoidProc gcSpaceSemaphore, gcTotalSemaphore;/ ;" global 1 { Ctxt_RestartAllCtxts Ctxt_StopAllCtxts RgstGCContextProcs }	{ }
genProcs		device/genericdev.c	/^public DevProcs *genProcs;/ ;" global 1 { IniFmDevImpl IniGenDevImpl }	{ }
gen_fixed_tfm		fonts/fontmatrix.c	/^private procedure gen_fixed_tfm(c, ct) FCd c; PFCd/ ;" function 5 { SetMtxProcs }	{ Fixed PFixMtx d fixmul fntmtx register }
gen_frac_tfm		fonts/fontmatrix.c	/^private procedure gen_frac_tfm(c, ct) FCd c; PFCd / ;" function 5 { SetMtxProcs }	{ Fixed PFracMtx d fntmtx fr fxfrmul register }
getHostDict		device/hostdict.c	/^char *getHostDict(hostDict, key)/ ;" function 25 { DevRgstPrebuiltFontInfo getPrebuiltFont }	{ HostDictEntry TIME hashHostDict strcmp }
getPrebuiltFont		device/nextprebuilt.c	/^NextPrebuiltFont *getPrebuiltFont(unsigned long in/ ;" function 21 { GetPreBuiltChar }	{ FontPathSearch NextPrebuiltFont PREBUILT_SUFFIX defHostDict fontDict getHostDict nameDict readPrebuiltFile strcpy }
getRootsProcs		vm/gcmisc.c	/^public CallBackItem *getRootsProcs;/ ;" global 1 { GCInternal_Init GC_RgstGetRootsProc TracePrivateForShared TracePrivateVM }	{ }
getc		include/stream.h	/^#define getc(stm) \\/ ;" macro 1 { CStmBFilBuf CStmHFilBuf ComStmFilBuf DetermineFormat GetIntBE GetIntLE HandlePendingEOL LineComplete LineEdit LineFilBuf PSBytesAvailable PSEExec PSRead ReadIBMSegHdr ReadMacSegHdr UFSeek getchar os_fgetc os_fgets os_gets }	{ }
getchar		include/stream.h	/^#define getchar() getc(os_stdin)/ ;" macro 1 { }	{ getc os_stdin }
gets		include/stream.h	/^#define	gets	os_gets/ ;" macro 1 { }	{ os_gets }
glbClrLst		fonts/fontbuild.c	/^#define glbClrLst ((PGlbClr)(fontCtx->fontBuild._g/ ;" macro 1 { AdjustToStdWidths BuildGlbCntrs EnterGlbClr FindGlbClr GlbClrLine GlbFixLocs IniGlbClrBuffs NewGlbClr PrintClrs ProcessGlbClrs StartGlcrLock StartLock }	{ PGlbClr fontCtx }
glbCntrLst		fonts/fontbuild.c	/^#define glbCntrLst ((PGlbCntr)(fontCtx->fontBuild./ ;" macro 1 { EnterGlbCntr IniGlbClrBuffs NewGlbCntr PrintCntrs ProcessGlbClrs }	{ PGlbCntr fontCtx }
glcrFailure		fonts/fontbuild.c	/^#define glcrFailure (fontCtx->fontBuild._glcrFailu/ ;" macro 1 { BuildChar CCRunStd EnterGlbClr EnterGlbCntr ProcessGlbClrs }	{ fontCtx }
glcrOn		fonts/fontbuild.c	/^#define glcrOn (fontCtx->fontBuild._glcrOn)/ ;" macro 1 { BuildChar CCRunStd RBLock RMLock RVLock RYLock StartLock TfmLockPt1 TfmLockPt2 }	{ fontCtx }
glcrPrepass		fonts/fontbuild.c	/^#define glcrPrepass (fontCtx->fontBuild._glcrPrepa/ ;" macro 1 { BuildChar CCRunStd RBLock RMLock RVLock RYLock StartLock TfmLockPt1 TfmLockPt2 }	{ fontCtx }
glcrRoundUp		fonts/fontbuild.c	/^#define glcrRoundUp (fontCtx->fontBuild._glcrRound/ ;" macro 1 { }	{ fontCtx }
global		include/publictypes.h	/^#define global extern/ ;" macro 1 { }	{ }
globalGid		product/listener.c	/^public	gid_t	globalGid;	\/* same for group *\// ;" global 1 { PSResetUser PSSetUser contextGid }	{ }
globalUid		product/listener.c	/^public	uid_t	globalUid;	\/* global user id of the s/ ;" global 1 { PSResetUser PSSetUser contextUid }	{ }
globalUserSet		product/listener.c	/^static	boolean globalUserSet;	\/* Is the global use/ ;" global 1 { ListenerInit PSListener PSResetUser PSSetUser }	{ }
globals		postscript/contextimpl.c	/^private Globals globals;/ ;" global 1 { ContextOpsInit CustomOpsInit FontBuildInit GrayInit IniClrSpace IniGStates IniPathPriv UCache chunkPool chunks clrStorage colorWb colorWg colorWr ctxTab ctxTabSize defaultInUse defaultPatBase doOffsetting emptyarray erodeConst exclusiveContextSemaphore exclusivePSContext fontSemaphore forkStartup gProcNewPoint gProcRdcClose gStateExtProc gTimestamp gsStorage gstackStorage info_devsw info_fooFactor info_offsetval lruNewest lruOldest maxOffsetVal miFree monitorcmd needVec nextFreeID nextID ofLfSt of_cp of_done of_init of_np ofaSt offsetwidth ofpSt ofwSt old_a old_p old_tail old_w screenList screenPool spaces stdLokData stdencvec (etc) }	{ }
gmscale		fonts/fontbuild.c	/^internal Int16 gmscale;/ ;" global 1 { BuildChar CalcHW2 }	{ }
graphicsNames		graphics/graphics.c	/^public PNameObj graphicsNames;/ ;" global 1 { FillCircle GetInt GetType1Screen GetType2Screen GetType3Screen GetType4Screen ImageDict IniGraphics InitGS MakeScreenDict PSSetHalftone PSUPath arcNm arcnNm arctNm closepathNm curvetoNm linetoNm movetoNm rcurvetoNm rlinetoNm rmovetoNm setbboxNm ucacheNm }	{ }
graphicsStatics		graphics/graphics.c	/^public PGraphicsData graphicsStatics;/ ;" global 1 { GraphicsInit blimit curVC gsPrivate gstack randx savelevel viewClips }	{ }
grayPatternBase		devpattern/patternimpl.c	/^public PSCANTYPE grayPatternBase;/ ;" global 1 { InitCCCache InitPatternImpl }	{ }
grayPatternLimit		graphics/gray.c	/^public integer grayPatternLimit;/ ;" global 1 { GetValidFreqAngleOctet GetValidFreqAnglePair GrayInit }	{ }
greenThresholds		devpattern/imsupport.c	/^public PSCANTYPE redValues, redThresholds, greenVa/ ;" global 1 { GetGreenPixBuffers }	{ }
greenValues		devpattern/imsupport.c	/^public PSCANTYPE redValues, redThresholds, greenVa/ ;" global 1 { GetGreenPixBuffers }	{ }
gs		graphics/gstates.c	/^public PGState gs;/ ;" global 1 { AddToPath AlreadyValidMID Arc ArcC ArcInternal BreakUpPath BuildChar CCRun CCRunStd CallArc CompSlowShow CompositeShow ConvertToListPath CopyDelayedFont CreateGStack DelayedMakeFont DoArcTo DoImage DoRdcPth ErodeSW FCurveTo FLineTo FMoveTo FSetCharWidth FastShow FasterShow FeedPathToReducer Fill FindInCache GRestoreProc GRstrAll GSave GSaveProc GStackClear GStackCopy GStackRestore GStateDataHandler GetDevBBox GetFontAndCharInfo GetMtxInfo GetPathBBoxUserCds HasCurrentPoint ImageDict ImageInternal InFill InStroke InitGS InitGraphics InitOFill MakeCacheDev MakeCacheDev2 MoveToAfterShow NewDevice NewPath NoRoom NullDevice OffsetFill PSAWidthShow PSArcC PSBuildMasks (etc) }	{ }
gsPrivate		graphics/gstates.c	/^#define	gsPrivate	(graphicsStatics->gStates._gs)/ ;" macro 1 { GStateDataHandler }	{ graphicsStatics }
gsStorage		graphics/gstates.c	/^private Pool gsStorage;     \/* Pool for GStates; s/ ;" global 1 { CreateGStack GSave GStackCopy GStackRestore IniGStates }	{ }
gsfactor		fonts/fontbuild.c	/^#define gsfactor (fontCtx->fontBuild._gsfactor)/ ;" macro 1 { BuildChar CCRunStd }	{ fontCtx }
gsfactorNm		fonts/fontbuild.c	/^                   otherBluesName, engineclassnm, / ;" global 1 { }	{ }
gsmatrix		fonts/flex.c	/^#define gsmatrix (&fntmtx)/ ;" macro 1 { BuildChar CCRunStd FlexProc FntDTfmP FntIDTfmP FntITfmP FntTfmP GetMtxInfo PathEndChar RBLock RVLock }	{ fntmtx }
gstack		graphics/gstates.c	/^#define gstack          (graphicsStatics->gStates./ ;" macro 1 { GSave GStackClear GStackCopy GStackRestore GStateDataHandler PushGrfxRoots }	{ _gstack graphicsStatics }
gstackStorage		graphics/gstates.c	/^private Pool gstackStorage; \/* Storage pool for gs/ ;" global 1 { CreateGStack GStackClear IniGStates }	{ }
gtrStorage		graphics/colorops1.c	/^Pool gtrStorage;/ ;" global 1 { RemGTRef RemRndrRef }	{ }
halftonePool		devpattern/patternimpl.c	/^private Pool screenPool, halftonePool;/ ;" global 1 { AllocHalftone FreeHalftone InitPatternImpl }	{ }
hasCDevProc		fonts/fontbuild.c	/^#define hasCDevProc (fontCtx->fontBuild._hasCDevPr/ ;" macro 1 { CCBuild CCRunStd PathEndChar SetupCacheDevice }	{ fontCtx }
hashHostDict		device/hostdict.c	/^int hashHostDict(hostDict, key)/ ;" function 15 { defHostDict getHostDict }	{ }
haveBounds		graphics/stroke.c	/^          haveBounds,/ ;" global 1 { DoStroke FillCircle Reinitms }	{ }
haveFiles		devpattern/patternimpl.c	/^private boolean haveFiles;	\/* True if we could cre/ ;" global 1 { InitSLFiles SendOldestToDisk SendTAToDisk ValidateTA }	{ }
havePathCross		graphics/cscan.c	/^internal boolean havePathCross;		\/* True: Have non/ ;" global 1 { CSPathPoints }	{ }
header		product/machportdevice.c	/^	Warnin,, static declaration out of sync with head/ ;" global 1 { AcquireMsg BMAlloc BMFree BMUnlink CheckBM CompactBM ContextYield DynaLoadFile GC_WasCollected GrowBM Header InitMaskCache Length LoadSingleDriver MCFreeBytes MCGetCacheBytes MCGetTempBytes Msg_Receive NSLoadContextType PSGState ProcessSaveData PushSharedVMRoots PutInNameMap RstrGenericObjects ShrinkBM TraceSharedVM VMPutGeneric WBCoProc WBGetBitmap WBMsg_send WBNotifyNewShmem WBOpenBitmap }	{ }
hex		language/classarray.h	/^  hex, hex, hex, hex,				\/* ABCD *\// ;" global 1 { ScannerInit }	{ }
hexToBinary		language/stream.c	/^public char *hexToBinary;/ ;" global 1 { CStmHFilBuf InitHexToBin PSEExec PSReadHexString StreamInit }	{ }
hexchars		graphics/cscan.c	/^private char hexchars[] = "0123456789ABCDEF";/ ;" global 1 { BitmapByte }	{ }
hexmap		fonts/fontbuild.c	/^private char hexmap[] = "0123456789abcdef";/ ;" global 1 { OutputEnc }	{ }
hexstr		language/grammar.h	/^#define hexstr 19/ ;" macro 1 { }	{ }
hexstrState		language/scanner.c	/^private readonly StateRec hexstrState = {/ ;" global 15 { }	{ }
hiBnd		graphics/stroke.c	/^#define hiBnd XA_MAX/ ;" macro 1 { ClipVect CodePoint }	{ XA_MAX }
hiHole		vm/abmimpl.c	/^private Card8 *hiHole, *lowHole, *maxHole, *locOfM/ ;" global 1 { ABM_Init AllocSmall ResetSegFreePtr }	{ }
hiHoleID		vm/abmimpl.c	/^#define hiHoleID 2104/ ;" macro 1 { ABM_Init }	{ }
highestBitmapAddr		mp/mp.c	/^static uint *highestBitmapAddr;/ ;" global 1 { MP12SetBitmapExtent }	{ }
highestWindowInTier		product/windowops.c	/^private int highestWindowInTier(int level, SubList/ ;" function 14 { PSOrderWindow PSSetWindowLevel }	{ Layer2Wd NXBASEWINLEVEL WindowDevice level }
higray0		mp/mp12.c	/^static const SCANTYPE higray0[2]  	= { 0x44444444,/ ;" global 1 { }	{ }
higray1		mp/mp12.c	/^static const SCANTYPE higray1[2]  	= { 0x11111111,/ ;" global 1 { }	{ }
hlfswname		fonts/fontbuild.c	/^                   xovrname, capovrname, aovrname,/ ;" global 1 { CCRunStd }	{ }
holeDevice		bintree/layer.c	/^NXDevice *holeDevice;		\/* Device to control holes / ;" global 1 { DriverInit EXBuildExtents EXFindHoles LNewAt }	{ }
hookData		bintree/layer.c	/^NXHookData hookData;		\/* Temp storage for hook cal/ ;" global 1 { BPObscureBecause BPRevealBecause LMoveTo LOrder LPlaceAt LRepaintIn }	{ }
hostDictPurge		device/hostdict.c	/^void hostDictPurge(hostDict)/ ;" function 35 { defHostDict }	{ HostDictEntry free }
iLAryObj		vm/saverestore.c	/^iLAryObj = {Lobj, aAccess, arrayObj, false, 0, 0, / ;" global 1 { BinObjInit CheckCompositeFont LAryObj }	{ }
iLBoolObj		vm/saverestore.c	/^public readonly BoolObj	iLBoolObj = {Lobj, 0, bool/ ;" global 1 { BinObjInit EncodeObj LBoolObj }	{ }
iLCondObj		vm/saverestore.c	/^iLCondObj = {Lobj, 0, escObj, false, 0, 0, 0, objC/ ;" global 1 { LCondObj }	{ }
iLDictObj		vm/saverestore.c	/^public readonly DictObj	iLDictObj = {Lobj, 0, dict/ ;" global 1 { LDictObj }	{ }
iLFontObj		vm/saverestore.c	/^iLFontObj = {Lobj, 0, fontObj, true, 0, 0, 0, 0};/ ;" global 1 { LFontObj }	{ }
iLGStateObj		vm/saverestore.c	/^iLGStateObj = {Lobj, (rAccess | wAccess), escObj, / ;" global 1 { LGStateObj }	{ }
iLGenericObj		vm/saverestore.c	/^iLGenericObj = {Lobj, (rAccess | wAccess), escObj,/ ;" global 1 { BinObjInit LGenericObj }	{ }
iLIntObj		vm/saverestore.c	/^public readonly IntObj	iLIntObj = {Lobj, 0, intObj/ ;" global 1 { BinObjInit EncodeObj LIntObj }	{ }
iLLockObj		vm/saverestore.c	/^iLLockObj = {Lobj, 0, escObj, false, 0, 0, 0, objL/ ;" global 1 { LLockObj }	{ }
iLMarkObj		vm/saverestore.c	/^iLMarkObj = {Lobj, 0, escObj, true, 0, 0, 0, objMa/ ;" global 1 { LMarkObj PSJoin }	{ }
iLNameObj		vm/saverestore.c	/^iLNameObj = {Lobj, 0, nameObj, true, 0, 0, 0, 0},/ ;" global 1 { BinObjInit EncodeObj LNameObj }	{ }
iLNullObj		vm/saverestore.c	/^public readonly NullObj	iLNullObj = {Lobj, 0, null/ ;" global 1 { BinObjInit InitPostScript KAEndCSDict LNullObj RecycleMI SetDefaultHalftone }	{ }
iLPkdaryObj		vm/saverestore.c	/^iLPkdaryObj = {Lobj, (rAccess | xAccess), pkdaryOb/ ;" global 1 { LPkdaryObj }	{ }
iLRealObj		vm/saverestore.c	/^public readonly RealObj	iLRealObj = {Lobj, 0, real/ ;" global 1 { BinObjInit EncodeObj LRealObj }	{ }
iLSaveObj		vm/saverestore.c	/^iLSaveObj = {Lobj, 0, escObj, false, 0, 0, 0, objS/ ;" global 1 { LSaveObj }	{ }
iLStmObj		vm/saverestore.c	/^public readonly StmObj	iLStmObj = {Lobj, aAccess, / ;" global 1 { LStmObj }	{ }
iLStrObj		vm/saverestore.c	/^iLStrObj = {Lobj, aAccess, strObj, false, 0, 0, 0,/ ;" global 1 { BinObjInit EncodeObj LStrObj }	{ }
iXAryObj		vm/saverestore.c	/^  iXAryObj = {Xobj, aAccess, arrayObj, false, 0, 0/ ;" global 1 { XAryObj }	{ }
iXCmdObj		vm/saverestore.c	/^public readonly CmdObj	iXCmdObj = {Xobj, 0, cmdObj/ ;" global 1 { EncodeObj XCmdObj }	{ }
iXNameObj		vm/saverestore.c	/^  iXNameObj = {Xobj, 0, nameObj, true, 0, 0, 0, 0}/ ;" global 1 { EncodeObj XNameObj }	{ }
iXPkdaryObj		vm/saverestore.c	/^  iXPkdaryObj = {Xobj, (rAccess | xAccess), pkdary/ ;" global 1 { EncodeObj XPkdaryObj }	{ }
iXStrObj		vm/saverestore.c	/^  iXStrObj = {Xobj, aAccess, strObj, false, 0, 0, / ;" global 1 { XStrObj }	{ }
idealwidth		fonts/fontbuild.c	/^#define idealwidth (fontCtx->fontBuild._idealwidth/ ;" macro 1 { BuildChar CCRunStd ResetCScan }	{ fontCtx }
idealwidthNm		fonts/fontbuild.c	/^                   otherBluesName, engineclassnm, / ;" global 1 { }	{ }
ident		language/grammar.h	/^#define ident 11/ ;" macro 1 { }	{ }
identState		language/scanner.c	/^private readonly StateRec identState = {/ ;" global 15 { StmToken }	{ }
if		fonts/compshow.c	/^if (xyshow) {/ ;" function 6 { }	{ PShowState register ss ssr }
imageID		graphics/image.c	/^public integer imageID;/ ;" global 1 { ImageInternal MarkNextImage }	{ }
imageMessageList		product/windowimage.c	/^ImageMessageCell *imageMessageList;/ ;" global 1 { FindImageMessage ReceiveNextImage }	{ }
imageNum		graphics/image.h	/^_image integer imageNum;/ ;" global 1 { }	{ }
inBetweenSizeFIDFactor		fonts/fontspriv.h	/^#define inBetweenSizeFIDFactor 3/ ;" macro 1 { CheckPrebuiltOptions PreBuiltChar }	{ }
inRestore		vm/saverestore.c	/^private boolean inRestore;/ ;" global 1 { Init_SaveRestore RstrToLevel }	{ }
inbbox		graphics/fflattenpath.c	/^#define inbbox (p[-9])/ ;" macro 1 { FMiniFltn }	{ p }
incurve		graphics/stroke.c	/^          incurve,/ ;" global 1 { DoStroke FF_StrkLnTo StrkCurve StrkLnTo }	{ }
infinity		fp/isinfieee.c	/^double infinity()/ ;" function 10 { }	{ d data }
info_devsw		fonts/fontbuild.c	/^#define info_devsw	globals->_info_devsw/ ;" macro 1 { CCRunStd PathEndChar }	{ globals }
info_fooFactor		fonts/fontbuild.c	/^#define info_fooFactor	globals->_info_fooFactor/ ;" macro 1 { CCRunStd PathEndChar }	{ globals }
info_offsetval		fonts/fontbuild.c	/^#define info_offsetval	globals->_info_offsetval/ ;" macro 1 { CCRunStd PathEndChar }	{ globals }
initCtxTabSize		postscript/contextimpl.c	/^#define initCtxTabSize 100/ ;" macro 1 { ContextOpsInit }	{ }
initDictstkSize		language/stack.c	/^#define initDictstkSize 20/ ;" macro 1 { CreateStacks }	{ }
initErrorDictSize		postscript/postscript.c	/^#define initErrorDictSize 32/ ;" macro 1 { CreateSharedVM }	{ }
initExecstkSize		language/stack.c	/^#define initExecstkSize 250/ ;" macro 1 { CreateStacks }	{ }
initFontDirectorySize		postscript/postscript.c	/^#define initFontDirectorySize 250/ ;" macro 1 { CreateSharedVM }	{ }
initInternalDictSize		postscript/postscript.c	/^#define initInternalDictSize 40	\/* leave 10 or so / ;" macro 1 { CreateSharedVM }	{ }
initOpDefSize		vm/rgstcmds.c	/^#define initOpDefSize	 100	\/* default value of -O / ;" macro 1 { Init_Cmds }	{ }
initOpSetLimit		vm/rgstcmds.c	/^#define initOpSetLimit (4 * pni_end + maxCmdsExpan/ ;" macro 1 { Init_Cmds }	{ maxCmdsExpand pni_end }
initOpstkSize		language/stack.c	/^#define initOpstkSize 500/ ;" macro 1 { CreateStacks }	{ }
initRefstkSize		language/stack.c	/^#define initRefstkSize 5/ ;" macro 1 { CreateStacks }	{ }
initSharedDictSize		postscript/postscript.c	/^#define	initSharedDictSize 50/ ;" macro 1 { CreateSharedVM }	{ }
initSharedFontDirectorySize		postscript/postscript.c	/^#define initSharedFontDirectorySize 250/ ;" macro 1 { CreateSharedVM }	{ }
initStatusDictSize		postscript/postscript.c	/^#define initStatusDictSize 65	\/* leave 10 or so sp/ ;" macro 1 { CreateSharedVM }	{ }
initString		product/pscontext.c	/^private char *initString = "shareddict \/contextExe/ ;" global 1 { Mnextmain NSCreatePS }	{ }
initSysDictSize		postscript/postscript.c	/^#define initSysDictSize 315/ ;" macro 1 { CreateSharedVM }	{ }
initTrickyArraySize		postscript/postscript.c	/^#define initTrickyArraySize 20/ ;" macro 1 { CreateSharedVM }	{ }
initUserDictSize		postscript/postscript.c	/^#define initUserDictSize 200/ ;" macro 1 { CreateSharedVM }	{ }
init_prop		bintree/drivers.c	/^static void init_prop(ni_property *p, char *name, / ;" function 7 { WriteDefaultNetInfo }	{ p }
initedReals		devpattern/imsxxd11.c	/^private boolean initedReals;/ ;" global 1 { ImSXXD11 }	{ }
initialDepthLimit		bintree/layer.c	/^int initialDepthLimit;		\/* Maximum visible depth a/ ;" global 1 { CreateTypedContext DriverInit PSSetDefaultDepthLimit }	{ }
initslope		fonts/fontbuild.c	/^private procedure initslope(pls)/ ;" function 16 { InitSlopes }	{ Fixed PLokPair fixdiv p register }
initxfer		coroutine/xfersun.s	/^ENTRY(initxfer)/ ;" function 1 { CreateCoroutine }	{ }
inrect		graphics/fflattenpath.c	/^#define inrect (p[-10])/ ;" macro 1 { FFltnCurve FMiniFltn }	{ p }
inrect2		graphics/fflattenpath.c	/^#define inrect2 (p[0])/ ;" macro 1 { FMiniFltn }	{ p }
intObj		include/basictypes.h	/^#define	intObj		1/ ;" macro 1 { AFixedCar AObjF AObjR BinObjInit BuildChar BuildMultiRectPath CheckCompositeFont CheckForMtx CheckPkdMtLt ChrMapBuildChar DoUserPath FixedValue FndFntSibling FontBuildInit GetBuildingOption GetInt GetMetrics GetSpotDictEntries GetStemWidth GetThresholdDictEntries HashObject InternalBuildChar KACharDef KADict KAPutDef KARdSubrsData LGt PRealValue PSAbs PSAdd PSAnd PSCeiling PSDefineFont PSDiv PSFloor PSIntDict PSMod PSMul PSNeg PSNot PSOr PSRectClip PSRectFill PSRectViewClip PSRound PSSelectFont PSSetHalftone PSSub PSTruncate PSXor PkAObjF PkAObjR PopPNumber PrintObj QDoUserPath ReadBinObjSeq RelocateObj TypeOfObj UsrPthBBox UsrPthCheckMtLt (etc) }	{ }
intType		include/customops.h	/^#define	intType		1/ ;" macro 1 { DecodeBbox }	{ }
integer		include/publictypes.h	/^typedef long int integer;/ ;" typedef 1 { ApplyFootprints BMRun BuildChar CCBuild CCRunStd CheckCI CheckPrebuiltOptions ChrMapBuildChar CompSlowShow CompositeShow ContextOpsInit CreateCoroutine CreatePrivateVM CreateSharedVM CurStackUnused CustomOpsInit DelayedMakeFont DeleteCIs FCeil FRoundF FTruncF FastShow FasterShow FindSibling FlexProc FlushMID FndFntSibling FontBuildInit FontEncode FudgeBlueBands GetInfo GetMetrics InitPostScript InternalBuildChar InvalidateCachedMIDs LBMMark MAXinteger MINinteger MinStackUnused NEW NewContextID NewSpaceID PSCacheInit PSCurrentContext PSFlushMasks PSFork PSGetObjectType PSPopManagedObject PSRealTime PSSetShared PSUserTime PurgeFSCache RecycleID RecycleMI ReleaseCI ScanCompString SetupMaskDev StateInit TopError TrimCI (etc) }	{ }
interiorClipMode		graphics/reducer.c	/^private boolean curIsClipLine, interiorClipMode, e/ ;" global 1 { Reduce ShipTrapezoid }	{ }
internal		fonts/fontbuild.c	/^#define internal static/ ;" macro 1 { }	{ }
intforcmd		language/exec.c	/^private CmdObj execcmd, stoppedcmd, reptcmd, intfo/ ;" global 1 { CIFor ExecInit PSFor }	{ }
inv_adz_fixed_tfm		fonts/fontmatrix.c	/^private procedure inv_adz_fixed_tfm(c, ct) FCd c; / ;" function 4 { SetMtxProcs }	{ Fixed PFixMtx fixmul fntmtx register }
inv_bcz_fixed_tfm		fonts/fontmatrix.c	/^private procedure inv_bcz_fixed_tfm(c, ct) FCd c; / ;" function 4 { SetMtxProcs }	{ Fixed PFixMtx d fixmul fntmtx register }
inv_d_adz_fixed_tfm		fonts/fontmatrix.c	/^private procedure inv_d_adz_fixed_tfm(c, ct) FCd c/ ;" function 4 { SetMtxProcs }	{ Fixed PFixMtx fixmul fntmtx register }
inv_d_bcz_fixed_tfm		fonts/fontmatrix.c	/^private procedure inv_d_bcz_fixed_tfm(c, ct) FCd c/ ;" function 3 { SetMtxProcs }	{ Fixed PFixMtx d fixmul fntmtx register }
inv_d_gen_fixed_tfm		fonts/fontmatrix.c	/^private procedure inv_d_gen_fixed_tfm(c, ct) FCd c/ ;" function 4 { SetMtxProcs }	{ Fixed PFixMtx d fixmul fntmtx register }
inv_gen_fixed_tfm		fonts/fontmatrix.c	/^private procedure inv_gen_fixed_tfm(c, ct) FCd c; / ;" function 5 { SetMtxProcs }	{ Fixed PFixMtx d fixmul fntmtx register }
invlStmProcs		language/stream.c	/^private readonly StmProcs invlStmProcs = {/ ;" global 4 { StreamInit }	{ }
invlaccess		include/error.h	/^#define invlaccess errorNames[4]/ ;" macro 1 { FInvlAccess InvlAccess PSUPath PathForAll }	{ errorNames }
invlcontext		include/error.h	/^#define	invlcontext errorNames[5]/ ;" macro 1 { InvalidContext }	{ errorNames }
invlexit		include/error.h	/^#define invlexit errorNames[6]/ ;" macro 1 { PSExit }	{ errorNames }
invlflaccess		include/error.h	/^#define invlflaccess errorNames[7]/ ;" macro 1 { CreateFileStm PSEExec PSFile PSRenameFile }	{ errorNames }
invlfont		include/error.h	/^#define invlfont errorNames[8]/ ;" macro 1 { InvlFont }	{ errorNames }
invlid		include/error.h	/^#define invlid errorNames[9]/ ;" macro 1 { }	{ errorNames }
invlrestore		include/error.h	/^#define invlrestore errorNames[10]/ ;" macro 1 { RstrToLevel }	{ errorNames }
ioerror		include/error.h	/^#define ioerror errorNames[11]/ ;" macro 1 { FilterRegion StreamError }	{ errorNames }
ipStorage		graphics/pathbuild.c	/^public Pool ipStorage; \/* pool for IntersectPath r/ ;" global 1 { PathBuildInit ReducePathClipInt RemPathRef }	{ }
ipart		language/grammar.h	/^#define ipart 3/ ;" macro 1 { }	{ }
ipartState		language/scanner.c	/^private readonly StateRec ipartState = {/ ;" global 15 { }	{ }
ipcStmProcs		product/ipcstream.c	/^public readonly StmProcs ipcStmProcs = {/ ;" global 4 { CreateIPCStreams IPCGetWCParams IPCNotifyReceived PSNewContextStms }	{ }
isAligned		bitmap/bm34comp.c	/^#define isAligned(ptr) (!((int)ptr&3))/ ;" macro 1 { BM34MoveRect }	{ }
isStrkPth		graphics/stroke.c	/^          isStrkPth,/ ;" global 1 { AdjstHW DoStroke FillBevel FillCircle FillQuad }	{ }
isoutline		fonts/flex.c	/^global boolean isoutline;/ ;" global 1 { Adjust BlueLock BuildChar CCRunStd CalcHW2 FinGlbClrLocs FlexProc }	{ }
isp_i80286		include/environment.h	/^#define isp_i80286	4/ ;" macro 1 { SEGMENT_64K }	{ }
isp_i80386		include/environment.h	/^#define isp_i80386	5/ ;" macro 1 { }	{ }
isp_ibm370		include/environment.h	/^#define isp_ibm370	6/ ;" macro 1 { }	{ }
isp_ibmrt		include/environment.h	/^#define isp_ibmrt	8/ ;" macro 1 { }	{ }
isp_mc68010		include/environment.h	/^#define isp_mc68010	2	\/* includes mc68000 *\// ;" macro 1 { STUTTER }	{ }
isp_mc68020		include/environment.h	/^#define isp_mc68020	3	\/* includes mc68030 *\// ;" macro 1 { STUTTER }	{ }
isp_ns32532		include/environment.h	/^#define isp_ns32532	12/ ;" macro 1 { }	{ }
isp_r2000be		include/environment.h	/^#define isp_r2000be	9	\/* MIPS, big-endian *\// ;" macro 1 { }	{ }
isp_r2000le		include/environment.h	/^#define isp_r2000le	10	\/* MIPS, little-endian *\// ;" macro 1 { }	{ }
isp_sparc		include/environment.h	/^#define isp_sparc	11/ ;" macro 1 { }	{ }
isp_ti34010		include/environment.h	/^#define isp_ti34010	7/ ;" macro 1 { }	{ }
isp_vax		include/environment.h	/^#define isp_vax		1/ ;" macro 1 { PCOFFSET }	{ }
isp_xl8000		include/environment.h	/^#define isp_xl8000	13	\/* Weitek *\// ;" macro 1 { }	{ }
keepPointsFlag		graphics/cscan.c	/^private boolean keepPointsFlag;		\/* True: Make Cro/ ;" global 1 { CSPathPoints ResetCScan }	{ }
keyo		fonts/fontbuild.c	/^#define keyo 54261/ ;" macro 1 { PSeCCRun }	{ }
km_coni		mp/mp.c	/^static struct km_console_info km_coni;/ ;" global 1 { MPInitScreen MPStart }	{ }
l0		fonts/fontbuild.c	/^internal Fixed l0, l1, r0, r1;/ ;" global 1 { BuildChar }	{ }
l1		fonts/fontbuild.c	/^internal Fixed l0, l1, r0, r1;/ ;" global 1 { BuildChar Len1000 }	{ }
lNm		fonts/fontbuild.c	/^                   fdgbndsnm, eNm, lNm, ErNm, char/ ;" global 1 { CCRunStd }	{ }
lab		language/classarray.h	/^  lab,						\/* < *\// ;" global 1 { PopColorValues TableSampleProc }	{ }
languageCtxt		language/exec.c	/^public PLanguageData languageCtxt;/ ;" global 1 { LanguageDataHandler LanguageInit curStackLimit echo execAbort execAbortPending execLevel objectFormat packedArrayMode psFULLSTACK randx stackRstr stdinStm stdoutStm strStorageBufCount superExec }	{ }
languageNames		language/exec.c	/^public PNameObj languageNames;/ ;" global 1 { IsFontDirectory LanguageInit PSDefUserObj PSExecUserObj PSType PSUndefUserObj }	{ }
largestChIndex		devpattern/patternimpl.c	/^private integer largestChIndex;	\/* Index of screen/ ;" global 1 { FreeScreen GetMemForTA InitPatternImpl SendOldestToDisk }	{ }
largestChSize		devpattern/patternimpl.c	/^private integer largestChSize;	\/* Size of that lar/ ;" global 1 { FreeScreen GetMemForTA InitPatternImpl }	{ }
largestChunk		devpattern/patternimpl.c	/^private unsigned char *largestChunk; \/* pointer to/ ;" global 1 { FreeScreen GetMemForTA InitPatternImpl }	{ }
lastEventStm		product/event.c	/^private Stm lastEventStm; \/* The last place we wro/ ;" global 1 { EndFlush EventFlush EventInit }	{ }
lastFree		devpattern/patternimpl.c	/^private integer lastFree;/ ;" global 1 { AllocPatternIndex InitPatternImpl }	{ }
lastKey		product/event.c	/^} lastKey, prevKey;/ ;" global 1 { PostEvent SendEvent }	{ }
lastLeft		product/event.c	/^private	integer	lastLeft;	\/* Window which got last/ ;" global 1 { PostEvent ReturnBits SendEvent }	{ }
lastPoint		graphics/reducer.c	/^private PtOffset curPoint, firstPoint, lastPoint, / ;" global 1 { InitReducer NewPoint RdcClose Reduce }	{ }
lastRight		product/event.c	/^private	integer	lastRight;	\/* Window which got las/ ;" global 1 { PostEvent SendEvent }	{ }
lastSetSharedforContext		postscript/psspace.c	/^private boolean lastSetSharedforContext;/ ;" global 1 { PSSetShared RstrSetShared }	{ }
lastWID		product/windowops.c	/^private short lastWID;			\/* Last window ID created/ ;" global 1 { IniWindowOps UniqueWindowId }	{ }
lastm		fp/mtxvec.c	/^private Mtx lastm, lastminv; \/* Cached matrix and / ;" global 1 { FPInit MtxInvert }	{ }
lastminv		fp/mtxvec.c	/^private Mtx lastm, lastminv; \/* Cached matrix and / ;" global 1 { FPInit MtxInvert }	{ }
layerPool		bintree/layer.c	/^static char *layerPool;		\/* Blind pointer to stora/ ;" global 1 { LFree LInitialize LNew }	{ }
lbk		language/classarray.h	/^  lbk,						\/* [ *\// ;" global 1 { }	{ }
lbr		language/classarray.h	/^  lbr,						\/* { *\// ;" global 1 { }	{ }
ldent		language/grammar.h	/^#define ldent 13/ ;" macro 1 { }	{ }
ldentState		language/scanner.c	/^private readonly StateRec ldentState = {/ ;" global 15 { }	{ }
lea		fp/DEFSmach.h	/^#define MCOUNT		 lea 277$,a0;\\/ ;" global 1 { }	{ }
left		graphics/stroke.c	/^#define left 1/ ;" macro 1 { ClipVect CodePoint ConnectWhitePairs FixupExtendLeft FixupExtendRight ReturnBits rotate }	{ }
leftBitArray		devpattern/patternimpl.c	/^public readonly SCANTYPE leftBitArray[SCANUNIT] =/ ;" global 2 { BlackRunMark ClippedMasksMark ConstantRectMark ConstantRunMark ConstantTrapsMark GrayRectMark GrayRunMark GrayTrapsMark ImIdent ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch MP12Convert16to2 MP12Convert32to2 MRMasks WhiteRunMark }	{ }
lenIV		fonts/fontbuild.c	/^#define lenIV 4			\/* length of initialization vect/ ;" macro 1 { BuildChar CCRunStd PSEExec PSInitWrite }	{ }
lenIVname		fonts/fontbuild.c	/^                   blueShiftName, blueScaleName, l/ ;" global 1 { CCRunStd }	{ }
lenstdhw		fonts/fontbuild.c	/^#define lenstdhw (fontCtx->fontBuild._lenstdhw)/ ;" macro 1 { AdjustToStdWidths BlueLock BuildChar CCRunStd GetStandardWidths PreYLock }	{ fontCtx }
lenstdvw		fonts/fontbuild.c	/^#define lenstdvw (fontCtx->fontBuild._lenstdvw)/ ;" macro 1 { AdjustToStdWidths BuildChar CCRunStd GetStandardWidths PreXLock }	{ fontCtx }
level		vm/saverestore.c	/^public	Level	 level;/ ;" global 1 { ABM_SetAllocated AcquireLock AddressValidAtLevel AllocGenericObject AllocLarge AllocPDict AllocSmall AppendSegmentData AppendSegmentHeader ApplyRelocation Array BMRun BuildSegmentTable CheckStackElement CreatePrivateVM CreateVM CurrentVMSegmentType Display_VM_Segment ENDSHOW ExpandVMSection FindFreeBytes GCInternal_ResetFreePointer IsROMSegment LAryObj LCondObj LDictObj LEVEL LGStateObj LGenericObj LLockObj LPkdaryObj LSaveObj LStmObj LStrObj LoadVM MIDPurgedByRestore MakePStm NameToPString NextKeyVal NoteLevel PSCoProc PSCurrentWindowLevel PSFork PSJoin PSOrderWindow PSRstr PSSave PSSetWindowLevel PSVMStatus PSWait PerformFinalization PopShowState PrStmBody PrintDOB PurgeOnRstr PushShowState ReadVM ResetSegFreePtr ResetVMSection RestoreContextParams (etc) }	{ }
level_1		include/environment.h	/^#define level_1		1	\/* original red book *\// ;" macro 1 { }	{ }
level_2		include/environment.h	/^#define level_2		2	\/* PS level 2; new red book *\// ;" macro 1 { FndFntSibling FontCacheInit InitFID PSSelectFont }	{ }
level_dps		include/environment.h	/^#define level_dps	3	\/* Display PostScript; assumed/ ;" macro 1 { LANGUAGE_LEVEL }	{ }
lff		language/classarray.h	/^  lff,						\/* LF *\// ;" global 1 { }	{ }
limitCross		graphics/cscan.c	/^internal CrossPtr limitCross;		\/* The last Cross w/ ;" global 1 { BuildYCross NEWCROSS ResetCScan }	{ }
limitcheck		include/error.h	/^#define limitcheck errorNames[12]/ ;" macro 1 { PSLimitCheck RdcStrkTermMark }	{ errorNames }
lineStmProcs		language/stodevedit.c	/^private readonly StmProcs lineStmProcs = {/ ;" global 4 { LineEdit }	{ }
lines		graphics/reducer.c	/^private PLine lines;/ ;" global 1 { AddTrap BlackRunMark BresenhamMT CompositeRun CompositeTraps ConstantRectMark ConstantRunMark ConstantTrapsMark EdgeInit GrayRectMark GrayRunMark GrayTrapsMark IniReducer PLn QBresenhamMT TransDevRun WhiteRunMark }	{ }
lineto		fonts/flex.c	/^#define lineto (fontCtx->fontBuild._lineto)/ ;" macro 1 { BuildChar CCRunStd FlexProc PathForAll SetFixedPathProcs SetRealPathProcs }	{ fontCtx }
linetoNm		graphics/userpath.c	/^#define linetoNm graphicsNames[nm_lineto].val.nmva/ ;" macro 1 { CheckPkdMtLt DoUserPath QDoUserPath UsrPthCheckMtLt }	{ graphicsNames nm_lineto }
linkCrossCount		graphics/cscan.c	/^static Int32 linkCrossCount;		\/* Link Crosses *\// ;" global 1 { CScan NewLinkCross ResetCScan }	{ }
listenContext		product/listener.c	/^static	PSContext listenContext;\/* The PostScript c/ ;" global 1 { PSListener PSResetUser }	{ }
listenPort		product/listener.c	/^public	port_t	listenPort;	\/* Port on which we are / ;" global 1 { CheckInListenPort PSListener PSResetUser }	{ }
listenRestart		product/listener.c	/^static	boolean listenRestart;	\/* Used for synchron/ ;" global 1 { PSListener PSResetUser }	{ }
listenerState		product/listener.c	/^listenerState;	\/* Current state of listener *\// ;" global 1 { PSResetUser PrivateListenPort PublicListenPort }	{ }
litKeywordsTable		fonts/fontrun.c	/^private KeywordAction litKeywordsTable[] = {/ ;" global 5 { NewState }	{ }
litstr		language/grammar.h	/^#define litstr 15/ ;" macro 1 { }	{ }
litstrState		language/scanner.c	/^private readonly StateRec litstrState = {/ ;" global 15 { LineComplete StmToken }	{ }
llx		graphics/pathops.c	/^#define llx d0.x/ ;" macro 1 { CompositeShow FFCurveTo FFltnCurve FMiniFltn FastShow FasterShow FltnCurve MarkStrokeMasks RdcStrkDumpMasks StringMark }	{ }
lly		graphics/pathops.c	/^#define lly d0.y/ ;" macro 1 { CompositeShow FFCurveTo FFltnCurve FMiniFltn FastShow FasterShow FltnCurve MarkStrokeMasks RdcStrkDumpMasks StringMark }	{ }
loBnd		graphics/stroke.c	/^#define loBnd XA_MIN/ ;" macro 1 { ClipVect CodePoint }	{ XA_MIN }
locOfMax		vm/abmimpl.c	/^private Card8 *hiHole, *lowHole, *maxHole, *locOfM/ ;" global 1 { ABM_Init AllocSmall }	{ }
locOfMaxID		vm/abmimpl.c	/^#define locOfMaxID 2107/ ;" macro 1 { ABM_Init }	{ }
localBM		include/bitmap.h	/^#define localBM ((BMClass *)&_localBM)/ ;" macro 1 { BM34InitClassVars BM34New BM34NewFromData BM38InitClassVars BM38New BM38NewFromData LBMInitClassVars MP12InitClassVars MP12New MP12NewAlpha MP12NewFromData }	{ BMClass _localBM }
lockoffset		fonts/fontbuild.c	/^#define lockoffset (fontCtx->fontBuild._lockoffset/ ;" macro 1 { BuildChar CCRunStd TfmLockPt2 }	{ fontCtx }
locktype		fonts/fontbuild.c	/^#define locktype (fontCtx->fontBuild._locktype)/ ;" macro 1 { AdjustBlues BlueLock BoostBotLocs Bpick BuildChar CCRunStd CalcHW2 GetITfmX GetITfmY GetMtxInfo GetTfmX GetTfmY PreXLock PreYLock PutStdW RBLock RMLock RVLock RYLock TriLock tfmloc }	{ fontCtx }
logPAGESIZE		include/filetypes.h	/^#define logPAGESIZE 10/ ;" macro 1 { }	{ }
logToPhysDepth		bintree/layer.c	/^static int logToPhysDepth[] = {/ ;" global 4 { LPreCopyBitsFrom }	{ }
loginContextSet		product/listener.c	/^static	boolean	loginContextSet;\/* Has someone beco/ ;" global 1 { ListenerInit LoginContextKilled PSListener PSSetLoginContext }	{ }
logray0		mp/mp12.c	/^static const SCANTYPE logray0[2] 	= { 0xeeeeeeee, / ;" global 1 { }	{ }
logray1		mp/mp12.c	/^static const SCANTYPE logray1[2] 	= { 0xbbbbbbbb, / ;" global 1 { }	{ }
lokFixMapOk		fonts/fontbuild.c	/^private boolean doFixupMap, lokFixMapOk, lokFixedM/ ;" global 1 { BuildChar InitSlopes }	{ }
lokFixedMap		fonts/fontbuild.c	/^private boolean doFixupMap, lokFixMapOk, lokFixedM/ ;" global 1 { BuildChar fixupmap }	{ }
lokSeqX		fonts/fontbuild.c	/^internal PLokSeq lokSeqX, lokSeqY;/ ;" global 1 { BuildChar InitSlopes SetXLock TfmLockPt1 }	{ }
lokSeqY		fonts/fontbuild.c	/^internal PLokSeq lokSeqX, lokSeqY;/ ;" global 1 { BuildChar InitSlopes SetYLock TfmLockPt1 }	{ }
lokSlopesInited		fonts/fontbuild.c	/^internal boolean8 lokSlopesInited;/ ;" global 1 { BuildChar InitSlopes InsertLock TfmLockPt1 }	{ }
longcardinal		include/publictypes.h	/^typedef unsigned long int longcardinal;/ ;" typedef 1 { AddMark CStmRndNum CacheLookup FastName HashObject OCFetchFromDisk PSBitShift PSEExec newstn }	{ }
longreal		include/publictypes.h	/^typedef double longreal;/ ;" typedef 1 { extended }	{ }
lookups		vm/gcmisc.c	/^public Card32 lookups, cacheHits;/ ;" global 1 { CacheLookup GCInternal_GetSegHnd GCInternal_Init PSCacheStatistics PSGCStats }	{ }
loopcmd		language/exec.c	/^private CmdObj realforcmd, loopcmd, xitcmd;/ ;" global 1 { CLoop ExecInit PSLoop }	{ }
lowHole		vm/abmimpl.c	/^private Card8 *hiHole, *lowHole, *maxHole, *locOfM/ ;" global 1 { ABM_Init AllocSmall ResetSegFreePtr }	{ }
lowHoleID		vm/abmimpl.c	/^#define lowHoleID 2105/ ;" macro 1 { ABM_Init }	{ }
lowestBitmapAddr		mp/mp.c	/^static uint *lowestBitmapAddr;/ ;" global 1 { MP12SetBitmapExtent }	{ }
lowestWindowInTier		product/windowops.c	/^private int lowestWindowInTier(int level, SubList / ;" function 15 { PSOrderWindow }	{ Layer2Wd NULL NXBASEWINLEVEL WindowDevice level }
lowpart		graphics/maketrap.c	/^#define lowpart(f) ((f) & 0xFFFFL)/ ;" macro 1 { BresenhamMT QBresenhamMT }	{ }
lpStorage		graphics/pathbuild.c	/^public Pool lpStorage; \/* pool for ListPath record/ ;" global 1 { AllocListPathRec AppendPath FrLstPth PathBuildInit }	{ }
lpr		language/classarray.h	/^  lpr,						\/* ( *\// ;" global 1 { }	{ }
lruNewest		graphics/ucache.c	/^private PRdc lruNewest, lruOldest;/ ;" global 1 { CheckUCache EnterRdcInCache FindRdcInCache FreeRdc IniUCache }	{ }
lruOldest		graphics/ucache.c	/^private PRdc lruNewest, lruOldest;/ ;" global 1 { CheckUCache EnterMask EnterPathInCache EnterRdcInCache FindRdcInCache FreeRdc IniUCache PSFlushUCache }	{ }
ltr		language/classarray.h	/^  ltr,						\/* G - Z *\// ;" global 1 { }	{ }
main		product/nextmain.c	/^main(int argc, char *argv[])/ ;" function 141 { }	{ BeginParseArguments CreateNullDevice CreatePSContext CreatePSSpace EndParseArguments FPInit FilePathSearch FontStoDevInit GetCArg InitMakeVM InitPostScript NIL NULL NextCustomProc NextGStatesProc PCard32 PSContext PSDeviceInit PSSetTimeLimit PSSpace PostScriptParameters RgstPARelocator SIGNALSTACKSIZE Scheduler SchedulerInit Stm StmInit StoDevInit UnixStmInit UnixStoDevInit dummyClock gStateExtProc initString mntring os_fopen os_malloc os_stderr os_stdin os_stdout procedure readonly signalStackArea true }
makestring		language/string.c	/^public StrObj makestring(s,t) \/* always access thr/ ;" function 9 { MakeStr MakeXStr }	{ AllocPString StrLen StrObj VMPutText cardinal s }
mapIntToExtDepths		product/windowops.c	/^static const short mapIntToExtDepths[] = {/ ;" global 7 { PSCurrentDefaultDepthLimit PSCurrentWindowDepth PSCurrentWindowDepthLimit PSFrameBuffer }	{ }
mapLType		language/binaryobject.c	/^private Card8 mapLType[bo_max+1], mapXType[bo_max+/ ;" global 1 { InitBOSTypeMap ReadBinObjSeq }	{ }
mapXType		language/binaryobject.c	/^private Card8 mapLType[bo_max+1], mapXType[bo_max+/ ;" global 1 { InitBOSTypeMap ReadBinObjSeq }	{ }
mapedges		fonts/fontbuild.c	/^internal procedure mapedges(pls) register PLokSeq / ;" function 53 { InitSlopes }	{ Fixed IntX Nlokpairs PLokPair p register }
mappedFileSizes		product/miscops.c	/^public int mappedFileSizes[20];/ ;" global 1 { AddMappedFile DumpMappedFiles RemoveMappedFile }	{ }
mappedStmProcs		product/mappedstream.c	/^public readonly StmProcs mappedStmProcs = {/ ;" global 4 { os_fdopen }	{ }
mark		vm/vm_relocate.c	/^public MarkObject *mark;/ ;" global 1 { AddMark BuildRelocationTable LBMInitClassVars PSCrCParams Pkdary RgstMark RstrStack bm_mark }	{ }
markDelta		graphics/pathpriv.c	/^  private FCd ofpSt, markDelta;/ ;" global 1 { OFAddRdcTrap OFAddRunMark OFMark }	{ }
maskFIDType		fonts/fontspriv.h	/^#define maskFIDType 0x3/ ;" macro 1 { TypeOfFID }	{ }
maskMarkProcs		device/framemaskdev.c	/^public PMarkProcs maskMarkProcs;/ ;" global 1 { IniMaskDevImpl MaskSetupMark }	{ }
maskProcs		device/framemaskdev.c	/^public DevProcs *maskProcs;/ ;" global 1 { FmMakeMaskDevice IniMaskDevImpl }	{ }
matrixname		fonts/fontbuild.c	/^#define matrixname fontsNames[nm_FontMatrix]/ ;" macro 1 { BuildChar CCRun }	{ fontsNames nm_FontMatrix }
max		devpattern/colorpattern.c	/^private integer max(a, b) integer a, b; { return (/ ;" function 1 { AddTrap AllocCmds BBoxUpdate BMAlloc BresenhamMT CDist CDistFixed ComputeHideBounds CountStack FDNestedDepth GetValidFreqAngleOctet ImageDict InitOFill Init_Cmds MP12SetBitmapExtent Overlap PopNaturalMax ProcSampleProc Set1BitCMYKValues Set1BitValues Set2BitCMYKValues Set2BitValues Set4BitCMYKValues Set4BitValues Set8BitCMYKValues Set8BitValues SetRGBtoCMYKValues TableSampleProc }	{ }
maxAcc		language/stream.c	/^#define maxAcc 25/ ;" macro 1 { PSFile }	{ }
maxBevelChord		graphics/stroke.c	/^          maxBevelChord,/ ;" global 1 { FillCurveJoin GetMaxBevelChord }	{ }
maxCmdsExpand		vm/rgstcmds.c	/^#define maxCmdsExpand 8		\/* max times cmd table ca/ ;" macro 1 { initOpSetLimit }	{ }
maxDevFixed		include/devicetypes.h	/^#define maxDevFixed	(0x7fffffffl)/ ;" macro 1 { }	{ }
maxDevInterval		include/devicetypes.h	/^#define maxDevInterval maxDevShort/ ;" macro 1 { }	{ maxDevShort }
maxDevLong		include/devicetypes.h	/^#define maxDevLong (0x7fffffffl)/ ;" macro 1 { }	{ }
maxDevShort		include/devicetypes.h	/^#define maxDevShort (0x7fff)/ ;" macro 1 { GetValidFreqAngleOctet GetValidFreqAnglePair TransDevPrim maxDevInterval }	{ }
maxDevUnsigned		include/devicetypes.h	/^#define maxDevUnsigned (0xffff)/ ;" macro 1 { }	{ }
maxHole		vm/abmimpl.c	/^private Card8 *hiHole, *lowHole, *maxHole, *locOfM/ ;" global 1 { ABM_Init AllocSmall }	{ }
maxHoleID		vm/abmimpl.c	/^#define maxHoleID 2106/ ;" macro 1 { ABM_Init }	{ }
maxLines		graphics/reducer.c	/^#define maxLines 3000/ ;" macro 1 { IniReducer }	{ }
maxName		language/stream.c	/^#define maxName 100/ ;" macro 1 { CreateFileStream }	{ }
maxNameTableLength		language/name.h	/^#define maxNameTableLength 1024/ ;" macro 1 { PutInNameMap }	{ }
maxOffsetVal		fonts/fontbuild.c	/^#define maxOffsetVal	globals->_maxOffsetVal/ ;" macro 1 { FontBuildInit GetErosion }	{ globals }
maxPatternSize		devpattern/patternimpl.c	/^public integer maxPatternSize, maxTotalPatternSize/ ;" global 1 { BuildGrayPattern BuildPattern CheckScreenDims InitCCCache InitPatternImpl SetupMonoPattern }	{ }
maxPntQ		graphics/reducer.c	/^#define maxPntQ 3000/ ;" macro 1 { IniReducer }	{ }
maxPoints		graphics/reducer.c	/^#define maxPoints 3000/ ;" macro 1 { IniReducer }	{ }
maxRegions		graphics/reducer.c	/^#define maxRegions 400/ ;" macro 1 { IniReducer LinkRegionFreeList }	{ }
maxSaveLevel		graphics/graphics.c	/^#define maxSaveLevel 16/ ;" macro 1 { }	{ }
maxTASize		devpattern/patternimpl.c	/^private integer maxTASize;	\/* Largest alwoable sin/ ;" global 1 { GetMemForTA InitPatternImpl }	{ }
maxTotalPatternSize		devpattern/patternimpl.c	/^public integer maxPatternSize, maxTotalPatternSize/ ;" global 1 { InitPatternImpl PatAlloc }	{ }
maxTotalTASize		devpattern/patternimpl.c	/^private integer maxTotalTASize;	\/* Limit on mem to/ ;" global 1 { GetMemForTA InitPatternImpl }	{ }
maxXChunk		graphics/graphics.c	/^unsigned long int maxXChunk, maxYChunk;/ ;" global 1 { BreakUpPath ConvertToListPath ImageInternal SetXABounds XARdc XAReducePath }	{ }
maxXInflections		graphics/cscan.c	/^private CrossPtr maxXInflections;	\/* Maximum X inf/ ;" global 1 { DoXInflections FinishPath ResetCScan }	{ }
maxYChunk		graphics/graphics.c	/^unsigned long int maxXChunk, maxYChunk;/ ;" global 1 { BreakUpPath ConvertToListPath ImageInternal SetXABounds XARdc XAReducePath }	{ }
maxwrtmodes		include/graphics.h	/^#define maxwrtmodes 2/ ;" macro 1 { PSDefineFont }	{ }
mb1		graphics/cscan.c	/^private CScanBuffer mb1;	\/* Main memory area to al/ ;" global 1 { IniCScan }	{ }
mb2		graphics/cscan.c	/^private CScanBuffer mb2;	\/* We use this for the ru/ ;" global 1 { IniCScan }	{ }
mcCheck		device/maskcache.c	/^public boolean mcdebug, mchange, mcCheck, nUsedMas/ ;" global 1 { CheckBM InitMaskCache }	{ }
mcdebug		device/maskcache.c	/^public boolean mcdebug, mchange, mcCheck, nUsedMas/ ;" global 1 { BMAlloc BMFree CheckBM }	{ }
mchange		device/maskcache.c	/^public boolean mcdebug, mchange, mcCheck, nUsedMas/ ;" global 1 { BMAlloc BMFree CheckBM }	{ }
mcount		fp/DEFSmach.h	/^	.globl  mcount/ ;" global 2 { }	{ }
mdpt		graphics/fflattenpath.c	/^#define mdpt(a,b) (((long)(a)+(long)(b))>>1)/ ;" macro 1 { FMiniFltn }	{ }
medgray0		mp/mp12.c	/^static const SCANTYPE medgray0[2] 	= { 0x99999999,/ ;" global 1 { }	{ }
medgray1		mp/mp12.c	/^static const SCANTYPE medgray1[2] 	= { 0x66666666,/ ;" global 1 { }	{ }
memoryBuffer1		graphics/cscan.c	/^private PCScanBuffer memoryBuffer1;/ ;" global 1 { IniCScan ResetCScan ResizeCrossBuf }	{ }
memoryBuffer2		graphics/cscan.c	/^private PCScanBuffer memoryBuffer2;/ ;" global 1 { GrowRunBuff IniCScan ReturnBits }	{ }
memoryOffsets		mp/mp.c	/^uint memoryOffsets[4];/ ;" global 1 { BUFFERSOURCEHW MP12SetBitmapExtent SetUpSource SoverRect }	{ }
metrics2name		fonts/fontbuild.c	/^#define metrics2name fontsNames[nm_Metrics2]/ ;" macro 1 { GetMetrics2 }	{ fontsNames nm_Metrics2 }
metricsname		fonts/fontbuild.c	/^		   cdevprocname, metricsname, wvname;/ ;" global 1 { GetMetrics }	{ }
miFree		postscript/customops.c	/^private ManagedItem *miFree;/ ;" global 1 { CustomOpsInit PSPopManagedObject RecycleMI }	{ }
minDevFixed		include/devicetypes.h	/^#define minDevFixed	(0x80000000l)/ ;" macro 1 { }	{ }
minDevInterval		include/devicetypes.h	/^#define minDevInterval minDevShort/ ;" macro 1 { }	{ minDevShort }
minDevLong		include/devicetypes.h	/^#define minDevLong (0x80000000l)/ ;" macro 1 { }	{ }
minDevShort		include/devicetypes.h	/^#define minDevShort (0x8000)/ ;" macro 1 { TransDevPrim minDevInterval }	{ }
minDevUnsigned		include/devicetypes.h	/^#define minDevUnsigned (0x0000)/ ;" macro 1 { }	{ }
minNameTableLength		language/name.h	/^#define minNameTableLength 64/ ;" macro 1 { PutInNameMap }	{ }
minTrapPrecision		graphics/graphics.c	/^public boolean minTrapPrecision;/ ;" global 1 { EdgeInit IniGraphics QDoEUsrPthFloat }	{ }
minXInflections		graphics/cscan.c	/^private CrossPtr minXInflections;	\/* Minimum X inf/ ;" global 1 { DoXInflections FinishPath ResetCScan }	{ }
miterJoin		graphics/graphicspriv.h	/^#define miterJoin 0/ ;" macro 1 { F_FillJoin FillJoin InitGraphics }	{ }
mitposs		graphics/stroke.c	/^          mitposs,/ ;" global 1 { DoStroke FF_StrkLnTo F_FillJoin FillJoin StrkCurve StrkLnTo }	{ }
mnftrnm		fonts/fontbuild.c	/^                   bluename, mnftrnm, blfuzznm, su/ ;" global 1 { }	{ }
mntring		product/nextmain.c	/^static boolean mntring;/ ;" global 1 { Mnextmain PSProf }	{ }
mon		bintree/drivers.c	/^static NXMonitor **mon, **net;/ ;" global 1 { AssignArrayBounds AssignBounds DriverInit GuaranteeActiveScreen MatchMonitors NXRegisterScreen }	{ }
monCount		bintree/drivers.c	/^static int monCount, netCount;/ ;" global 1 { AssignArrayBounds AssignBounds DriverInit GuaranteeActiveScreen MatchMonitors }	{ }
monitorType		mp/mp.c	/^int monitorType; \/* 0 is 2 bit mono, 1 is 16 bit c/ ;" global 1 { MPInitScreen MPSetCursor MPStart }	{ }
monitorcmd		postscript/contextimpl.c	/^private NameObj monitorcmd;/ ;" global 1 { ContextOpsInit PSMonitor }	{ }
mouseWindow		product/mouse_driver.c	/^public PWindowDevice mouseWindow; \/* Window curren/ ;" global 1 { ClearWdNRect PSSetNRect PostEvent RecalcMouseRect TermWindow }	{ }
moveLineDispatch		mp/moverect.c	/^static const void (*(moveLineDispatch[2][6][4]))()/ ;" global 14 { BUFFERSOURCE BUFFERSOURCEHW CONSTSOURCE MRInitialize SetUpSource }	{ }
moveLineDispatchSW		mp/moverect.c	/^static const void (*(moveLineDispatchSW[2][6][4]))/ ;" global 14 { MRInitialize }	{ }
moverectbuff		mp/moverect.c	/^static uint *moverectbuff;/ ;" global 1 { BUFFERSOURCE BUFFERSOURCEHW MRInitialize MRMoveRect }	{ }
moverectlen		mp/moverect.c	/^static int moverectlen;/ ;" global 1 { MRInitialize MRMoveRect }	{ }
moveto		fonts/fontbuild.c	/^#define moveto (fontCtx->fontBuild._moveto)/ ;" macro 1 { BuildChar CCRunStd PathForAll SetFixedPathProcs SetRealPathProcs }	{ fontCtx }
movetoNm		graphics/userpath.c	/^#define movetoNm graphicsNames[nm_moveto].val.nmva/ ;" macro 1 { CheckPkdMtLt DoUserPath QDoUserPath UsrPthCheckMtLt }	{ graphicsNames nm_moveto }
mp12		mp/mp12.h	/^#define mp12 ((BMClass *)&_mp12)/ ;" macro 1 { MP12InitBricks MP12MakePublic MPInitScreen MPPromoteWindow }	{ BMClass _mp12 }
mpAddr		mp/mp.c	/^uint *mpAddr;/ ;" global 1 { BUFFERSOURCEHW MPInitScreen MPStart SetUpSource SoverRect }	{ }
mpBrick		mp/mpconv12.c	/^static unsigned int *mpBrick;/ ;" global 1 { MP12Convert16to2 MP12Convert32to2 MP12InitBricks }	{ }
mpDevHalftone		mp/mp12.c	/^DevHalftone mpDevHalftone;/ ;" global 1 { MP12Composite MP12InitBricks MP12InitClassVars MP12SetupPat MP12_Mark }	{ }
mpDevScreen		mp/mp12.c	/^static DevScreen mpDevScreen;/ ;" global 1 { MP12InitClassVars }	{ }
mpFd		mp/mp.c	/^static int mpFd;/ ;" global 1 { MP12SetBitmapExtent MPRegisterScreen MPStart }	{ }
mpProcs		mp/mp.c	/^static NXProcs mpProcs = {/ ;" global 18 { MPStart }	{ }
mpThresholds		mp/mp12.c	/^static const unsigned char mpThresholds[64] = {/ ;" global 10 { MP12InitClassVars }	{ }
mpdGoAway		product/machportdevice.c	/^private procedure mpdGoAway(struct MachPortDevice / ;" function 20 { IniMpdDevImpl }	{ DevFreeHalftone FmStuff NULL fmProcs }
mpdInitPage		product/machportdevice.c	/^private procedure mpdInitPage (struct MachPortDevi/ ;" function 25 { IniMpdDevImpl }	{ Device NULL PSLimitCheck d p }
mpdProcs		product/machportdevice.c	/^private	DevProcs *mpdProcs;/ ;" global 1 { IniMpdDevImpl PSMachPortDevice }	{ }
mpdShowPage		product/machportdevice.c	/^private boolean mpdShowPage(struct MachPortDevice / ;" function 26 { IniMpdDevImpl }	{ NXPrintPageMessage PPMprototype PrinterDataBytes PrinterDestPort false send_asyncronous send_rpc }
mpdSleep		product/machportdevice.c	/^mpdSleep(struct MachPortDevice *mpd)/ ;" function 4 { IniMpdDevImpl }	{ }
mpdWakeup		product/machportdevice.c	/^private procedure mpdWakeup(struct MachPortDevice / ;" function 9 { IniMpdDevImpl }	{ SetPrinterContext defaultHalftone framebase framebytewidth framelog2BD }
mpdWinToDevXlation		product/machportdevice.c	/^private procedure mpdWinToDevXlation (PDevice devi/ ;" function 6 { IniMpdDevImpl }	{ }
mrk1Arg		include/orphans.h	/^#define	mrk1Arg		5	\/* 1 operand left on exec stack/ ;" macro 1 { ClearExecStack ExecInit PSExit }	{ }
mrk2Args		include/orphans.h	/^#define	mrk2Args	6	\/* 2 operands left on exec stac/ ;" macro 1 { ArrayInit ClearExecStack ExecInit PSExit StringInit }	{ }
mrk4Args		include/orphans.h	/^#define	mrk4Args	7	\/* 4 operands left on exec stac/ ;" macro 1 { ClearExecStack DictInit ExecInit PSExit }	{ }
mrkExec		include/orphans.h	/^#define mrkExec		1	\/* base of psExecute *\// ;" macro 1 { ClearExecStack ExecInit HandleStackOverflow PSExit }	{ }
mrkMonitor		include/orphans.h	/^#define mrkMonitor	3	\/* monitor command *\// ;" macro 1 { ClearExecStack ContextOpsInit HandleStackOverflow PSExit }	{ }
mrkNone		include/orphans.h	/^#define mrkNone		0	\/* ordinary command *\// ;" macro 1 { ClearExecStack ExecPushP RgstInternal UnwindExecStk }	{ }
mrkRun		include/orphans.h	/^#define	mrkRun		4	\/* run command *\// ;" macro 1 { ClearExecStack ExecInit HandleStackOverflow PSExit }	{ }
mrkStopped		include/orphans.h	/^#define mrkStopped	2	\/* stopped command *\// ;" macro 1 { ClearExecStack ExecInit HandleStackOverflow PSExit }	{ }
ms		graphics/graphmark.c	/^globaldef PMarkState ms;/ ;" global 1 { AddCircleMask AddRunMark AddTrap AppendTraps BresenhamMT CScan DoRdcPth DoRdcStroke DoStroke EnterCircle FastRectFill FillBevel FillCircle FillQuad FinStroke FloatRectFill InitOFill MarkInit MarkStrokeMasks MultiRectFill OFMark OffsetFill PSUStroke QBresenhamMT QDoEUsrPthFloat ReducePathRun ReducePathTrapsFilled ReduceQuadPath Reinitms SetBBCompMark SetTrapBounds StrkInternal UXAStroke }	{ }
msign		language/grammar.h	/^#define msign 2/ ;" macro 1 { }	{ }
msignState		language/scanner.c	/^private readonly StateRec msignState = {/ ;" global 15 { }	{ }
mskBase		device/maskcache.c	/^private PMask mskBase, mskLast, mskFree;/ ;" global 1 { CompactBM DevFlushMask GrowBM InitMaskCache MCMaskIndex ShrinkBM }	{ }
mskFree		device/maskcache.c	/^private PMask mskBase, mskLast, mskFree;/ ;" global 1 { CheckBM InitMaskCache MCFreeMask MCGetMask }	{ }
mskLast		device/maskcache.c	/^private PMask mskBase, mskLast, mskFree;/ ;" global 1 { DevFlushMask InitMaskCache }	{ }
mtrcsnm		fonts/fontbuild.c	/^                   bluename, mnftrnm, blfuzznm, su/ ;" global 1 { }	{ }
muldiv		fp/dpintmach.030.s	/^ENTRY(muldiv)/ ;" function 1 { EdgeInit ErodeSW F_MiterPoint QBresenhamMT RoundSW }	{ }
myGetRoots		postscript/customops.c	/^private procedure myGetRoots(clientData, info)/ ;" function 23 { CustomOpsInit }	{ GC_CollectionType GC_GetCollectionType GC_Push ITEMSPERCHUNK ItemChunk ManagedItem NIL NULL chunks integer vmPrivate }
myGetpwdir		product/miscops.c	/^char *myGetpwdir(int uid)/ ;" function 27 { FilePathSearch FontEnumOneDir }	{ NULL free strcpy strlen }
myHalftone		bintree/pattern.c	/^static DevHalftone myHalftone;/ ;" global 1 { PInitialize }	{ }
myScreen		bintree/pattern.c	/^static DevScreen myScreen;/ ;" global 1 { PInitialize }	{ }
myTerminateSpace		postscript/customops.c	/^private procedure myTerminateSpace(e) StaticEvent / ;" function 13 { CustomOpsInit }	{ Assert ITEMSPERCHUNK ItemChunk ManagedItem NULL RecycleMI chunks integer vmPrivate }
mysp		coroutine/xfersun.s	/^#define mysp 0		\/* sp after all saved registers ha/ ;" macro 1 { }	{ }
nAccess		include/basictypes.h	/^#define	nAccess	0/ ;" macro 1 { Begin CheckCompositeFont MakeCompFont PSNoAccess dknown }	{ }
nActions		language/grammar.h	/^#define nActions 53/ ;" macro 1 { }	{ }
nBaseObTypes		include/basictypes.h	/^#define	nBaseObTypes	16	\/* 4 bit field *\// ;" macro 1 { AllocGenericObject nObTypes }	{ }
nBitVectorBits		include/basictypes.h	/^#define	nBitVectorBits 32/ ;" macro 1 { DictP }	{ }
nClasses		language/grammar.h	/^#define nClasses 32/ ;" macro 1 { }	{ }
nEscObTypes		include/basictypes.h	/^#define nEscObTypes	6/ ;" macro 1 { nObTypes }	{ }
nGlbClrs		fonts/fontbuild.c	/^#define nGlbClrs (fontCtx->fontBuild._nGlbClrs)/ ;" macro 1 { IniGlbClrBuffs NewGlbClr ProcessGlbClrs }	{ fontCtx }
nGlbCntrs		fonts/fontbuild.c	/^#define nGlbCntrs (fontCtx->fontBuild._nGlbCntrs)/ ;" macro 1 { IniGlbClrBuffs NewGlbCntr ProcessGlbClrs }	{ fontCtx }
nObTypes		include/basictypes.h	/^#define	nObTypes	(nBaseObTypes + nEscObTypes)/ ;" macro 1 { AllocGenericObject InitRefArrays Init_Recycler VMRgstFinalize }	{ nBaseObTypes nEscObTypes }
nPermDictEntries		language/dict.c	/^private int nPermDictEntries;/ ;" global 1 { ClearDictStack DictInit PSEnd }	{ }
nRProcs		vm/saverestore.c	/^private integer nSProcs, nRProcs;/ ;" global 1 { ForAllRProcs RgstRstrProc }	{ }
nSProcs		vm/saverestore.c	/^private integer nSProcs, nRProcs;/ ;" global 1 { ForAllSProcs RgstSaveProc }	{ }
nStates		language/grammar.h	/^#define nStates 20/ ;" macro 1 { }	{ }
nTfrTables		graphics/transferimpl.c	/^private integer nTfrTables;/ ;" global 1 { IniTransfer }	{ }
nUsedMasks		device/maskcache.c	/^public boolean mcdebug, mchange, mcCheck, nUsedMas/ ;" global 1 { CheckCI MCFreeMask MCGetMask }	{ }
nameDict		device/nextprebuilt.c	/^static HostDict *nameDict, *fontDict;/ ;" global 1 { DevRgstPrebuiltFontInfo IniPreBuiltChars getPrebuiltFont }	{ }
nameFontBuild		fonts/fontbuild.c	/^private readonly RgNameTable nameFontBuild = {/ ;" global 57 { FontBuildInit }	{ }
nameObj		include/basictypes.h	/^#define	nameObj		3/ ;" macro 1 { BinObjInit BindArray BindPkdary CheckIfUCache CheckPkdMtLt CompositeShow DictFinalize DictTestP DoUserPath EncCharNameProc EncodeObj Equal FastShow FindInCache FndFntSibling GC_WasCollected GetFontAndCharInfo HashObject InsertSelectFont KAEndCSDict KAKnown NextKeyVal PSCVS PSDefSysName PSDefUserName PSFontRun PSLength PSLoad PSOpDef PSRgstNames PSRgstOps PreBuiltChar PrintObj PrintVal PurgeSFForKey PutInDict QDoUserPath ReadBinObjSeq RelocateObj RelocateObject RgstPrebuiltInfo RstrDB RstrObj SearchDict SearchSelectFont ShowByName TopError TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj UnDef UsrPthBBox UsrPthCheckMtLt UsrPthQRdcOk VMExpandDict WriteObject ZapDelayedDict dknown trytoload }	{ }
nbs		language/classarray.h	/^  nbs,						\/* # *\// ;" global 1 { }	{ }
ndcFID		fonts/fontspriv.h	/^#define ndcFID 2/ ;" macro 1 { FindMaxFID FindSibling FndFntSibling GenFID PSDefineFont PreBuiltChar RgstInitialFont }	{ }
neStorage		graphics/gstates.c	/^private Pool neStorage;     \/* Pool for NeXT gstat/ ;" global 1 { IniGStates NextGStatesProc }	{ }
needAlphaBits		bintree/layer.c	/^static const unsigned int needAlphaBits[2] = { \/* / ;" global 4 { LCompositeFrom }	{ }
needClip		graphics/stroke.c	/^          needClip,/ ;" global 1 { DoStroke FillCircle Reinitms }	{ }
needMaxBevelChord		graphics/stroke.c	/^          needMaxBevelChord,/ ;" global 1 { DoStroke FastFillCurveJoin FillCurveJoin GetMaxBevelChord }	{ }
needTfm		graphics/stroke.c	/^private boolean needTfm,/ ;" global 1 { AdjstHW DTransIfNeed DoStroke F_HalfRoundCap FastFillCurveJoin FillCurveJoin GetMaxBevelChord ITransIfNeed SetHalfWidth TransIfNeed }	{ }
needVec		graphics/pathpriv.c	/^  private boolean needVec, doOffsetting;/ ;" global 1 { FF_StrkLnTo FF_StrkStrt FF_Vector F_StrkCap F_StrkClose F_VecClose OFClose OFLineTo OFMoveToP StrkCap StrkClose StrkLnTo StrkStrt }	{ }
negP10Tab		language/scanner.c	/^private readonly double negP10Tab[] = {/ ;" global 3 { StmToken }	{ }
net		bintree/drivers.c	/^static NXMonitor **mon, **net;/ ;" global 1 { DriverInit LoadActiveDrivers LoadAllDrivers MatchMonitors ReadNetInfo SanityCheck }	{ }
netCount		bintree/drivers.c	/^static int monCount, netCount;/ ;" global 1 { DriverInit LoadActiveDrivers LoadAllDrivers MatchMonitors SanityCheck }	{ }
newHostDict		device/hostdict.c	/^HostDict *newHostDict(length, strings, copy, purge/ ;" function 21 { IniPreBuiltChars }	{ HostDict HostDictEntry integer os_sureMalloc }
newstn		language/name.c	/^private procedure newstn(str, len, h, pnobj)/ ;" function 37 { FastName }	{ AllocPName DebugAssert LimitCheck MAXCard16 MAXnameLength NIL PNameEntry integer longcardinal register rootShared }
nextFID		fonts/fontcache.c	/^private FID nextFID;/ ;" global 1 { GenFID InitFID }	{ }
nextFreeID		postscript/contextimpl.c	/^private integer nextID, nextFreeID, gTimestamp;/ ;" global 1 { ContextOpsInit NewContextID NewSpaceID RecycleID }	{ }
nextID		postscript/contextimpl.c	/^private integer nextID, nextFreeID, gTimestamp;/ ;" global 1 { ContextOpsInit IDToPSContext IDToPSSpace NewContextID NewSpaceID }	{ }
nilSegment		vm/gcmisc.c	/^public VMSegment nilSegment;/ ;" global 1 { GCInternal_Init TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
nm_Angle		graphics/graphicsnames.h	/^#define nm_Angle 36/ ;" macro 1 { }	{ }
nm_BitmapWidths		fonts/fontsnames.h	/^#define nm_BitmapWidths 0/ ;" macro 1 { }	{ }
nm_BitsPerSample		graphics/graphicsnames.h	/^#define nm_BitsPerSample 0/ ;" macro 1 { ImageDict }	{ }
nm_BlueAngle		graphics/graphicsnames.h	/^#define nm_BlueAngle 45/ ;" macro 1 { }	{ }
nm_BlueFrequency		graphics/graphicsnames.h	/^#define nm_BlueFrequency 46/ ;" macro 1 { }	{ }
nm_BlueFuzz		fonts/fontsnames.h	/^#define nm_BlueFuzz 1/ ;" macro 1 { blfuzznm }	{ }
nm_BlueHeight		graphics/graphicsnames.h	/^#define nm_BlueHeight 61/ ;" macro 1 { }	{ }
nm_BlueScale		fonts/fontsnames.h	/^#define nm_BlueScale 2/ ;" macro 1 { blueScaleName }	{ }
nm_BlueShift		fonts/fontsnames.h	/^#define nm_BlueShift 3/ ;" macro 1 { blueShiftName }	{ }
nm_BlueSpotFunction		graphics/graphicsnames.h	/^#define nm_BlueSpotFunction 47/ ;" macro 1 { }	{ }
nm_BlueThresholds		graphics/graphicsnames.h	/^#define nm_BlueThresholds 62/ ;" macro 1 { }	{ }
nm_BlueValues		fonts/fontsnames.h	/^#define nm_BlueValues 4/ ;" macro 1 { bluename }	{ }
nm_BlueWidth		graphics/graphicsnames.h	/^#define nm_BlueWidth 60/ ;" macro 1 { }	{ }
nm_BuildChar		fonts/fontsnames.h	/^#define nm_BuildChar 5/ ;" macro 1 { BCcmdName }	{ }
nm_CDevProc		fonts/fontsnames.h	/^#define nm_CDevProc 6/ ;" macro 1 { cdevprocname }	{ }
nm_CIELAB		graphics/graphicsnames.h	/^#define nm_CIELAB 2/ ;" macro 1 { }	{ }
nm_CIELightness		graphics/graphicsnames.h	/^#define nm_CIELightness 3/ ;" macro 1 { }	{ }
nm_CharData		fonts/fontsnames.h	/^#define nm_CharData 7/ ;" macro 1 { chardataname }	{ }
nm_CharData1		fonts/fontsnames.h	/^#define nm_CharData1 8/ ;" macro 1 { }	{ }
nm_CharOffsets		fonts/fontsnames.h	/^#define nm_CharOffsets 9/ ;" macro 1 { charoffsetsname }	{ }
nm_CharStrings		fonts/fontsnames.h	/^#define nm_CharStrings 10/ ;" macro 1 { charstringsname }	{ }
nm_CircleFont		graphics/graphicsnames.h	/^#define nm_CircleFont 4/ ;" macro 1 { }	{ }
nm_ColorValues		graphics/graphicsnames.h	/^#define nm_ColorValues 5/ ;" macro 1 { }	{ }
nm_Colors		graphics/graphicsnames.h	/^#define nm_Colors 6/ ;" macro 1 { }	{ }
nm_CurMID		fonts/fontsnames.h	/^#define nm_CurMID 11/ ;" macro 1 { }	{ }
nm_DataSource		graphics/graphicsnames.h	/^#define nm_DataSource 7/ ;" macro 1 { }	{ }
nm_Decode		graphics/graphicsnames.h	/^#define nm_Decode 8/ ;" macro 1 { }	{ }
nm_DeviceCMYK		graphics/graphicsnames.h	/^#define nm_DeviceCMYK 9/ ;" macro 1 { }	{ }
nm_DeviceGray		graphics/graphicsnames.h	/^#define nm_DeviceGray 10/ ;" macro 1 { }	{ }
nm_DeviceRGB		graphics/graphicsnames.h	/^#define nm_DeviceRGB 11/ ;" macro 1 { }	{ }
nm_DeviceSeparation		graphics/graphicsnames.h	/^#define nm_DeviceSeparation 12/ ;" macro 1 { }	{ }
nm_Encoding		fonts/fontsnames.h	/^#define nm_Encoding 12/ ;" macro 1 { GetInfo encname }	{ }
nm_Erode		fonts/fontsnames.h	/^#define nm_Erode 13/ ;" macro 1 { ErNm }	{ }
nm_EscChar		fonts/fontsnames.h	/^#define nm_EscChar 14/ ;" macro 1 { }	{ }
nm_ExactSize		fonts/fontsnames.h	/^#define nm_ExactSize 15/ ;" macro 1 { CheckPrebuiltOptions }	{ }
nm_ExpansionFactor		fonts/fontsnames.h	/^#define nm_ExpansionFactor 16/ ;" macro 1 { expfctrname }	{ }
nm_FDepVector		fonts/fontsnames.h	/^#define nm_FDepVector 17/ ;" macro 1 { }	{ }
nm_FID		fonts/fontsnames.h	/^#define nm_FID 18/ ;" macro 1 { }	{ }
nm_FMapType		fonts/fontsnames.h	/^#define nm_FMapType 19/ ;" macro 1 { }	{ }
nm_FamilyBlues		fonts/fontsnames.h	/^#define nm_FamilyBlues 87/ ;" macro 1 { famBluesNm }	{ }
nm_FamilyOtherBlues		fonts/fontsnames.h	/^#define nm_FamilyOtherBlues 88/ ;" macro 1 { famOtherBluesNm }	{ }
nm_FilterDirectory		language/languagenames.h	/^#define nm_FilterDirectory 0/ ;" macro 1 { }	{ }
nm_FontBBox		fonts/fontsnames.h	/^#define nm_FontBBox 20/ ;" macro 1 { bboxname }	{ }
nm_FontDirectory		fonts/fontsnames.h	/^#define nm_FontDirectory 21/ ;" macro 1 { IsFontDirectory }	{ }
nm_FontInfo		fonts/fontsnames.h	/^#define nm_FontInfo 22/ ;" macro 1 { }	{ }
nm_FontMatrix		fonts/fontsnames.h	/^#define nm_FontMatrix 23/ ;" macro 1 { matrixname }	{ }
nm_FontName		fonts/fontsnames.h	/^#define nm_FontName 24/ ;" macro 1 { }	{ }
nm_FontType		fonts/fontsnames.h	/^#define nm_FontType 26/ ;" macro 1 { fntypname }	{ }
nm_FontrunType		fonts/fontsnames.h	/^#define nm_FontrunType 25/ ;" macro 1 { }	{ }
nm_Frequency		graphics/graphicsnames.h	/^#define nm_Frequency 37/ ;" macro 1 { }	{ }
nm_FudgeBands		fonts/fontsnames.h	/^#define nm_FudgeBands 27/ ;" macro 1 { fdgbndsnm }	{ }
nm_GrayAngle		graphics/graphicsnames.h	/^#define nm_GrayAngle 48/ ;" macro 1 { }	{ }
nm_GrayFrequency		graphics/graphicsnames.h	/^#define nm_GrayFrequency 49/ ;" macro 1 { }	{ }
nm_GrayHeight		graphics/graphicsnames.h	/^#define nm_GrayHeight 64/ ;" macro 1 { }	{ }
nm_GraySpotFunction		graphics/graphicsnames.h	/^#define nm_GraySpotFunction 50/ ;" macro 1 { }	{ }
nm_GrayThresholds		graphics/graphicsnames.h	/^#define nm_GrayThresholds 65/ ;" macro 1 { }	{ }
nm_GrayValues		graphics/graphicsnames.h	/^#define nm_GrayValues 13/ ;" macro 1 { }	{ }
nm_GrayWidth		graphics/graphicsnames.h	/^#define nm_GrayWidth 63/ ;" macro 1 { }	{ }
nm_GreenAngle		graphics/graphicsnames.h	/^#define nm_GreenAngle 42/ ;" macro 1 { }	{ }
nm_GreenFrequency		graphics/graphicsnames.h	/^#define nm_GreenFrequency 43/ ;" macro 1 { }	{ }
nm_GreenHeight		graphics/graphicsnames.h	/^#define nm_GreenHeight 58/ ;" macro 1 { }	{ }
nm_GreenSpotFunction		graphics/graphicsnames.h	/^#define nm_GreenSpotFunction 44/ ;" macro 1 { }	{ }
nm_GreenThresholds		graphics/graphicsnames.h	/^#define nm_GreenThresholds 59/ ;" macro 1 { }	{ }
nm_GreenValues		graphics/graphicsnames.h	/^#define nm_GreenValues 14/ ;" macro 1 { }	{ }
nm_GreenWidth		graphics/graphicsnames.h	/^#define nm_GreenWidth 57/ ;" macro 1 { }	{ }
nm_HalftoneType		graphics/graphicsnames.h	/^#define nm_HalftoneType 15/ ;" macro 1 { }	{ }
nm_Height		graphics/graphicsnames.h	/^#define nm_Height 52/ ;" macro 1 { ImageDict }	{ }
nm_ISOLatin1Encoding		fonts/fontsnames.h	/^#define nm_ISOLatin1Encoding 30/ ;" macro 1 { }	{ }
nm_ImageMatrix		graphics/graphicsnames.h	/^#define nm_ImageMatrix 16/ ;" macro 1 { }	{ }
nm_ImageType		graphics/graphicsnames.h	/^#define nm_ImageType 17/ ;" macro 1 { ImageDict }	{ }
nm_InBetweenSize		fonts/fontsnames.h	/^#define nm_InBetweenSize 29/ ;" macro 1 { CheckPrebuiltOptions }	{ }
nm_Indexed		graphics/graphicsnames.h	/^#define nm_Indexed 18/ ;" macro 1 { }	{ }
nm_InvalidFont		graphics/graphicsnames.h	/^#define nm_InvalidFont 19/ ;" macro 1 { }	{ }
nm_KernVector		fonts/fontsnames.h	/^#define nm_KernVector 28/ ;" macro 1 { }	{ }
nm_MIDVector		fonts/fontsnames.h	/^#define nm_MIDVector 33/ ;" macro 1 { }	{ }
nm_Metrics		fonts/fontsnames.h	/^#define nm_Metrics 31/ ;" macro 1 { metricsname }	{ }
nm_Metrics2		fonts/fontsnames.h	/^#define nm_Metrics2 32/ ;" macro 1 { metrics2name }	{ }
nm_MinFeature		fonts/fontsnames.h	/^#define nm_MinFeature 34/ ;" macro 1 { }	{ }
nm_MultipleDataSources		graphics/graphicsnames.h	/^#define nm_MultipleDataSources 20/ ;" macro 1 { }	{ }
nm_OrigFont		fonts/fontsnames.h	/^#define nm_OrigFont 35/ ;" macro 1 { }	{ }
nm_OtherBlues		fonts/fontsnames.h	/^#define nm_OtherBlues 36/ ;" macro 1 { otherBluesName }	{ }
nm_OtherSubrs		fonts/fontsnames.h	/^#define nm_OtherSubrs 37/ ;" macro 1 { ocsbrsnm }	{ }
nm_PaintType		fonts/fontsnames.h	/^#define nm_PaintType 38/ ;" macro 1 { pnttypnm }	{ }
nm_PrefEnc		fonts/fontsnames.h	/^#define nm_PrefEnc 39/ ;" macro 1 { }	{ }
nm_Private		fonts/fontsnames.h	/^#define nm_Private 40/ ;" macro 1 { prvtnm }	{ }
nm_RedAngle		graphics/graphicsnames.h	/^#define nm_RedAngle 39/ ;" macro 1 { }	{ }
nm_RedFrequency		graphics/graphicsnames.h	/^#define nm_RedFrequency 40/ ;" macro 1 { }	{ }
nm_RedHeight		graphics/graphicsnames.h	/^#define nm_RedHeight 55/ ;" macro 1 { }	{ }
nm_RedSpotFunction		graphics/graphicsnames.h	/^#define nm_RedSpotFunction 41/ ;" macro 1 { }	{ }
nm_RedThresholds		graphics/graphicsnames.h	/^#define nm_RedThresholds 56/ ;" macro 1 { }	{ }
nm_RedValues		graphics/graphicsnames.h	/^#define nm_RedValues 21/ ;" macro 1 { }	{ }
nm_RedWidth		graphics/graphicsnames.h	/^#define nm_RedWidth 54/ ;" macro 1 { }	{ }
nm_RndStemUp		fonts/fontsnames.h	/^#define nm_RndStemUp 41/ ;" macro 1 { rndstmname }	{ }
nm_RunInt		fonts/fontsnames.h	/^#define nm_RunInt 42/ ;" macro 1 { }	{ }
nm_ScaleMatrix		fonts/fontsnames.h	/^#define nm_ScaleMatrix 43/ ;" macro 1 { }	{ }
nm_SpotFunction		graphics/graphicsnames.h	/^#define nm_SpotFunction 38/ ;" macro 1 { }	{ }
nm_StandardEncoding		fonts/fontsnames.h	/^#define nm_StandardEncoding 44/ ;" macro 1 { stdencname }	{ }
nm_StdHW		fonts/fontsnames.h	/^#define nm_StdHW 45/ ;" macro 1 { stdhwNm }	{ }
nm_StdVW		fonts/fontsnames.h	/^#define nm_StdVW 46/ ;" macro 1 { stdvwNm }	{ }
nm_StemSnapH		fonts/fontsnames.h	/^#define nm_StemSnapH 85/ ;" macro 1 { stemsnaphNm }	{ }
nm_StemSnapV		fonts/fontsnames.h	/^#define nm_StemSnapV 86/ ;" macro 1 { stemsnapvNm }	{ }
nm_StrokeWidth		fonts/fontsnames.h	/^#define nm_StrokeWidth 47/ ;" macro 1 { strokewidthname }	{ }
nm_Subrs		fonts/fontsnames.h	/^#define nm_Subrs 48/ ;" macro 1 { subrsnm }	{ }
nm_SubsVector		fonts/fontsnames.h	/^#define nm_SubsVector 49/ ;" macro 1 { }	{ }
nm_TCFont		fonts/fontsnames.h	/^#define nm_TCFont 50/ ;" macro 1 { }	{ }
nm_Thresholds		graphics/graphicsnames.h	/^#define nm_Thresholds 53/ ;" macro 1 { }	{ }
nm_TransformedChar		fonts/fontsnames.h	/^#define nm_TransformedChar 51/ ;" macro 1 { CheckPrebuiltOptions }	{ }
nm_UniqueID		fonts/fontsnames.h	/^#define nm_UniqueID 52/ ;" macro 1 { }	{ }
nm_UserObjects		language/languagenames.h	/^#define nm_UserObjects 2/ ;" macro 1 { }	{ }
nm_VMerror		vm/vmnames.h	/^#define nm_VMerror 24/ ;" macro 1 { }	{ }
nm_WMode		fonts/fontsnames.h	/^#define nm_WMode 53/ ;" macro 1 { }	{ }
nm_WeightVector		fonts/fontsnames.h	/^#define nm_WeightVector 89/ ;" macro 1 { wvname }	{ }
nm_Width		graphics/graphicsnames.h	/^#define nm_Width 51/ ;" macro 1 { ImageDict }	{ }
nm_aover		fonts/fontsnames.h	/^#define nm_aover 54/ ;" macro 1 { aovrname }	{ }
nm_arc		graphics/graphicsnames.h	/^#define nm_arc 22/ ;" macro 1 { arcNm }	{ }
nm_arcn		graphics/graphicsnames.h	/^#define nm_arcn 23/ ;" macro 1 { arcnNm }	{ }
nm_arct		graphics/graphicsnames.h	/^#define nm_arct 24/ ;" macro 1 { arctNm }	{ }
nm_array		fonts/fontsnames.h	/^#define nm_array 55/ ;" macro 1 { }	{ }
nm_arraytype		language/languagenames.h	/^#define nm_arraytype 14/ ;" macro 1 { }	{ }
nm_ascend		fonts/fontsnames.h	/^#define nm_ascend 56/ ;" macro 1 { ascndname }	{ }
nm_baseline		fonts/fontsnames.h	/^#define nm_baseline 57/ ;" macro 1 { bslnname }	{ }
nm_begin		fonts/fontsnames.h	/^#define nm_begin 58/ ;" macro 1 { }	{ }
nm_booleantype		language/languagenames.h	/^#define nm_booleantype 9/ ;" macro 1 { }	{ }
nm_bover		fonts/fontsnames.h	/^#define nm_bover 59/ ;" macro 1 { bovrname }	{ }
nm_capheight		fonts/fontsnames.h	/^#define nm_capheight 60/ ;" macro 1 { cphghtname }	{ }
nm_capover		fonts/fontsnames.h	/^#define nm_capover 61/ ;" macro 1 { capovrname }	{ }
nm_closefile		fonts/fontsnames.h	/^#define nm_closefile 62/ ;" macro 1 { }	{ }
nm_closepath		graphics/graphicsnames.h	/^#define nm_closepath 26/ ;" macro 1 { closepathNm }	{ }
nm_conditiontype		language/languagenames.h	/^#define nm_conditiontype 24/ ;" macro 1 { }	{ }
nm_curveto		graphics/graphicsnames.h	/^#define nm_curveto 27/ ;" macro 1 { curvetoNm }	{ }
nm_cvx		graphics/graphicsnames.h	/^#define nm_cvx 28/ ;" macro 1 { }	{ }
nm_def		fonts/fontsnames.h	/^#define nm_def 63/ ;" macro 1 { }	{ }
nm_definefont		fonts/fontsnames.h	/^#define nm_definefont 64/ ;" macro 1 { }	{ }
nm_descend		fonts/fontsnames.h	/^#define nm_descend 65/ ;" macro 1 { dscndname }	{ }
nm_dict		fonts/fontsnames.h	/^#define nm_dict 66/ ;" macro 1 { }	{ }
nm_dictfull		vm/vmnames.h	/^#define nm_dictfull 0/ ;" macro 1 { VMInit }	{ }
nm_dictstackoverflow		vm/vmnames.h	/^#define nm_dictstackoverflow 1/ ;" macro 1 { }	{ }
nm_dictstackunderflow		vm/vmnames.h	/^#define nm_dictstackunderflow 2/ ;" macro 1 { }	{ }
nm_dicttype		language/languagenames.h	/^#define nm_dicttype 13/ ;" macro 1 { }	{ }
nm_eexec		fonts/fontsnames.h	/^#define nm_eexec 67/ ;" macro 1 { }	{ }
nm_end		fonts/fontsnames.h	/^#define nm_end 68/ ;" macro 1 { }	{ }
nm_engineclass		fonts/fontsnames.h	/^#define nm_engineclass 69/ ;" macro 1 { engineclassnm }	{ }
nm_erosion		fonts/fontsnames.h	/^#define nm_erosion 70/ ;" macro 1 { eNm }	{ }
nm_execstackoverflow		vm/vmnames.h	/^#define nm_execstackoverflow 3/ ;" macro 1 { }	{ }
nm_filetype		language/languagenames.h	/^#define nm_filetype 11/ ;" macro 1 { }	{ }
nm_findfont		fonts/fontsnames.h	/^#define nm_findfont 71/ ;" macro 1 { }	{ }
nm_fonttype		language/languagenames.h	/^#define nm_fonttype 15/ ;" macro 1 { }	{ }
nm_gsfactor		fonts/fontsnames.h	/^#define nm_gsfactor 92/ ;" macro 1 { gsfactorNm }	{ }
nm_gstatetype		language/languagenames.h	/^#define nm_gstatetype 23/ ;" macro 1 { }	{ }
nm_halfsw		fonts/fontsnames.h	/^#define nm_halfsw 72/ ;" macro 1 { hlfswname }	{ }
nm_handleerror		postscript/postscriptnames.h	/^#define nm_handleerror 0/ ;" macro 1 { }	{ }
nm_hires		fonts/fontsnames.h	/^#define nm_hires 73/ ;" macro 1 { }	{ }
nm_idealwidth		fonts/fontsnames.h	/^#define nm_idealwidth 91/ ;" macro 1 { idealwidthNm }	{ }
nm_integertype		language/languagenames.h	/^#define nm_integertype 6/ ;" macro 1 { }	{ }
nm_interrupt		postscript/postscriptnames.h	/^#define nm_interrupt 1/ ;" macro 1 { }	{ }
nm_invalidaccess		vm/vmnames.h	/^#define nm_invalidaccess 4/ ;" macro 1 { }	{ }
nm_invalidcontext		vm/vmnames.h	/^#define nm_invalidcontext 5/ ;" macro 1 { }	{ }
nm_invalidexit		vm/vmnames.h	/^#define nm_invalidexit 6/ ;" macro 1 { }	{ }
nm_invalidfileaccess		vm/vmnames.h	/^#define nm_invalidfileaccess 7/ ;" macro 1 { }	{ }
nm_invalidfont		vm/vmnames.h	/^#define nm_invalidfont 8/ ;" macro 1 { }	{ }
nm_invalidid		vm/vmnames.h	/^#define nm_invalidid 9/ ;" macro 1 { }	{ }
nm_invalidrestore		vm/vmnames.h	/^#define nm_invalidrestore 10/ ;" macro 1 { }	{ }
nm_ioerror		vm/vmnames.h	/^#define nm_ioerror 11/ ;" macro 1 { }	{ }
nm_known		fonts/fontsnames.h	/^#define nm_known 74/ ;" macro 1 { }	{ }
nm_lenIV		fonts/fontsnames.h	/^#define nm_lenIV 75/ ;" macro 1 { lenIVname }	{ }
nm_limitcheck		vm/vmnames.h	/^#define nm_limitcheck 12/ ;" macro 1 { }	{ }
nm_lineto		graphics/graphicsnames.h	/^#define nm_lineto 29/ ;" macro 1 { linetoNm }	{ }
nm_locktype		fonts/fontsnames.h	/^#define nm_locktype 76/ ;" macro 1 { lNm }	{ }
nm_marktype		language/languagenames.h	/^#define nm_marktype 21/ ;" macro 1 { }	{ }
nm_moveto		graphics/graphicsnames.h	/^#define nm_moveto 30/ ;" macro 1 { movetoNm }	{ }
nm_namearraytype		language/languagenames.h	/^#define nm_namearraytype 26/ ;" macro 1 { }	{ }
nm_nametype		language/languagenames.h	/^#define nm_nametype 8/ ;" macro 1 { }	{ }
nm_nocurrentpoint		vm/vmnames.h	/^#define nm_nocurrentpoint 13/ ;" macro 1 { }	{ }
nm_notdef		fonts/fontsnames.h	/^#define nm_notdef 77 \/* .notdef *\// ;" macro 1 { notdefname }	{ }
nm_nulltype		language/languagenames.h	/^#define nm_nulltype 5/ ;" macro 1 { }	{ }
nm_operatortype		language/languagenames.h	/^#define nm_operatortype 12/ ;" macro 1 { }	{ }
nm_overshoot		fonts/fontsnames.h	/^#define nm_overshoot 78/ ;" macro 1 { ovrshtname }	{ }
nm_packedarraytype		language/languagenames.h	/^#define nm_packedarraytype 18/ ;" macro 1 { }	{ }
nm_password		fonts/fontsnames.h	/^#define nm_password 79/ ;" macro 1 { scrtnm }	{ }
nm_productdictname		postscript/postscriptnames.h	/^#define nm_productdictname 3/ ;" macro 1 { }	{ }
nm_put		fonts/fontsnames.h	/^#define nm_put 80/ ;" macro 1 { }	{ }
nm_rangecheck		vm/vmnames.h	/^#define nm_rangecheck 14/ ;" macro 1 { }	{ }
nm_rcurveto		graphics/graphicsnames.h	/^#define nm_rcurveto 31/ ;" macro 1 { rcurvetoNm }	{ }
nm_realtype		language/languagenames.h	/^#define nm_realtype 7/ ;" macro 1 { }	{ }
nm_rlineto		graphics/graphicsnames.h	/^#define nm_rlineto 32/ ;" macro 1 { rlinetoNm }	{ }
nm_rmoveto		graphics/graphicsnames.h	/^#define nm_rmoveto 33/ ;" macro 1 { rmovetoNm }	{ }
nm_rndwidth		fonts/fontsnames.h	/^#define nm_rndwidth 90/ ;" macro 1 { rndwidthNm }	{ }
nm_save		fonts/fontsnames.h	/^#define nm_save 81/ ;" macro 1 { }	{ }
nm_savetype		language/languagenames.h	/^#define nm_savetype 22/ ;" macro 1 { }	{ }
nm_setbbox		graphics/graphicsnames.h	/^#define nm_setbbox 34/ ;" macro 1 { setbboxNm }	{ }
nm_stackoverflow		vm/vmnames.h	/^#define nm_stackoverflow 16/ ;" macro 1 { }	{ }
nm_stackunderflow		vm/vmnames.h	/^#define nm_stackunderflow 15/ ;" macro 1 { }	{ }
nm_stringtype		language/languagenames.h	/^#define nm_stringtype 10/ ;" macro 1 { }	{ }
nm_strokewidth		fonts/fontsnames.h	/^#define nm_strokewidth 82/ ;" macro 1 { stkwdthname }	{ }
nm_syntaxerror		vm/vmnames.h	/^#define nm_syntaxerror 17/ ;" macro 1 { }	{ }
nm_t11		language/languagenames.h	/^#define nm_t11 16/ ;" macro 1 { }	{ }
nm_t12		language/languagenames.h	/^#define nm_t12 17/ ;" macro 1 { }	{ }
nm_t14		language/languagenames.h	/^#define nm_t14 19/ ;" macro 1 { }	{ }
nm_t15		language/languagenames.h	/^#define nm_t15 20/ ;" macro 1 { }	{ }
nm_timeout		postscript/postscriptnames.h	/^#define nm_timeout 2/ ;" macro 1 { }	{ }
nm_typecheck		vm/vmnames.h	/^#define nm_typecheck 18/ ;" macro 1 { }	{ }
nm_ucache		graphics/graphicsnames.h	/^#define nm_ucache 35/ ;" macro 1 { ucacheNm }	{ }
nm_undefined		vm/vmnames.h	/^#define nm_undefined 19/ ;" macro 1 { }	{ }
nm_undefinedfilename		vm/vmnames.h	/^#define nm_undefinedfilename 20/ ;" macro 1 { }	{ }
nm_undefinedresult		vm/vmnames.h	/^#define nm_undefinedresult 21/ ;" macro 1 { }	{ }
nm_unmatchedmark		vm/vmnames.h	/^#define nm_unmatchedmark 22/ ;" macro 1 { }	{ }
nm_unregistered		vm/vmnames.h	/^#define nm_unregistered 23/ ;" macro 1 { }	{ }
nm_xheight		fonts/fontsnames.h	/^#define nm_xheight 83/ ;" macro 1 { xhghtname }	{ }
nm_xover		fonts/fontsnames.h	/^#define nm_xover 84/ ;" macro 1 { xovrname }	{ }
nme		language/classarray.h	/^  nme,						\/* \/ *\// ;" global 1 { }	{ }
noBinClassArray		language/scanner.c	/^private readonly Class noBinClassArray[] = {/ ;" global 4 { LineComplete ScannerInit StmToken }	{ }
noCurPt		graphics/qreducer.c	/^private boolean noCurPt;/ ;" global 1 { QFNewPoint QNewPoint QRdcClose QResetReducer }	{ }
nocurrentpoint		include/error.h	/^#define nocurrentpoint errorNames[13]/ ;" macro 1 { NoCurrentPoint }	{ errorNames }
normalize		graphics/stroke.c	/^          normalize,/ ;" global 1 { CheckForRectangle DoStroke FF_StrkLnTo F_AdjstHW F_FillJoin F_MiterPoint F_StrkCap FastFillCurveJoin FillCircle FillCurveJoin FillJoin FillLineSegment MiterPoint PreStroke StrkCap StrkLnTo }	{ }
notdefname		fonts/fontbuild.c	/^                   pnttypnm, fntpthnm, stdencname,/ ;" global 1 { ChrMapBuildChar InternalBuildChar }	{ }
notifyInProgress		product/ipcstream.h	/^#define notifyInProgress f2/ ;" macro 1 { IPCFlushOutput IPCInitializeStm IPCNotifyReceived IPCWrite }	{ }
notifyPort		product/ipcscheduler.c	/^private port_t notifyPort;	\/* Our tasks' notify po/ ;" global 1 { ContextYield HandleMsg HandleNotifyMsg Scheduler }	{ }
novalue		language/string.c	/^private readonly character novalue[] = "--nostring/ ;" global 1 { PSCVRS PSCVS }	{ }
nrStorage		product/windowops.c	/^public char *nrStorage;			\/* Blind ptr to NRects p/ ;" global 1 { ClearWdNRect IniWindowOps PSSetNRect TermNRects }	{ }
nullDevHalftone		device/nulldev.c	/^private DevHalftone nullDevHalftone;/ ;" global 1 { IniNullDevImpl NullDefaultHalftone }	{ }
nullDevScreen		device/nulldev.c	/^private DevScreen nullDevScreen;/ ;" global 1 { IniNullDevImpl }	{ }
nullObj		include/basictypes.h	/^#define	nullObj		0/ ;" macro 1 { BinObjInit CCBMRun CRun ChrMapBuildChar CmdIndexObj CreateContext DelayedMakeFont DumpDict EnumerateDict Equal FndFntSibling InvalidateRecycler KADefinefont MakeFontSupp MakeScreenDict NextKeyVal PSCrHalftone PSDeviceInfo PSPopGState PSPopManagedObject PSRgstOps PSSetHalftone PSSysNameMap PopGState PrAryBody PrintMidDict PrintObj PushGStateItems PutInNameMap ReadBinObjSeq RelocateObj RelocateObject RgstOpSet ScanNameArray SearchDict TopError TracePrivateForShared TracePrivateVM TraceSharedVM TrickyDictP TypeOfObj UnDef VMExpandDict WriteObject copydict pFD }	{ }
nullProcs		device/nulldev.c	/^public DevProcs *nullProcs;/ ;" global 1 { CreateNullDevice IniNullDevImpl IniNullDevice MakeNullDevice TermWindowDevice }	{ }
nullThresholds		device/nulldev.c	/^private unsigned char nullThresholds[1] = {127};/ ;" global 1 { IniNullDevImpl }	{ }
nullType		include/customops.h	/^#define	nullType	0/ ;" macro 1 { }	{ }
numTempCauses		bintree/layer.c	/^static int numTempCauses;	\/* Number of causes curr/ ;" global 1 { ExpandTempCauses LInitialize LMoveTo }	{ }
nxCursorInfo		mousekeyboard/routines.c	/^NXCursorInfo nxCursorInfo;/ ;" global 1 { DisplayCursor RemoveCursor }	{ }
objCond		include/basictypes.h	/^#define	objCond		19/ ;" macro 1 { Equal NewCondition PSNotify PSWait RelocateObj RelocateObject TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj }	{ }
objGState		include/basictypes.h	/^#define	objGState	18/ ;" macro 1 { Equal GC_WasCollected IniGStates PSCopy PSGState PSNoAccess PSPopGState PSRCheck PSReadOnly PSWCheck PopGState RelocateObj RelocateObject TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj }	{ }
objLock		include/basictypes.h	/^#define	objLock		20/ ;" macro 1 { Equal MonExitProc MonitorExit NewLock PSAcquireLock PSMonitor PSReleaseLock PSWait RelocateObj RelocateObject TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj }	{ }
objMark		include/basictypes.h	/^#define	objMark		16/ ;" macro 1 { AryToMrk CountToMark Equal PSClrToMrk PrintObj ReadBinObjSeq RelocateObj RelocateObject TracePrivateForShared TracePrivateVM TraceSharedVM WriteObject }	{ }
objNameArray		include/basictypes.h	/^#define	objNameArray	21/ ;" macro 1 { AllocPNameArray CmdIndexObj FindOpSet GC_WasCollected LNameArrayObj PSRgstOps PutInNameMap RelocateObj RelocateObject RgstDynamicCmd RgstOpSet ScanNameArray TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
objSave		include/basictypes.h	/^#define	objSave		17/ ;" macro 1 { CheckStackElement Equal PSRstr PrintObj RelocateObj RelocateObject TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
objectFormat		language/langdata.h	/^#define objectFormat (languageCtxt->scannerData._o/ ;" macro 1 { CreateTypedContext GetObjFormat LanguageDataHandler LineComplete PSCrObjFormat PSSetNextObjectFormat SendEvent SetObjFormat StmToken WriteObject }	{ languageCtxt }
ocsbrsnm		fonts/fontbuild.c	/^                   xovrname, capovrname, aovrname,/ ;" global 1 { CCRunStd }	{ }
oct		language/classarray.h	/^  oct, oct, oct, oct, oct, oct, oct, oct,	\/* 01234/ ;" global 1 { ScannerInit }	{ }
oddXwidth		graphics/stroke.c	/^	  oddXwidth,/ ;" global 1 { AnamorphicNormStrkWdth F_NormPair NormalizePoint SetNormMidPts }	{ }
oddYwidth		graphics/stroke.c	/^	  oddYwidth;/ ;" global 1 { AnamorphicNormStrkWdth F_NormPair NormalizePoint SetNormMidPts }	{ }
ofLfSt		graphics/pathpriv.c	/^  private FCd old_p, old_a, ofaSt, ofLfSt, old_tai/ ;" global 1 { OFClose OFLineTo }	{ }
of_cp		graphics/pathpriv.c	/^  private Object of_init, of_np, of_cp, of_done;/ ;" global 1 { Trace_OFCP psTraceOffsetFill }	{ }
of_disable		language/scanner.h	/^#define of_disable 0		\/* disable binary encodings / ;" macro 1 { WriteObject }	{ }
of_done		graphics/pathpriv.c	/^  private Object of_init, of_np, of_cp, of_done;/ ;" global 1 { Trace_OFDone psTraceOffsetFill }	{ }
of_highIEEE		language/scanner.h	/^#define of_highIEEE 1		\/* high byte first, IEEE re/ ;" macro 1 { LanguageDataHandler WriteObject }	{ }
of_highNative		language/scanner.h	/^#define of_highNative 3		\/* high byte first, nativ/ ;" macro 1 { LanguageDataHandler WriteObject }	{ }
of_init		graphics/pathpriv.c	/^  private Object of_init, of_np, of_cp, of_done;/ ;" global 1 { Trace_OFInit psTraceOffsetFill }	{ }
of_lowIEEE		language/scanner.h	/^#define of_lowIEEE 2		\/* low byte first, IEEE real/ ;" macro 1 { LanguageDataHandler WriteObject }	{ }
of_lowNative		language/scanner.h	/^#define of_lowNative 4		\/* low byte first, native / ;" macro 1 { LanguageDataHandler WriteObject }	{ }
of_max		language/scanner.h	/^#define of_max 4/ ;" macro 1 { PSStObjFormat }	{ }
of_np		graphics/pathpriv.c	/^  private Object of_init, of_np, of_cp, of_done;/ ;" global 1 { Trace_OFNP psTraceOffsetFill }	{ }
ofaSt		graphics/pathpriv.c	/^  private FCd old_p, old_a, ofaSt, ofLfSt, old_tai/ ;" global 1 { OFClose OFLineTo }	{ }
offSubList		bintree/layer.c	/^SubList offSubList;		\/* SubList of offscreen layer/ ;" global 1 { EXDummyScreens LMoveTo LOrder }	{ }
offsetCenterFlag		graphics/cscan.c	/^private boolean offsetCenterFlag;	\/* True: do offs/ ;" global 1 { CSPathPoints CScan ResetCScan }	{ }
offsetwidth		graphics/pathpriv.c	/^  private Fixed offsetwidth, erodeConst, ofwSt, ol/ ;" global 1 { InitOFill OFIntersect OFLineTo OffsetFill }	{ }
oflimit		fonts/fontbuild.c	/^private integer cslimit, oflimit;/ ;" global 1 { FontBuildInit OFLIMIT PSSetOFLimit }	{ }
ofpSt		graphics/pathpriv.c	/^  private FCd ofpSt, markDelta;/ ;" global 1 { OFClose OFMoveToP }	{ }
ofwSt		graphics/pathpriv.c	/^  private Fixed offsetwidth, erodeConst, ofwSt, ol/ ;" global 1 { OFClose OFLineTo }	{ }
oldStartLink		graphics/cscan.c	/^private CrossPtr oldStartLink;		\/* Previous versio/ ;" global 1 { CScan FinishPath ResetCScan }	{ }
old_a		graphics/pathpriv.c	/^  private FCd old_p, old_a, ofaSt, ofLfSt, old_tai/ ;" global 1 { OFIntersect OFLineTo }	{ }
old_p		graphics/pathpriv.c	/^  private FCd old_p, old_a, ofaSt, ofLfSt, old_tai/ ;" global 1 { OFIntersect OFLineTo OFMoveToP }	{ }
old_tail		graphics/pathpriv.c	/^  private FCd old_p, old_a, ofaSt, ofLfSt, old_tai/ ;" global 1 { OFIntersect OFLineTo }	{ }
old_w		graphics/pathpriv.c	/^  private Fixed offsetwidth, erodeConst, ofwSt, ol/ ;" global 1 { OFIntersect OFLineTo }	{ }
onebit		devpattern/patternimpl.c	/^public PSCANTYPE onebit;/ ;" global 1 { }	{ }
opDefTable		vm/rgstcmds.c	/^OpDefEntry *opDefTable;/ ;" global 1 { FindOpDef Init_Cmds }	{ }
opStk		language/stack.c	/^public	PStack	opStk;/ ;" global 1 { AStore Array AryToMrk CarefulPushP CheckAllStacks CreateContext CreateStacks DumpDefault GC_MoveRecycleRange HandleStackOverflow IPopOp KAArraySubrs KACharDef KADict KAEndCSDict KAKnown KAPutDef KARdSubrsData LanguageDataHandler PSCacheStatistics PSClear PSClrToMrk PSCntToMark PSCoProc PSCopy PSCount PSCvLit PSCvX PSDup PSExch PSFontRun PSFork PSGet PSGetInterval PSGetOperandType PSIndex PSIntDict PSJoin PSNoAccess PSPop PSPopBoolean PSPopInteger PSPopPCd PSPopPReal PSPopString PSPushBoolean PSPushInteger PSPushPReal PSRCheck PSReadOnly PSRoll PSSCheck PSSetUCacheParams PSStCParams PSStackStats PSStringLength PSType PSWCheck PSXCheck PSXctOnly (etc) }	{ }
opType		language/packedarray.c	/^public readonly Code opType[256] = / ;" global 46 { DecodeObj EnumerateComposites RelocateObj }	{ }
os_abs		include/fp.h	/^#define os_abs(x)	((x)<0?-(x):(x))/ ;" macro 1 { CheckForAnamorphicMatrix SetCch SetScal }	{ }
os_aix		include/environment.h	/^#define os_aix		15	\/* IBM Adv. Interactive eXecuti/ ;" macro 1 { UNIXSYS }	{ }
os_aux		include/environment.h	/^#define os_aux		5	\/* Unix -- Apple A\/UX *\// ;" macro 1 { }	{ }
os_bsd		include/environment.h	/^#define os_bsd		2	\/* Unix -- Berkeley Software Dis/ ;" macro 1 { ENUM_SUPPORTED UNIXSYS }	{ }
os_cleanup		stream/streamimpl.c	/^public procedure os_cleanup()/ ;" function 10 { PSMakeVM }	{ Stm StmElem fclose stmList }
os_clearerr		stream/clrerr.c	/^void os_clearerr(stm)/ ;" function 5 { CloseFile DecStmByteCnt SendTAToDisk StreamError ValidateTA }	{ }
os_clock		pslib/clockunix.c	/^public integer os_clock()/ ;" function 10 { CacheLookup PSRealTime }	{ NULL }
os_domain		include/environment.h	/^#define os_domain	9	\/* Apollo Domain *\// ;" macro 1 { }	{ }
os_eprintf		stream/printf.c	/^public int os_eprintf (va_alist)/ ;" function 13 { BMAlloc BMFree BinObjInit CantHappen CheckBM EndParseArguments EndWholeClothInit NumFromStr PSAllocBM PSAllocVM PSTrashVM ReadVM os_raise }	{ fflush os_stderr }
os_fabs		fonts/fontbuild.c	/^#define os_fabs(x) (RealLt0(x)?-(x):(x))/ ;" macro 1 { AddCircleMask AdjstHW AnamorphicNormStrkWdth ArcToInternal CCRunStd CDist CalcThresholds CompositeShow Dist FastShow FltnCurve GetNormStrkWdth HashObject MiterPoint NormalizePoint PSAbs SetHalfWidth SetupFntMtx StrkLnTo TransDevPrim }	{ RealLt0 }
os_fdopen		stream/unixfopen.c	/^public Stm os_fdopen(fd, mode)/ ;" function 61 { UnixStmInit os_fopen }	{ AddMappedFile FileFd FileSize NULL Stm StmCreate StmDestroy StmProcs fileno mappedStmProcs readonly unixStmProcs }
os_fgetc		stream/fgetc.c	/^int os_fgetc(stm)/ ;" function 5 { LineEdit }	{ getc }
os_fgets		stream/fgets.c	/^char *os_fgets(str, n, stm)/ ;" function 19 { DetermineFormat }	{ NULL getc register }
os_fileno		stream/unixfopen.c	/^public int os_fileno(stm)/ ;" function 9 { Bang }	{ FileFd fileno unixStmProcs }
os_fopen		stream/unixfopen.c	/^public Stm os_fopen(file, mode)/ ;" function 86 { FontStmCreate Init_VM_Space Mnextmain PSTraceRecycler UDiskFind UDiskStmCreate WriteVMToFile readPrebuiltFile }	{ IsContextWriteProhibited NULL Stm StmCreate StmProcs fileno os_fdopen readonly register unixStmProcs }
os_fprintf		stream/printf.c	/^public int os_fprintf (va_alist)/ ;" function 12 { BPCompositeFrom BPCompositeTo BPPrintOn BPRevealBecause BuildInitialState CSPrintOn ChangeRecyclerExecLevel CheckVersion ClearWdNRect CreateNewContext DPPrintOn DisplayVMSection Display_VM_Segment DriverInit DumpDefault DumpDict DumpMappedFiles DumpRoot ExtendRecycler HandleDataMsg LPrintOn LoadSingleDriver MPStart NSDestroyPS PSDisplayVM PSListener PSMoveWindow PSProf PSTraceRecycler PSUnixSignal PrAryBody PrNameAryBody PrPkdaryBody PrStmBody PrintAccess PrintBoolean PrintDOB PrintDevCoord PrintKeyVal PrintMTX PrintMidDict PrintNameEntry PrintObj PrintVal ReadNetInfo RecalcMouseRect ReclaimRecyclableVM Recyclable RecyclerPop RecyclerPush ResetRecycler SelectPSContext SelfDestructPSContext StartVM StateInit TermNRects TopError TraceInvalidation VMExpandDict WCDUMP_SHMEM (etc) }	{ Stm }
os_fputc		stream/fputc.c	/^int os_fputc(ch, stm)/ ;" function 5 { LineEdit }	{ putc }
os_fputs		stream/fputs.c	/^int os_fputs(str, stm)/ ;" function 11 { Erase }	{ putc register }
os_freeelement		pslib/pool.c	/^public procedure os_freeelement(pool,el)/ ;" function 8 { AllocScreen AppendPath BAGFree BPFree CSExpand CSFree ClearWdNRect DPFree DeleteScreen DisposeDevPrim DoStrkPth EnterPathInCache EnterRdcInCache FrLstPth FreeHalftone FreePath FreeRdc FreeScreen FreeSegment GStackClear GStackRestore InitChunk InitClipPath LFree MakeRectPath MinimumClip NewSegment NewViewClip NextGStatesProc PFree ReclaimDevTfrFcn RemColorRef RemGTRef RemPathRef RemReducedRef RemRndrRef RemTfrRef Scheduler TermClipDevPrim TermNRects TermViewClip TermWindowDevice XAReducePath }	{ DebugAssert PoolElement free }
os_freepool		pslib/pool.c	/^public procedure os_freepool (pool)/ ;" function 18 { }	{ NIL PoolChunk chunks }
os_fscanf		stream/scanf.c	/^public int os_fscanf(va_alist)/ ;" function 12 { }	{ Stm }
os_gets		stream/gets.c	/^public char *os_gets(str)/ ;" function 19 { gets }	{ NULL getc os_stdin register true }
os_isinf		fp/isinfieee.c	/^public boolean os_isinf( d0, d1 )/ ;" function 8 { }	{ HI LO }
os_isnan		fp/isinfieee.c	/^public boolean os_isnan( d0,d1 )/ ;" function 8 { }	{ EXPONENT HI LO SIGN }
os_labs		fonts/flex.c	/^#define os_labs(x) ABS(x)/ ;" macro 1 { AdjustBlues BlueLock BoostBotLocs BreakUpPath BresenhamMT BuildChar BuildEdge CCRunStd CDistFixed CalcHW2 CheckForRectangle CompositeShow EdgeInit FF_StrkLnTo FMiniFltn F_AdjstHW F_MiterPoint F_NormPair FastShow FlexProc FreqAngleToNumbers GlbClrLine HashObject OFIntersect OFLineTo PSAbs PutStdW QEnumOk SetXABounds ShowByName TriLock }	{ }
os_mach		include/environment.h	/^#define os_mach		17	\/* MACH from CMU (Unix 4.3 com/ ;" macro 1 { ENUM_SUPPORTED SYNCHRONOUS_TIMESLICE UNIXSYS }	{ }
os_malloc		fonts/fontbuild.c	/^#define os_malloc(i) malloc(i)/ ;" macro 1 { AllocScreen CreateCoroutine ExtendStrStorage GETTABLE GETUCRTABLE IPCInitializeStm IniCScan IniGlbClrBuffs IniMpdDevImpl IniStroke IniWdDevImpl InitRefArrays Mnextmain NewStack PutInNameMap ReadRelocationTable SafeMalloc UFilBuf UFlsBuf WriteObject os_newpool }	{ }
os_mpw		include/environment.h	/^#define os_mpw		10	\/* Apple Macintosh Programmer's/ ;" macro 1 { USE_SIGNAL }	{ }
os_msdos		include/environment.h	/^#define os_msdos	18	\/* MicroSoft DOS *\// ;" macro 1 { }	{ }
os_mvs370		include/environment.h	/^#define os_mvs370	12	\/* IBM MVS *\// ;" macro 1 { }	{ }
os_newelement		pslib/pool.c	/^public char *os_newelement(pool)/ ;" function 14 { AllocHalftone AllocListPathRec AllocScreen BAGNew BPCopy BPNewAt CSExpand CSNew ChangeColor CreateGStack CreateTypedContext DPNewAt DevAllocTfrFcn DoRdcPth DoStrkPth EnterPathInCache EnterRdcInCache FindCurrentViewInCache GSave GStackCopy GetTfr InitChunk InitClipPath LNew MakeRectPath MinimumClip NewDevPrim NewScreen NewSegment NewViewClip NextGStatesProc PNew PSPopManagedObject PSSetNRect ReducePathClipInt ReduceQuadPath VCSaveProc window }	{ DebugAssert GrowPool NIL PoolElement free register }
os_newpool		pslib/pool.c	/^public Pool os_newpool(elementSize, elementsPerChu/ ;" function 39 { BAGInitialize BPInitialize CSInitialize CreateSegmentPool CustomOpsInit DPInitialize DevAllocTfrFcn IniClrSpace IniGStates IniTransfer IniUCache IniViewClip IniWindowOps InitPatternImpl LInitialize NewDevPrim NewScreen PInitialize PathBuildInit SchedulerInit }	{ DEFAULTHYST GrowPool MAXInt32 NIL PSLimitCheck PSRangeCheck Pool PoolElement PoolRec chunks free os_malloc register }
os_os2		include/environment.h	/^#define os_os2		13	\/* MicroSoft OS\/2 *\// ;" macro 1 { }	{ }
os_pharlap		include/environment.h	/^#define os_pharlap	16	\/* Proprietary DOS extension/ ;" macro 1 { }	{ }
os_printf		stream/printf.c	/^public int os_printf (va_alist)/ ;" function 10 { AddMark BuildRelocationTable DebugPrintEvent DebugPrintIntersect DebugPrintMakeLine DebugPrintMakePoint DebugPrintNewPoint DebugPrintRdcClose DebugPrintRegions Interchange PSDumpNames PSGCStats PSMakeVM PSPrintChunks PSRecyclerStatus PSStackStats PSTraceRecycler PSUndef Relocate_Names ShipTrapezoid WriteRelocatedVMToFile WriteVMSection WriteVMToFile printf }	{ os_stdout }
os_ps		include/environment.h	/^#define os_ps		1	\/* Adobe PostScript runtime packa/ ;" macro 1 { LanguageDataHandler }	{ }
os_puts		stream/puts.c	/^int os_puts(str)/ ;" function 10 { puts }	{ os_stdout putc register }
os_raise		pslib/except.c	/^public procedure os_raise(code, msg)/ ;" function 16 { RAISE }	{ CantHappen Code NIL _Exc_Buf _Exc_Header os_eprintf register }
os_rewind		include/stream.h	/^#define os_rewind(stm) (void) fseek((stm), 0L, 0)/ ;" macro 1 { }	{ fseek }
os_scanf		stream/scanf.c	/^public int os_scanf(va_alist)/ ;" function 10 { scanf }	{ os_stdin }
os_sprintf		stream/sprintf.c	/^public char *os_sprintf (va_alist)/ ;" function 21 { PSCVS StmToken UndefNameIndex sprintf }	{ StmRec closedStmProcs integer }
os_sqrt		fonts/fontbuild.c	/^#define os_sqrt(x) sqrt(x)   / ;" macro 1 { ArcToInternal Dist GetDSW GetXDistYDist PSSqRt SetupForCircles }	{ }
os_sscanf		stream/scanf.c	/^public int os_sscanf(va_alist)/ ;" function 23 { sscanf }	{ SSUnGetc StmProcs StmRec closedStmProcs integer register }
os_stderr		stream/streamimpl.c	/^public Stm os_stdin, os_stdout, os_stderr;/ ;" global 1 { BPCompositeFrom BPCompositeTo BPRevealBecause BuildInitialState CheckBM CheckVersion ClearWdNRect CreateNewContext DisplayVMSection Display_VM_Segment DriverInit GetDebugStm HandleDataMsg InitPostScript LFindPieceBounds LoadSingleDriver MPStart Mnextmain NSDestroyPS PSDisplayVM PSListener PSMoveWindow PSUnixSignal ReadNetInfo RecalcMouseRect SelectPSContext SelfDestructPSContext StartVM StateInit StmInit TermNRects TopError UFilBuf UnixStmInit VMExpandDict WCDUMP_SHMEM WCTRACE WCTRACE1 WCTRACE2 os_eprintf }	{ }
os_stdin		stream/streamimpl.c	/^public Stm os_stdin, os_stdout, os_stderr;/ ;" global 1 { CreateContext EStmCreate InitPostScript Mnextmain PSCoProc StmCtxCreate StmInit SwitchPSContext UFilBuf UnixStmInit getchar os_gets os_scanf }	{ }
os_stdout		stream/streamimpl.c	/^public Stm os_stdin, os_stdout, os_stderr;/ ;" global 1 { BPPrintOn BuildRelocationTable CSPrintOn CallFromPS CheckBM CreateContext DPPrintOn DebugPrintEvent DebugPrintIntersect DebugPrintMakeLine DebugPrintMakePoint DebugPrintNewPoint DebugPrintRdcClose DebugPrintRegions DumpMappedFiles EStmCreate GetDebugStm InitPostScript LPrintOn Mnextmain PSCoProc PSFls PSMakeVM PSPrObject PSPrValue PSPrint PSProf PSRecyclerStatus StmCtxCreate StmInit SwitchPSContext UFilBuf UFlsBuf UnixStmInit WriteRelocatedVMToFile WriteVMToFile os_printf os_puts putchar }	{ }
os_sun		include/environment.h	/^#define os_sun		3	\/* Unix -- Sun Microsystems *\// ;" macro 1 { CANREVERSEVM CAN_WRITE_OBJ ENUM_SUPPORTED UNIXSYS }	{ }
os_sureCalloc		pslib/os_calloc.c	/^public char *os_sureCalloc(num, size)/ ;" function 9 { ABM_Init AddDevPrimValue AddRunDevPrim AllocHdr BeginParseArguments BinObjInit BuildRelocationTable CacheCreate ContextOpsInit CopyDevPrim CopyRun CustomOpsInit DictInit GrayInit IniClrSpace IniFmDevImpl IniGStates IniNullDevice IniPathPriv IniStroke IniTransfer IniUCache IniViewClip InitCoroutine InitMaskCache Init_Recycler Init_SaveRestore Init_VM_Space LanguageInit MakeNullDevice NewState PSFontRun RgstEditorDev RgstFontDevice StmCreate StreamInit UnixStoDevInit }	{ CantHappen register }
os_sureMalloc		pslib/os_malloc.c	/^public char *os_sureMalloc(size)/ ;" function 7 { AddToGCTable BuildRelocationTable BuildSegmentTable ConstCMYKPattern ConstGrayPattern ConstRGBPattern ExpandOneLine FCOpenStream FPInit GETMEM GrayPattern GryPat4Of4 IniFmDevImpl IniGenDevImpl IniMaskDevImpl IniNullDevImpl IniNullDevice IniUCache InitPatternImpl KADict MaskPattern MonochromePattern NameInit OCFetchFromDisk RGBPattern StreamInit defHostDict newHostDict }	{ CantHappen p }
os_sysv		include/environment.h	/^#define os_sysv		4	\/* Unix -- AT&T System V *\// ;" macro 1 { }	{ }
os_ultrix		include/environment.h	/^#define os_ultrix	14	\/* Unix -- DEC Ultrix *\// ;" macro 1 { ENUM_SUPPORTED UNIXSYS }	{ }
os_userclock		pslib/clockunix.c	/^public integer os_userclock()/ ;" function 6 { PSUserTime }	{ }
os_vaxeln		include/environment.h	/^#define os_vaxeln	8	\/* DEC VAXELN *\// ;" macro 1 { PCOFFSET USE_ERRNO }	{ }
os_vm370		include/environment.h	/^#define os_vm370	11	\/* IBM VM *\// ;" macro 1 { }	{ }
os_vms		include/environment.h	/^#define os_vms		7	\/* DEC VMS *\// ;" macro 1 { PCOFFSET }	{ }
os_xenix		include/environment.h	/^#define os_xenix	6	\/* Unix -- MicroSoft Xenix *\// ;" macro 1 { UNIXSYS }	{ }
oth		language/classarray.h	/^  oth, oth, oth, oth, oth, oth, oth, oth,	\/* \\001 / ;" global 1 { ScannerInit }	{ }
otherBluesName		fonts/fontbuild.c	/^                   otherBluesName, engineclassnm, / ;" global 1 { GetBlueValues }	{ }
otherType1FontComment		fonts/fontrun.c	/^private char otherType1FontComment[] = "%!FontType/ ;" global 1 { DetermineFormat }	{ }
outlineCache		fonts/fontrun.c	/^private PCache outlineCache;/ ;" global 1 { FetchCharOutline FontRunInit OCFetchFromDisk }	{ }
outlineCacheProcs		fonts/fontrun.c	/^private CacheProcs outlineCacheProcs = {/ ;" global 3 { FontRunInit }	{ }
outxl		graphics/reducer.c	/^private Fixed outyt, outxl, outxr;/ ;" global 1 { ShipTrapezoid }	{ }
outxr		graphics/reducer.c	/^private Fixed outyt, outxl, outxr;/ ;" global 1 { ShipTrapezoid }	{ }
outyt		graphics/reducer.c	/^private Fixed outyt, outxl, outxr;/ ;" global 1 { ShipTrapezoid }	{ }
ovrshtname		fonts/fontbuild.c	/^                   xhghtname, dscndname, ascndname/ ;" global 1 { CCRunStd }	{ }
p		fonts/fontbuild.c	/^  p = pnext;/ ;" global 1 { ARealCarP AllocRAMArray AllocRAMStr ApplyFootprints BPDivideAt BPObscureInside BuildChar CCBuild CCRunStd CScan CharOffsetsPtr CopyOffscreen CopyOnscreen CurrentMouse DPFindPieceBounds DictGetFontP DoBlend FMiniFltn FlexCurveTo FlexProc FlexProc2 FontInfoPtr GetDSW GetITfmX GetITfmY GetMTPE GetTfmX GetTfmY InlineRotateLeft InsertLock Map MatchMonitors MaxNEW MinStackUnused NewCross NewLinkCross NewXtraCross PSCacheFlush PSCacheInit PSCacheStatistics PSGetDevice PSGetGStateExt PSGetMarkInfo PSGetMatrix PSRgstOps PSWTranslation PathCross PrPkdaryBody PrintBitmap RBLock RFlexCurveTo RFlexProc RMLock ROTATELEFT8 RVLock RYLock RdBytesCopy ReadNetInfo STOREIT SetMTPE (etc) }	{ }
pCIs		fonts/debug.c	/^private procedure pCIs(m)/ ;" function 27 { pMS }	{ CI CINULL CIOffset DPrintSOP ForAllNames GetDebugStm LStrObj PNameEntry Stm StrObj Vmem integer os_fprintf }
pEldest		fonts/debug.c	/^private procedure pEldest()/ ;" function 7 { PSpEldest }	{ GetDebugStm MID MMEldest Stm fflush os_fprintf }
pFD		fonts/debug.c	/^private procedure pFD()/ ;" function 28 { PSpFD }	{ Aborted DictGetP DictObj FD GetDebugStm GetFontDirectory Known Object PDictBody PKeyVal PrintNameString PrintObj Stm dictObj fflush fontsNames integer nullObj os_fprintf register }
pGblClrBuf		fonts/fontbuild.c	/^#define pGblClrBuf ((PGrowableBuffer)(fontCtx->fon/ ;" macro 1 { IniGlbClrBuffs NewGlbClr }	{ PGrowableBuffer fontCtx }
pGblCntrBuf		fonts/fontbuild.c	/^#define pGblCntrBuf ((PGrowableBuffer)(fontCtx->fo/ ;" macro 1 { IniGlbClrBuffs NewGlbCntr }	{ PGrowableBuffer fontCtx }
pLokData		fonts/fontbuild.c	/^#define pLokData (fontCtx->fontBuild._pLokData)/ ;" macro 1 { CCRunStd FinishLock FontBuildInit InitSlopes InsertLock LockPFCd SetXLock SetYLock StartLock TfmLockPt1 fixupmap }	{ fontCtx }
pMID		fonts/debug.c	/^private pMID(m)/ ;" function 28 { pMM pMS }	{ GetDebugStm MT NameObj Object PMTItem PrintBoolean PrintDevCoord PrintMTX PrintMidDict Stm StrObj os_fprintf }
pMM		fonts/debug.c	/^private procedure pMM()/ ;" function 17 { PSpMM }	{ Aborted GetDebugStm MID MIDNULL MT Stm fflush forallMM os_fprintf pMID register }
pMS		fonts/debug.c	/^private procedure pMS()/ ;" function 18 { PSpMS }	{ Aborted GetDebugStm MID MIDNULL MT Stm fflush forallMS os_fprintf pCIs pMID }
pSFC		fonts/debug.c	/^private procedure pSFC()/ ;" function 21 { PSpSFC }	{ Aborted GetDebugStm LNameObj NameObj PSFCEntry PrintMTX PrintNameString Stm fflush forallSFC os_fprintf sfCache }
pTimeSliceClock		language/exec.c	/^public	PCard32	pTimeSliceClock;	\/* Assumed to be N/ ;" global 1 { ExecInit Inline_IncrementTimeUsed SetRealClockAddress WannaYield }	{ }
packageInitProcedure		postscript/package_init.c	/^globalref void (*packageInitProcedure[])();/ ;" global 1 { InitializePackages }	{ }
packedArrayMode		language/langdata.h	/^#define	packedArrayMode (languageCtxt->scannerData/ ;" macro 1 { AryToMrk PSCrPacking PSStPacking }	{ languageCtxt }
paramList		vm/saverestore.c	/^#define	paramList (saveRestoreData->parameterList)/ ;" macro 1 { RestoreContextParams WriteContextParam }	{ saveRestoreData }
paramrec		vm/saverestore.c	/^typedef struct paramrec {/ ;" struct 7 { }	{ }
patID		devpattern/patternimpl.c	/^public integer patTimeStamp, patID;/ ;" global 1 { ComposeColors InitPatternImpl RollPattern SetPatInfo }	{ }
patTimeStamp		devpattern/patternimpl.c	/^public integer patTimeStamp, patID;/ ;" global 1 { FreeOldestPattern Gry4Of4Setup InitPatternImpl MonoSetup SetupGrayPattern }	{ }
pathFree		graphics/pathbuild.c	/^public PPthElt pathFree;/ ;" global 1 { AddToPath AppendPath BuildPathFreeList FrLstPth }	{ }
pathLengthLimit		graphics/pathbuild.c	/^private Card16 pathLengthLimit;/ ;" global 1 { AddToPath PathBuildInit }	{ }
pathMaxX		graphics/cscan.c	/^internal CrossPtr pathMaxX;		\/* Max X inflections / ;" global 1 { CSPathPoints FinishPath }	{ }
pathMinX		graphics/cscan.c	/^internal CrossPtr pathMinX;		\/* Min X inflections / ;" global 1 { CSPathPoints FinishPath }	{ }
pathOffset		graphics/pathreduce.c	/^private DevCd pathOffset;/ ;" global 1 { CallAddTrapToPath ConvertToListPath }	{ }
pathclose		include/graphics.h	/^#define pathclose 3/ ;" macro 1 { ClosePath DoPath Fill OffsetFill PSUPath PathForAll PathIsRect ReversePath }	{ }
pathcurveto		include/graphics.h	/^#define pathcurveto 2/ ;" macro 1 { CurveTo DoPath OffsetFill PSUPath PathForAll QRdcOk ReversePath }	{ }
pathlineto		include/graphics.h	/^#define pathlineto 1/ ;" macro 1 { DoPath LineTo OffsetFill PSUPath PathForAll PathIsRect ReversePath StrkInternal }	{ }
pathstart		include/graphics.h	/^#define pathstart 0/ ;" macro 1 { AddToPath AppendPath DoPath IsPathEmpty MoveTo OffsetFill PSMoveTo PSRMoveTo PSUPath PathForAll ReversePath }	{ }
patternPool		bintree/pattern.c	/^static char *patternPool; \/* Blind pointer to stor/ ;" global 1 { PFree PInitialize PNew }	{ }
patterns		devpattern/patternimpl.c	/^public PPatCacheInfo *patterns;/ ;" global 1 { AllocPatternIndex DestroyPat FlushPatCache FreeOldestPattern FreePattern Gry4Of4Setup InitPatternImpl MonoSetup SetPatInfo SetupGrayPattern }	{ }
pcom		fonts/debug.c	/^private pcom(indent,s,x)/ ;" function 8 { PrintMidDict PrintObj }	{ GetDebugStm Lobj PrintBlanks Stm level os_fprintf s }
pflttofix		fp/fixedmach.030.s	/^ENTRY(pflttofix)/ ;" function 1 { AFixedCar AObjF AddCircleMask CheckForRectangle CvtToFixed DTfmToFixed DoStroke FixCd FixedValue GetDSW GetMaxBevelChord GetStemWidth HIRF HNRF Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch LIRF LNRF MakeCacheDev2 OffsetFill PFLTTOFIX PRCdToPFCd PSErodeSW PSOffsetFill PSSetXLock PSSetYLock PkAObjF PopFixed QDoEUsrPth QDoEUsrPthFloat QDoUserPath QEnumOk QNewPoint ReduceQuadPath SetTrapBounds SetupFntMtx TfmToBB buildPrebuilt findMatrixNumber }	{ }
pflttofrac		fp/fixedmach.030.s	/^ENTRY(pflttofrac)/ ;" function 1 { InitOFill OffsetFill SetupFntMtx }	{ }
pfont		fonts/fontdata.h	/^#define pfont (fontCtx->fontShow._pfont)/ ;" macro 1 { CompSlowShow DelayedMakeFont }	{ fontCtx }
pixVals		devpattern/grypat4of4.c	/^private SCANTYPE pixVals[4] = {0xFFFFFFFF, 0xAAAAA/ ;" global 1 { BuildPattern Gry4Of4Setup ImS12D12NoTfr }	{ }
pixelThresholds		devpattern/imsupport.c	/^public PSCANTYPE pixelVals, pixelThresholds;/ ;" global 1 { GetPixBuffers blueThresholds }	{ }
pixelVals		devpattern/imsupport.c	/^public PSCANTYPE pixelVals, pixelThresholds;/ ;" global 1 { GetPixBuffers }	{ }
pkdaryObj		include/basictypes.h	/^#define	pkdaryObj	13/ ;" macro 1 { AFAProc AGetP ATail BindArray BindPkdary BuildMultiRectPath CheckForMtx CheckIfEncodedUserPath ChrMapBuildChar CopyNumStrmForCache EncodeObj EqNumStrmCache Equal ExecPushP GetMetrics GetMetrics2 GetStemWidth GetUsrPthAry HashArray ImageInternal InFill InStroke InUFill InternalBuildChar ModifyCachingParams PAryToMtx PSBind PSCopy PSDTfm PSExCheck PSForAll PSFork PSGet PSGetInterval PSIDTfm PSITfm PSInUStroke PSLength PSMonitor PSNoAccess PSPut PSPutInterval PSRCheck PSReadOnly PSRectFill PSSelectFont PSSetColorScreen PSSetScreen PSTfm PSWCheck PSXctOnly PopPArray PrintObj PrintVal RelocateObj SetupNumStrm SizeNumStrmForCache StmToken TracePrivateVM TypeOfObj (etc) }	{ }
pkgEnt		product/nscontexts.c	/^static struct pkgEnt/ ;" struct 8 { NSLoadContextType RegisterGraphicsPackages }	{ }
pkgEntryList		product/nscontexts.c	/^} *pkgEntryList = NULL;/ ;" global 1 { NSLoadContextType RegisterGraphicsPackages }	{ }
pmax		graphics/ucache.c	/^private integer bsize, bmax, rsize, rmax, pmax;/ ;" global 1 { EnterPathInCache IniUCache PSNormalUCache }	{ }
pni_end		include/orphans.h	/^#define pni_end 5	\/* first unused index *\// ;" macro 1 { Init_Cmds PSRgstNames RgstDynamicCmd RgstPackageNames initOpSetLimit }	{ }
pni_fonts		include/orphans.h	/^#define pni_fonts 3/ ;" macro 1 { }	{ }
pni_graphics		include/orphans.h	/^#define pni_graphics 2/ ;" macro 1 { }	{ }
pni_language		include/orphans.h	/^#define pni_language 1/ ;" macro 1 { }	{ }
pni_postscript		include/orphans.h	/^#define pni_postscript 4/ ;" macro 1 { }	{ }
pni_vm		include/orphans.h	/^#define pni_vm 0/ ;" macro 1 { }	{ }
pnttypnm		fonts/fontbuild.c	/^                   pnttypnm, fntpthnm, stdencname,/ ;" global 1 { CCRunStd PathEndChar }	{ }
point		language/grammar.h	/^#define point 4/ ;" macro 1 { }	{ }
pointArray		graphics/cscan.c	/^internal FCd pointArray[POINT_ARRAY_LEN+1];	\/* One/ ;" global 1 { CSClose }	{ }
pointCount		graphics/cscan.c	/^internal IntX pointCount;		\/* Count of points in p/ ;" global 1 { CSClose InitNewPath }	{ }
pointQs		graphics/reducer.c	/^private PPointQ pointQs;/ ;" global 1 { IniReducer PPq }	{ }
pointState		language/scanner.c	/^private readonly StateRec pointState = {/ ;" global 15 { }	{ }
points		graphics/reducer.c	/^private PPoint points;/ ;" global 1 { IniReducer PPt ResetReducer }	{ }
popEvent		product/event.c	/^private procedure popEvent( NXEvent *ep )/ ;" function 12 { PSPostEvent PSPostEventByContext }	{ PSPopInteger PopIntValue data window }
popTemporary		vm/gcmisc.c	/^private Object popTemporary;/ ;" global 1 { GCInternal_Pop }	{ }
portName		product/listener.c	/^static	char	portName[32];	\/* Name under which our / ;" global 1 { CheckInListenPort CheckOutListenPort PSSetBootstrapPort }	{ }
portNeedsContext		product/ipcscheduler.c	/^private	PSSchedulerContext portNeedsContext; \/* Co/ ;" global 1 { HandleDataMsg Scheduler }	{ }
post		fonts/fontbuild.c	/^internal procedure TriLock(/ ;" global 1 { TriLock }	{ }
postHow		product/event.c	/^} postHow, defaultPostHow = { {/ ;" global 1 { EventInit PostByCode SetHowPost }	{ }
postscriptNames		postscript/postscript.c	/^public PNameObj postscriptNames;/ ;" global 1 { StateInit TopError }	{ }
pqHead		graphics/reducer.c	/^private PqOffset curPq, pqHead, pqRecent, endPntQ,/ ;" global 1 { InitReducer PQInsert PopPQ }	{ }
pqRecent		graphics/reducer.c	/^private PqOffset curPq, pqHead, pqRecent, endPntQ,/ ;" global 1 { InitReducer PQInsert PopPQ }	{ }
prebuiltFIDMask		fonts/fontspriv.h	/^#define prebuiltFIDMask 0x3FFFFFF   \/* this masks / ;" macro 1 { GetFlushArgs PreBuiltChar RgstPrebuiltInfo }	{ }
prevKey		product/event.c	/^} lastKey, prevKey;/ ;" global 1 { PostEvent SendEvent }	{ }
prevRadiusForMaxBevelChord		graphics/stroke.c	/^          prevRadiusForMaxBevelChord,/ ;" global 1 { GetMaxBevelChord IniStroke }	{ }
printf		include/stream.h	/^#define	printf	os_printf/ ;" macro 1 { AdjustBlues BuildChar CCRunStd CSPathPoints CScan CalcHW2 CheckHorizWhite DebugAbort DetermineTieBreaker DoFixupAction DoXInflections ExtendRunDropOut FillInColumn FillInPairs FixPixelProblem GetRuleDesc InitSlopes LFindPieceBounds PSMachPortDevice PrintBitmap PrintBlueLocs PrintBlueValues PrintCntrs PrintTimedEvents PrntClr ResetCScan ReturnBits SplicePixel printmap }	{ os_printf }
printmap		fonts/fontbuild.c	/^private procedure printmap(pls,yflg) register PLok/ ;" function 12 { InitSlopes }	{ FD PLokPair p printf register tfmloc }
private		include/publictypes.h	/^#define private static/ ;" macro 1 { FastFillCurveJoin }	{ }
privateName		product/listener.c	/^unsigned char privateName[] = { 0x4e, 0x5e, 0x4e, / ;" global 1 { PrivateListenPort }	{ }
privateRecycler		vm/recycler.c	/^public PRecycler privateRecycler, sharedRecycler;/ ;" global 1 { Array ChangeRecyclerExecLevel CreatePrivateVM LoadVM RecyclerDataHandler RecyclerForObject Save TraceSharedVM VMPutDict VMPutGeneric _ChangeRecyclerExecLevel saveobj }	{ }
procedure		include/publictypes.h	/^#define procedure void/ ;" macro 1 { AllocCmds BuildChar BuildMultiRectPath CCRunStd Ctxt_SetCurrentCtxt DoEUserPath DoLock DoRdcPth FastFillCurveJoin FastRectFill Fill FontDataHandler GStateDataHandler GraphicsInit ImageTrapsOrRun Init_Cmds MasksMark Mnextmain MultiRectFill QDoEUsrPth QDoUserPath ReadBinObjSeq ReadNumAry ReduceQuadPath RgstOpSet WriteObject XAFillPath }	{ }
promoteDepths		bintree/layer.c	/^static char promoteDepths[3][4][4] = {/ ;" global 5 { LCompositeFrom }	{ }
promoteParms		bintree/layer.c	/^static char promoteParms[3][3][2][2][2] = {/ ;" global 17 { LCompositeFrom LMark }	{ }
prvtnm		fonts/fontbuild.c	/^#define prvtnm fontsNames[nm_Private]/ ;" macro 1 { CCBMRun ChrMapBuildChar InternalBuildChar PSCCRun }	{ fontsNames nm_Private }
psCompRat		graphics/reducer.c	/^private procedure psCompRat()/ ;" function 6 { IniReducer }	{ PopRational PushInteger RatComp Rational }
psDiv32		graphics/reducer.c	/^private procedure psDiv32()/ ;" function 10 { IniReducer }	{ Div3By2 FourPlace Int32 PopFourPlace PopInteger PushRational Rational }
psERROR		include/language.h	/^#define	psERROR	(pubLangCtxt->_psERROR)/ ;" macro 1 { PSError StmToken SyntaxError TopError }	{ pubLangCtxt }
psFPMult		graphics/reducer.c	/^private procedure psFPMult()/ ;" function 9 { IniReducer }	{ Card32 FourPlace MulUn22 PopInteger PushFourPlace }
psFULLSTACK		language/exec.h	/^#define	psFULLSTACK	(languageCtxt->execData._psFUL/ ;" macro 1 { Overflow }	{ languageCtxt }
psNewPoint		graphics/reducer.c	/^private procedure psNewPoint()/ ;" function 7 { IniReducer }	{ Cd NewPoint PopPCd RRoundP }
psNulDev		graphics/nulldevice.c	/^public PDevice psNulDev;/ ;" global 1 { IniNullDevice InitGS NewDevice NullMakeNullDevice }	{ }
psRdcClose		graphics/reducer.c	/^private procedure psRdcClose()  {RdcClose();}/ ;" function 1 { IniReducer }	{ RdcClose }
psReduce		graphics/reducer.c	/^private procedure psReduce()/ ;" function 5 { IniReducer }	{ PopP Reduce ReducePSCallBack false psReduceCallBackObj }
psReduceAndClip		graphics/reducer.c	/^private procedure psReduceAndClip()/ ;" function 5 { IniReducer }	{ PopP Reduce ReducePSCallBack false psReduceCallBackObj true }
psReduceCallBackObj		graphics/reducer.c	/^private Object psReduceCallBackObj;/ ;" global 1 { ReducePSCallBack psReduce psReduceAndClip }	{ }
psReducerDebug		graphics/reducer.c	/^private procedure psReducerDebug()/ ;" function 4 { IniReducer }	{ debugOn false true }
psResetReducer		graphics/reducer.c	/^private procedure psResetReducer()/ ;" function 4 { IniReducer }	{ ResetReducer }
psSetClip		graphics/reducer.c	/^private procedure psSetClip()/ ;" function 4 { IniReducer }	{ RdcClip true }
psSetFig		graphics/reducer.c	/^private procedure psSetFig()/ ;" function 4 { IniReducer }	{ RdcClip false }
psTraceOffsetFill		graphics/pathpriv.c	/^private procedure psTraceOffsetFill() {/ ;" function 7 { IniPathPriv }	{ PopBoolean PopP false of_cp of_done of_init of_np traceOffsetFill true }
ps_getsize		pslib/sizes.c	/^public int ps_getsize (sizeIndex, defaultSize)/ ;" function 30 { ContextOpsInit CreateVM ExpandVMSection GCInternal_VMChange GrayInit IniUCache MaxNEW PSDeviceInit PSNormalUCache PSSetThresh StartCache }	{ GetCSwitch NIL RAISE SIZE_FONT_CACHE SIZE_LAST SIZE_MASKS SIZE_MIDS SIZE_UNDEFINED ecRangeCheck sizeTable }
pscontextid		product/pscontext.c	/^static int pscontextid[2] = {PSCONTEXTID, 3049}; \// ;" global 1 { }	{ }
pthhits		graphics/ucache.c	/^private integer rdcprobes, rdchits, pthprobes, pth/ ;" global 1 { FindPathInCache IniUCache }	{ }
pthprobes		graphics/ucache.c	/^private integer rdcprobes, rdchits, pthprobes, pth/ ;" global 1 { FindPathInCache IniUCache }	{ }
ptserial		graphics/reducer.c	/^private cardinal ptserial, c_ptserial;/ ;" global 1 { InitReducer MakePoint }	{ }
pubLangCtxt		language/exec.c	/^public PPubLangCtxt pubLangCtxt;/ ;" global 1 { LanguageInit psERROR }	{ }
public		include/publictypes.h	/^#define public/ ;" macro 1 { DoRdcPth }	{ }
pushGStateItems		vm/gcmisc.c	/^public procedure (*pushGStateItems)();/ ;" global 1 { GCInternal_Init GC_RgstGStateEnumerator TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
pushPkdAryComposites		vm/gcmisc.c	/^public Card32 (*pushPkdAryComposites)();/ ;" global 1 { GCInternal_Init GC_RgstPkdAryEnumerator TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
pushStmItems		vm/gcmisc.c	/^public procedure (*pushStmItems)();/ ;" global 1 { GC_RgstStmEnumerator TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
putc		include/stream.h	/^#define putc(ch, stm) \\/ ;" macro 1 { BitmapByte DPrintSOP OutputEnc PSWrite PSWrtHexString PrintBitmap PrintBlanks PrintDOB PrintObj PrintVal os_fputc os_fputs os_puts putchar }	{ }
putchar		include/stream.h	/^#define putchar(ch) putc(ch, os_stdout)/ ;" macro 1 { PSAllocBM PrintSOP ShipTrapezoid }	{ os_stdout putc }
puts		include/stream.h	/^#define	puts	os_puts/ ;" macro 1 { }	{ os_puts }
pwl		bintree/windowlist.c	/^static WindowList pwl;		\/* Private window list *\// ;" global 1 { WLAboveButNotAbove WLAt WLBelowButNotBelow WLExpand WLInitialize WLOffsetOf WLPutAfter WLPutBefore WLRemove }	{ }
px0		graphics/qreducer.c	/^private Fixed px0, py0;/ ;" global 1 { QFNewPoint QNewPoint QRdcClose }	{ }
pxNP		graphics/qreducer.c	/^private Fixed pxNP, pyNP;/ ;" global 1 { QFNewPoint QNewPoint QRdcClose }	{ }
py0		graphics/qreducer.c	/^private Fixed px0, py0;/ ;" global 1 { QFNewPoint QNewPoint QRdcClose }	{ }
pyNP		graphics/qreducer.c	/^private Fixed pxNP, pyNP;/ ;" global 1 { QFNewPoint QNewPoint QRdcClose }	{ }
qc		graphics/stroke.c	/^public QdCorner *qc;/ ;" global 1 { FastFillQuad IniStroke }	{ }
qot		language/classarray.h	/^  qot,						\/* \\ *\// ;" global 1 { }	{ }
qpStorage		graphics/pathbuild.c	/^public Pool qpStorage; \/* pool for QuadPath record/ ;" global 1 { InitChunk InitClipPath MakeRectPath PathBuildInit RemPathRef }	{ }
quadcorner		graphics/stroke.h	/^typedef struct quadcorner/ ;" struct 3 { }	{ }
r		graphics/qreducer.c	/^#define r dx/ ;" macro 1 { AddToBBox AdjstHW AnamorphicNormStrkWdth ArcCenterShift BuildEdge BuildRunIndex BytesForRunIndex CodePoint CrRGBColor DPObscureInside DPRevealInside Decrypt DistAboveFloor Div3By2 DoBlend DoRdcPth EPushReal EnclosesRect Encrypt FF_StrkLnTo F_HalfRoundCap F_NormPair F_VecMul FastFillCurveJoin FillCircle FillLineSegment FindRdcInCache GSAddRefs GSRemRefs GenConvertColor GetABComponent GetCurveMiddle GetDSW GetDevComponent GetErosion GetLComponent GetNormStrkWdth GetRuleDesc GetTLWinBounds GetWinBounds HF4R HIRF HIRR HashMID ImSXXD11 InitOFill InitRnum IntersectDP LF4R LIRF LIRR LNewAt LRedraw LimitColor LineEdit MPWindowSize NXRegisterOps NormalizePoint NormalizeStrokeWidth NumEncode (etc) }	{ }
r0		fonts/fontbuild.c	/^internal Fixed l0, l1, r0, r1;/ ;" global 1 { BuildChar FMiniFltn }	{ }
r1		fonts/fontbuild.c	/^internal Fixed l0, l1, r0, r1;/ ;" global 1 { BuildChar CCRunStd PSRound PointInRun QCompareBounds QIntersect QIntersectBounds QIntersectTrp TfmToBB }	{ }
rAccess		include/basictypes.h	/^#define	rAccess	1/ ;" macro 1 { AGetP AryForAll BinObjInit CheckIfEncodedUserPath CreateSharedVM DictForAll DictLength DictP DictTestP Equal ExecPushP FloatRectFill ForceAGetP GetUsrPthAry InitPostScript KAEndCSDict LGt MakePStm NameToPString PSALoad PSBytesAvailable PSCvI PSCvR PSDefineFont PSDeviceInfo PSEExec PSGet PSGetInterval PSLength PSMaxLength PSOpDef PSPopGState PSRCheck PSRead PSReadHexString PSReadLine PSReadOnly PSReadString PSSetGState PSToken PSWrtHexString PSWrtString PSXctOnly PopPRString PrintAccess PutInDict SetDictAccess SetupNumStrm ShowInternal StateInit StoDevStrStatus StrForAll StrToName VMCopyArray VMCopyGeneric VMCopyString VMGetText WriteObject WriteRelocatedVMToFile copydict (etc) }	{ }
rab		language/classarray.h	/^  rab,						\/* > *\// ;" global 1 { }	{ }
randx		graphics/graypriv.c	/^#define	randx		(graphicsStatics->grayData._randx)/ ;" macro 1 { INIT_RAND LanguageDataHandler NEXT_RAND PSRRand PSRand PSSRand }	{ graphicsStatics }
rangecheck		include/error.h	/^#define rangecheck errorNames[14]/ ;" macro 1 { PSRangeCheck }	{ errorNames }
rbk		language/classarray.h	/^  rbk,						\/* ] *\// ;" global 1 { }	{ }
rbr		language/classarray.h	/^  rbr,						\/* } *\// ;" global 1 { ScannerInit }	{ }
rcbtf		graphics/pathreduce.c	/^private Cd rclff, rclfl, rctpf, rctpl, rcrtf, rcrt/ ;" global 1 { RCBotClose RCBotNew }	{ }
rcbtfin		graphics/pathreduce.c	/^                rcbtfin, rcbtlin;/ ;" global 1 { RCBotClose RCBotNew }	{ }
rcbtfirst		graphics/pathreduce.c	/^private boolean rclffirst, rctpfirst, rcrtfirst, r/ ;" global 1 { RCBotNew RCLastPt SetUpForRectClip }	{ }
rcbtl		graphics/pathreduce.c	/^private Cd rclff, rclfl, rctpf, rctpl, rcrtf, rcrt/ ;" global 1 { RCBotClose RCBotNew }	{ }
rcbtlin		graphics/pathreduce.c	/^                rcbtfin, rcbtlin;/ ;" global 1 { RCBotClose RCBotNew }	{ }
rcclipbt		graphics/pathreduce.c	/^private real rccliplf, rccliptp, rccliprt, rcclipb/ ;" global 1 { RCBotClose RCBotNew SetUpForRectClip }	{ }
rccliplf		graphics/pathreduce.c	/^private real rccliplf, rccliptp, rccliprt, rcclipb/ ;" global 1 { RCLfClose RCNextPt SetUpForRectClip }	{ }
rccliprt		graphics/pathreduce.c	/^private real rccliplf, rccliptp, rccliprt, rcclipb/ ;" global 1 { RCRtClose RCRtNew SetUpForRectClip }	{ }
rccliptp		graphics/pathreduce.c	/^private real rccliplf, rccliptp, rccliprt, rcclipb/ ;" global 1 { RCTopClose RCTopNew SetUpForRectClip }	{ }
rcclnewpt		graphics/pathreduce.c	/^private procedure (*rcclnewpt)();/ ;" global 1 { RCBotClose RCBotNew SetUpForRectClip }	{ }
rclff		graphics/pathreduce.c	/^private Cd rclff, rclfl, rctpf, rctpl, rcrtf, rcrt/ ;" global 1 { RCLfClose RCNextPt }	{ }
rclffin		graphics/pathreduce.c	/^private boolean rclffin, rclflin, rctpfin, rctplin/ ;" global 1 { RCLfClose RCNextPt }	{ }
rclffirst		graphics/pathreduce.c	/^private boolean rclffirst, rctpfirst, rcrtfirst, r/ ;" global 1 { RCLastPt RCNextPt SetUpForRectClip }	{ }
rclfl		graphics/pathreduce.c	/^private Cd rclff, rclfl, rctpf, rctpl, rcrtf, rcrt/ ;" global 1 { RCLfClose RCNextPt }	{ }
rclflin		graphics/pathreduce.c	/^private boolean rclffin, rclflin, rctpfin, rctplin/ ;" global 1 { RCLfClose RCNextPt }	{ }
rcrdcclose		graphics/pathreduce.c	/^private procedure (*rcrdcclose)();/ ;" global 1 { RCLastPt SetUpForRectClip }	{ }
rcrtf		graphics/pathreduce.c	/^private Cd rclff, rclfl, rctpf, rctpl, rcrtf, rcrt/ ;" global 1 { RCRtClose RCRtNew }	{ }
rcrtfin		graphics/pathreduce.c	/^private boolean rclffin, rclflin, rctpfin, rctplin/ ;" global 1 { RCRtClose RCRtNew }	{ }
rcrtfirst		graphics/pathreduce.c	/^private boolean rclffirst, rctpfirst, rcrtfirst, r/ ;" global 1 { RCLastPt RCRtNew SetUpForRectClip }	{ }
rcrtl		graphics/pathreduce.c	/^private Cd rclff, rclfl, rctpf, rctpl, rcrtf, rcrt/ ;" global 1 { RCRtClose RCRtNew }	{ }
rcrtlin		graphics/pathreduce.c	/^private boolean rclffin, rclflin, rctpfin, rctplin/ ;" global 1 { RCRtClose RCRtNew }	{ }
rctpf		graphics/pathreduce.c	/^private Cd rclff, rclfl, rctpf, rctpl, rcrtf, rcrt/ ;" global 1 { RCTopClose RCTopNew }	{ }
rctpfin		graphics/pathreduce.c	/^private boolean rclffin, rclflin, rctpfin, rctplin/ ;" global 1 { RCTopClose RCTopNew }	{ }
rctpfirst		graphics/pathreduce.c	/^private boolean rclffirst, rctpfirst, rcrtfirst, r/ ;" global 1 { RCLastPt RCTopNew SetUpForRectClip }	{ }
rctpl		graphics/pathreduce.c	/^private Cd rclff, rclfl, rctpf, rctpl, rcrtf, rcrt/ ;" global 1 { RCTopClose RCTopNew }	{ }
rctplin		graphics/pathreduce.c	/^private boolean rclffin, rclflin, rctpfin, rctplin/ ;" global 1 { RCTopClose RCTopNew }	{ }
rcurvetoNm		graphics/userpath.c	/^#define rcurvetoNm graphicsNames[nm_rcurveto].val./ ;" macro 1 { DoUserPath QDoUserPath UsrPthQRdcOk }	{ graphicsNames nm_rcurveto }
rdcStorage		graphics/ucache.c	/^private Pool upcStorage, rdcStorage, strkStorage;/ ;" global 1 { EnterRdcInCache FreeRdc IniUCache }	{ }
rdcStrkMasks		graphics/pathreduce.c	/^private DevPrim *rdcStrkMasks;/ ;" global 1 { DoRdcStroke RdcStrkDumpMasks }	{ }
rdcbias		graphics/graphics.c	/^private integer rdcbias, frdcbias;/ ;" global 1 { SetRdcScal SetScal }	{ }
rdchits		graphics/ucache.c	/^private integer rdcprobes, rdchits, pthprobes, pth/ ;" global 1 { FindRdcInCache IniUCache }	{ }
rdcp		fonts/fontshow.c	/^if (!CvtToXFixed(&(ss-->fdcp), ssr->rdcp, LOWERSHO/ ;" global 1 { CCRunStd GetCPDelta MakeCacheDev MakeCacheDev2 MoveToAfterShow NoRoom PSSetCharWidth PSStrWidth ShowByName ShowInternal SimpleShowByName SlowShow }	{ }
rdcprobes		graphics/ucache.c	/^private integer rdcprobes, rdchits, pthprobes, pth/ ;" global 1 { FindRdcInCache IniUCache }	{ }
readPrebuiltFile		device/nextprebuilt.c	/^static void readPrebuiltFile(NextPrebuiltFont *npf/ ;" function 69 { getPrebuiltFont }	{ NULL PREBUILTFILEVERSION PrebuiltEncoding PrebuiltFile PrebuiltMatrix PrebuiltVertWidths PrebuiltWidth fclose os_fopen standardCharSet standardEncoding uchar ushort }
readonly		include/publictypes.h	/^#define readonly const/ ;" macro 1 { Mnextmain WriteObject os_fdopen os_fopen }	{ const }
real		include/publictypes.h	/^typedef float real, *Preal;/ ;" typedef 1 { AddToBBox ArcC ArcCenterShift ArcInternal ArcToInternal BMRun CCRunStd CDist CalcThresholds CallArc CompositeShow CrRGBColor Dist DoArcTo DoEUserPath FastShow FontShowInit FreqAngleToNumbers GenerateThresholds GetBBoxFromDevBounds GetBBoxFromDevLBounds GetDSW GetErosion GetValidFreqAngleOctet GetValidFreqAnglePair HashMID ImageInternal InitGraphics LimitColor MakeRectPath ModifyCachingParams PRealValue PSCrCMYKColor PSCrGray PSCrHSBColor PSCrRGBColor PSErasePage PSErodeSW PSPopReal PSRtat PSSetCMYKColor PSSetFlatThreshold PSSetGray PSSetHSBColor PSSetRGBColor PSSetXLock PSSetYLock PSShowPage PathEndChar PopColorValues PopFixed ProcSampleProc PushFixed QDoEUsrPth Rtat SetMaskDevice SetupFntMtx SmallArc TableSampleProc TfmToBB (etc) }	{ }
realObj		include/basictypes.h	/^#define	realObj		2/ ;" macro 1 { AFixedCar AObjF AObjR BinObjInit BuildMultiRectPath CheckForMtx CheckPkdMtLt DoUserPath EPopPReal EncodeObj Equal FixedValue GetMetrics GetSpotDictEntries GetStemWidth HashObject LGt PRealValue PSAbs PSAdd PSCVRS PSCVS PSCeiling PSCvI PSCvR PSDiv PSFloor PSFor PSMul PSNeg PSPopPCd PSPopPReal PSRectClip PSRectFill PSRectViewClip PSRound PSSelectFont PSSub PSTruncate PkAObjF PkAObjR PopPNumber PrintObj QDoUserPath ReadBinObjSeq RelocateObj RelocateObject TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj UsrPthBBox UsrPthCheckMtLt WriteObject }	{ }
realType		include/customops.h	/^#define	realType	2/ ;" macro 1 { }	{ }
realforcmd		language/exec.c	/^private CmdObj realforcmd, loopcmd, xitcmd;/ ;" global 1 { CRFor ExecInit PSFor }	{ }
realslow		fonts/fontshow.c	/^  goto realslow;/ ;" global 1 { CompositeShow FastShow if }	{ }
recycleType		vm/recycler.c	/^public PCard8  recycleType, recyclerContextHandle;/ ;" global 1 { Array Init_Recycler IsRecyclableType }	{ }
recyclerContextHandle		vm/recycler.c	/^public PCard8  recycleType, recyclerContextHandle;/ ;" global 1 { Init_Recycler _RecyclerPush }	{ }
recyclerStm		vm/recycler.c	/^static Stm	recyclerStm;	\/* Valid only when traceRe/ ;" global 1 { ChangeRecyclerExecLevel ExtendRecycler PSTraceRecycler ReclaimRecyclableVM Recyclable RecyclerPop RecyclerPush ResetRecycler TraceInvalidation }	{ }
redThresholds		devpattern/imsupport.c	/^public PSCANTYPE redValues, redThresholds, greenVa/ ;" global 1 { GetRedPixBuffers }	{ }
redValues		devpattern/imsupport.c	/^public PSCANTYPE redValues, redThresholds, greenVa/ ;" global 1 { GetRedPixBuffers }	{ }
refStk		language/stack.c	/^public	PStack	refStk;/ ;" global 1 { CreateStacks GetProcSource HandleStackOverflow IPopOp LanguageDataHandler PSStackStats PopP PushStackRoots }	{ }
regions		graphics/reducer.c	/^private PRegion regions;/ ;" global 1 { IniReducer PRg }	{ }
register		include/environment.h	/^#define register/ ;" macro 1 { AddEntry ApplyFootprints BMComposite34 BMComposite38 BPApplyBounds CCBuild CIAlloc CIFree CSRun CacheInvalidate CheckCI CompSlowShow CompositeShow DMFRestore DelayedMakeFont DeleteCIs DisplaceEntries FSetCharWidth FastShow FasterShow FixedfromString FlushMID FontEncode FudgeBlueBands GetBlueArrays GetFontBBox GetInfo GetStdW HighlightRect InsertLock InvalidateCachedMIDs LOOP32 Lookup MP12Composite MPDisplayCursor2 MPSetCursor MakeCacheDev MakeCacheDev2 MinStackUnused NoRoom PSFlushFontCache PSFlushMasks PSSetCharWidth PurgeCI PurgeFSCache PutStdW ROkToBuild RelinkCIItem SSRestoreState ScanCompString SetCch SetCharWidth SetupMaskDev SortCharAges StartGlcrLock StartLock TrimCI UnlinkCI WLRemove ZapDelayedDict (etc) }	{ }
relocationTable		vm/vm_relocate.c	/^public PRelocationEntry relocationTable;	\/* Initia/ ;" global 1 { ApplyRelocation BuildRelocationTable NewRelocationEntry ReadRelocationTable WriteRelocatedVMToFile WriteRelocationTable }	{ }
relocationTableLimit		vm/vm_relocate.c	/^public int relocationTableSize, relocationTableLim/ ;" global 1 { BuildRelocationTable NewRelocationEntry }	{ }
relocationTableSize		vm/vm_relocate.c	/^public int relocationTableSize, relocationTableLim/ ;" global 1 { ApplyRelocation BuildRelocationTable NewRelocationEntry ReadRelocationTable WriteRelocatedVMToFile WriteRelocationTable }	{ }
remapY		bintree/layer.c	/^short remapY;			\/* Maps screen to device coordinat/ ;" global 1 { DispatchEvents DriverInit GetWinBounds PSCurrentMouse PSFindWindow PSFrameBuffer PSMoveWindow PSPlaceWindow PSWindow PostNotification }	{ }
reptcmd		language/exec.c	/^private CmdObj execcmd, stoppedcmd, reptcmd, intfo/ ;" global 1 { CRepeat ExecInit PSRepeat }	{ }
reverse_pixels_in_byte		product/windowgraphics.c	/^static const uchar reverse_pixels_in_byte[256] = {/ ;" global 20 { PSReadImage }	{ }
rgFree		graphics/reducer.c	/^private RgOffset rgFree, rgHead, exitRegion;/ ;" global 1 { FreeRegion LinkRegionFreeList MakeRegion }	{ }
rgHead		graphics/reducer.c	/^private RgOffset rgFree, rgHead, exitRegion;/ ;" global 1 { DebugPrintRegions InitReducer RdcEntry Reduce }	{ }
rgsOut		graphics/reducer.c	/^private integer rgsOut;/ ;" global 1 { FreeRegion IniReducer InitReducer LinkRegionFreeList MakeRegion }	{ }
right		graphics/stroke.c	/^#define right 2/ ;" macro 1 { AdvanceEdges AssignBounds BuildEdge ClipVect CodePoint ConnectWhitePairs FixupExtendLeft FixupExtendRight QReduce ReturnBits ScanLineCxtn }	{ }
rightBitArray		devpattern/patternimpl.c	/^public readonly SCANTYPE rightBitArray[SCANUNIT] =/ ;" global 2 { BlackRunMark ClippedMasksMark ConstantRectMark ConstantRunMark ConstantTrapsMark GrayRectMark GrayRunMark GrayTrapsMark ImIdent ImS12D12NoTfr ImS1XD11 ImSXXD11 ImStretch MP12Convert16to2 MP12Convert32to2 MRMasks WhiteRunMark }	{ }
rlinetoNm		graphics/userpath.c	/^#define rlinetoNm graphicsNames[nm_rlineto].val.nm/ ;" macro 1 { CheckPkdMtLt DoUserPath QDoUserPath UsrPthCheckMtLt }	{ graphicsNames nm_rlineto }
rmax		graphics/ucache.c	/^private integer bsize, bmax, rsize, rmax, pmax;/ ;" global 1 { EnterRdcInCache IniUCache PSNormalUCache PSTinyUCache PSUCacheStatus }	{ }
rmovetoNm		graphics/userpath.c	/^#define rmovetoNm graphicsNames[nm_rmoveto].val.nm/ ;" macro 1 { DoUserPath QDoUserPath }	{ graphicsNames nm_rmoveto }
rndnum		fonts/fontbuild.c	/^private unsigned int rndnum, rndnumIV;/ ;" global 1 { BuildChar CCRunStd PSInitWrite PSWriteData if }	{ }
rndnumIV		fonts/fontbuild.c	/^private unsigned int rndnum, rndnumIV;/ ;" global 1 { PSInitWrite }	{ }
rndstmname		fonts/fontbuild.c	/^		   rndstmname, expfctrname,/ ;" global 1 { CCRunStd }	{ }
rndwidth		fonts/fontbuild.c	/^#define rndwidth (fontCtx->fontBuild._rndwidth)/ ;" macro 1 { BuildChar CCRunStd ResetCScan }	{ fontCtx }
rndwidthNm		fonts/fontbuild.c	/^                   famBluesNm, famOtherBluesNm, en/ ;" global 1 { }	{ }
rootCoroutine		coroutine/corouxfer.c	/^public Coroutine rootCoroutine;/ ;" global 1 { InitCoroutine }	{ }
rootInternalDict		fonts/fontbuild.c	/^#define rootInternalDict root->internalDict/ ;" macro 1 { CCRunStd GetErosion PSIntDict }	{ }
rootPrivate		vm/saverestore.c	/^public	PVMRoot	rootShared, rootPrivate;/ ;" global 1 { AddressValidAtLevel BinObjInit CopyTrickyDict CreatePrivateVM CreateSharedVM DMFRestore DelayedMakeFont DestroyNameMap DestroyVM DoDictXlat EndWholeClothInit FreeShowState GetPrivFontDirectory HashSFC InsertMID LoadVM MakeCompFont MakeFontSupp MakePStm PSDefUserName PSDefUserObj PSExecUserObj PSUndefUserObj PSdummymakevm ProcessFinalizeNodes ProcessSaveData PurgeOnRstr PurgeSFForKey PushVMRoots ReadBinObjSeq RstrToLevel Save SaveRestore_Data_Handler SearchSelectFont StmFinalize StmToken TrickyDictP VMPutDict VMPutGeneric _RecordFinalizableObject saveobj }	{ }
rootShared		vm/saverestore.c	/^public	PVMRoot	rootShared, rootPrivate;/ ;" global 1 { AllocPDict ApplyRelocation BuildRelocationTable CStmClose CheckVersion ControlInit CreatePSContext CreatePrivateVM CreateSharedVM DMFRestore DelayedMakeFont DictInit DictP DumpRoot DumpSysDict EndWholeClothInit ExecInit FastName FillCircle FinalizeNames FndFntSibling FontCacheInit ForAllNames FreeShowState HandleGCFinalize InitFID InitGS InitPostScript Init_VM_Memory InsertMID KAEndCSDict MakeCompFont MakeFontSupp MakePStm MapFontDirectory NameIndexObj NameInit PSCVS PSDefSysName PSDumpNames PSEExec PSExecOpNm PSExecuteOperator PSMakeVM PSNProbeStats PSSelectFont PSStSKey PSSysNameMap PSdummymakevm PrNameAryBody ProcessFinalizeNodes PurgeSFForKey PushSharedVMRoots ReadBinObjSeq Relocate_Names Relocate_Shared_Root RgstPrebuiltInfo StateInit StmFinalize StmToken (etc) }	{ }
rootSysDict		fonts/fontbuild.c	/^#define rootSysDict root->sysDict/ ;" macro 1 { CCRunStd ChrMapBuildChar GetErosion InternalBuildChar }	{ }
rotate		product/imstretch.c	/^#define rotate(data,left) asm("roll %2,%0": "=d" (/ ;" macro 1 { }	{ data left }
roundCap		graphics/graphicspriv.h	/^#define roundCap 1/ ;" macro 1 { DoRdcStroke DoStroke F_StrkCap F_StrkClose FillLineSegment FindRdcInCache StrkCap StrkClose }	{ }
roundJoin		graphics/graphicspriv.h	/^#define roundJoin 1/ ;" macro 1 { DoRdcStroke DoStroke F_FillJoin FillJoin FindRdcInCache }	{ }
rpFontKey		include/vm.h	/^#define rpFontKey 0		\/* font decryption key *\// ;" macro 1 { FontBuildInit PSStFKey }	{ }
rpInternalKey		include/vm.h	/^#define rpInternalKey 2		\/* internaldict key *\// ;" macro 1 { FontBuildInit }	{ }
rpStorage		graphics/pathbuild.c	/^public Pool rpStorage; \/* pool for ReducedPath rec/ ;" global 1 { DoRdcPth DoStrkPth InitClipPath MinimumClip PathBuildInit ReducePathClipInt ReduceQuadPath RemReducedRef XAReducePath }	{ }
rpStreamKey		include/vm.h	/^#define rpStreamKey 1		\/* stream decryption key *\// ;" macro 1 { PSEExec PSStSKey StreamInit }	{ }
rpr		language/classarray.h	/^  rpr,						\/* ) *\// ;" global 1 { }	{ }
rsize		graphics/ucache.c	/^private integer bsize, bmax, rsize, rmax, pmax;/ ;" global 1 { CheckUCache EnterRdcInCache FreeRdc IniUCache PSUCacheStatus }	{ }
runcmd		language/exec.c	/^private CmdObj execcmd, stoppedcmd, reptcmd, intfo/ ;" global 1 { ExecInit PSRun }	{ }
s		graphics/qreducer.c	/^#define s dy/ ;" macro 1 { ALPHA AMulInPlace AllocHalftone AllocScreen BM34Composite BM34Convert32to16 BM34Convert8to16 BM38Convert16to32 BM38Convert8to32 BMComposite34 BMComposite38 BMRun BinObjInit BmALine BmRLine BuildEdge CCBMRun CCRun CCRunStd COLOR CVT ConLine CopyNumStrmForCache CopyObject CreatePSSpace DebugPrintEvent DestroyPSContext DoSover DriverInit EqNumStrmCache F_NormPair FastName FillCircle FindRdcInCache FreeScreen GetABComponent GetEUsrPthBBox GetMemForTA GetStream HashPath IDToPSSpace ImIdent ImStretch InitRnum InsertEdge LStmObj MP12Composite MP12Convert2to2 MP12ConvertFrom MPDisplayCursor16 MPSetCursor MakeScreenDict MakeStr MakeXStr NEGALPHA NewSpaceID NormalizePoint NumEncode NumFromStr PSAnchorSearch (etc) }	{ }
s0FromAlphaToData		mp/mp12.c	/^static const int s0FromAlphaToData[2][2] = {/ ;" global 5 { MP12Composite }	{ }
s1FromAlphaToData		mp/mp12.c	/^static const int s1FromAlphaToData[2][2] = {/ ;" global 6 { MP12Composite }	{ }
s2FromAlphaToData		mp/mp12.c	/^static const int s2FromAlphaToData[2][2] = {/ ;" global 5 { MP12Composite }	{ }
sFromDestToData		mp/mp12.c	/^static const int sFromDestToData[2] = \/* [dstAS] */ ;" global 2 { MP12Composite }	{ }
sStringMatch		language/string.c	/^private boolean sStringMatch(s,t,j)/ ;" function 10 { PSAnchorSearch PSSearch }	{ charptr false integer register s true }
saveHorizDir		graphics/cscan.c	/^internal SegmentDir saveHorizDir;	\/* Horizontal di/ ;" global 1 { CSPathPoints FinishPath }	{ }
savePrevCross		graphics/cscan.c	/^internal CrossPtr savePrevCross;	\/* Previous non-x/ ;" global 1 { CSPathPoints }	{ }
savePrevPoint		graphics/cscan.c	/^internal FCd savePrevPoint;		\/* Last point in prev/ ;" global 1 { CSPathPoints }	{ }
saveRestoreData		vm/saverestore.c	/^PSaveRestore_Data saveRestoreData;/ ;" global 1 { Init_SaveRestore SaveRestore_Data_Handler paramList }	{ }
saveVertDir		graphics/cscan.c	/^internal SegmentDir saveVertDir;	\/* Vertical direc/ ;" global 1 { CSPathPoints }	{ }
savedArgc		vm/arguments.c	/^private int savedArgc;/ ;" global 1 { BeginParseArguments EndParseArguments GetCArg GetCSwitch }	{ }
savedArgv		vm/arguments.c	/^private char **savedArgv;/ ;" global 1 { BeginParseArguments EndParseArguments GetCArg GetCSwitch }	{ }
saveda2		coroutine/xfersun.s	/^#define saveda2 24	\/* initial proc *\// ;" macro 1 { }	{ }
saveda3		coroutine/xfersun.s	/^#define saveda3 28/ ;" macro 1 { }	{ }
saveda4		coroutine/xfersun.s	/^#define saveda4 32/ ;" macro 1 { }	{ }
saveda5		coroutine/xfersun.s	/^#define saveda5 36/ ;" macro 1 { }	{ }
saveda6		coroutine/xfersun.s	/^#define saveda6 40	\/* frame pointer *\// ;" macro 1 { }	{ }
savedd2		coroutine/xfersun.s	/^#define savedd2 0/ ;" macro 1 { }	{ }
savedd3		coroutine/xfersun.s	/^#define savedd3 4/ ;" macro 1 { }	{ }
savedd4		coroutine/xfersun.s	/^#define savedd4 8/ ;" macro 1 { }	{ }
savedd5		coroutine/xfersun.s	/^#define savedd5 12/ ;" macro 1 { }	{ }
savedd6		coroutine/xfersun.s	/^#define savedd6 16/ ;" macro 1 { }	{ }
savedd7		coroutine/xfersun.s	/^#define savedd7 20/ ;" macro 1 { }	{ }
savedpc		coroutine/xfersun.s	/^#define savedpc 44	\/* caller''s pc *\// ;" macro 1 { }	{ }
savelevel		graphics/gstates.c	/^#define	savelevel	(graphicsStatics->gStates._savel/ ;" macro 1 { GRestoreProc GSaveProc GStackRestore GStateDataHandler VMExpandDict }	{ graphicsStatics }
saveobj		vm/saverestore.c	/^private saveobj(o)/ ;" function 16 { SavObjMacro }	{ ABM_AllocateVM AllocVMAligned Assert ConditionalResetRecycler NULL PCard8 PSRO SRO false integer level privateRecycler rootPrivate }
scStorage		product/ipcscheduler.c	/^private	char *scStorage;	\/* pointer to PSScheduler/ ;" global 1 { CreateTypedContext Scheduler SchedulerInit }	{ }
scanArray		graphics/qreducer.c	/^private ScanList scanArray, freeScan, endScanArray/ ;" global 1 { IniQReducer QResetReducer }	{ }
scanList		graphics/qreducer.c	/^private ScanList scanList, scn;/ ;" global 1 { InsertEdge QReduce QResetReducer }	{ }
scanf		include/stream.h	/^#define	scanf	os_scanf/ ;" macro 1 { }	{ os_scanf }
scanrec		graphics/qreducer.c	/^typedef struct scanrec {/ ;" struct 5 { }	{ }
schedCtxt		product/ipcscheduler.c	/^private PSContext schedCtxt;	\/* Context for the sc/ ;" global 1 { }	{ }
scheduler		product/ipcscheduler.c	/^public	Coroutine scheduler;	\/* coroutine for the s/ ;" global 1 { BeginFlush ContextYield CreateContext EndFlush EventFlush IsContextWriteProhibited NSCreatePS NSCreateWB NSDestroyPS NSLoadPS PSCurrentNextStepContext PSCurrentWriteBlock PSGetEvents PSLoginExit PSMachPortDevice PSMakeRunnable PSResetUser PSSetBootstrapPort PSSetJobUser PSSetLoginContext PSSetNextObjectFormat PSSetNextStepContext PSSetUser PSSetWriteBlock Scheduler SchedulerInit SendEvent WBChangeBitmap WBCoProc WBError WBNotifyNewShmem }	{ }
scip		graphics/stroke.c	/^         *scip,/ ;" global 1 { AddCircleMask CompositeShow DoStroke FastShow FasterShow FinStroke StringMark }	{ }
scn		graphics/qreducer.c	/^private ScanList scanList, scn;/ ;" global 1 { InsertEdge QResetReducer }	{ }
scratchBytes		device/maskcache.c	/^private longcardinal scratchBytes;/ ;" global 1 { InitMaskCache MCGetTempBytes }	{ }
scratchInUse		device/maskcache.c	/^private boolean scratchInUse;/ ;" global 1 { InitMaskCache MCFreeBytes MCGetTempBytes }	{ }
screenList		graphics/gray.c	/^private Screen screenList;/ ;" global 1 { GrayInit InstallNewScreen RemScrRef SetDefaultHalftone }	{ }
screenOffsets		mp/mp.c	/^uint screenOffsets[4];/ ;" global 1 { BUFFERSOURCEHW MPStart SetUpSource SoverRect }	{ }
screenPool		graphics/gray.c	/^private Pool screenPool;/ ;" global 1 { AllocScreen DeleteScreen FreeScreen InitPatternImpl NewScreen }	{ }
screens		devpattern/patternimpl.c	/^DevScreen **screens;		\/* List of all screens havin/ ;" global 1 { AllocScrnSlot FreeScreen GetMemForTA InitPatternImpl SendOldestToDisk SendTAToDisk }	{ }
scrtnm		fonts/fontbuild.c	/^                   scrtnm, stkwdthname, bslnname, / ;" global 1 { CCRunStd }	{ }
secret		fonts/fontbuild.c	/^private boolean secret;	\/* for secret charpaths *\// ;" global 1 { AppendPath CCRunStd Clip FltnPth FontBuildInit InitClipPath InitPath MinimumClip NewPath PSCharPath PSUPath PSeCCRun PathForAll ReduceQuadPath StrkPth }	{ }
sectBounds		bintree/bounds.c	/^int sectBounds(Bounds *one, Bounds *two, Bounds *r/ ;" function 8 { BPApplyBounds BPCopyBitsFrom BPMark BPRenderInBounds LAddToDirty LCopyBitsFrom LFill LHideInstanceIn LMark LNewAt LObscureInside LPlaceAt LRevealInside PSReadImage PSSizeImage RecalcMouseRect }	{ }
segmentCache		vm/gcmisc.c	/^public PVMSegment segmentCache;/ ;" global 1 { GCInternal_GetSegHnd GCInternal_LookupSegment TracePrivateForShared TracePrivateVM TraceSharedVM }	{ }
segmentPool		vm/vm_segment.c	/^public Pool segmentPool;/ ;" global 1 { CreateSegmentPool FreeSegment NewSegment }	{ }
segmentTable		vm/vm_relocate.c	/^private PSegmentTable segmentTable;/ ;" global 1 { ApplyRelocation BuildSegmentTable DecodeAddress EncodeAddress FreeSegmentTable }	{ }
sendAck		product/ipcstream.c	/^private int sendAck(msg_header_t *msg)/ ;" function 35 { IPCFillBuf }	{ DATA_ACK_MESSAGE_ID DATA_EV_ACK_MSG_ID PingAsyncDrivers STREAM_DATA_WITH_ACK_ID asyncDriversExist data false true }
send_asyncronous		product/machportdevice.c	/^send_asyncronous(struct MachPortDevice *mpd, NXPri/ ;" function 20 { mpdShowPage send_rpc }	{ }
send_rpc		product/machportdevice.c	/^send_rpc(struct MachPortDevice *mpd, NXPrintPageMe/ ;" function 20 { mpdShowPage }	{ NX_PRINTPAGEMSGID ReleaseMsg send_asyncronous }
setbboxNm		graphics/userpath.c	/^#define setbboxNm graphicsNames[nm_setbbox].val.nm/ ;" macro 1 { UsrPthBBox }	{ graphicsNames nm_setbbox }
setupCache		fonts/fontbuild.c	/^private boolean setupCache;/ ;" global 1 { CCRunStd CSEndChar }	{ }
sfCache		fonts/selectfont.c	/^public PSFCache sfCache;/ ;" global 1 { FreeSelectFont InitSFCache InsertSelectFont PurgeSFForKey PurgeSFForMID SearchSelectFont forallSFC pSFC }	{ }
sfcFreeList		fonts/selectfont.c	/^public PSFCEntry sfcFreeList,	\/* -> head of free l/ ;" global 1 { FreeSelectFont InitSFCache InsertSelectFont }	{ }
sfcRover		fonts/selectfont.c	/^  sfcRover;			\/* -> next entry to displace *\// ;" global 1 { InitSFCache InsertSelectFont }	{ }
sgn		language/classarray.h	/^  sgn,						\/* + *\// ;" global 1 { }	{ }
sharedRecycler		vm/recycler.c	/^public PRecycler privateRecycler, sharedRecycler;/ ;" global 1 { AllocPName Array ChangeRecyclerExecLevel CreateSharedVM CreateVM GC_MoveRecycleRange ReclaimMovedVM RecyclerForObject RecyclerName _ChangeRecyclerExecLevel }	{ }
sharedRootsProcs		vm/gcmisc.c	/^public CallBackItem *sharedRootsProcs;/ ;" global 1 { GCInternal_Init GC_RgstSharedRootsProc TraceSharedVM }	{ }
shiftFIDType		fonts/fontspriv.h	/^#define shiftFIDType 24/ ;" macro 1 { BitmapWidthsFID GenFID TransformFID TypeOfFID }	{ }
showCache		fonts/fastshow.c	/^public DevMask *showCache;/ ;" global 1 { CompositeShow FSInit FastShow FasterShow }	{ }
showLevel		fonts/fontdata.h	/^#define showLevel (fontCtx->fontShow._showLevel)/ ;" macro 1 { BEGINSHOW ENDSHOW FontShwDataHandler PopShowState PushShowState SSSOutCall ShowByName TrimShowStates }	{ fontCtx }
signalStackArea		product/nextmain.c	/^private char *signalStackArea;	\/* Stack area for s/ ;" global 1 { Mnextmain }	{ }
signaturePort		product/listener.c	/^static	port_t	signaturePort;	\/* Port used as signa/ ;" global 1 { CheckInListenPort CheckOutListenPort PSListener }	{ }
sizeCircleMasks		graphics/stroke.c	/^#define sizeCircleMasks (32)/ ;" macro 1 { IniStroke }	{ }
sizeOpDefTable		vm/rgstcmds.c	/^integer sizeOpDefTable;/ ;" global 1 { Init_Cmds }	{ }
sizeShowCache		fonts/fontshow.h	/^#define sizeShowCache 900/ ;" macro 1 { FSInit }	{ }
sizeTable		pslib/sizes.c	/^private int sizeTable[SIZE_LAST + 1] = {/ ;" global 23 { ps_getsize }	{ }
slash		language/grammar.h	/^#define slash 12/ ;" macro 1 { }	{ }
slashState		language/scanner.c	/^private readonly StateRec slashState = {/ ;" global 15 { }	{ }
slstm		devpattern/patternimpl.c	/^private Stm slstm;		\/* Screen list stream. *\// ;" global 1 { DecStmByteCnt InitSLFiles SendTAToDisk ValidateTA }	{ }
source2bits		device/framemaskdev.c	/^public PCard16 source2bits;/ ;" global 1 { BlackMasksMark BlackMasksMarkReal ConstantMasksMark ExpandOneLine GrayMasksMark IniMaskDevImpl WhiteMasksMark }	{ }
source4bits		device/framemaskdev.c	/^public SCANTYPE *source8bits, *source4bits;/ ;" global 1 { BlackMasksMarkReal ConstantMasksMark ExpandOneLine GrayMasksMark IniMaskDevImpl WhiteMasksMark }	{ }
source8bits		device/framemaskdev.c	/^public SCANTYPE *source8bits, *source4bits;/ ;" global 1 { BlackMasksMarkReal ConstantMasksMark ExpandOneLine GrayMasksMark IniMaskDevImpl WhiteMasksMark }	{ }
spCount		devpattern/patternimpl.c	/^integer spCount;/ ;" global 1 { AllocScreenPrivate InitPatternImpl }	{ }
spStorage		graphics/pathbuild.c	/^public Pool spStorage; \/* pool for StrkPath record/ ;" global 1 { DoStrkPth PathBuildInit RemPathRef }	{ }
spaceFile		vm/vm_space.c	/^private FILE *spaceFile;/ ;" global 1 { Init_VM_Space MFree MNew }	{ }
spaces		postscript/contextimpl.c	/^private PSSpace spaces;			 \/* list of all spaces */ ;" global 1 { CreatePSSpace DestroyPSSpace GetNextContext GetNextSpace }	{ }
spliceInsert		graphics/cscan.c	/^private CrossPtr spliceInsert;		\/* The insertion p/ ;" global 1 { FinishSplice StartSplice }	{ }
sprintf		include/stream.h	/^#define	sprintf	os_sprintf/ ;" macro 1 { LoadSingleDriver PSResetUser }	{ os_sprintf }
srceenPrivates		devpattern/patternimpl.c	/^private ScreenPrivate srceenPrivates[MAXSP];/ ;" global 1 { AllocScreenPrivate }	{ }
ss		fonts/compshow.c	/^ss->useReal = true;/ ;" global 1 { AlignIsolatedStems BEGINSHOW BuildChar CCRunStd CSRun CompSlowShow CompositeShow ComputeDataLen CopyDelayedFont CullCounters DMFRestore DelayedMakeFont ENDSHOW FSetCharWidth FastShow FasterShow FixBands GETC GetShowFlushArgs HF2F HF4F HF4R HIRR HNRF HNRR LF2F LF4F LF4R LIRR LNRF LNRR MakeCacheDev MakeCacheDev2 NoRoom PSCShow PSSetCharWidth PopShowState PreBuiltChar PushShowState ROkToBuild ReadCtrlByte SSRestoreState SSSOutCall SafeShowMask ScanCompString SelectionSort SetCacheDev SetCch SetCharWidth SetupMaskDev ShowByName ShowInternal SimpleCounter SimpleShowByName SlowShow SortStems StmToken TrimShowStates UNGETC UsrPthQRdcOk (etc) }	{ }
ssCount		fonts/fontshow.c	/^private integer ssCount;  \/* total number of ShowS/ ;" global 1 { FontShowInit FreeShowState NewShowState }	{ }
ssFree		fonts/fontshow.c	/^private PShowState ssFree;  \/* global free list *\// ;" global 1 { BEGINSHOW ENDSHOW FontShowInit FreeShowState PushShowState }	{ }
sscanf		include/stream.h	/^#define	sscanf	os_sscanf/ ;" macro 1 { ReadNetInfo }	{ os_sscanf }
ssr		fonts/fontshow.c	/^if (!CvtToXFixed(&(ss-->fdcp), ssr->rdcp, LOWERSHO/ ;" global 1 { BEGINSHOW CSRun CleanShowState CompSlowShow CompositeShow DMFRestore DelayedMakeFont ENDSHOW FSetCharWidth FastShow FontShowInit FreeShowState GetCPDelta IsCleanShowState MakeCacheDev MakeCacheDev2 MoveToAfterShow NewShowState NoRoom PSAShow PSAWidthShow PSKShow PSSetCharWidth PSShow PSStrWidth PSWidthShow PopShowState PushShowState ROkToBuild SSGetChar SSRestoreState ScanCompString SetCch SetCharWidth SetupMaskDev ShowByName ShowInternal SimpleShow SimpleShowByName SlowShow TrimShowStates XYShow if }	{ }
stPermanentRAM		vm/vm_segment.h	/^#define stPermanentRAM (MAXlevel+2) \/* traced, no / ;" macro 1 { ABM_SetAllocated AllocPName AllocPStream BuildSegmentTable CreateVM CurrentVMSegmentType ResetSegFreePtr RgstOpSet RootPointer VMSetRAMAlloc WriteRelocatedVMToFile }	{ MAXlevel }
stROM		vm/vm_segment.h	/^#define stROM (MAXlevel+1)	\/* not traced, no alloc/ ;" macro 1 { ABM_SetAllocated AllocPName BuildSegmentTable CreateVM Init_Cmds IsROMSegment ResetSegFreePtr RgstOpSet VMSetROMAlloc WriteRelocatedVMToFile }	{ MAXlevel }
stVolatileRAM		vm/vm_segment.h	/^#define stVolatileRAM (MAXlevel+3) \/* traced, has / ;" macro 1 { BuildSegmentTable CreateVM CurrentVMSegmentType PSMakeVM WriteRelocatedVMToFile }	{ MAXlevel }
stackRstr		language/exec.h	/^#define	stackRstr	(languageCtxt->execData._stackRs/ ;" macro 1 { DictGetP ForceGetP LanguageDataHandler PSLoad ReadBinObjSeq StmToken UndefNameIndex }	{ languageCtxt }
stackoverflow		include/error.h	/^#define stackoverflow errorNames[16]/ ;" macro 1 { HandleStackOverflow }	{ errorNames }
stackunderflow		include/error.h	/^#define stackunderflow errorNames[15]/ ;" macro 1 { Underflow }	{ errorNames }
standardCharSet		device/nextprebuilt.c	/^static char standardCharSet[30];/ ;" global 1 { readPrebuiltFile }	{ }
standardEncoding		device/nextprebuilt.c	/^static PrebuiltEncoding *standardEncoding;/ ;" global 1 { disposePrebuiltFont readPrebuiltFile }	{ }
start		language/grammar.h	/^#define start 0/ ;" macro 1 { AddToPath AllocListPathRec AppendPath BM34SetupPattern BM38SetupPattern BuildGrayPattern BuildPattern CMYKConstColorSetup CSPathPoints CacheLookup CheckHorizWhite ClippedMasksMark ClosePath ColorSetup ComposeColors ConstColorSetup ConstGraySetup DumpArray DumpNameArray FillInRange FixCrossFlags FreePattern GC_MoveRecycleRange GetCachePlace GetPatternRow GrayMasksMark GrayRectMark GrayRunMark GrayTrapsMark Gry4Of4Setup LoadSingleDriver MP12InitBricks MP12SetupPat MP12SetupPattern MaskSetup MonoSetup NXGrayPatSetup PrAryBody PrNameAryBody PreEnumerateSetup QStrokeUserPathEnumerate ReversePath RollPattern SetPatInfo SetupGrayPattern SetupMonoPattern StrkCurve StrokeUserPathEnumerate }	{ }
startLink		graphics/cscan.c	/^private CrossPtr startLink;		\/* Initial link Cross/ ;" global 1 { FinishPath ResetCScan }	{ }
startSplice		graphics/cscan.c	/^private CrossPtr startSplice;		\/* The first link C/ ;" global 1 { FinishSplice StartSplice }	{ }
startState		language/scanner.c	/^private readonly StateRec startState = {/ ;" global 15 { LineComplete StmToken }	{ }
stateArray		language/scanner.c	/^private readonly PStateRec stateArray[] = {/ ;" global 5 { NEWSTATE }	{ }
staticData		vm/staticdata.c	/^StaticData *staticData;/ ;" global 1 { BLUNDERKEY CallDataProcedures CreateContext CreateData DestroyData Init_StaticData LoadData LoadPointers RegisterData SetCurrentContext SwitchPSContext UnloadContext UnloadData }	{ }
stdLokData		fonts/fontbuild.c	/^#define stdLokData	globals->_stdLokData/ ;" macro 1 { FontBuildInit StartLock }	{ globals }
stdMarkProcs		graphics/graphmark.c	/^globaldef PMarkStateProcs stdMarkProcs;/ ;" global 1 { MarkInit }	{ }
stdencname		fonts/fontbuild.c	/^                   pnttypnm, fntpthnm, stdencname,/ ;" global 1 { CCBuild }	{ }
stdencvec		fonts/fontbuild.c	/^#define stdencvec	globals->_stdencvec/ ;" macro 1 { CCBuild FontEncode }	{ globals }
stdhw		fonts/fontbuild.c	/^#define stdhw (fontCtx->fontBuild._stdhw)/ ;" macro 1 { AdjustBlues AdjustToStdWidths BlueLock BuildChar CCRunStd GetStandardWidths PreYLock }	{ fontCtx }
stdhwNm		fonts/fontbuild.c	/^                   stdhwNm, stdvwNm, stemsnaphNm, / ;" global 1 { GetStandardWidths }	{ }
stdinStm		language/langdata.h	/^#define	stdinStm	(languageCtxt->streamData._stdinS/ ;" macro 1 { PrivateStreamRoots StmCtxCreate StmCtxDestroy }	{ languageCtxt }
stdoutStm		language/langdata.h	/^#define	stdoutStm	(languageCtxt->streamData._stdou/ ;" macro 1 { PrivateStreamRoots StmCtxCreate StmCtxDestroy }	{ languageCtxt }
stdvw		fonts/fontbuild.c	/^#define stdvw (fontCtx->fontBuild._stdvw)/ ;" macro 1 { AdjustToStdWidths BuildChar CCRunStd GetStandardWidths PreXLock }	{ fontCtx }
stdvwNm		fonts/fontbuild.c	/^                   stdhwNm, stdvwNm, stemsnaphNm, / ;" global 1 { GetStandardWidths }	{ }
stemsnaphNm		fonts/fontbuild.c	/^                   stdhwNm, stdvwNm, stemsnaphNm, / ;" global 1 { GetStandardWidths }	{ }
stemsnapvNm		fonts/fontbuild.c	/^                   stdhwNm, stdvwNm, stemsnaphNm, / ;" global 1 { GetStandardWidths }	{ }
stillRunning		product/ipcscheduler.c	/^private	boolean	stillRunning;	\/* Whether the sched/ ;" global 1 { Scheduler }	{ }
stkwdthname		fonts/fontbuild.c	/^                   scrtnm, stkwdthname, bslnname, / ;" global 1 { CCRunStd }	{ }
stmBytesUsed		devpattern/patternimpl.c	/^private integer stmBytesUsed;	\/* Bytes used in Scr/ ;" global 1 { DecStmByteCnt FreeScreen InitSLFiles SendTAToDisk }	{ }
stmCount		product/ipcstream.h	/^#define stmCount (stmData->ref)/ ;" macro 1 { IPCFillBuf }	{ stmData }
stmData		product/ipcstream.h	/^#define	stmData ((IPCData *)stm->data.a)/ ;" macro 1 { IPCClose IPCInitializeStm stmCount stmMsg stmNType stmPort stmRef stmType }	{ IPCData data }
stmList		stream/streamimpl.c	/^private Links stmList;/ ;" global 1 { StmCreate StmInit os_cleanup }	{ }
stmMsg		product/ipcstream.h	/^#define stmMsg	(stmData->m)/ ;" macro 1 { IPCClose IPCFillBuf IPCFlushOutput IPCInitializeStm IPCPutEOF IPCWrite }	{ stmData }
stmNType		product/ipcstream.h	/^#define stmNType (stmData->nmt)/ ;" macro 1 { IPCFillBuf }	{ stmData }
stmObj		include/basictypes.h	/^#define	stmObj		6/ ;" macro 1 { AllocPStream BMRun CCRunStd CRun CheckStackElement CrFile Equal ExecPushP GC_WasCollected HashObject ImageInternal PSEExec PSExCheck PSNoAccess PSRCheck PSReadOnly PSStatus PSToken PSWCheck PSXctOnly PopPStream PrintObj PrintVal RelocateObj RelocateObject StreamInit TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj }	{ }
stmPort		product/ipcstream.h	/^#define stmPort (stmData->port)/ ;" macro 1 { IPCClose IPCFillBuf IPCInitializeStm NSCreatePS }	{ stmData }
stmRef		product/ipcstream.h	/^#define stmRef	(stmData->ref)/ ;" macro 1 { IPCClose IPCInitializeStm PSNewContextStms }	{ stmData }
stmRestricted		product/ipcstream.h	/^#define stmRestricted f1/ ;" macro 1 { IPCInitializeStm }	{ }
stmSType		product/ipcstream.h	/^#define stmSType ((msg_type_t *)stmType)/ ;" macro 1 { IPCFillBuf }	{ stmType }
stmType		product/ipcstream.h	/^#define stmType	(stmData->mlt)/ ;" macro 1 { IPCFillBuf IPCFlushOutput IPCInitializeStm stmSType }	{ stmData }
stmWCParams		product/ipcstream.h	/^#define	stmWCParams ((WCParams *)stm->data.b)/ ;" macro 1 { IPCClose IPCFillBuf IPCGetWCParams IPCInitializeStm }	{ WCParams data }
stoDevList		stodev/stodevimpl.c	/^private PStoDev stoDevList;/ ;" global 1 { FndStoDev FndStoFile RgstStoDevice StoDevGetNext StoDevInit UnRgstStoDevice }	{ }
stoppedcmd		language/exec.c	/^private CmdObj execcmd, stoppedcmd, reptcmd, intfo/ ;" global 1 { ExecInit PSStopped }	{ }
strObj		include/basictypes.h	/^#define	strObj		5/ ;" macro 1 { BMRun Bang BinObjInit BuildMultiRectPath CCRunStd CheckCompositeFont CheckIfEncodedUserPath CopyNumStrmForCache EncodeObj EqNumStrmCache Equal ExecPushP GC_WasCollected GetThresholdDictEntries HashObject HashPath ImageInternal InternalBuildChar KeyName LGt PSCVS PSCopy PSCvI PSCvR PSDefineFont PSEExec PSExCheck PSFontRun PSForAll PSGet PSGetInterval PSLength PSMakeVM PSNoAccess PSPut PSPutInterval PSRCheck PSReadOnly PSRectFill PSSelectFont PSStatus PSStringLength PSToken PSUnDefineFont PSWCheck PSXctOnly PopPString PrintObj PrintVal ReadBinObjSeq RelocateObj RelocateObject RgstPrebuiltInfo SFAProc SetupNumStrm SizeNumStrmForCache TracePrivateForShared TracePrivateVM TraceSharedVM TypeOfObj (etc) }	{ }
strStmProcs		fonts/fontbuild.c	/^globalref StmProcs strStmProcs;/ ;" global 1 { BMRun StrStmCreate StrToken }	{ }
strStorageBufCount		language/langdata.h	/^#define strStorageBufCount (languageCtxt->scannerD/ ;" macro 1 { ExtendStrStorage FreeStrStorage StmToken }	{ languageCtxt }
strType		include/customops.h	/^#define	strType		5/ ;" macro 1 { }	{ }
strcmd		language/string.c	/^private CmdObj strcmd;/ ;" global 1 { SFAProc StrForAll StringInit }	{ }
strcmp		device/hostdict.c	/^#define strcmp(a, b) os_strcmp(a, b)/ ;" macro 1 { AssignArrayBounds GuaranteeActiveScreen LNewAt LoadActiveDrivers LoadAllDrivers LoadSingleDriver MatchMonitors PSPlaySound RegisterGraphicsPackages defHostDict getHostDict }	{ }
strcpy		device/hostdict.c	/^#define strcpy(a, b) os_strcpy(a, b)/ ;" macro 1 { CheckInListenPort DoFixupAction FilePathSearch FilterDirProc FontEnumOneDir FontEnumerate PSFrameBuffer PrebuiltPathSearch RegisterGraphicsPackages WBChangeBitmap WBOpenBitmap defHostDict getPrebuiltFont myGetpwdir }	{ }
string		include/publictypes.h	/^typedef unsigned char character, *string, *charptr/ ;" typedef 1 { BMRun BinObjInit BuildChar CCRunStd CVT ChrMapBuildChar ContextOpsInit CopyNumStrmForCache CreatePSContext EnterPathInCache EqNumStrmCache FastName FetchCharOutline FindPathInCache GetFontStream HashPath MakePName MakeStaticPName Mark MarkStrokeMasks NoClipMark PSCVS PSChdir PSExecuteString PSMakeVM PSPopString PSPushString PSReadImage PSRun PSUClRead PSWriteData PSeCCRun PopFlName RdcStrkDumpMasks SetupNumStrm StateInit StoDevStrStatus StringMark VMPutNChars }	{ }
stringGeneration		fonts/fontrun.c	/^private Card32 stringGeneration;	/ ;" global 1 { KAEndCSDict }	{ }
strkFoo		graphics/stroke.c	/^public real strkFoo;/ ;" global 1 { AdjstHW CCRunStd DoStroke IniStroke PathEndChar }	{ }
strkStorage		graphics/ucache.c	/^private Pool upcStorage, rdcStorage, strkStorage;/ ;" global 1 { EnterRdcInCache FreeRdc IniUCache }	{ }
strkTstRct		graphics/stroke.c	/^  	  strkTstRct,/ ;" global 1 { DoStroke FF_StrkLnTo }	{ }
strkll		graphics/stroke.c	/^	  strkll,/ ;" global 1 { DoStroke FF_StrkLnTo }	{ }
strkur		graphics/stroke.c	/^	  strkur,/ ;" global 1 { DoStroke FF_StrkLnTo }	{ }
strlen		device/hostdict.c	/^#define strlen(a) os_strlen(a)/ ;" macro 1 { FastName FilePathSearch FontEnumerate FontPathSearch PSFrameBuffer PSResetUser RegisterGraphicsPackages defHostDict myGetpwdir }	{ }
strokeGlobals		graphics/stroke.c	/^private Globals strokeGlobals;/ ;" global 1 { FracSqrt2 MAXStrokeThrow allSegmentsIn atcurve circleFont circleTraps clipBBox crDash crDshLen curIMtx dLf dLfSt dP1 dP1St dRt dRtSt dashLength dashLim dashed doingVectors fDshLen f_dLf f_dLfSt f_dP1 f_dP1St f_dRt f_dRtSt f_halfwidth f_maxBevelChord f_throwThreshold f_uV1 f_uV2St fcrDash ffldDsh filledDash gPathBBox haveBounds incurve isStrkPth maxBevelChord mitposs needClip needMaxBevelChord needTfm normalize oddXwidth oddYwidth prevRadiusForMaxBevelChord strkll strkur strokePath throwThreshold uP1 uP1St uV1 uV2St uhalfwidth xHiCirCenter xLowCirCenter yHiCirCenter (etc) }	{ }
strokeOp		graphics/pathops.c	/^boolean strokeOp;/ ;" global 1 { BreakUpPath Fill PSUStroke Stroke }	{ }
strokePath		graphics/stroke.c	/^private Path    strokePath;/ ;" global 1 { FillBevel FillCircle FillQuad StrkPth }	{ }
strokewidthname		fonts/fontbuild.c	/^private NameObj BCcmdName, strokewidthname, charst/ ;" global 1 { CCRunStd }	{ }
subrsKeywordsTable		fonts/fontrun.c	/^private KeywordAction subrsKeywordsTable[] = {/ ;" global 7 { KASubrs }	{ }
subrsnm		fonts/fontbuild.c	/^                   bluename, mnftrnm, blfuzznm, su/ ;" global 1 { CCRunStd }	{ }
superExec		language/exec.c	/^#define	superExec		(languageCtxt->execData._superE/ ;" macro 1 { InvlAccess PSSuperExec }	{ languageCtxt }
swapPixOnes		devpattern/patternimpl.c	/^public PSCANTYPE *swapPixOnes;/ ;" global 1 { ImS1XD11 ImSXXD11 IniDeepOnes SetupDeepOnes }	{ }
switches		vm/vm.c	/^public Switches switches;/ ;" global 1 { StartVM WriteRelocatedVMToFile WriteVMToFile vISP vLANGUAGE_LEVEL vOS vPREFERREDALIGN vSTAGE vSWAPBITS }	{ }
syntaxerror		include/error.h	/^#define syntaxerror errorNames[17]/ ;" macro 1 { PSCvI PSCvR StmToken SyntaxError }	{ errorNames }
synthKeywordsTable		fonts/fontrun.c	/^private KeywordAction synthKeywordsTable[] = {/ ;" global 4 { KAFontDirectory }	{ }
szSelectFontCache		fonts/fontspriv.h	/^#define szSelectFontCache 25	\/* total entries in s/ ;" macro 1 { InsertSelectFont }	{ }
szSelectFontHash		fonts/fontspriv.h	/^#define szSelectFontHash 7	\/* size of hash table (/ ;" macro 1 { HashSFC forallSFC }	{ }
taTimeStamp		devpattern/patternimpl.c	/^private Card32 taTimeStamp;/ ;" global 1 { AllocScreen InitPatternImpl SendOldestToDisk ValidateTA }	{ }
tdDummy		include/vm.h	/^#define	tdDummy 0		\/* Not used -- algorithm simpli/ ;" macro 1 { DMFRestore DelayedMakeFont FreeShowState }	{ }
tdErrorDict		include/vm.h	/^#define tdErrorDict 2		\/* errordict *\// ;" macro 1 { CreateSharedVM InitPostScript }	{ }
tdFontDirectory		include/vm.h	/^#define	tdFontDirectory 4	\/* FontDirectory *\// ;" macro 1 { CreateSharedVM InitPostScript MapFontDirectory }	{ }
tdStatusDict		include/vm.h	/^#define tdStatusDict 3		\/* statusdict *\// ;" macro 1 { CreateSharedVM InitPostScript Init_Cmds }	{ }
tdUserDict		include/vm.h	/^#define tdUserDict 1		\/* userdict *\// ;" macro 1 { CreateSharedVM InitPostScript }	{ }
tempCauses		bintree/layer.c	/^static int *tempCauses;		\/* Temporary unique cause/ ;" global 1 { ExpandTempCauses LInitialize LMoveTo }	{ }
tenonCap		graphics/graphicspriv.h	/^#define tenonCap 2/ ;" macro 1 { F_StrkCap FillLineSegment PSSetLineCap StrkCap }	{ }
termwindowflag		bintree/layer.c	/^int termwindowflag;		\/* Singals BAGFree of termina/ ;" global 1 { BAGFree LFree }	{ }
tfixdiv		fp/fixedmach.030.s	/^ENTRY(tfixdiv)/ ;" function 1 { EdgeInit QBresenhamMT }	{ }
tfmLockPt		fonts/flex.c	/^#define tfmLockPt (fontCtx->fontBuild._tfmLockPt)/ ;" macro 1 { BuildChar CCRunStd GetMtxInfo }	{ fontCtx }
tfmloc		fonts/fontbuild.c	/^private Fixed tfmloc(loc,yflg) Fixed loc; boolean / ;" function 8 { printmap }	{ FCd FntTfmP locktype }
tfrFcnFirst		graphics/transferimpl.c	/^private TfrFcn tfrFcnFirst, tfrFcnLast;/ ;" global 1 { GetInactiveTables IniTransfer LinkTfr UnlinkTfr }	{ }
tfrFcnLast		graphics/transferimpl.c	/^private TfrFcn tfrFcnFirst, tfrFcnLast;/ ;" global 1 { IniTransfer LinkTfr UnlinkTfr }	{ }
tfrFcnStorage		graphics/transferimpl.c	/^private  Pool tfrFcnStorage;    \/* Blind pointer t/ ;" global 1 { GetTfr IniTransfer RemTfrRef }	{ }
tfrGlobals		graphics/transferimpl.c	/^private Globals tfrGlobals;/ ;" global 1 { IniTransfer nTfrTables tfrFcnFirst tfrFcnLast tfrFcnStorage }	{ }
tfrTableLimit		graphics/transferimpl.c	/^public integer tfrTableLimit;/ ;" global 1 { IniTransfer }	{ }
tfrfcnPool		device/tfrfcn.c	/^private Pool tfrfcnPool;/ ;" global 1 { DevAllocTfrFcn ReclaimDevTfrFcn }	{ }
throwThreshold		graphics/stroke.c	/^          throwThreshold,/ ;" global 1 { DoStroke F_MiterPoint MiterPoint }	{ }
timeLog		product/timelog.c	/^static TimeLog (*timeLog)[TIMEBUFLENGTH];/ ;" global 1 { InitTimedEvents PrintTimedEvents TimedEvent }	{ }
timeLogIndices		product/timelog.c	/^static int *timeLogIndices;/ ;" global 1 { InitTimedEvents TimedEvent }	{ }
timelog		product/timelog.c	/^typedef struct timelog {/ ;" struct 4 { }	{ }
timestamp		device/hostdict.c	/^static unsigned long timestamp;/ ;" global 1 { BumpCETimeStamp GetCETimeStamp IDToPSContext IDToPSSpace ILoadPNE LanguageDataHandler NewContextID NewSpaceID PutInDict RecycleID ResetNameCache SetCETimeStamp TIME trytoload }	{ }
tokenToAction		language/scanner.c	/^private readonly Card8 tokenToAction[] = {/ ;" global 14 { StmToken }	{ }
tokenToSize		language/scanner.c	/^private readonly Card8 tokenToSize[] = {/ ;" global 2 { StmToken }	{ }
toosmall		fonts/fontbuild.c	/^#define toosmall (fontCtx->fontBuild._toosmall)/ ;" macro 1 { CCRunStd GetMtxInfo PathEndChar }	{ fontCtx }
top		graphics/stroke.c	/^#define top 4/ ;" macro 1 { ClipVect CodePoint ConnectWhitePairs FillInPairs FixOnePath PutInDict }	{ }
totalAlloc		devpattern/patternimpl.c	/^private integer totalAlloc;/ ;" global 1 { FreeInfoVector FreePattern InitPatternImpl PatAlloc }	{ }
totalMappedFiles		product/miscops.c	/^private	int totalMappedFiles;/ ;" global 1 { AddMappedFile DumpMappedFiles RemoveMappedFile }	{ }
traceOffsetFill		graphics/pathpriv.c	/^  private boolean traceOffsetFill;/ ;" global 1 { IniPathPriv OFClose OFIntersect OFLineTo OffsetFill psTraceOffsetFill }	{ }
traceRecycler		vm/recycler.c	/^static boolean	traceRecycler;/ ;" global 1 { ChangeRecyclerExecLevel ExtendRecycler Init_Recycler PSTraceRecycler ReclaimRecyclableVM Recyclable RecyclerPop RecyclerPush ResetRecycler TraceInvalidation }	{ }
transformFIDMask		fonts/fontspriv.h	/^#define transformFIDMask 0x1F	    \/* this value ad/ ;" macro 1 { TransformFID }	{ }
transformFIDShift		fonts/fontspriv.h	/^#define transformFIDShift 2	    \/* this value adju/ ;" macro 1 { CheckPrebuiltOptions TransformFID }	{ }
transformedCharFIDFactor		fonts/fontspriv.h	/^#define transformedCharFIDFactor 9/ ;" macro 1 { CheckPrebuiltOptions PreBuiltChar }	{ }
trapShipped		graphics/reducer.c	/^private boolean curIsClipLine, interiorClipMode, e/ ;" global 1 { InitReducer ShipTrapezoid }	{ }
trickyErrorDict		postscript/postscript.c	/^private DictObj trickyErrorDict;/ ;" global 1 { CreateSharedVM InitPostScript StateInit }	{ }
trickyFontDirectory		postscript/postscript.c	/^public  DictObj trickyFontDirectory;/ ;" global 1 { CreateSharedVM DictP InitPostScript StateInit }	{ }
trickyStatusDict		postscript/postscript.c	/^public  DictObj trickyStatusDict;/ ;" global 1 { CreateSharedVM DictP InitPostScript PSRegisterStatusDict StateInit }	{ }
trickyUserDict		postscript/postscript.c	/^public  DictObj trickyUserDict;/ ;" global 1 { CreatePSContext CreateSharedVM DictP InitPostScript StateInit }	{ }
trptrp		include/bitmap.h	/^typedef struct trptrp {/ ;" struct 5 { }	{ }
true		include/publictypes.h	/^#define true 1/ ;" macro 1 { AddEntry BM34SetupPattern BM38SetupPattern BuildChar CSContains CacheAddEntry CacheInvalidate CheckCI CompSlowShow CompositeShow ComputeHideBounds ContextOpsInit CopyOffscreen CopyOnscreen CreatePrivateVM CreateSharedVM DelayedMakeFont DestroyPSSpace DisposeEntry DoQuit EXBuildExtents EXFindHoles FastShow FlushMID GetDSW GetMetrics2 GetNotifyAbortCode GetStandardWidths InitPostScript LAddToInstance LBMNew LBMNewAlpha LCopyBitsFrom LFree LHideInstanceIn LMark LNewAt LoadSingleDriver MP12Composite MP12SetupPattern MP12_Mark MPInitScreen MPNewAlpha MakeCacheDev MakeCacheDev2 NXGrayPatSetup NXSetHookMask NoRoom NotifyPSContext PSClrInt PSCoProc PSDetach PSDictGetTestPObj PSErodeSW PSJoin PSSetCchDevice2 ROkToBuild SetCch SwitchPSContext TrimCI (etc) }	{ }
trytoload		language/dict.c	/^private boolean trytoload(key,p)/ ;" function 70 { Load LoadName PSStore PSWhere }	{ Assert BitVector InvlAccess IsFontDirectory KeyName MAXunsignedinteger NIL Object PDictBody PDictObj PKeyVal PNameEntry SearchDict XlatDictRef d dictObj dictStk false nameObj p rAccess register timestamp true }
twoBitSample		devpattern/im110.c	/^private integer twoBitSample[4] = {0, 85, 170, 255/ ;" global 1 { Im110 ImSXXD11 }	{ }
typecheck		include/error.h	/^#define typecheck errorNames[18]/ ;" macro 1 { PSTypeCheck }	{ errorNames }
uP1		graphics/stroke.c	/^          uP1,/ ;" global 1 { FillJoin StrkCap StrkLnTo StrkStrt }	{ }
uP1St		graphics/stroke.c	/^private  Cd      uP1St,/ ;" global 1 { StrkCap StrkClose StrkStrt }	{ }
uV1		graphics/stroke.c	/^          uV1,/ ;" global 1 { FillJoin StrkCap StrkLnTo }	{ }
uV2St		graphics/stroke.c	/^          uV2St,/ ;" global 1 { StrkCap StrkClose StrkLnTo }	{ }
uXARectangle		graphics/userpath.c	/^boolean uXARectangle;/ ;" global 1 { PSUStroke UCGetDevPrim UXAStroke XADoRdcStroke }	{ }
uXAc1		graphics/userpath.c	/^Cd UOffset, uXAc1, uXAc2;/ ;" global 1 { PSUStroke UCGetDevPrim UXAStroke XADoRdcStroke }	{ }
uXAc2		graphics/userpath.c	/^Cd UOffset, uXAc1, uXAc2;/ ;" global 1 { PSUStroke UCGetDevPrim UXAStroke XADoRdcStroke }	{ }
ucacheNm		graphics/userpath.c	/^#define ucacheNm graphicsNames[nm_ucache].val.nmva/ ;" macro 1 { CheckIfUCache }	{ graphicsNames nm_ucache }
uchar		mp/mp.h	/^#define uchar unsigned char/ ;" macro 1 { BM34Convert2to16 BM38Convert2to32 BlackMasksMark ExpandMask HighlightRect ImIdent ImS12D12NoTfr ImStretch LInitPage MRMoveRect SoverRect buildPrebuilt readPrebuiltFile }	{ }
ufixratio		fp/fixedmach.030.s	/^ENTRY(ufixratio)/ ;" function 1 { RatToFixed }	{ }
uhalfwidth		graphics/stroke.c	/^private real    uhalfwidth,/ ;" global 1 { AddCirclePath AdjstHW AnamorphicNormStrkWdth CheckForRectangle DoStroke FillCircle FillCurveJoin FillJoin FillLineSegment GetMaxBevelChord NormalizeStrokeWidth PreStroke SetHalfWidth SetNormMidPts SetupForCircles StrkCap }	{ }
uint		mp/mp.h	/^#define uint unsigned int/ ;" macro 1 { BM38Convert2to32 BmALine BmRLine BmULine ConLine DoSover HighlightRect ImIdent ImIdent32 ImStretch MP12SetupBits MP12SetupPat MRInitialize MRMoveRect ONES PatLine RWCOPYBmALine RWCOPYBmULine Sover SoverMask SoverRect WCOPYBmALine WCOPYBmULine WCOPYConLine WCOPYPatLine }	{ }
unchar		include/mp.h	/^#define unchar unsigned char/ ;" macro 1 { }	{ }
undeffilename		include/error.h	/^#define undeffilename errorNames[20]/ ;" macro 1 { PSUndefFileName }	{ errorNames }
undefined		include/error.h	/^#define undefined errorNames[19]/ ;" macro 1 { PSUndefined StmToken }	{ errorNames }
undefresult		include/error.h	/^#define undefresult errorNames[21]/ ;" macro 1 { PSUndefResult }	{ errorNames }
ungetc		include/stream.h	/^#define ungetc(ch, stm) (*(stm)->procs->UnGetc)(ch/ ;" macro 1 { ComStmUnGetc HandlePendingEOL LineComplete LineEdit PSBytesAvailable PSEExec PSReadLine SafeUnGetc }	{ }
unint		include/mp.h	/^#define unint unsigned int/ ;" macro 1 { }	{ }
unitClock		language/exec.c	/^private Card32	unitClock;		\/* Operator units if no/ ;" global 1 { ExecInit SetTimeLimit }	{ }
unixCmds		unix_product/unix.c	/^private readonly RgCmdTable unixCmds = {/ ;" global 11 { UnixInit }	{ }
unixStmProcs		stream/unixstream.c	/^public readonly StmProcs unixStmProcs = {/ ;" global 4 { os_fdopen os_fileno os_fopen }	{ }
unmatchedmark		include/error.h	/^#define unmatchedmark errorNames[22]/ ;" macro 1 { CountToMark PSClrToMrk }	{ errorNames }
unregistered		include/error.h	/^#define unregistered errorNames[23]/ ;" macro 1 { PSCVS PSUnregistered }	{ errorNames }
until		include/publictypes.h	/^#define until(x) while (!(x))/ ;" macro 1 { AdvanceEdges BlackMasksMarkReal ClearExecStack ConstantMasksMark GrayMasksMark HandleStackOverflow Im110 ImS12D12NoTfr ImS1XD11 ImSXXD11 PSClrToMrk RstrDB RstrGenericObjects RstrObj RstrToLevel UnwindExecStk WhiteMasksMark }	{ }
upcStorage		graphics/ucache.c	/^private Pool upcStorage, rdcStorage, strkStorage;/ ;" global 1 { EnterPathInCache FreePath IniUCache }	{ }
urx		graphics/pathops.c	/^#define urx d1.x/ ;" macro 1 { CompositeShow FFltnCurve FMiniFltn FastShow FasterShow FltnCurve MarkStrokeMasks RdcStrkDumpMasks StringMark }	{ }
ury		graphics/pathops.c	/^#define ury d1.y/ ;" macro 1 { CompositeShow FFltnCurve FMiniFltn FastShow FasterShow FltnCurve MarkStrokeMasks RdcStrkDumpMasks StringMark }	{ }
useBitmapWidthsFID		fonts/fontspriv.h	/^#define useBitmapWidthsFID 0x80	    \/* this value / ;" macro 1 { BitmapWidthsFID CheckPrebuiltOptions }	{ }
usePrebuilts		fonts/fontshow.c	/^private boolean usePrebuilts = true;/ ;" global 1 { PSUsePrebuilts PreBuiltChar }	{ }
useReal		fonts/compshow.c	/^ss->useReal = true;/ ;" global 1 { FastShow GetCPDelta MakeCacheDev MakeCacheDev2 MoveToAfterShow NoRoom PSSetCharWidth ShowByName SimpleShowByName SlowShow }	{ }
useRealClock		language/exec.c	/^private	boolean	useRealClock;		\/* True if free-run/ ;" global 1 { ExecInit Inline_IncrementTimeUsed }	{ }
use_wf_hardware		mp/mp.c	/^int use_wf_hardware = 0;/ ;" global 1 { MP12New MP12NewAlpha MP12NewFromData MPStart MRInitialize MRMoveRect SetUpSource SoverRect }	{ }
usefix		fonts/fontbuild.c	/^#define usefix (fontCtx->fontBuild._usefix)/ ;" macro 1 { CCRunStd GetDSW GetMtxInfo GetStandardWidths }	{ fontCtx }
userFID		fonts/fontspriv.h	/^#define userFID 3/ ;" macro 1 { FndFntSibling }	{ }
ushort		device/nextprebuilt.h	/^#define ushort unsigned short/ ;" macro 1 { readPrebuiltFile }	{ }
vISP		include/environment.h	/^#define vISP (switches._ISP)/ ;" macro 1 { BuildInitialState }	{ switches }
vLANGUAGE_LEVEL		include/environment.h	/^#define vLANGUAGE_LEVEL (switches._LANGUAGE_LEVEL)/ ;" macro 1 { BuildInitialState FndFntSibling FontCacheInit InitFID PSSelectFont }	{ switches }
vOS		include/environment.h	/^#define vOS (switches._OS)/ ;" macro 1 { BuildInitialState }	{ switches }
vPREFERREDALIGN		include/environment.h	/^#define vPREFERREDALIGN (switches._PREFERREDALIGN)/ ;" macro 1 { AllocAligned BuildInitialState BuildSegmentTable FindFreeBytes GC_MoveRecycleRange }	{ switches }
vSTAGE		include/environment.h	/^#define vSTAGE (switches._STAGE)/ ;" macro 1 { ABM_Init BuildInitialState DebugInit DictInit FontBuildInit FontCacheInit FontDiskInit FontRunInit FontShowInit GCInternal_Init IniPathPriv IniUCache InitMakeVM Init_Recycler Init_VM_Memory MAKEVM NameInit StackInit StreamInit }	{ switches }
vSWAPBITS		include/environment.h	/^#define vSWAPBITS (switches._SWAPBITS)/ ;" macro 1 { AppendSegmentHeader ApplyRelocation BuildInitialState WriteRelocatedVMToFile WriteRelocationTable WriteVMSection WriteVMToFile }	{ switches }
vVMSPLIT		vm/vm_segment.c	/^public boolean vVMSPLIT;/ ;" global 1 { CreateVM CurrentVMSegmentType Init_VM_Memory PSMakeVM RootPointer SetVMSegmentType WriteRelocatedVMToFile }	{ }
vcCacheStorage		graphics/viewclip.c	/^private Pool vcCacheStorage;	\/* pool for view clip/ ;" global 1 { FindCurrentViewInCache IniViewClip TermClipDevPrim TermViewClip }	{ }
vcStorage		graphics/viewclip.c	/^private Pool vcStorage;	\/* Blind ptr to strg pool / ;" global 1 { IniViewClip NewViewClip TermViewClip VCSaveProc }	{ }
verifyMachType		product/ipcstream.c	/^private msg_type_long_t *verifyMachType(msg_type_l/ ;" function 22 { IPCFillBuf }	{ NULL data }
viewClips		graphics/viewclip.c	/^#define	viewClips	(graphicsStatics->viewClip._view/ ;" macro 1 { VCRestoreProc VCSaveProc }	{ graphicsStatics }
viewclipCache		graphics/viewclip.c	/^private PViewClipCacheEntry viewclipCache;/ ;" global 1 { CurIsFirst DevClipIsRect FindCurrentViewInCache GetDevClipBBox GetDevClipDevBBox GetDevClipPrim TermClipDevPrim TermViewClip }	{ }
viewclipcacheMax		graphics/viewclip.c	/^#define viewclipcacheMax (20)/ ;" macro 1 { FindCurrentViewInCache }	{ }
viewclipcachelength		graphics/viewclip.c	/^private Card16 viewclipcachelength;/ ;" global 1 { FindCurrentViewInCache TermClipDevPrim TermViewClip }	{ }
vmCurrent		vm/vm_memory.c	/^public	PVM vmCurrent;/ ;" global 1 { ABM_Allocate ABM_AllocateVM AllocGenericObject AllocLarge AllocPArray AllocPDict AllocPStream AllocSmall AllocVMAligned Array ClaimPreallocChars CurrentShared FindFreeBytes GC_MoveRecycleRange GetVMFirst GetVMLast Init_Cmds LAryObj LCondObj LDictObj LEVEL LGStateObj LGenericObj LLockObj LPkdaryObj LStmObj LStrObj MapFontDirectory PSAllocBM PSAllocVM PSGCStats PSRecyclerStatus PSSelectFont PSSetShared PSSetThresh PSTrashVM PSVMStatus Pkdary PreallocChars ReadNumAry ReclaimRecyclableVM RgstOpSet RgstPackageNames SearchSelectFont SetShared StmToken UnloadContext VMExpandDict VM_Data_Handler XAryObj XPkdaryObj XStrObj _ReclaimRecyclableVM }	{ }
vmPrivate		vm/vm_memory.c	/^public	PVM vmPrivate;/ ;" global 1 { AddressValidAtLevel CreatePrivateVM DestroyVM GC_CollectPrivate LoadVM PSCollect PSDisplayVM PSMakeVM PSPopManagedObject PushVMRoots ReclaimMovedVM RecyclerDataHandler RstrDB RstrGenericObjects RstrObj RstrToLevel Save SaveRestore_Data_Handler SetShared SwitchPSContext UnloadContext VMExpandDict VMPutElem VM_Data_Handler myGetRoots myTerminateSpace }	{ }
vmShared		vm/vm_memory.c	/^public	PVM vmShared;/ ;" global 1 { AllocPName AppendSegmentData AppendSegmentHeader ApplyRelocation BinObjInit BuildSegmentTable CreatePSContext CreatePrivateVM CreateSharedVM CurrentVMSegmentType DictCtxDestroy DictInit EndWholeClothInit FontCacheInit GCInternal_TraceROMDict GC_CollectShared GC_HandleIndex InitGS InitPostScript Init_VM_Memory Is_Shared NameInit PSDisplayVM PSMakeVM PSPopManagedObject PSdummymakevm PushSharedVMRoots ReclaimMovedVM Relocate_Shared_Root SetShared SetVMSegmentType StartVM StateInit TraceSharedVM VMExpandDict VMPutElem WriteRelocatedVMToFile WriteVMToFile }	{ }
volatile		include/environment.h	/^#define volatile/ ;" macro 1 { BM34MoveRect BMComposite34 BMComposite38 MPDisplayCursor16 MPDisplayCursor2 MPRemoveCursor16 MPRemoveCursor2 }	{ }
wAccess		include/basictypes.h	/^#define	wAccess	2/ ;" macro 1 { BindArray BindPkdary DictP MakePStm PSCurrentGState PSDevForAll PSFileNameForAll PSReadHexString PSReadLine PSReadString PSWCheck PSWrite PSWrtHexString PSWrtString PrintAccess PutInDict SetDictAccess UnDef VMCopyArray VMCopyGeneric VMCopyString VMPutChar VMPutElem VMPutGeneric VMPutNChars copydict }	{ }
wbnd		fonts/fontbuild.c	/^#define wbnd (FixInt(35)\/100)  \/* max allowable va/ ;" macro 1 { PutStdW UseStdWidth }	{ FixInt }
wdMarkProcs		product/windowdevice.c	/^public PMarkProcs wdMarkProcs;/ ;" global 1 { BM34InitClassVars BM38InitClassVars IniWdDevImpl LBMSetupMark LBMWakeUp MP12InitClassVars }	{ }
wdPerPg		include/basictypes.h	/^#define wdPerPg chPerPg\/chPerWd/ ;" macro 1 { }	{ }
wdPool		product/windowops.c	/^private char *wdPool;			\/* Blind ptr to WindowDevi/ ;" global 1 { IniWindowOps TermWindowDevice window }	{ }
wdProcs		product/windowdevice.c	/^public DevProcs *wdProcs;/ ;" global 1 { CheckWindow CheckWindowDev CompositePriv CurWindowID IniWdDevImpl LBMBecomePSDevice LBMWakeUp PSClearNRect PSSetNRect window }	{ }
whiteFixupFlag		graphics/cscan.c	/^private boolean whiteFixupFlag;		\/* True: Do white/ ;" global 1 { CScan ResetCScan }	{ }
whiteThresholds		devpattern/imsupport.c	/^  whiteValues, whiteThresholds;/ ;" global 1 { GetWhitePixBuffers }	{ }
whiteValues		devpattern/imsupport.c	/^  whiteValues, whiteThresholds;/ ;" global 1 { GetWhitePixBuffers }	{ }
whitepattern		bintree/layer.c	/^Pattern *whitepattern;/ ;" global 1 { LInitPage LNewAt PInitialize }	{ }
window		product/windowops.c	/^private int window(Bounds winBounds, int type)/ ;" function 31 { PSDumpWindows PSWindow PostChanged PostEvent PostNotification PostRedraw SendEvent WLOffsetOf WLRemove WriteEvent popEvent }	{ DevProcs LNewAt NULL NX_TWOBITGRAY PPSObject PSContextToID PWindowDevice UniqueWindowId currentPSContext currentSchedulerContext false level os_newelement true wdPool wdProcs windowBase }
windowBase		product/windowops.c	/^public PWindowDevice windowBase;	\/* Linked list of/ ;" global 1 { FlushRedrawRects GetMouseMovedMask ID2Layer ID2PrevWd ID2Wd IniWindowOps PSCountWindowList PSDumpWindows PSWindowList PostEvent TermWindowDevice TermWindowsBy UniqueWindowId WBID2Layer window }	{ }
withinBounds		bintree/bounds.c	/^int withinBounds(Bounds *one, Bounds *two)/ ;" function 5 { BPCompositeFrom BPCompositeTo LBMMark LMark LMoveTo }	{ }
word		include/basictypes.h	/^typedef long int word, *wordptr;/ ;" typedef 1 { ImStretch }	{ }
wordptr		include/basictypes.h	/^typedef long int word, *wordptr;/ ;" typedef 1 { }	{ }
workSpaceBounds		bintree/extent.c	/^static const Bounds workSpaceBounds = {-INF, INF, / ;" global 1 { EXBuildExtents EXDummyScreens }	{ }
wsBounds		bintree/layer.c	/^Bounds wsBounds;		\/* Enormous bound of all screens/ ;" global 1 { DriverInit FindPieceBounds GetTLWinBounds GetWinBounds LRedraw PSInitEvents }	{ }
wvname		fonts/fontbuild.c	/^		   cdevprocname, metricsname, wvname;/ ;" global 1 { GetWeightVector }	{ }
xAccess		include/basictypes.h	/^#define	xAccess	4/ ;" macro 1 { DetermineFormat ExecPushP MakePStm PSEExec PSExCheck PSFork PSMonitor PSOpDef PSXctOnly PrintAccess }	{ }
xBoxMax		graphics/cscan.c	/^private Int16 yBoxMin, yBoxMax, xBoxMin, xBoxMax;	/ ;" global 1 { BuildInitialRuns CScan DoFixupAction ExpandCharBBox ReturnBits }	{ }
xBoxMin		graphics/cscan.c	/^private Int16 yBoxMin, yBoxMax, xBoxMin, xBoxMax;	/ ;" global 1 { BuildInitialRuns CScan DoFixupAction ExpandCharBBox ReturnBits }	{ }
xChunkOffset		graphics/graphics.c	/^long int xChunkOffset, yChunkOffset;/ ;" global 1 { BreakUpPath ConvertToListPath ImageInternal InitChunk SetCch SetXABounds XARdc XAReducePath }	{ }
xHiCirCenter		graphics/stroke.c	/^          xHiCirCenter,/ ;" global 1 { FillCircle MkCirc SetupForCircles }	{ }
xLowCirCenter		graphics/stroke.c	/^          xLowCirCenter,/ ;" global 1 { FillCircle MkCirc SetupForCircles }	{ }
xPathMax		graphics/cscan.c	/^internal Fixed yPathMin, yPathMax, xPathMin, xPath/ ;" global 1 { CSPathPoints CScan FinishPath ResetCScan }	{ }
xPathMin		graphics/cscan.c	/^internal Fixed yPathMin, yPathMax, xPathMin, xPath/ ;" global 1 { CSPathPoints CScan FinishPath ResetCScan }	{ }
xaOffset		graphics/pathops.c	/^DevCd xaOffset;/ ;" global 1 { AddRunMark BreakUpPath BresenhamMT ImageInternal IntersectDP Mark MarkDevPrim MarkStrokeMasks OverlapChunk PointInDevPrim QBresenhamMT ReducePathClipInt ShowMask StringMark TransDevPrim UnlinkDP XARdc XAReducePath }	{ }
xfer		coroutine/xfersun.s	/^ENTRY(xfer)/ ;" function 1 { CoReturn }	{ }
xhghtname		fonts/fontbuild.c	/^                   xhghtname, dscndname, ascndname/ ;" global 1 { CCRunStd }	{ }
xitcmd		language/exec.c	/^private CmdObj realforcmd, loopcmd, xitcmd;/ ;" global 1 { ExecInit }	{ }
xovrname		fonts/fontbuild.c	/^                   xovrname, capovrname, aovrname,/ ;" global 1 { CCRunStd }	{ }
xshrink		fonts/flex.c	/^#define xshrink(a) ( fixmul(a-c42.x, shrink) + c42/ ;" macro 1 { FlexProc }	{ fixmul }
xtraCrossCount		graphics/cscan.c	/^static Int32 xtraCrossCount;		\/* Xtra Crosses *\// ;" global 1 { CScan NewXtraCross ResetCScan }	{ }
yBoxMax		graphics/cscan.c	/^private Int16 yBoxMin, yBoxMax, xBoxMin, xBoxMax;	/ ;" global 1 { BuildInitialRuns BuildYCross CScan DoFixupAction EditBlackSpace EditWhiteSpace ExpandCharBBox ExpandWhiteDropOuts PixelIsBlack ReturnBits }	{ }
yBoxMin		graphics/cscan.c	/^private Int16 yBoxMin, yBoxMax, xBoxMin, xBoxMax;	/ ;" global 1 { BuildInitialRuns BuildYCross CScan DoFixupAction EditBlackSpace EditWhiteSpace ExpandCharBBox ExpandWhiteDropOuts PixelIsBlack ReturnBits }	{ }
yChunkOffset		graphics/graphics.c	/^long int xChunkOffset, yChunkOffset;/ ;" global 1 { BreakUpPath ConvertToListPath ImageInternal InitChunk SetCch SetXABounds XARdc XAReducePath }	{ }
yCross		graphics/cscan.c	/^internal CrossPtr *yCross;		\/* Array of CrossPtr's/ ;" global 1 { BuildYCross YCROSS }	{ }
yCrossZero		graphics/cscan.c	/^private IntX yCrossZero;/ ;" global 1 { BuildYCross YCROSS }	{ }
yHiCirCenter		graphics/stroke.c	/^          yHiCirCenter,/ ;" global 1 { FillCircle MkCirc SetupForCircles }	{ }
yLowCirCenter		graphics/stroke.c	/^          yLowCirCenter,/ ;" global 1 { FillCircle MkCirc SetupForCircles }	{ }
yMax		graphics/reducer.c	/^private integer yMax;/ ;" global 1 { BuildYCross NewPoint Reduce ResetReducer }	{ }
yPathMax		graphics/cscan.c	/^internal Fixed yPathMin, yPathMax, xPathMin, xPath/ ;" global 1 { BuildYCross CSPathPoints CScan FinishPath ResetCScan }	{ }
yPathMin		graphics/cscan.c	/^internal Fixed yPathMin, yPathMax, xPathMin, xPath/ ;" global 1 { BuildYCross CSPathPoints CScan FinishPath ResetCScan }	{ }
yieldLoc1		language/exec.c	/^private long int *yieldLoc1, *yieldLoc2;/ ;" global 1 { LanguageInit PSSetYieldChecking PSSetYieldLocations WannaYield }	{ }
yieldLoc2		language/exec.c	/^private long int *yieldLoc1, *yieldLoc2;/ ;" global 1 { LanguageInit PSSetYieldChecking PSSetYieldLocations WannaYield }	{ }
yshrink		fonts/flex.c	/^#define yshrink(a) ( fixmul(a-c42.y, shrink) + c42/ ;" macro 1 { FlexProc }	{ fixmul }
zeroBits		vm/vm_segment.c	/^private readonly Card8 zeroBits[256] = {/ ;" global 34 { FreeBytesBehindStack }	{ }
