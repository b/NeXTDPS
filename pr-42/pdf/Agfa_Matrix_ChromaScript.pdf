*% Adobe Systems PostScript(R) Printer Description File
*% For Agfa Matrix ChromaScript version 51.8
*% Produced by "BuildPPD.ps" version 3.0 edit 58
*%
*% Copyright 1988, 1989, 1990 Adobe Systems Incorporated.  
*% All Rights Reserved.
*% Permission is granted for redistribution of this file as
*% long as this copyright notice is intact and the contents
*% of the file is not altered in any way from its original form.
*%
*% The byte count of this file should be exactly 008220 or 008504
*% depending on the filesystem it resides in.
*%
*% Date: 27 June 1990 

*FormatVersion: "3.0"
*FileVersion: "1.0"
*LanguageVersion: English

*Product: "(PRISMA)"
*PSVersion: "(51.8) 0"
*NickName: "Agfa Matrix ChromaScript v51.8"

*% General Information and Defaults ===============
*FreeVM:  "350000"
*ColorDevice: True
*VariablePaperSize: False
*FileSystem: True
*?FileSystem: "statusdict begin diskonline {(True)}{(False)} ifelse = flush"
*Throughput: "1"
*Password: "0"
*ExitServer: "
  count 0 eq {  % is the password on the stack?
    true 
  }{
    dup	% potential password
    statusdict begin checkpassword end not 
  } ifelse 
  {  %  if no password or not valid 
    (WARNING : Cannot perform the exitserver command.) = 
    (Password supplied is not valid.) = 
    (Please contact the author of this software.) = flush
    quit 
  } if 
  serverdict begin exitserver
"
*End
*Reset: "
  count 0 eq {  % is the password on the stack?
    true 
  }{
    dup	% potential password
    statusdict begin checkpassword end not 
  } ifelse 
  {  %  if no password or not valid 
    (WARNING : Cannot reset printer.) = 
    (Password supplied is not valid.) = 
    (Please contact the author of this software.) = flush
    quit 
  } if 
  serverdict begin exitserver
  systemdict /quit get exec
  (WARNING : Printer Reset Failed.) = flush
"
*End

*?Resolution: "
save
  initgraphics
  0 0 moveto currentpoint matrix defaultmatrix transform
  0 72 lineto currentpoint matrix defaultmatrix transform
  3 -1 roll sub dup mul
  3 1 roll exch sub dup mul
  add sqrt round cvi
  (          ) cvs print (dpi) = flush
restore
"
*End

*% Halftone Information ===============
*% The chromascript does not halftone (full color device)

*ScreenFreq: "72.0"
*ScreenAngle: "0.0"
*DefaultScreenProc: Line
*ScreenProc Dot: "
{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 
sub }{dup mul exch dup mul add 1 exch sub }ifelse }
"
*End
*ScreenProc Line: "{ pop }"
*ScreenProc Ellipse: "{ dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub }"

*DefaultTransfer: Null
*Transfer Null: "{}"
*Transfer Null.Inverse: "{ 1 exch sub }"

*% Paper Handling ===================
*% Use these entries to set paper size most of the time, unless there is
*% specific reason to use PageRegion or PaperTray.
*DefaultPageSize: Letter
*PageSize Letter: "letter"
*PageSize Legal: "legal"
*PageSize 35mm: "35mm"
*PageSize A4: "a4"
*PageSize 3x4: "3x4"
*PageSize 4x5: "4x5"
*PageSize 8x10:"8x10"

*?PageSize: "
 save statusdict begin
  10 dict begin
   /letter (Letter) def  /legal (Legal) def 
   /35mm (35mm) def      /a4 (A4) def 
   /3x4 (3x4) def        /4x5 (4x5) def
   /8x10 (8x10) def
   papersize {
     {load exec} stopped not{= flush}{(Unknown) = flush}ifelse
   }{
     {load exec} stopped not
     {print (.Transverse) = flush}{(Unknown) = flush}ifelse
   }ifelse
  end
 end restore
"
*End


*% The following entries provide information about specific paper keywords.
*DefaultImageableArea: Letter
*ImageableArea Letter: "54 19 558 774 "
*ImageableArea Legal: "54 112 558 867 "
*ImageableArea A4: "46 43 549 798 "
*ImageableArea 35mm: "0 0 504 756 "
*ImageableArea 4x5: "32 0 535 756 "
*ImageableArea 8x10: "32 0 535 756 "
*ImageableArea 3x4: "32 0 535 756"

*?ImageableArea: "
 save /cvp { cvi (            ) cvs print ( ) print } bind def
  newpath clippath pathbbox
  4 -2 roll exch 2 {ceiling cvp} repeat
  exch 2 {floor cvp} repeat flush
 restore
"
*End

*% These provide the physical dimensions of the paper (by keyword)
*DefaultPaperDimension: Letter
*PaperDimension Letter: "612 792"
*PaperDimension Legal: "612 1008"
*PaperDimension A4: "595 842"
*PaperDimension 35mm: "504 756"
*PaperDimension 3x4: "567 756" 
*PaperDimension 4x5: "567 756"
*PaperDimension 8x10: "569 756"

*DefaultOutputBin: OnlyOne
*DefaultInputSlot: OnlyOne

*DefaultManualFeed: None
*?ManualFeed: "
  statusdict /manualfeed get
  {(True)}{(False)}ifelse = flush
"
*End

*DefaultOutputOrder: Normal
*DefaultCollator: None
*DefaultSorter: None
*DefaultDuplex: None

*% Font Information =====================

*DefaultFont: Courier
*Font Courier: Standard "(001.004)"
*Font Courier-Bold: Standard "(001.004)"
*Font Courier-BoldOblique: Standard "(001.004)"
*Font Courier-Oblique: Standard "(001.004)"
*Font Helvetica: Standard "(001.002)"
*Font Helvetica-Bold: Standard "(001.002)"
*Font Helvetica-BoldOblique: Standard "(001.002)"
*Font Helvetica-Narrow: Standard "(001.002)"
*Font Helvetica-Narrow-Bold: Standard "(001.002)"
*Font Helvetica-Narrow-BoldOblique: Standard "(001.002)"
*Font Helvetica-Narrow-Oblique: Standard "(001.002)"
*Font Helvetica-Oblique: Standard "(001.002)"
*Font Symbol: Special "(001.003)"
*Font Times-Bold: Standard "(001.002)"
*Font Times-BoldItalic: Standard "(001.004)"
*Font Times-Italic: Standard "(001.002)"
*Font Times-Roman: Standard "(001.002)"

*?FontQuery: "
save  4 dict begin /sv exch def
/str (fonts/                              ) def
/st2 128 string def
{
  count 0 gt {
    dup st2 cvs (/) print print (:) print
    dup FontDirectory exch known {pop (Yes)}{
     str exch st2 cvs dup length /len exch def
     6 exch putinterval str 0 len 6 add getinterval mark exch
     { } st2 filenameforall counttomark 0 gt {
      cleartomark (Yes)}{cleartomark (No)}ifelse
    }ifelse = flush
  }{ exit } ifelse
} bind loop
(*) = flush
sv end restore
"
*End

*?FontList: "
save  2 dict begin /sv exch def
/str 128 string def
FontDirectory { pop == } bind forall flush
/filenameforall where { 
 pop save (fonts/*) { 
  dup length 6 sub 6 exch getinterval cvn == 
 } bind str filenameforall flush restore
} if 
(*) = flush
sv end restore
"
*End

*% Printer Messages (verbatim from printer):
*Message: "%%[ exitserver: permanent state may be changed ]%%"
*Message: "%%[ Flushing: rest of job (to end-of-file) will be ignored ]%%"
*Message: "\FontName\ not found, using Courier"

*%Status (format: %%[ status: <one of these> ]%% )
*Status: "idle"
*Status: "busy"
*Status: "waiting"
*Status: "imaging"
*Status: "warming up"
*Status: "PrinterError: Printer OK"
*Status: "PrinterError: SCSI write error"
*Status: "PrinterError: Timeout"
*Status: "PrinterError: Can't release SCSI bus"
*Status: "PrinterError: Memory fault"
*Status: "PrinterError: SCSI interface fault"
*Status: "PrinterError: Can't select printer"
*Status: "PrinterError: Filter wheel fault"
*Status: "PrinterError: Illegal command"
*Status: "PrinterError: Illegal SCSI Address"
*Status: "PrinterError: SCSI read error"
*Status: "PrinterError: Printer not found"
*Status: "PrinterError: Illegal command"
*Status: "PrinterError: Error during SCSI status reading"
*Status: "PrinterError: Illegal data byte"
*Status: "PrinterError: Printer selected but not responding"
*Status: "PrinterError: CRT beam calibration fault"

*% Input Sources (format: %%[ status: <stat>; source: <one of these> ]%% )
*Source: "serial9"
*Source: "serial25"
*Source: "AppleTalk"
*Source: "Centronics"

*% Printer Error (format: %%[ PrinterError: <one of these> ]%%)
*PrinterError: "Printer OK"
*PrinterError: "SCSI write error"
*PrinterError: "Timeout"
*PrinterError: "Can't release SCSI bus"
*PrinterError: "Memory fault"
*PrinterError: "SCSI interface fault"
*PrinterError: "Can't select printer"
*PrinterError: "Filter wheel fault"
*PrinterError: "Illegal command"
*PrinterError: "Illegal SCSI Address"
*PrinterError: "SCSI read error"
*PrinterError: "Printer not found"
*PrinterError: "Illegal command"
*PrinterError: "Error during SCSI status reading"
*PrinterError: "Illegal data byte"
*PrinterError: "Printer selected but not responding"
*PrinterError: "CRT beam calibration fault"

*%DeviceAdjustMatrix: "[1 0 0 1 0 0]"

*% end of PPD file for Agfa Matrix ChromaScript
